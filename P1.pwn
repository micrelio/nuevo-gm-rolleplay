/*
                          |------------------------------------| Absolute Titanium RolePlay 2.1 |------------------------------------|
                          ____________________________________________________________________________________________________________
                          | |                                                                                                      | |
                          | | • Nombre: Absolute Titanium Gamers                                                                   | |
                          | | • Modo: RolePlay                                                                                     | |
                          | | • Fundador del Proyecto: Micro_Lopez (Hoster y Programador) - Killian_Mihaly (Programador) 	       | |
                          | | • GameMode a Base: Space For Players 2.8                                                             | |
                          | | • Nuevo Desarrollo: Killian_Mihaly - Kenji_Wang - Micro_Lopez                                        | |
                          | | • Versión: 2.1                                                                                       | |
                          | | • Fundada: 18/08/2018                                                                                | |
                          | | • Sitio Web: www.titaniumgamers.es                                                                   | |
                          | |                                                                                                      | |
                          | |                                                                                                      | |
                          | |                                                                                                      | |
                          | |                                                                                                      | |
                          | |                                                                          Absolute Titanium Gamers ®  | |
                          |_|______________________________________________________________________________________________________|_|
                          



Rangos Administrativos:

     1.- Staff de Licencia
     2.- Moderador a Prueba
     3.- Moderador Global
     4.- Administrador Inicial
     5.- Administrador General
     6.- Encargado de Facciones
     7.- Administrador Superior
     8.- Técnico
	 9.- Sub-Dueño
	 10.- Dueño
	 11.- Programador

*/

// Includes
#include <RobosGR>
#include <a_samp>
#include <streamer>
#include <yom_buttons>
#include <YSI\y_ini>
#include <YSI\y_timers>
#include <djson>
#include <sscanf2>
#include <progress>
#include <foreach>
#include <zcmd>
#include <a_zones>
#include <string>
#include <mxINI>
#include <mSelection>
#include <CleoFuck>

// Versión de AT-RP
#define SERVER_GM_TEXT "2.1"

//**************************************
static gTeam[MAX_PLAYERS];
#pragma 			tabsize 					(0)
//**********Sistema de Música**********
#define 			D_Musica 			20003
#define 			D_Musica2 	        20004
#define 			D_Musica3 	        20005
#define 			D_MusicaX 			20013
#define 			D_MusicaX2 	        20014
#define 			D_MusicaX3 	        20015
//*******************Limites*******************
#define 			REMOVE_BULLET_TIME 			(30)
#define 			USE_STREAMER
#define 			MAX_BULLETS					(500)
#define 			OBJECT_BULLET				(3101)
#if defined 		USE_STREAMER
#tryinclude 		<streamer>
#endif
#define 			AntiBot			 			0 // Para desactivar el Anti Bot, simplemente coloque "0" en la línea.
#define 			AntiJoin 					1 // Para desactivar el Anti Join Flood, simplemente coloque "0" en la línea.
#define 			AntiCrash 					1 // Para desactivar el Anti Car Crash, simplemente coloque "0" en la línea.
#define 			AntiArmas 					0 // Para desactivar el Anti Armas prohibidas, simplemente coloque "0" en la línea.
#define 			AntiCleo 					0 // Para desactivar el Anti Cleo Hack, simplemente coloque "0" en la línea.
#define 			AntiScore 					1 // Para desactivar el Anti Score Hack, simplemente coloque "0" en la línea.
#define             ACEPTAR_TER                 21
#define 			VV 							(175)
#undef 				MAX_PLAYERS
#define 			MAX_PLAYERS 				(500)
#define 			MAX_FACTION 				(23)
#define 			MAX_AD 						(40)
#define 			MAX_PING 					(1500)
#define 			MAX_FAMILY 					(8)
#define 			MAX_HOUSES  				(800)
#define             AplicaAnim                  ApplyAnimation
#define				MAX_BARRICADES 				(30)
#define 			MAX_POINTS 					(9)
#define 			NEW_VULNERABLE 				(24)
#define 			MAX_DDOORS 					(500)
#define 			MAX_PLAYERTOYS 				(6)
#define 			MAX_TIMERS 					(11)
#define 			MAX_PLAYERVEHICLES 			(15)
#define 			MAX_MODS 					(15)
#define 			MAX_GANG_VEHICLES 			(6)
#define 			MAX_DEALERSHIPVEHICLES 		(15)
#define 			MAX_BIZZ            		(40)
#define             Message 					SendClientMessage
#define 			QUIT_EXTORTION  			(962)
#define 			MAX_CARDEALERSHIPS 			(7)
#define 			TIME_RESPAWN 				(7200)
#define 			TIME_TO_TAKEOVER			(5)
#define 			INVALID_HOUSE_ID 			(-1)
#define 			INVALID_PLAYER_VEHICLE_ID 	(0)
#define 			CHECKPOINT_NONE 			(0)
#define 			CHECKPOINT_LOADTRUCK 		(97651)
#define 			CHECKPOINT_RETURNTRUCK 		(97652)
#define 			NOOB_SKIN 					(26)
#define				TYPE_GIVEWEAPONTIMER 		(0)
#define 			TYPE_FLOODPROTECTION 		(1)
#define 			TYPE_PAYTIMER        		(2)
#define				TYPE_ARMSTIMER 		 		(3)
#define 			TYPE_TPPIZZARUNTIMER 		(4)
#define 			TYPE_PIZZATIMER      		(5)
#define				TYPE_TPTRUCKRUNTIMER   		(6)
#define				TYPE_TPDRUGRUNTIMER 		(11)
#define 			TYPE_TPMATRUNTIMER 			(12)
#define 			TYPE_GUARDTIMER				(13)
#define 		    MAX_ARMAS                    200
#define 			MenorTiempo   				10000
#define 			Logueos       				2
//***sistema de fire***
#define 			TIEMPOFIRE					120// Tiempo en aparecer incendio (en segundos).
#define 			APAGARFIRE 					240 // Tiempo dado al bombero para apagar el incendio (en segundos).
#define 			USERFILE 					"accounts/%s.ini"
#define 			USERFILEOLD 				"users/%s.ini"
#define 			INFINITY_HEALTH 			Float:0x7F800000
#define 			GARAGES_FILE 				"garajes/%d.ini"
//*******************Defines FaceAngles*******************
#define 			SUR 						(180)
#define				NORTE 						(0)
#define 			OESTE 						(90)
#define 			ESTE 						(270)
//*******************Defines / Macros*******************
#define 			function%0(%1) 							forward %0(%1); public %0(%1)
#define 			PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define 			SendFormattedMessage(%0,%1,%2) do{new _str[128]; format(_str,128,%2); SendClientMessageEx(%0,%1,_str);}while(FALSE)
#define 			def(%0,%1)							    (format(text,sizeof(text),%0,%1),text)
#define 			GetVehicleName(%0) 						VehicleName[GetVehicleModel(%0)-400]
#define 			GetPlayerCash(%0) 						GetPVarInt(%0, "Cash")
#define 			SetPVarInt(%0,%1,0); 					DeletePVar(%0,%1);
#define 			PlayerToPoint(%1,%2,%3,%4,%5)  			IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
#define 			Skin        						    SetPlayerSkin
#define 			SpeedCheck(%0,%1,%2,%3,%4)  			floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
#define 			SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) 	SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define 			StopPlayerHoldingObject(%1) 			RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define 			IsPlayerHoldingObject(%1) 				IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define 			SendRequest(%1,%2)  					SafeDialogEx(%1, PETITION_DIALOG, DIALOG_STYLE_MSGBOX, "Petición", %2, "Aceptar", "Rechazar")+

//***sistema de fire***
#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))

#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
//********************Colores en Inglés********************
#define             COLOR_AH_EN          		0xCC0000FF
#define             COLOR_ENCARGADOS            0x08A132FF
#define             COLOR_EE                    0x9700FFFF
#define 			Gris 						0xC0C0C0AA
#define             COLOR_DIALOGO1              0x960707FF
#define             COLOR_AZULL                 0xFF0000FF
#define 			c1_color 					0xFFFFFFFF
#define 			c2_color 					0xFFFFC7FF
#define 			c3_color 					0xFFFF72FF
#define 			c4_color 					0xFFFF00FF
#define 			c5_color 					0xFFA600FF
#define 			c6_color 					0xFF0000FF
#define             NEGATIVO                    0xFF0000FF
#define             POSITIVO                    0x00FF00FF
#define             COLOR_ORANGE                0xFFA500FF
#define             COLOR_SYSTEM                0xFFFFFFFF
#define             COLOR_YELLOW3d              0xFFFF00FF
#define 			FIND_COLOR					0xB90000FF
#define 			COLOR_GENERAL 				0xFF8409FF
#define             COLOR_MAGENTA               0xFF00FFFF
#define 			COLOR_LIYELLOW 				0xFFFF80FF
#define 			COLOR_POINTGEN 				0xF5CB38FF
#define 			COLOR_BLUED 				0x23A9D6FF
#define 			COLOR_VIP 					0xC93CCE00
#define 			TEAM_AININT_COLOR 			0x8D8DFF00
#define 			TEAM_NEWS_COLOR 			0x049C7100
#define 			TEAM_MED_COLOR 				0xFF828200
#define 			COLOR_NG 					0x9ACD3200
#define 			TEAM_GOBIERNO_COLOR	        0xFFB72AFF
#define 			TEAM_SISTEMAJUDICIAL_COLOR	0xB7CD8FFF
#define 			TEAM_BOMBEROS_COLOR	        0xFF0000FF
#define 			TEAM_TAXI_COLOR 			0xF2FF0000
#define 			COLOR_NEWBIE 				0x7DAEFFFF
#define 			COLOR_TWWHITE 				0xFFFFFFAA
#define 			COLOR_TWYELLOW 				0xFFFF00AA
#define 			COLOR_TWPINK 				0xE75480AA
#define 			COLOR_TWRED 				0xFF0000AA
#define 			COLOR_TWBROWN 				0x654321AA
#define 			COLOR_TWGRAY 				0x808080AA
#define 			COLOR_TWOLIVE 				0x808000AA
#define 			COLOR_TWPURPLE 				0x800080AA
#define 			COLOR_TWTAN 				0xD2B48CAA
#define 			COLOR_TWAQUA 				0x00FFFFAA
#define 			COLOR_TWORANGE 				0xFF8C00AA
#define 			COLOR_TWAZURE 				0x007FFFAA
#define 			COLOR_TWGREEN 				0x008000AA
#define 			COLOR_TWBLUE 				0x0000FFAA
#define 			COLOR_TWBLACK 				0x000000AA
#define 			TEAM_APRISON_COLOR 			0x9C791200
#define 			PUBLICRADIO_COLOR 			0x6DFB6DFF
#define				COLOR_REPORT				0xFFFF91FF
#define 			COLOR_HELPERCHAT  			0x0BBD5FEC8
#define 			COLOR_COMBINEDCHAT 			0x6CEFF0FF
#define 			COLOR_TITLE 				0xFCCA03FF
#define 			COLOR_TEORY     			0xFFFF91FF
#define 			COLOR_QUESTION  			0xFFB18CFF
#define 			COLOR_YES       			0x00CC00FF
#define 			COLOR_DUDA      			0x2F99B500
#define 			COLOR_NO        			0xFF8080FF
#define 			COLOR_ASKQ 					0xFF0000FF
#define 			COLOR_DUTY 					0x00CA00FF
#define 			COLOR_NEGATIVE 				0xFF6A6AFF
#define 			WANTED_COLOR 				0xBF6000FF
#define 			COLOR_MEGAPHONE 			0xFF9B6AFF
#define 			COLOR_GRAD1 				0xB4B5B7FF
#define 			COLOR_GRAD2 				0xBFC0C2FF
#define 			COLOR_GRAD3 				0xCBCCCEFF
#define 			COLOR_GRAD4 				0xD8D8D8FF
#define 			COLOR_GRAD5 				0xE3E3E3FF
#define 			COLOR_GRAD6 				0xF0F0F0FF
#define 			COLOR_GREY 					0xAFAFAFAA
#define 			COLOR_GREEN 				0x9EC73DAA
#define 			COLOR_GREEN2 				0x9EC73DAA
#define 			COLOR_GROVE 				0x00FF00FF
#define 			COLOR_RED 					0xAA3333AA
#define             COLOR_CMDAA                 0x0000EFFF
#define 			COLOR_REALRED 				0xFF0606FF
#define 			COLOR_RED2 					0xFF6F6FFF
#define 			COLOR_LIGHTRED 				0xFF6347AA
#define 			COLOR_LIGHTBLUE 			0x33CCFFAA
#define 			COLOR_LIGHTGREEN			0x9ACD32AA
#define 			COLOR_CMDA 					0xFFFF00AA
#define 			COLOR_YELLOW 				0xFFFF00AA
#define 			COLOR_YELLOW2 				0xF5DEB3AA
#define 			COLOR_WHITE 				0xFFFFFF00
#define 			COLOR_FADE 					0xE6E6E6E6
#define 			COLOR_FADE1 				0xE6E6E6E6
#define 			COLOR_FADE2 				0xC8C8C8C8
#define 			COLOR_FADE3 				0xAAAAAAAA
#define 			COLOR_FADE4 				0x8C8C8C8C
#define 			COLOR_FADE5 				0x6E6E6E6E
#define 			COLOR_PURPLE 				0xC2A2DAAA
#define             COLOR_PURPLEOS              0x330066
#define 			COLOR_DBLUE 				0x2641FEAA
#define				COLOR_ALLDEPT 				0xFF8282AA
#define 			COLOR_NEWS 					0x458E1DAA
#define             Color_Rojo	                0xE60000FF
#define 			COLOR_NEWS2 				0xFFA500AA
#define 			COLOR_OOC 					0x66FFFFFF
#define 			OBJECTIVE_COLOR 			0x64000064
#define 			TEAM_GREEN_COLOR 			0xFFFFFFAA
#define 			TEAM_JOB_COLOR 				0xFFB6C1AA
#define 			TEAM_HIT_COLOR 				0xFFFFFF00
#define 			TEAM_BLUE_COLOR 			0x8D8DFF00
#define 			TEAM_RADIO_COLOR2 			0xF2D068FF
#define 			TEAM_RADIO_COLOR 			0x9B9BFFFF
#define 			COLOR_ADD 					0x63FF60AA
#define 			TEAM_GROVE_COLOR 			0x00D900C8
#define 			TEAM_VAGOS_COLOR 			0xFFC801C8
#define 			TEAM_BMC_COLOR 	    		0xD900D3C8
#define 			TEAM_AZTECAS_COLOR 			0x01FCFFC8
#define 			TEAM_CYAN_COLOR 			0xFF8282AA
#define 			TEAM_ORANGE_COLOR 			0xFF830000
#define 			TEAM_COR_COLOR 				0x39393900
#define 			TEAM_BAR_COLOR 				0x00D90000
#define 			TEAM_TAT_COLOR 				0xBDCB9200
#define 			TEAM_CUN_COLOR 				0xD900D300
#define 			TEAM_STR_COLOR 				0x01FCFF00
#define 			TEAM_ADMIN_COLOR 			0x00808000
#define 			COLOR_INVIS 				0xAFAFAF00
#define 			COLOR_SPEC 					0xBFC0C200
#define 			COLOR_BLUE 					0x2641FEAA
#define 			COLOR_DARKNICERED 			0x9D000096
#define 			COLOR_LIGHT_BLUE 			0x9FB1EEAA
#define 			TRY_GREEN   				0x00BF60FF
#define 			ROJO_ADMIN 					0xDC092FFF
#define 			COLOR_SHOP 					0xE7E784FF
#define 			VERDE_ADMIN 				0x41FF2FFF
#define 			CELESTE_ADMIN 				0x41FFECFF
#define 			AMARILLO_ADMIN 				0xFFFF00FF
#define 			CREMA_ADMIN 				0xFFFFD4D4
#define 			ROSADO_ADMIN 				0xFF4FD4D4
#define 			MORADO_ADMIN 				0x9600FF2E
#define 			ORANGE_ADMIN 				0xFF7617FF
#define 			PAINTBALL_TEAM_RED 			0xFF000000
#define 			PAINTBALL_TEAM_BLUE 		0x2641FE00
#define             COLOR_ADMIN_DUTY            0x71E2FF00
//*******************Colores en Español*******************
#define             COLOR_TURQUESA              0x00CCCC00
#define             COLOR_GRIS                  0x64E3FFFF
#define             COLOR_GRIS_OSCURO           0x7D997D00
#define             COLOR_ROJO                  0xFF000000
#define             COLOR_ROJO_BORDO            0xCC000000
#define             COLOR_MORADO                0x66006600
#define             COLOR_CELESTE               0x33FFFF00
#define             COLOR_AMARILLO              0xFCFF0300
#define             COLOR_VERDE_AGUA            0x33AA3300
#define 			COLOR_BLANCO				0xFFFFFF00
#define             COLOR_BLANCOOSC             0XDCDCDC00
#define             COLOR_NEGRO                 0x01010100
#define             COLOR_SALMON                0xFF747700
#define             COLOR_NARANJA               0xFFA500FF
#define             COLOR_LILA_CLARO            0xB87DFF00
#define             COLOR_ROSADO                0xFF00B4FF
#define             COLOR_VERDE                 0x00F70CFF
#define             COLOR_ROSADOC               0xFB53FFFF
#define             COLOR_DARLIDER              0x2EDFFFFF
#define             COLOR_INFORMEON             0x7E2C9FFF
#define             COLOR_INFORMEON2            0x868686FF
#define             COLOR_TRAMITANTE            0x1A1E76FF
//*****Colores de Sistemas, Facciones, Trabajos, etc.*****
#define             COLOR_SUCIEDAD              0xA04000FF
#define             COLOR_AT                    0x2EDFFFFF
#define             COLOR_NPCS                  0x5B5C3400
#define 			COLOR_PLAY_MUSIC			0x99FF0000
#define 			COLOR_PUBLICIDAD            0xFF426A00
#define             COLOR_AYUDAOSC              0xE5E5E5FF
#define             COLOR_AYUDAROJO             0xFF0000FF
#define             COLOR_AYUDABLANCO           0xFFFFFFFF
#define             COLOR_SANCION               0x682B2BFF
#define             COLOR_VEH                   0xC993FFFF
#define             COLOR_PPD                   0x1D4CFBFF
#define             COLOR_PMD                   0x11A65DFF
#define             COLOR_PBOM                  0xFF0000FF
#define             COLOR_PEM                   0x837767FF
#define             COLOR_PAININT               0x1D4CFBFF
#define             COLOR_PCIA                  0x1D4CFBFF
#define             COLOR_TIENDA                0xC3FF23FF
#define             COLOR_FOX                   0xFFA700FF
#define 			COLOR_CSTAFF 				0xFF6347AA
#define             COLOR_DROGA                 0xCFB521FF
// Test de Rol.
#define 			TEST_0              		(263)
#define 			TEST_1              		(264)
#define 			TEST_2              		(265)
#define 			TEST_3              		(266)
#define 			TEST_4              		(267)
#define 			TEST_5              		(268)
#define 			TEST_6              		(269)
#define 			TEST_7              		(270)
#define 			TEST_8              		(271)
#define 			TEST_9              		(272)
//************************Todos los Díalogos************************
#define 			WEAPON_TYPE_NONE 			(0)
#define 			WEAPON_TYPE_HEAVY   		(1)
#define 			WEAPON_TYPE_LIGHT   		(2)
#define 			WEAPON_TYPE_MELEE   		(3)
#define             BAR_MENU 					578
#define             BAR_MENU_TAPAS 				579
#define             BAR_MENU_BEBIDAS    		580
#define             TimerTextDrawLocX           547
#define             TimerTextDrawLocY           2
#define             TimeOfHorseRaceHours        1
#define             TimeOfHorseRaceMinutes      20
#define             CashLowerBounds             100
#define             CashHigherBounds            5000
#define             RealMilisecondsPerIGMinute  2000
#define 			ResetMoneyBar 				ResetPlayerMoney
#define 			UpdateMoneyBar 				GivePlayerMoney
#define 			INVALID_DIALOG      		(500)
#define 			SPEEDGUN					(43)
#define 			EQUIPO_DOC  				(6)
#define 			EQUIPO_HITMAN  				(7)
#define             EQUIPO_BOMBEROS             (9)
#define 			CPASS 						 14
#define 			DIALOGUNDI   				(15)
#define 			DIALOG_HIT     				(25)
#define 			RENT_VEH 					(44)
#define 			DRINKDIALOG 				(47)
#define 			DRINKLISTDIALOG				(46)
#define 			TIPDIALOG 					(49)
#define 			EQUIPO_GOB 					(50)
#define 			IPAD 						(51)
#define 			EQUIPO_CNN 					(53)
#define 			TELEPORTS_FACCIONES 		(54)
#define 			TELEPORTS_JOBS 		        (95)
#define 			TELEPORTS_ZONAS 		    (96)
#define             DEJAR_VAGABUNDO             (97)
#define             ACTUALIZACIONES_ATRP        (98)
#define             VER_REGLAS                  (3410)
#define             SOLICITAR_SERVICIOS         (3411)
#define             CURSO_EMERGENCIA            (3412)
#define             TALLER_R                    (3413)
#define             REDES_SOCIALES              (100)
#define             INFO_VIP                    (105)
#define             EDIT_DOOR                   (2500)
#define             CAMARAS_TV                  (2410)
#define             CAMARAS_LAPD                (2411)
#define             DRONES_PD                   (2412)
#define 			EQUIPO_SistemaJ 			(56)
#define             EQUIPO_LCN                  (60)
#define             EQUIPO_RUSA                 (61)
#define             EQUIPO_SANTANA              (62)
#define             EQUIPO_YAKUZA               (63)
#define             EQUIPO_MECANICO             (64)
#define             EQUIPO_ALQAEDA              (67)
#define             EQUIPO_MOTOQUEROS           (75)
#define             BANCO_MENU                  68
#define             BANCO_SACAR                 69
#define             BANCO_DEPOSITAR             70
#define             BANCO_TRANSFERIR            71
#define             BANCO_TRANSFERIR2           72
#define             MAPINTERES                  90
#define             GOOGLE                      (73)
#define 			PB_MENU 					(4000)
#define             MAX_GARAGES              	(35) //35
// Sistema de Muebles
#define				COLOCAR_M          			3510
#define 			COLOCAR_M1 					3511
#define 			COLOCAR_M2 					3512
#define 			COLOCAR_M3 					5513
#define 			MENU_CASA 					5514
#define 			MENU_CASA1      			5515
#define 			MENU_CASA2 					5516
#define 			MENU_CASA3 					5517
#define 			MENU_CASA4 					5518
#define 			MENU_CASA5 					5519
#define 			MENU_CASA6 					5520
#define 			MENU_CASA7          		5521
//******************************************************************************
#define 			PB_SARENA 					(4001)
#define 			PB_BUYFI 					(4002)
#define				PB_SCORE 					(4003)
#define 			PB_FICHAS 					(4004)
#define 			DUTY_OPTIONS 				(4412)
#define 			Rojo						5877
#define 			Azul						5878
#define 			Verde						5879
#define 			Amarillo					5880
#define 			Cyan						5881
#define 			Rosado						5882
#define 			Blanco						5883
#define 			Negro						5884
#define 			DUTYMENU2 					(4413)
#define 			DUTYMENU3 					(4414)
#define 			DUTYMENU4 					(4415)
#define 			DUTYMENU5 					(4416)
#define 			PCDUTYMENU2 				(4426)
#define 			PCDUTYMENU3 				(4427)
#define 			PCDUTYMENU4 				(4428)
#define 			PCDUTYMENU5 				(4429)
#define 			TRAFICDRUGS 				(4417)
#define 			ADMUTE 						(4418)
#define 			DOORLOCK 					(4419)
#define 			CARSPAWN 					(4420)
#define 			PNA_DUTY1 	    			(4421)
#define 			PNA_DUTY2 	    			(4422)
#define 			PNA_DUTY3 	    			(4423)
#define 			PNA_DUTY4 	    			(4424)
#define 			PNA_DUTY5 	    			(4425)
#define 			DIALOG_CDEDIT 				(1329)
#define 			DIALOG_CDUPGRADE 			(1328)
#define 			DIALOG_CDTILL 				(1327)
#define 			DIALOG_CDEDITCARS 			(1326)
#define 			DIALOG_CDEDITONE 			(1325)
#define 			DIALOG_CDEDITMODEL 			(1324)
#define 			DIALOG_CDEDITCOST 			(1323)
#define 			DIALOG_CDEDITPARK 			(1322)
#define 			DIALOG_CDDELVEH 			(1321)
#define 			DIALOG_CDNEWVEH 			(1320)
#define 			DIALOG_CDRADIUS 			(1319)
#define             DIALOG_CDNAME 		(1318)
#define             DIALOG_CDPRICE 		(1317)
#define             DIALOG_CDBUY 		(1316)
#define             DIALOG_CDWITHDRAW 	(1315)
#define             DIALOG_CDDEPOSIT 	(1314)
#define             DIALOG_CDSELL 		(1313)
#define             DIALOG_ADMAIN		(32700)
#define             DIALOG_ADPLACE		(32701)
#define             DIALOG_ADPLACEP		(32702)
#define 			DIALOG_ADPLACEP2	(32703)
#define 			DIALOG_ADPLACEP3	(32704)
#define 			DIALOG_ADPLACEP4	(32705)
#define             PB_CHOOSE 			4005
#define             PBJOINTEAM 			4006
#define             PB_ARMAS 			4007
#define             PB_CANJE1 			4008
#define             PBARENASCORES 		4009
#define	            MPSPAYTICKETS 		4010
#define             REMOVEKEYS 			4395
#define             GIVEKEYS 			4394
#define             GOTOPLAYERCAR 		4396
#define             TRACKCAR 			19101
#define             GTRACKCAR 			19102
#define             SELLCAR 			19103
#define             DIALOG_CDLOCKBUY 	1312
#define             DIALOG_CDLOCKMENU 	1311
#define             DIALOG_CDGLOCKBUY 	1310
#define             DIALOG_CDGLOCKMENU 	1309
#define             DIALOG_NUMBER_PLATE 8221
#define             DIALOG_NUMBERPLATE 	8220
#define             UNMODCARMENU 		8222
#define             HQENTRANCE 			4397
#define             HQEXIT 				4398
#define             HQCUSTOMINT 		4399
#define             HQDELETE 			4400
#define             SUBSI   			4403
#define             DIALOG_LICENSE_BUY 	4404
#define             JOBFINDMENU 		4405
#define             DIALOG_HITMAN 		4407
#define             FDUTYMENU 			4408
#define             FDUTYMENU2 			4409
#define             FDUTYMENU3 			4410
#define             DUTYMENU 			4411
#define             PCDUTYMENU 			4430
#define             WELCOME 			522
#define             REG_SEX 			506
#define             DIALOG_REG_MSN 		507
#define             DIALOG_REG_MSNC 	508
#define             DIALOG_REG_TUT 		509
#define             REG_PASA 			511
#define             REG_ROL 			512
#define             REG_ROLSELECC       513
#define             DINFO   			530
#define             STOREMENU 			550
#define             TIENDA_ELEC 		551
#define             GASMENU             570
#define             ASCENMENU           560
#define             LOTTO_BUY       	559
#define             FSTYLE_DIALOG   	563
#define             DIALOG_AMMU     	566
#define             ELEVATOR 			18456
#define             ELEVATOR2 			18455
#define             ELEVATOR3 			18457
#define             ELEVATOR4 			18460
#define             ELEVATOR5 			18458
#define             ELEVATOR7 			18459
#define             DLOGIN 				501
#define             DREGISTER       	504
#define             MECANICO_MENU   	584
#define             MMENU_REPARACION    585
#define             MMENUTUNING_G 		586
#define             TUNING_WAA  		587
#define             TUNING_LOC  		588
#define             TUNING_MENU_RUEDAS 	589
#define             REQF_ACCEPT 		910
#define             PETITION_DIALOG 	911
#define             ENTER_LSTV 			916
//#define 			MENUAYUDA 		   (1000)
#define 			MENUMC 			   (1001)
#define             MAX_REPORTS  		50
#define             INVALID_REPORT_ID 	-1
#define             REPORTSMENU  		48
#define             TIPRE 				7955
#define             REBUG 				7956
#define             SUG 				7957
#define             SOLICITUD_GARAGE    7958
#define             CAL_ROL 			7959
#define             DIALOG_LOADTRUCK	18301
#define             DIALOG_LOADTRUCKL 	18302
#define             DIALOG_LOADTRUCKI 	18303
#define             TOYS        		10131
#define             DELETETOY       	10132
#define             WEARTOY         	10133
#define             BUYTOYS         	10134
#define             BUYTOYS2       		10135
#define             BUYTOYS3        	10136
#define             BUYTOYSGOLD     	10137
#define             BUYTOYSGOLD2    	10138
#define             BUYTOYSGOLD3    	10139
#define             EDITTOYS        	10140
#define             EDITTOYS2       	10141
#define             EDITTOYSBONE    	10142
#define             EDITTOYSPX      	10143
#define             EDITTOYSPY      	10144
#define             EDITTOYSPZ      	10145
#define             EDITTOYSRX      	10146
#define             EDITTOYSRY      	10147
#define             EDITTOYSRZ      	10148
#define             BUYTOYSCOP      	10149
#define             BUYTOYSCOP2     	10150
#define             BUYTOYSCOP3     	10151
#define             EDITTOYSIZX     	10199
#define             EDITTOYSIZY      	10200
#define             EDITTOYSIZZ      	10201
#define             NGMENU          	10202
#define             NGMENUWEP       	10203
#define             NGMENUSKIN      	10204
#define             FDUTYMENU4 			10205
#define             DIALOG_SHOPFISH 	10160
#define             DIALOG_VIPLOCKER	7483
#define             DIALOG_VIPJOB    	7484
#define             DIALOG_VIPJOB2    	7485
#define             DIALOG_VIPCOLOR		7486
#define             DIALOG_VIPWEAPONS	7487
#define             DIALOG_VIPCLOTHES	3496
#define             DIALOG_CREATEGUN    3497
#define 			Tienda_OOC 	 		15634
#pragma             dynamic 			5000000
#define 			MAX_OBJ 			100 //Maximo de armas en suelo.
#define 			DIALOG_BOOMBOX  	3650
#define				DIALOG_BOOMBOX1 	3651
#define 			DIALOG_BOOMBOX2 	3652
#define 			DIALOG_BOOMBOX3 	3653
#define 			DIALOG_BOOMBOX4 	3654
#define 			DIALOG_BOOMBOX5 	3655
#define 			DIALOG_BOOMBOX6		3656
#define		 		DIALOG_BOOMBOX7 	3657
#define		 		DIALOG_ROCKOLA   	3660
#define		 		DIALOG_ROCKOLA1 	3661
#define		 		DIALOG_ROCKOLA2 	3662
#define		 		DIALOG_ROCKOLA3 	3663


//*******************Velocimetro*******************
new Text:Tacho_Box0;
new Text:Tacho_Box1;
new Text:Tacho_KMH[MAX_PLAYERS];
new Text:Tacho_Box2;
new Text:Tacho_Zustand[MAX_PLAYERS];
new Text:Tacho_Tank[MAX_PLAYERS];
new Text:Tacho_Car[MAX_PLAYERS];
//******************Texdraw's******************

//*******************Sistema Afk*******************
new Text:Messageafk;
new Afk[MAX_PLAYERS];
new Timer[MAX_PLAYERS];
//*******************Armas en espalda*******************
new OldWeapon[MAX_PLAYERS];
new HoldingWeapon[MAX_PLAYERS];
//***** Estado text ************
new Text3D:giPlayerStatus[ MAX_PLAYERS ];
//*******************************
new BigEar[MAX_PLAYERS];
//*******************cargos*******************
new cargos[MAX_PLAYER_NAME];
new cargos2[MAX_PLAYER_NAME];
//bombox
new BoomBox[MAX_PLAYERS];
new BoomOn[MAX_PLAYERS];
//*******************Sistema de Reparacion de Auto con latas*******************
new bgas[MAX_PLAYERS];
//****************Clima Automático****************
forward GlobalTime();
//*******************Solucion 0.3z*******************
forward TimerKICK(playerid);
forward TimerBAN(playerid);
forward TimerBANIP(playerid);
forward ZL(); //ADO[KK]1NG
forward Detect(playerid); //security
forward Camara();
forward qdni(playerid);//***dni por textdraw***
forward qlicencia(playerid);//***licencia por textdraw***
forward Apagarfire();//sistema de fire
forward Checkfire(playerid);//sistema de fire
forward Fuegoo();//sistema de fire
forward Acciones(playerid, type, text[]);
//*******************Security*******************
new Barra[MAX_PLAYERS] = {-1,...}, Advertencias[MAX_PLAYERS] = {0,...}, bool:BotServidor[MAX_PLAYERS] = {false, ...}, Jugadores = MAX_PLAYERS;
new Muertes[MAX_PLAYERS];
new MuerteReciente[MAX_PLAYERS];
new EntrarIP[10][20];
new EntrarCuenta[10];
// Tranca Ruedas
new VehiculoConCepo[MAX_VEHICLES];
new VehiculoNoEnciendeCepo[MAX_VEHICLES];
// Letrero de Taxi
new Letrero_Tax_01;
new Letrero_Tax_02;
new Letrero_Tax_03;
new Letrero_Tax_04;
new Letrero_Tax_05;
new Letrero_Tax_06;
new Letrero_Tax_07;
new Letrero_Tax_08;
// Luces para las motos Sanchez
new Luz_01;
new Luz_02;
new Luz_03;
new Luz_04;
// Materiales
new MatCam[MAX_VEHICLES] = 0;
new ObjMat_01[MAX_VEHICLES];
new ObjMat_02[MAX_VEHICLES];
new ObjMat_03[MAX_VEHICLES];
new ObjMat_04[MAX_VEHICLES];
//*******************RobarTienda*******************
new LoadMonTimee[MAX_PLAYERS];
new Bar:LoadMoneyy[MAX_PLAYERS] = INVALID_BAR_ID;
forward TimerROB(playerid);
//*******************arreglo bug /dararma y /garma /fgarma*******************
new manubrio[MAX_PLAYERS];
forward Timermanubrio(playerid);
// Selección de ropa
new skinlist = mS_INVALID_LISTID;
//*******************
new MoneyBet[MAX_PLAYERS], BetOnHorse[MAX_PLAYERS],  Watching[MAX_PLAYERS];
// Regalar arma (Reparado)
new VentaDeArmaCon[MAX_PLAYERS][2];
// Adminduty
new papilla[MAX_PLAYERS];
// Placa de Autos
new Archivo[128];
new VehicleIdd;
// Tazer Reparado
forward TimerATRP(playerid);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward GetClosestPlayer(p1);
new HaveTaser[MAX_PLAYERS];
// PickUps
new ganja; //vendercosecha
new Bankito; //banco
// Comando Refuerzo
new refuer[MAX_PLAYERS];
// DNI (Texdraw)
new PlayerText:DNI0[MAX_PLAYERS];
new PlayerText:DNI1[MAX_PLAYERS];
new PlayerText:DNI2[MAX_PLAYERS];
new PlayerText:DNI3[MAX_PLAYERS];
new PlayerText:DNI4[MAX_PLAYERS];
new PlayerText:DNI5[MAX_PLAYERS];
new PlayerText:DNI6[MAX_PLAYERS];
new PlayerText:DNI7[MAX_PLAYERS];
new PlayerText:DNI8[MAX_PLAYERS];
new PlayerText:DNI9[MAX_PLAYERS];
new PlayerText:DNI10[MAX_PLAYERS];
new PlayerText:DNI11[MAX_PLAYERS];
new PlayerText:DNI12[MAX_PLAYERS];
// Licencia (Texdraw)
new PlayerText:LICENCIA0[MAX_PLAYERS];
new PlayerText:LICENCIA1[MAX_PLAYERS];
new PlayerText:LICENCIA2[MAX_PLAYERS];
new PlayerText:LICENCIA3[MAX_PLAYERS];
new PlayerText:LICENCIA4[MAX_PLAYERS];
new PlayerText:LICENCIA5[MAX_PLAYERS];
new PlayerText:LICENCIA6[MAX_PLAYERS];
new PlayerText:LICENCIA7[MAX_PLAYERS];
new PlayerText:LICENCIA8[MAX_PLAYERS];
//*******************Sistema de Negocios*******************
new Text3D:Bizz3DText[MAX_BIZZ];
new BizzPickup[MAX_BIZZ];
forward LoadBizz();
new QuitExtortion[MAX_PLAYERS], ExtortionID[MAX_PLAYERS];

enum bInfo
{
	bOwned,
	bOwner[24],
	bName[32],
    bExtortion[MAX_PLAYER_NAME],
	Float:bEntrancex,
	Float:bEntrancey,
	Float:bEntrancez,
	bLevelNeeded,
	bBuyPrice,
	bTill,
	bTillEx
};
new BizzInfo[MAX_BIZZ][bInfo];
//*******************Sistema de DNI Falso*******************
#define DNI_MENU        964
#define DNI_CONFIRM     965
new DNIName[MAX_PLAYERS][32];
// Solicitar admin
#define DIALOG_SO       	99
new PlayerSol[MAX_PLAYERS];
//*******************motos*******************
new LoadMonTimeeee[MAX_PLAYERS];
new Bar:LoadMoneyyyy[MAX_PLAYERS] = INVALID_BAR_ID;
//*******************Sistema de Robar Banco*******************
new LoadMonTime[MAX_PLAYERS];
new Bar:LoadMoney[MAX_PLAYERS] = INVALID_BAR_ID;
new robobanco[MAX_PLAYERS];
forward Tiempo(playerid);
forward TimerBANCO(playerid);
forward TimerESCAPE(playerid);
//*******************Sistema de Ticket de carros chocones*******************
new Vortex[MAX_PLAYERS];
forward TimerTICKET(playerid);
new ticketR;
//*******************Sistema de Bomba*******************
new bombap[MAX_PLAYERS];
new pbomba[MAX_PLAYERS];
new BOMBA[MAX_PLAYERS];
forward TimerBANK(playerid);
new Pbankazo;
//Intermitentes.
new Intermitentes_xqz[MAX_VEHICLES][6];
// Entorno de Vehículo
new Vehiculo_Entorno[MAX_VEHICLES];
// Nombres de patrullas
new Nombre_Patrulla[MAX_VEHICLES];
new Text3D:Texto_NombrarP[MAX_VEHICLES];
// Interiores para vehículos.
new InteriorLimusina[MAX_PLAYERS];
new InteriorSwatVan[MAX_PLAYERS];
new InteriorTren[MAX_PLAYERS];
new InteriorBeagle[MAX_PLAYERS];
//*******************Job Leñador*******************
new talar[MAX_PLAYERS];
new CorteY;
new CorteX;
new gcorte[MAX_PLAYERS];
new Azar1;
new Maderaazar[][1] = {
	{60},{55},{45},{49},{65},{46},{50},{52},{53},{45}
};
new lena1[MAX_PLAYERS];
new lena;
new LenadorU;
new bool:TrabajoL[MAX_PLAYERS];
forward Tiempoarbol0(playerid);
forward Tiempoarbolx(playerid);
forward Tiempoarbolxx(playerid);
forward Tiempoarbolxxx(playerid);
new Arbolvivo[4]; new Arbolmuerto[4];  new Talararbol[4];
new Tiempotalar[MAX_PLAYERS];
forward espera(playerid);
forward arbol1(playerid);
forward arbol2(playerid);
forward arbol3(playerid);
forward arbol4(playerid);
//*******************Tienda de Robos*******************
new roboV;
new roboD;
new YaRobo[MAX_PLAYERS];
//*******************CORTACESPED*******************
new OldskinJ[MAX_PLAYERS];
new Koson1[MAX_PLAYERS];
new Kosonrob[MAX_PLAYERS];
new cesped;
new koson;
new koscar[11];
new JobAmmounts2[MAX_PLAYERS];
new pKosonrob[MAX_PLAYERS];
new recojercesped[MAX_PLAYERS];
new acobrarcesped[MAX_PLAYERS];
new armaRecibir[MAX_PLAYERS];
new idarma[] =
{
1,
2,
5,
7,
6,
14,
41,
43,
10,
11,
12,
23
};

enum vCoords
{
	getID,
	Float:vvvX,
	Float:vvvY,
	Float:vvvZ,
};

new Offsets[9][vCoords] = {
	{560, 0.398071289,0.75390625,0.43879509}, // Tablero Sultan
	{415, 0.409729004, 0.526367188, 0.206963539}, // Tablero Cheetah
	{421, 0.421691895, 0.804931641, 0.256482124}, // Tablero Washington
	{426, 0.575378418, 0.786132812, 0.361483574}, // Tablero Premier
	{579, 0.454345703, 0.575683594, 0.645122528}, // Tablero Huntley
	{402, 0.53515625, 0.562988281, 0.278743744}, // Tablero Buffalo
	{461, 0.00000000, -0.932861328, 0.494509697}, // PCJ 600
	{521, 0.00000000, -0.928955078, 0.558652878},  // FCR 900
	{506, 0.541137695, 0.282714844, 0.272130013} // Super Gt
};

enum ddInfo
{
	ddDescription[128],
	ddPickupID,
	Text3D: ddTextID,
	ddInteriorLoad,
	ddExteriorVW,
	ddExteriorInt,
	ddInteriorVW,
	ddInteriorInt,
	Float: ddExteriorX,
	Float: ddExteriorY,
	Float: ddExteriorZ,
	Float: ddExteriorA,
	Float: ddInteriorX,
	Float: ddInteriorY,
	Float: ddInteriorZ,
	Float: ddInteriorA,
	ddExteriorLoad,
	ddVIP,
	ddFamily,
	ddFaction,
	ddAdmin,
	ddWanted,
	ddVehicleAble,
	ddColor,
	ddPickupModel,
	dPass[24],
	dLocked,
	dMusic,
};
new DDoorsInfo[MAX_DDOORS][ddInfo];

enum cdInfo
{
	cdOwned,
	cdOwner[MAX_PLAYER_NAME],
	Float: cdEntranceX,
	Float: cdEntranceY,
	Float: cdEntranceZ,
	Float: cdExitX,
	Float: cdExitY,
	Float: cdExitZ,
	cdMessage[128],
	cdTill,
	cdInterior,
	Float: cdRadius,
	cdPrice,
	cdPickupID,
	Text3D:cdTextLabel,
	Text3D:cdVehicleLabel[MAX_DEALERSHIPVEHICLES],
	cdVehicleModel[MAX_DEALERSHIPVEHICLES],
	cdVehicleCost[MAX_DEALERSHIPVEHICLES],
	cdVehicleId[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnX[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnY[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnZ[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnAngle[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawn[4],
};
new CDSInfo[MAX_CARDEALERSHIPS][cdInfo];

enum hInfo
{
	hOwned,
	hLevel,
	hHInteriorWorld,
	hInteriorLoad,
	hDescription[64],
	hOwner[ MAX_PLAYER_NAME ],
	Float: hExteriorX,
	Float: hExteriorY,
	Float: hExteriorZ,
	Float: hExteriorR,
	Float: hExteriorA,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	Float: hInteriorR,
	Float: hInteriorA,
	hLock,
	hRentable,
	hRentFee,
	hValue,
	hSafeMoney,
	hPot,
	hCrack,
	hMaterials,
	hWeapons[5],
	hGLUpgrade,
	hPickupID,
	Text3D: hTextID,
	hExteriorLoad,
	//***sistema muebles***
	hMuebleId[11],
	hMuebles[11],
	Float:hMueblesPOSX[11],
	Float:hMueblesPOSY[11],
	Float:hMueblesPOSZ[11],
 	Float:hMueblesPOSRx[11],
 	Float:hMueblesPOSRy[11],
 	Float:hMueblesPOSRz[11],
 	hMuebleVW[11],
 	hMuebleINT[11],
 	//*********************
};

new HouseInfo[MAX_HOUSES][hInfo];
//////////////////////////////////////////////////////////////////
enum Garages
{
	gType,
	gOwner[MAX_PLAYER_NAME],
	gName[32],
	Float: gExteriorPos[4],
	Float: gInteriorPos[4],
	gInterior,
	gLocked,
	gPrice,
	gLevel,
	Text3D: gLabelID,
	gPickupID,
}
new GaragesVariables[MAX_GARAGES][Garages];
//*******************Evento*******************
enum EventInfoEnum
{
	EventAdvisor,
	EventStatus,
	EventType,
	EventoInfo[128],
	Float: EventHealth,
	Float: EventArmor,
	Float: EventPositionX,
	Float: EventPositionY,
	Float: EventPositionZ,
	EventInterior,
	EventWorld,
	EventWeapons[ 5 ],
	EventTeamColor[2],
    EventTeamSkin[2],
    EventLimit,
    EventPlayers,
    EventRequest,
    EventStartRequest,
    EventCreator,
    EventStaff[5],
    EventJoinStaff,
    VipOnly,
    Float: EventTeamPosX1,
    Float: EventTeamPosY1,
    Float: EventTeamPosZ1,
    Float: EventTeamPosX2,
    Float: EventTeamPosY2,
    Float: EventTeamPosZ2
}

new InfoEvento[ EventInfoEnum ];
//*******************Sistema de familia*******************
enum fInfo
{
	FamilyTaken,
	FamilyName[42],
	FamilyMOTD[65],
	FamilyColor,
	FamilyTurfTokens,
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
	FamilyCash,
	FamilyBank,
	FamilyMats,
	FamilyPot,
	FamilyCrack,
	Float:FamilySafe[3],
	FamilyUSafe,
	FamilyRank1[20],
	FamilyRank2[20],
	FamilyRank3[20],
	FamilyRank4[20],
	FamilyRank5[20],
	FamilyRank6[20],
	FamilyPickup,
	FamilyMaxSkins,
	FamilySkins[8],
	Float: FamilyEntrance[4],
	Float: FamilyExit[4],
	FamilyEntrancePickup,
	FamilyExitPickup,
	Text3D:FamilyEntranceText,
	Text3D:FamilyExitText,
	FamilyCustomMap,
	FamilyVirtualWorld,
	FamilyResetSpawns,
	FamilyGuns[10],
};
new fINFO[MAX_FAMILY][fInfo];

enum fvInfo
{
    fvId,
	fvModelId,
	Float: fvSpawnx,
	Float: fvSpawny,
	Float: fvSpawnz,
	Float: fvSpawna,
	Float: fvSpawnxtmp,
	Float: fvSpawnytmp,
	Float: fvSpawnztmp,
	Float: fvSpawnatmp,
	fvLock,
	fvLocked,
	fvPaintJob,
	fvColor1,
	fvColor2,
	fvMods[MAX_MODS],
	fvPrice,
	fvImpounded,
	fvFuel,
};

new FVINFO[MAX_FAMILY][MAX_GANG_VEHICLES][fvInfo];

enum fPoint
{
	Float:Pointx,
	Float:Pointy,
	Float:Pointz,
	Type,
	Vulnerable,
	MatPoint,
	CratePoint,
	Announced,
	ClaimerId,
	ClaimerTeam,
	TimeToClaim,
	TimeLeft,
	Owner[32],
	PlayerNameCapping[MAX_PLAYER_NAME],
	CapperName[MAX_PLAYER_NAME],
	Name[32],
	TakeOverTimerStarted,
	TakeOverTimer,
	Text3D:TextLabel,
	CaptureTimerEx2,
	Stock,
	Text3D:CaptureProccess,
	Text3D:CaptureProgress,
	CaptureProccessEx,
	Float: Capturex,
	Float: Capturey,
	Float: Capturez,
	PointPickupID,
	Bar:PointBarID,
}
new Points[MAX_POINTS][fPoint];
//*******************Pago de Facciones*******************
new IDCode[MAX_PLAYERS];
new SubsiCodes[22][6] = {
{"95315"},
{"70381"},
{"73869"},
{"42817"},
{"86471"},
{"31952"},
{"29375"},
{"84157"},
{"92381"},
{"85724"},
{"29572"},
{"92859"},
{"66173"},
{"38815"},
{"28477"},
{"92841"},
{"44481"},
{"91842"},
{"29921"},
{"74178"},
{"28194"},
{"55182"}
};


enum ptInfo
{
    ptModelID,
	ptBone,
    Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	Float:ftscaleX,
	Float:ftscaleY,
	Float:ftscaleZ
};

new PlayerToyInfo[MAX_PLAYERS+1][MAX_PLAYERTOYS][ptInfo];

enum HoldingEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjectsCop[19][HoldingEnumAll] = {
{19942,30,"Radio"},
{19418,50,"Esposas"},
{19774,10,"Placa 1"},
{19775,10,"Placa 2"},
{19347,10,"Placa 3"},
{18642,500,"Taser"},
{19141,350,"Casco SWAT"},
{19142,680,"Chaleco SWAT"},
{18636,50,"Gorro Policía 1"},
{19099,50,"Gorro Policía 2"},
{19100,50,"Gorro Policía 3"},
{18637,50,"Escudo Policía"},
{19161,70,"Sombrero Policía 1"},
{19162,70,"Sombrero Policía 2"},
{19521,70,"Sombrero Policía 3"},
{19200,45,"Casco Policía"},
{19138,20,"Lentes 1"},
{19139,20,"Lentes 2"},
{19140,20,"Lentes 3"}
};
new HoldingObjectsGold[28][HoldingEnumAll] = {
{18643,10000,"Laser Rojo"},
{19080,10000,"Laser Azul"},
{19081,10000,"Laser Rosado"},
{19082,10000,"Laser Naranja"},
{19083,10000,"Laser Verde"},
{19084,10000,"Laser Amarillo"},
{19086,5000,"Dildo Grande"},
{18675,10000,"SmokePuff"},
{18698,10000,"Insectos"},
{19138,1000,"Lentes"},
{18861,1000,"Signo ?"},
{18646,1000,"Luz Azul&Roja"},
{19346,50,"Hot Dog"},
{19139,1000,"Lentes 2"},
{19140,1000,"Lentes 3"},
{19101,2000, "Casco Militar1"},
{19102,2000, "Casco Militar2"},
{19103,2000, "Casco Militar3"},
{19104,2000, "Casco Militar4"},
{19105,2000, "Casco Militar5"},
{19106,2000, "Casco Militar6"},
{19107,4000, "Casco Militar7"},
{19108,4000, "Casco Militar8"},
{19109,4000, "Casco Militar9"},
{19110,4000, "Casco Militar10"},
{19111,4000, "Casco Militar11"},
{19112,4000, "Casco Militar12"},
{19472,3000, "Máscara de Gas"}
};

new HoldingObjectsAll[265][HoldingEnumAll] = {
{18642,78,"Taser"},
{18643,10000,"Laser Rojo"},
{19080,10000,"Laser Azul"},
{19081,10000,"Laser Rosado"},
{19082,10000,"Laser Naranja"},
{19083,10000,"Laser Verde"},
{19084,10000,"Laser Amarillo"},
{19086,5000,"Dildo Grande"},
{18675,10000,"SmokePuff"},
{19701,10000,"Flama Pequeña"},
{18693,10000,"Flama Larga"},
{18698,10000,"Insectos"},
{18708,10000,"Burbujas"},
{19942,30,"Radio"},
{19418,50,"Esposas"},
{19774,10,"Placa 1"},
{19775,10,"Placa 2"},
{19347,10,"Placa 3"},
{18642,500,"Taser"},
{19141,350,"Casco SWAT"},
{19142,680,"Chaleco SWAT"},
{18636,50,"Gorro Policía 1"},
{19099,50,"Gorro Policía 2"},
{19100,50,"Gorro Policía 3"},
{18637,50,"Escudo Policía"},
{19161,70,"Sombrero Policía 1"},
{19162,70,"Sombrero Policía 2"},
{19521,70,"Sombrero Policía 3"},
{19200,45,"Casco Policía"},
{19138,20,"Lentes 1"},
{19139,20,"Lentes 2"},
{19140,20,"Lentes 3"},
{11745,670,"Bolso Negro"},
{1242,1200,"Chaleco Antibalas"},
{19559,400,"Mochila"},
{19610,640,"Micrófono"},
{19624,875,"Maleta de Viaje"},
{19625,5,"Cigarro"},
{19773,680,"Funda de Arma"},
{19801,95,"Mascara"},
{19878,360,"Skate"},
{19904,250,"Chaleco de Trabajo"},
{18632,15,"Caña Pesca"},
{18633,28,"L. Inglesa"},
{18634,20,"Palanca"},
{18635,56,"Martillo"},
{18638,500,"Casco Amarillo"},
{19093,500,"Casco 1"},
{19160,500,"Casco 3"},
{18639,500,"Sombrero N."},
{18640,700,"Cabello"},
{18975,700,"Cabello 2"},
{19136,700,"Cabello 3"},
{19274,700,"Cabello 4"},
{18641,1000,"Linterna"},
{18644,5000,"Desarmador"},
{18865,500,"Telefono1"},
{18866,500,"Telefono2"},
{18867,500,"Telefono3"},
{18868,500,"Telefono4"},
{18869,500,"Telefono5"},
{18870,1000,"Telefono6"},
{18871,1000,"Telefono7"},
{18872,1000,"Telefono8"},
{18873,1000,"Telefono9"},
{18874,1000,"Telefono10"},
{18875,750,"B.Personas"},
{18890,500,"Rastrillo"},
{18891,500,"Bandana1"},
{18892,500,"Bandana2"},
{18893,500,"Bandana3"},
{18894,500,"Bandana4"},
{18895,500,"Bandana5"},
{18896,500,"Bandana6"},
{18897,500,"Bandana7"},
{18898,500,"Bandana8"},
{18899,500,"Bandana9"},
{18900,500,"Bandana10"},
{18901,750,"Bandana11"},
{18902,750,"Bandana12"},
{18903,750,"Bandana13"},
{18904,750,"Bandana14"},
{18905,750,"Bandana15"},
{18906,750,"Bandana16"},
{18907,750,"Bandana17"},
{18908,750,"Bandana18"},
{18909,750,"Bandana19"},
{18910,750,"Bandana20"},
{18911,1000,"Mask1"},
{18912,1000,"Mask2"},
{18913,1000,"Mask3"},
{18914,1000,"Mask4"},
{18915,1000,"Mask5"},
{18916,1000,"Mask6"},
{18917,1000,"Mask7"},
{18918,1000,"Mask8"},
{18919,1000,"Mask9"},
{18920,1000,"Mask10"},
{18921,500,"Boina1"},
{18922,500,"Boina1"},
{18923,750,"Boina3"},
{18924,1000,"Boina4"},
{18925,1000,"Boina5"},
{18926,28,"Sombrero1"},
{18927,28,"Sombrero12"},
{18928,28,"Sombrero13"},
{18929,28,"Sombrero14"},
{18930,28,"Sombrero15"},
{18931,28,"Sombrero16"},
{18932,28,"Sombrero17"},
{18933,28,"Sombrero18"},
{18934,28,"Sombrero19"},
{18935,28,"Sombrero20"},
{18936,500,"Casco1"},
{18937,750,"Casco2"},
{18938,1000,"Casco3"},
{18939,750,"Gorra 1"},
{18940,750,"Gorra 2"},
{18941,750,"Gorra 3"},
{18942,1000,"Gorra 4"},
{18943,1000,"Gorra 5"},
{18944,35,"GorraBoater1"},
{18945,35,"GorraBoater2"},
{18946,35,"GorraBoater3"},
{18947,30,"GorraBoater4"},
{18948,30,"GorraBoater5"},
{18949,30,"GorraBoater6"},
{18950,30,"GorraBoater7"},
{18951,30,"GorraBoater8"},
{18952,1500,"Casco Box"},
{18953,500,"GorraLana1"},
{18954,750,"GorraLana2"},
{18955,750,"GorraIncl1"},
{18956,750,"GorraIncl2"},
{18957,750,"GorraIncl3"},
{18958,750,"GorraIncl4"},
{18959,750,"GorraIncl5"},
{18960,1000,"GorraIncl6"},
{18961,750,"GorraCamionero"},
{18962,750,"Sombrero Vaquero"},
{19469,500,"Bandana Blanca"},
{151,1000,"tele"},
{19330,1250,"sombrerodefuego"},
{18966,1500,"Casquete3"},
{18967,1000,"Sombrero"},
{18968,1000,"Sombrero2"},
{18969,1000,"Sombrero3"},
{18970,2000,"Sombrero Tigre"},
{18971,1000,"GorroCool"},
{18972,1250,"GorroCool2"},
{18973,1500,"GorroCool3"},
{18974,10000,"MaskZorro"},
{18645,1500,"Casco Moto"},
{18976,1000,"Casco Moto 2"},
{18977,1000,"Casco Moto 3"},
{18978,1250,"Casco Moto 4"},
{18979,1500,"Casco Moto 5"},
{19006,70,"Lentes 1"},
{19007,70,"Lentes 2"},
{19008,70,"Lentes 3"},
{19009,70,"Lentes 4"},
{19010,70,"Lentes 5"},
{19011,70,"Lentes 6"},
{19012,70,"Lentes 7"},
{19013,70,"Lentes 8"},
{19014,70,"Lentes 9"},
{19015,70,"Lentes 10"},
{19016,70,"Lentes 11"},
{19017,70,"Lentes 12"},
{19018,70,"Lentes 13"},
{19019,70,"Lentes 14"},
{19020,70,"Lentes 15"},
{19021,70,"Lentes 16"},
{19022,70,"Lentes 17"},
{19023,70,"Lentes 18"},
{19024,70,"Lentes 19"},
{19025,70,"Lentes 20"},
{19026,70,"Lentes 21"},
{19027,70,"Lentes 22"},
{19028,70,"Lentes 23"},
{19029,70,"Lentes 24"},
{19030,70,"Lentes 25"},
{19031,70,"Lentes 26"},
{19032,70,"Lentes 27"},
{19033,70,"Lentes 28"},
{19034,70,"Lentes 29"},
{19035,70,"Lentes 30"},
{19036,120,"HockeyMask1"},
{19037,120,"HockeyMask2"},
{19038,120,"HockeyMask3"},
{19039,60,"Reloj 1"},
{19040,60,"Reloj 2"},
{19041,60,"Reloj 3"},
{19042,60,"Reloj 4"},
{19043,60,"Reloj 5"},
{19044,60,"Reloj 6"},
{19045,60,"Reloj 7"},
{19046,60,"Reloj 8"},
{19047,60,"Reloj 9"},
{19048,60,"Reloj 10"},
{19049,60,"Reloj 11"},
{19050,60,"Reloj 12"},
{19051,60,"Reloj 13"},
{19052,60,"Reloj 14"},
{19053,60,"Reloj 15"},
{19064,10000, "GorraSanta1"},
{19065,20000, "GorraSanta2"},
{19066,30000, "GorraSanta3"},
{19067,1000, "HoodyHat1"},
{19068,1000, "HoodyHat2"},
{19069,1000, "HoodyHat3"},
{19078,7500, "Loro1"},
{19079,7500, "Loro2"},
{19085,5000, "Parche Ojo"},
{19090,1500, "PomPomAzul"},
{19091,1500, "PomPomRejo"},
{19092,1500, "PomPomVerde"},
{19094,2000, "GorroBurgerShot"},
{19095,500, "Sombrero Vaquero 2"},
{19096,500, "Sombrero Vaquero 3"},
{19097,1000, "Sombrero Vaquero 4"},
{19098,1000, "Sombrero Vaquero 5"},
{19113,40, "Casco Tonto1"},
{19114,40, "Casco Tonto2"},
{19115,40, "Casco Tonto3"},
{19116,40, "Casco Aereo1"},
{19117,30, "Casco A. 2"},
{19118,30, "Casco A. 3"},
{19119,30, "Casco A. 4"},
{19120,30, "Casco A. 5"},
{19101,2000, "Casco Militar1"},
{19102,2000, "Casco Militar2"},
{19103,2000, "Casco Militar3"},
{19104,2000, "Casco Militar4"},
{19105,2000, "Casco Militar5"},
{19106,2000, "Casco Militar6"},
{19107,4000, "Casco Militar7"},
{19108,4000, "Casco Militar8"},
{19109,4000, "Casco Militar9"},
{19110,4000, "Casco Militar10"},
{19111,4000, "Casco Militar11"},
{19112,4000, "Casco Militar12"},
{19137,5000, "GorraCluckinBell"},
{19163,1000, "Mascara"},
{19330,1000, "Casco Bomb"},
{19331,1000, "Casco Bomb2"},
{19317,1000, "Guitarra"},
{19318,1000, "GuitarraX"},
{19319,1000, "XFireGuitarra"},
{1210,500, "Maleta"},
{3044,20,"Abano"},
{18647,70000,"Neon Rojo"},
{18648,70000,"Neon Azul"},
{18649,70000,"Neon Verde"},
{18650,70000,"Neon Amarillo"},
{18651,70000,"Neon Rosado"},
{18652,70000,"Neon Blanco"},
{18861,1000,"Signo ?"},
{18646,1000,"Luz Azul&Roja"},
{19346,50,"Hot Dog"},
{19472,3000,"Máscara de Gas"},
{19421,140,"Headphone 1"},
{19422,140,"Headphone 2"},
{19423,140,"Headphone 3"},
{19424,140,"Headphone 4"}
};

enum HoldingEnum
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjects[222][HoldingEnum] = {
{11745,670,"Bolso Negro"},
{1242,1200,"Chaleco Antibalas"},
{19559,400,"Mochila"},
{19610,640,"Micrófono"},
{19624,875,"Maleta de Viaje"},
{19625,5,"Cigarro"},
{19773,680,"Funda de Arma"},
{19801,95,"Mascara"},
{19878,360,"Skate"},
{19904,250,"Chaleco de Trabajo"},
{18632,100,"Caña Pesca"},
{18633,25,"L. Inglesa"},
{18634,70,"Palanca"},
{18635,30,"Martillo"},
{18638,35,"Casco Amarillo"},
{19093,45,"Casco 1"},
{19160,45,"Casco 2"},
{18639,45,"Sombrero N."},
{18640,25,"Cabello"},
{18975,25,"Cabello 2"},
{19136,25,"Cabello 3"},
{19274,25,"Cabello 4"},
{18641,40,"Linterna"},
{18644,60,"Desarmador"},
{18865,340,"Telefono1"},
{18866,340,"Telefono2"},
{18867,340,"Telefono3"},
{18868,340,"Telefono4"},
{18869,340,"Telefono5"},
{18870,340,"Telefono6"},
{18871,340,"Telefono7"},
{18872,340,"Telefono8"},
{18873,340,"Telefono9"},
{18874,340,"Telefono10"},
{18875,750,"B.Personas"},
{18890,300,"Rastrillo"},
{18891,15,"Bandana1"},
{18892,15,"Bandana2"},
{18893,15,"Bandana3"},
{18894,15,"Bandana4"},
{18895,15,"Bandana5"},
{18896,15,"Bandana6"},
{18897,15,"Bandana7"},
{18898,15,"Bandana8"},
{18899,15,"Bandana9"},
{18900,15,"Bandana10"},
{18901,15,"Bandana11"},
{18902,15,"Bandana12"},
{18903,15,"Bandana13"},
{18904,15,"Bandana14"},
{18905,15,"Bandana15"},
{18906,15,"Bandana16"},
{18907,15,"Bandana17"},
{18908,15,"Bandana18"},
{18909,15,"Bandana19"},
{18910,15,"Bandana20"},
{18911,20,"Mask1"},
{18912,20,"Mask2"},
{18913,20,"Mask3"},
{18914,20,"Mask4"},
{18915,20,"Mask5"},
{18916,20,"Mask6"},
{18917,20,"Mask7"},
{18918,20,"Mask8"},
{18919,20,"Mask9"},
{18920,20,"Mask10"},
{18921,15,"Boina1"},
{18922,15,"Boina1"},
{18923,15,"Boina3"},
{18924,15,"Boina4"},
{18925,15,"Boina5"},
{18926,28,"Sombrero1"},
{18927,28,"Sombrero12"},
{18928,28,"Sombrero13"},
{18929,28,"Sombrero14"},
{18930,28,"Sombrero15"},
{18931,28,"Sombrero16"},
{18932,28,"Sombrero17"},
{18933,28,"Sombrero18"},
{18934,28,"Sombrero19"},
{18935,28,"Sombrero20"},
{18936,250,"Casco1"},
{18937,250,"Casco2"},
{18938,250,"Casco3"},
{18939,45,"Gorra 1"},
{18940,45,"Gorra 2"},
{18941,45,"Gorra 3"},
{18942,45,"Gorra 4"},
{18943,45,"Gorra 5"},
{18944,35,"GorraBoater1"},
{18945,35,"GorraBoater2"},
{18946,35,"GorraBoater3"},
{18947,30,"GorraBoater4"},
{18948,30,"GorraBoater5"},
{18949,30,"GorraBoater6"},
{18950,30,"GorraBoater7"},
{18951,30,"GorraBoater8"},
{18952,45,"Casco Box"},
{18953,30,"GorraLana1"},
{18954,30,"GorraLana2"},
{18955,30,"GorraIncl1"},
{18956,30,"GorraIncl2"},
{18957,30,"GorraIncl3"},
{18958,30,"GorraIncl4"},
{18959,30,"GorraIncl5"},
{18960,30,"GorraIncl6"},
{18961,10,"GorraCamionero"},
{18962,45,"Sombrero Vaquero"},
{19469,500,"Bandana Blanca"},
{19330,45,"sombrerodefuego"},
{18966,45,"Casquete3"},
{18967,45,"Sombrero"},
{18968,45,"Sombrero2"},
{18969,45,"Sombrero3"},
{18970,70,"Sombrero Tigre"},
{18971,25,"GorroCool"},
{18972,25,"GorroCool2"},
{18973,25,"GorroCool3"},
{18974,69,"MaskZorro"},
{18645,40,"Casco Moto"},
{18976,40,"Casco Moto 2"},
{18977,40,"Casco Moto 3"},
{18978,40,"Casco Moto 4"},
{18979,40,"Casco Moto 5"},
{19006,70,"Lentes 1"},
{19007,70,"Lentes 2"},
{19008,70,"Lentes 3"},
{19009,70,"Lentes 4"},
{19010,70,"Lentes 5"},
{19011,70,"Lentes 6"},
{19012,70,"Lentes 7"},
{19013,70,"Lentes 8"},
{19014,70,"Lentes 9"},
{19015,70,"Lentes 10"},
{19016,70,"Lentes 11"},
{19017,70,"Lentes 12"},
{19018,70,"Lentes 13"},
{19019,70,"Lentes 14"},
{19020,70,"Lentes 15"},
{19021,70,"Lentes 16"},
{19022,70,"Lentes 17"},
{19023,70,"Lentes 18"},
{19024,70,"Lentes 19"},
{19025,70,"Lentes 20"},
{19026,70,"Lentes 21"},
{19027,70,"Lentes 22"},
{19028,70,"Lentes 23"},
{19029,70,"Lentes 24"},
{19030,70,"Lentes 25"},
{19031,70,"Lentes 26"},
{19032,70,"Lentes 27"},
{19033,70,"Lentes 28"},
{19034,70,"Lentes 29"},
{19035,70,"Lentes 30"},
{19036,120,"HockeyMask1"},
{19037,120,"HockeyMask2"},
{19038,120,"HockeyMask3"},
{19039,60,"Reloj 1"},
{19040,60,"Reloj 2"},
{19041,60,"Reloj 3"},
{19042,60,"Reloj 4"},
{19043,60,"Reloj 5"},
{19044,60,"Reloj 6"},
{19045,60,"Reloj 7"},
{19046,60,"Reloj 8"},
{19047,60,"Reloj 9"},
{19048,60,"Reloj 10"},
{19049,60,"Reloj 11"},
{19050,60,"Reloj 12"},
{19051,60,"Reloj 13"},
{19052,60,"Reloj 14"},
{19053,60,"Reloj 15"},
{19064,45, "GorraSanta1"},
{19065,45, "GorraSanta2"},
{19066,45, "GorraSanta3"},
{19067,60, "HoodyHat1"},
{19068,60, "HoodyHat2"},
{19069,60, "HoodyHat3"},
{19078,700, "Loro1"},
{19079,700, "Loro2"},
{19085,35, "Parche Ojo"},
{19090,30, "PomPomAzul"},
{19091,45, "PomPomRejo"},
{19092,60, "PomPomVerde"},
{19094,100, "GorroBurgerShot"},
{19095,100, "Sombrero Vaquero 2"},
{19096,100, "Sombrero Vaquero 3"},
{19097,100, "Sombrero Vaquero 4"},
{19098,100, "Sombrero Vaquero 5"},
{19101,10, "Casco Militar1"},
{19102,10, "Casco Militar2"},
{19103,10, "Casco Militar3"},
{19104,10, "Casco Militar4"},
{19105,10, "Casco Militar5"},
{19106,10, "Casco Militar6"},
{19107,10, "Casco Militar7"},
{19108,10, "Casco Militar8"},
{19109,10, "Casco Militar9"},
{19110,10, "Casco Militar10"},
{19111,10, "Casco Militar11"},
{19112,10, "Casco Militar12"},
{19113,40, "Casco Tonto1"},
{19114,40, "Casco Tonto2"},
{19115,40, "Casco Tonto3"},
{19116,40, "Casco Aereo1"},
{19117,30, "Casco A. 2"},
{19118,30, "Casco A. 3"},
{19119,30, "Casco A. 4"},
{19120,30, "Casco A. 5"},
{19137,60, "GorraCluckinBell"},
{19163,70, "Mascara"},
{19330,40, "Casco Bomb"},
{19331,40, "Casco Bomb2"},
{19317,1000, "Guitarra"},
{19318,1000, "GuitarraX"},
{19319,1000, "XFireGuitarra"},
{1210,45, "Maleta"},
{3044,20,"Abano"},
{19421,140,"Headphone 1"},
{19422,140,"Headphone 2"},
{19423,140,"Headphone 3"},
{19424,140,"Headphone 4"}
};

new HoldingBones[][] = {
	"Nada",
	"Columna",
	"Cabeza",
	"Brazo Izq Sup",
	"Brazo Der Sup",
	"Mano Izq",
	"Mano Derecha",
	"Muslo Izq",
	"Muslo Der",
	"Pie Izq",
	"Pie Der",
	"Right calf",
	"Left calf",
	"AnteBrazo Izq",
	"AnteBrazo Der",
	"Clavicula Izq",
	"Clavicula Der",
	"Cuello",
	"Quijada"
};
//*******************Stats Jugador*******************
enum pInfo
{
	pKey[24],
    pLevel[2],
	pAdminZC,
	pLvlAdminZC,
	pBanAppealer,
	pFactionModerator,
    pAlcohol,
	pModStaff,
	pGangModerator,
	pHelper,
	pConnectTime,
	pPremium,
	pReg,
	pInTest,
	pStats_U,
	pSex,
	pAge,
	pOrigin,
	pExp,
	pSuci,
	pCRet,
	pCash,
	pTarjetaCredito,
	pAccount,
	pCheques,
	pIP[32],
	pKills,
	pDeaths,
	pBGomas,
	pArrested,
	pJailAdmin,
	pLottoNr,
	pJob,
	pNMute,
	pNMuteTotal,
	pWarn,
	pWRestricted,
	pJailed,
	pJailTime,
	pMats,
	pPackages,
	pDrugs,
	pCosecha,
	pCrack,
	pPot,
	pCrates,
	pAdiccion,
	pLeader,
	pMember,
	pDivision,
	pFMember,
	pRank,
	pChar,
	Float:pHealth,
	Float:pArmour,
	pInt,
	pTeam,
	pModel,
	pPnumber,
	pSprunk,
	pSpeedo,
	pPhoneBook,
	pPhousekey,
	pPhousekey2,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	Float:pPos_r,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pGunLic,
	pGafas,
	pTut,
	pTestTut,
	pVW,
	pLighter,
	pCigarettes,
	pPapel,
	pMask,
	pMaskuse,
	pHideNumber,
	pSpeaker,
	pBannedZC,
	pDisabledZC,
	pBlockBug,
	pDNI,
 	pArmsSkill,
 	pTruckSkill,
 	pSmugSkill,
    pDrugsSkill,
 	pRequestingBackup,
 	pSIDA,
 	pCancer,
 	pEpilepsia,
 	pDengue,
 	pCertificadoMD,
 	pFStyle,
 	pWantedLevel,
 	pAntiSIDA,
 	pAntiCancer,
 	pAntiEpilepsia,
 	pRenting,
 	p_Pr_Money,
 	pRob,
 	pVIP,
 	pPTR,
 	pCarKey2,
 	pBanDuda,
 	pPasaporte,
	pRMuted,
	pRMutedTotal,
	pRMutedTime,
   	pRadio,
   	pRadioFreq,
   	pIpadMusic,
   	pGiftTime,
	pWeapons[13],
 	pAccent,
 	pIngles,
 	pAleman,
	pRuso,
	pJapones,
	pItaliano,
	pArabe,
	pBritanico,
	pChino,
	pKoreano,
	pFrances,
	pIsraeli,
	pInglesSkill,
 	pAlemanSkill,
	pRusoSkill,
	pJaponesSkill,
	pItalianoSkill,
	pArabeSkill,
	pBritanicoSkill,
	pChinoSkill,
	pKoreanoSkill,
	pFrancesSkill,
	pIsraeliSkill,
 	pUndercover,
 	pHead,
 	pCHits,
 	pFHits,
 	pMarried,
 	pPaintTeam,
 	pPaintTokens,
 	pVehicleKeysFrom,
 	pVehicleKeys,
 	pLockCar,
 	pLock,
 	pSpraycan,
 	pMarriedTo[128],
	pContractBy[32],
	pContractDetail[64],
	pServiceTime,
	pTaxiLicense,
	pHospital,
	pTriageTime,
	pWExists,
	Float:pWX,
	Float:pWY,
	Float:pWZ,
	pWVW,
	pWInt,
	pWValue,
	pWObject,
	pWTimer,
	pWSeeds,
	YaCobre,
	pADMute,
	pADMuteTotal,
	pWarrant[128],
	pJudgeJailTime,
	pJudgeJailType,
	pBeingSentenced,
	pProbationTime,
	pBiggestFish,
	pRHours,
	pADTime,
	pOther,
	pGTokens,
	pDobleExp,
	pAdverID,
	pDPHours,
	pDPTime,
	pDPTotal,
	pOrder,
	pTempVIP,
	pVIPInviteDay,
	pBuddyInvited,
	pVTokens,
	pJob2,
	pVIPCHAT,
	pTypeSpawn,
	pAutoTextReply[64],
	pShopTech,
	pEstado,
	pVIPDateD,
	pVIPDateM,
	pRegalo,
	pSavedTime,
	pScrewdriver,
	pFirstaid,
	pSurveillance,
	pPbizzkey,
	pgskin,
	probita,
	pDNIFalse,
	pDNIName[32],
	pMuebles[11],
	pBoombox,
};

new Info[MAX_PLAYERS+1][pInfo];

//*******************Sistema de autos dinamicos*******************
enum pvInfo
{
    Float:pvPosX,
	Float:pvPosY,
	Float:pvPosZ,
 	Float:pvPosAngle,
 	pvVW,
	pvId,
	pvModelId,
	pvLock,
	pvLocked,
	pvPaintJob,
	pvColor1,
	pvColor2,
	pvMods[MAX_MODS],
	pvAllowPlayer[MAX_PLAYER_NAME],
	pvAllowedPlayerId,
	pvPark,
	pvPrice,
	pvTicket,
	pvWeapons[8],
	pvWepUpgrade,
	pvImpounded,
	pvFuel,
	Float:pvHealth,
	pvSpawned,
};
//******sistema experiencia********//
new Text:Experiencia[MAX_PLAYERS];
//*******************************//
new light[MAX_VEHICLES],
	Lamp[MAX_VEHICLES] = 0,
	CurrentDialog[MAX_PLAYERS];
new PlayerVehicleInfo[MAX_PLAYERS+1][MAX_PLAYERVEHICLES][pvInfo];
new Bar:PizzaBar[MAX_PLAYERS];
new estacionveh[MAX_VEHICLES];
new estacionp[MAX_PLAYERS];
new VehicleFuel[MAX_VEHICLES] = 200;
new LockStatus[MAX_VEHICLES];
new Intentar[MAX_PLAYERS];
new Banco_Activo;
new GiveKeysTo[MAX_PLAYERS];
new arr_Engine[MAX_VEHICLES char];
new arr_Towing[MAX_PLAYERS];
new RefuelingVehicle[MAX_PLAYERS];
new RefuelingVehicleTimer[MAX_PLAYERS];
new RefuelingVehiclePrice[MAX_PLAYERS];
new VehicleStatus[MAX_VEHICLES char] = 0;
new Float: fVehSpeed[MAX_PLAYERS];
new Muted[MAX_PLAYERS];
new QFA[MAX_PLAYERS][24];
new Helado[MAX_PLAYERS];
new HotDog[MAX_PLAYERS];
//*******************Sistema de fuego*******************
new CreatedBlocks[200];
new CreatedBlock = 0;
//*******************Sistema de armas*******************
//sistema tirararma
new ObjectID[MAX_ARMAS][1];
new Float:ObjCoords[MAX_ARMAS][3];
new Object[MAX_ARMAS];
new GunObjects[47][0] = { // By Valentin Carranza
	{0},// Ninguna.
	{331},// Puño Metalico.
	{333},// Palo de golf.
	{334},// Porra policial.
	{335},// Navaja.
	{336},// Bate de béisbol.
	{337},// Pala.
	{338},// Palo de pool.
	{339},// Katana.
	{341},// Motosierra.
	{321},// Consolador violeta.
	{322},// Consolador corto blanco.
	{323},// Consolador largo blanco.
	{324},// Consolador vibrador.
	{325},// Ramo de flores.
	{326},// Bastón.
	{342},// Granada.
	{343},// Grabada de gas lacrimógeno.
	{344},// Cóctel Molotov.
	{0},
	{0},
	{0},
	{346},// 9mm.
	{347},// 9mm con silenciador.
	{348},// Desert eagle.
	{349},// Escopeta normal.
	{350},// Escopeta recortada.
	{351},// Escopeta de combate.
	{352},// UZI
	{353},// MP5
	{355},// AK47
	{356},// M4
	{372},// Tec-9
	{357},// Rifle de caza.
	{358},// Rifle de francotirador (sniper)
	{359},// Lanzaconhetes.
	{360},// Lanzacohetes busca-calor.
	{361},// Lanzallamas.
	{362},// Minigun.
	{363},// Detonador.
	{364},// Botón de detonador.
	{365},// Aerosol de gas pimienta.
	{366},// Extinguidor de fuego.
	{367},// Cámara fotográfica.
	{368},// Gafas de visión nocturna.
	{368},// Gafas de visión infrarroja.
	{371}// Paracaídas.
};
//***sistema de fire***
new Float:Fuego[][3] = {
{675.71625, -1423.27234, 20.14271}, //Fuego 1
{1217.23645, -1585.02075, 12.66834}, //Fuego 2
{1689.73450, -1582.67432, 20.66389}, //Fuego 3
{2380.07007, -1213.95972, 32.57209}, //Fuego 4
{2154.85815, -1742.47400, 17.89753}, //Fuego 5
{2746.38135, -1185.48157, 75.57899}, //Fuego 6
{2404.60767, -1506.70691, 24.74999}, //Fuego 7 - Comida
{2180.93018, -1998.26965, 13.04024}, //Fuego 8 - Faro
{850.47943, -1795.20996, 19.92557}, //Fuego 9
{2353.91504, -1463.42676, 23.12055} //Fuego 10
};

new Timerfire;
new lugarfire;
new bool:F;
new bool:llegarf[MAX_PLAYERS];
new Apagandofire[MAX_PLAYERS];
new Float:LugarFuego[3];
new Fire[7];
//*******************Mensaje al loguear*******************
new GlobalMOTD[128];
new AdminMOTD[128];
new CAMOTD[128];
new FACMOTD[128];
new FAMMOTD[128];
new VIPMOTD[128];
new iGMXTick,iGMXTimer;
new GiftAllowed, VIPGifts = 0, VIPGiftsTimeLeft, VIPGiftsName[MAX_PLAYER_NAME];
new Float:TeleportDest[MAX_PLAYERS][3];
new EventLastInt[MAX_PLAYERS]; new EventLastVW[MAX_PLAYERS];
new Float:EventFloats[MAX_PLAYERS][6];
new nextteam;
new textdrawscount;
new FishCount[MAX_PLAYERS];
new TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,PlayerCars,TotalUptime;
//*******************Sistema de reportes*******************
enum reportinfo
{
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
 	TimeToExpire,
	BeingUsed,
	ReportExpireTimer,
	ReplyTimerr
}
new Reports[MAX_REPORTS][reportinfo];
new CancelReport[MAX_PLAYERS];
new JustReported[MAX_PLAYERS];
new JustDuda[MAX_PLAYERS];
new JustAfk[MAX_PLAYERS];
new HayDuda[MAX_PLAYERS];
new tarmalimit[MAX_PLAYERS];
new ListItemReportId[MAX_PLAYERS][40];
new camaraon[MAX_PLAYERS];
new FPS[MAX_PLAYERS];
//*******************Sistema de ad*******************
enum advertinfo
{
	aAdvert[128],
 	aResume[15],
	aNumber,
	aContact[MAX_PLAYER_NAME],
	aTimer,
	aActive,
	aOther
}

new ADInfo[MAX_AD][advertinfo];
new ListItemTrackId[MAX_PLAYERS][40];
new NewbieTimer[MAX_PLAYERS];
new VIPTimer[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new JetPack[MAX_PLAYERS];
new PuedeD[MAX_PLAYERS];
new ShowRules[MAX_PLAYERS];
new RulesTime[MAX_PLAYERS];
new slotselection[MAX_PLAYERS];
new carsforplayer[MAX_PLAYERS];

//*******************Sistema de recoger y tirar arma*******************
new GunNames[48][] = {
    "nada",
    "un puño americano",
    "un palo de golf",
    "una porra policial",
    "una navaja",
    "un bate de baseball",
    "una pala",
    "un palo de pool",
    "una katana",
    "una motosierra",
    "un consolador violeta",
    "un consolador corto blanco",
    "un consolador largo blanco",
    "un consolador",
    "un ramo de flores",
    "un bastón",
    "una granada explosiva",
    "una granada de humo",
    "un cóctel molotov",
    "misil de hunter o hydra",
    "fuego de hydra",
    "un propulsor",
    "una pistola colt .45",
    "una pistola colt .45 con silenciador",
    "una pistola desert eagle",
    "una escopeta normal",
    "una escopeta recortada",
    "una escopeta de combate",
    "un micro subfusil uzi",
    "un subfusil mp5",
    "un rifle automático ak-47",
    "un rifle automático m4",
    "un micro subfusil tec9",
    "un rifle de caza",
    "un rifle de francotirador",
    "un lanzacohetes",
    "un lanzamisiles busca calor",
    "un lanzallamas",
    "una minigun",
    "una carga explosiva",
    "un detonador de carga explosiva",
    "un aerosol de gas pimienta",
    "un extintor de fuego",
    "una cámara fotográfica",
    "unas gafas de visión nocturna",
    "unas gafas de visión infrarroja",
    "un paracaídas",
    "pistola falsa"
};
new WeaponNames[47][] =
{
	"puño","brass knuckles","golf club","nitestick","knife","baseball bat","shovel","palo de billar","katana","chainsaw","purple dildo","small white vibrator","large white vibrator","plata vibrator",
	"bouquet of flowers","cane","grenade","tear gas grenade","molotov cocktail","jetpack"," "," ","Colt .45","silenced Colt .45","Desert Eagle","12-gauge shotgun","sawn-off shotgun","SPAS-12",
	"Micro Uzi","MP5","AK-47","M4A1","TEC-9","rifle","sniper rifle","rocket launcher","heatseeker","flamethrower","minigun","satchel charge","detonator","spray can","fire extinguisher",
	"camera","nightvision goggles", "thermal goggles","parachute"
};
new HasArmor			[MAX_PLAYERS];
new Float:ScriptArmor	[MAX_PLAYERS];
function SetHP(playerid, Float:hp)
{
    Info[playerid][pHealth] =hp;
    SetPlayerHealth(playerid, hp);
    return 1;
}

function Pagas_Facciones(playerid)
{
	//- Líderes
	switch(Info[playerid][pMember])
	{
		case 1: // LAPD
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $1.000{FFFFFF} por ser agente en práctica de la policía/sheriff.");
					Info[playerid][pAccount] += 1000;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $8.000{FFFFFF} por ser cadete de la policía/sheriff.");
					Info[playerid][pAccount] += 8000;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $11.000{FFFFFF} por ser oficial I de la policía/sheriff.");
					Info[playerid][pAccount] += 11000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $12.000{FFFFFF} por ser oficial II de la policía/sheriff.");
					Info[playerid][pAccount] += 12000;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $13.000{FFFFFF} por ser oficial III de la policía/sheriff.");
					Info[playerid][pAccount] += 13000;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $17.000{FFFFFF} por ser oficial III+1 de la policía/sheriff.");
					Info[playerid][pAccount] += 17000;
				}
				case 7:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $20.000{FFFFFF} por ser oficial mayor de la policía/sheriff.");
					Info[playerid][pAccount] += 20000;
				}
				case 8:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $22.500{FFFFFF} por ser detective I de la policía/sheriff.");
					Info[playerid][pAccount] += 22500;
				}
				case 9:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $24.000{FFFFFF} por ser detective II de la policía/sheriff.");
					Info[playerid][pAccount] += 24000;
				}
				case 10:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $30.000{FFFFFF} por ser sargento I de la policía/sheriff.");
					Info[playerid][pAccount] += 30000;
				}
				case 11:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $27.000{FFFFFF} por ser detective III de la policía/sheriff.");
					Info[playerid][pAccount] += 27000;
				}
				case 12:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $32.000{FFFFFF} por ser sargento II de la policía/sheriff.");
					Info[playerid][pAccount] += 32000;
				}
				case 13:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $35.750{FFFFFF} por ser teniente I de la policía/sheriff.");
					Info[playerid][pAccount] += 35750;
				}
				case 14:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $38.900{FFFFFF} por ser teniente II de la policía/sheriff.");
					Info[playerid][pAccount] += 38900;
				}
				case 15:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $40.000{FFFFFF} por ser capitán I de la policía/sheriff.");
					Info[playerid][pAccount] += 40000;
				}
				case 16:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $42.000{FFFFFF} por ser capitán II de la policía/sheriff.");
					Info[playerid][pAccount] += 42000;
				}
				case 17:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $44.000{FFFFFF} por ser capitán III de la policía/sheriff.");
					Info[playerid][pAccount] += 44000;
				}
				case 18:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $48.000{FFFFFF} por ser comandante de la policía/sheriff.");
					Info[playerid][pAccount] += 48000;
				}
				case 19:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $50.500{FFFFFF} por ser subjefe I de la policía/sheriff.");
					Info[playerid][pAccount] += 50500;
				}
				case 20:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $52.500{FFFFFF} por ser subjefe II de la policía/sheriff.");
					Info[playerid][pAccount] += 52500;
				}
				case 21:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $60.000{FFFFFF} por ser jefe de la policía/sheriff.");
					Info[playerid][pAccount] += 60000;
				}
			}
		}
		case 2: // AININT
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $10.000{FFFFFF} por ser Agente del AININT.");
					Info[playerid][pAccount] += 10000;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $15.000{FFFFFF} por ser Agente Especializado del AININT.");
					Info[playerid][pAccount] += 15000;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $18.000{FFFFFF} por ser Agente Táctico del AININT.");
					Info[playerid][pAccount] += 18000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $20.000{FFFFFF} por ser Espía del AININT.");
					Info[playerid][pAccount] += 20000;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $25.000{FFFFFF} por ser Sub-Director del AININT.");
					Info[playerid][pAccount] += 25000;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $30.000{FFFFFF} por ser Director del AININT.");
					Info[playerid][pAccount] += 30000;
				}
			}
		}
		case 3: // USMC
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $1.500{FFFFFF} por ser Private de la armada.");
					Info[playerid][pAccount] += 1500;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $1.700{FFFFFF} por ser Private First Class de la armada.");
					Info[playerid][pAccount] += 1700;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $2.000{FFFFFF} por ser Lance Corporal de la armada.");
					Info[playerid][pAccount] += 2000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $2.500{FFFFFF} por ser Corporal de la armada.");
					Info[playerid][pAccount] += 2500;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.000{FFFFFF} por ser Sergeant de la armada.");
					Info[playerid][pAccount] += 4000;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser Staff Sergeant de la armada.");
					Info[playerid][pAccount] += 4500;
				}
				case 7:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser Gunnery Sergeant de la armada.");
					Info[playerid][pAccount] += 4500;
				}
				case 8:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser Master Sergeant de la armada.");
					Info[playerid][pAccount] += 4500;
				}
				case 9:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser First Sergeant de la armada.");
					Info[playerid][pAccount] += 4500;
				}
				case 10:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser Master Gunnery Sergeant de la armada.");
					Info[playerid][pAccount] += 4500;
				}
				case 11:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser Sergeant Major de la armada.");
					Info[playerid][pAccount] += 4500;
				}
				case 12:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $7.000{FFFFFF} por ser Sergeant Major of the Marine Corps de la armada.");
					Info[playerid][pAccount] += 7000;
				}
				case 13:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $12.500{FFFFFF} por ser Warrant Officer de la armada.");
					Info[playerid][pAccount] += 12500;
				}
				case 14:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $12.500{FFFFFF} por ser Chief Warrant Officer 2 de la armada.");
					Info[playerid][pAccount] += 12500;
				}
				case 15:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $12.500{FFFFFF} por ser Chief Warrant Officer 3 de la armada.");
					Info[playerid][pAccount] += 12500;
				}
				case 16:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $13.500{FFFFFF} por ser Chief Warrant Officer 4 de la armada.");
					Info[playerid][pAccount] += 13500;
				}
				case 17:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $14.000{FFFFFF} por ser Chief Warrant Officer 5 de la armada.");
					Info[playerid][pAccount] += 14000;
				}
				case 18:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $25.000{FFFFFF} por ser Second Lieutenant de la armada.");
					Info[playerid][pAccount] += 25000;
				}
				case 19:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $27.500{FFFFFF} por ser First Lieutenant de la armada.");
					Info[playerid][pAccount] += 27500;
				}
				case 20:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $30.000{FFFFFF} por ser Captain de la armada.");
					Info[playerid][pAccount] += 30000;
				}
				case 21:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $32.000{FFFFFF} por ser Major de la armada.");
					Info[playerid][pAccount] += 32000;
				}
				case 22:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $38.000{FFFFFF} por ser Lieutenant Colonel de la armada.");
					Info[playerid][pAccount] += 38000;
				}
				case 23:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $42.000{FFFFFF} por ser Colonel de la armada.");
					Info[playerid][pAccount] += 42000;
				}
				case 24:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $47.850{FFFFFF} por ser Brigadier General de la armada.");
					Info[playerid][pAccount] += 47850;
				}
				case 25:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $50.000{FFFFFF} por ser Major General de la armada.");
					Info[playerid][pAccount] += 50000;
				}
				case 26:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $50.000{FFFFFF} por ser Lieutenant General de la armada.");
					Info[playerid][pAccount] += 50000;
				}
				case 27:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $65.000{FFFFFF} por ser General de la armada.");
					Info[playerid][pAccount] += 65000;
				}
			}
		}
		case 4: // LAMD
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $1.500{FFFFFF} por ser enfermero auxiliar del hospital.");
					Info[playerid][pAccount] += 1500;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $2.000{FFFFFF} por ser enfermero del hospital.");
					Info[playerid][pAccount] += 2000;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $3.000{FFFFFF} por ser médico interno del hospital.");
					Info[playerid][pAccount] += 3000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser residente R1 del hospital.");
					Info[playerid][pAccount] += 4500;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser residente R2 del hospital.");
					Info[playerid][pAccount] += 4500;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser residente R3 del hospital.");
					Info[playerid][pAccount] += 4500;
				}
				case 7:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.500{FFFFFF} por ser residente R4 del hospital.");
					Info[playerid][pAccount] += 4500;
				}
				case 8:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.300{FFFFFF} por ser jefe de residentes del hospital.");
					Info[playerid][pAccount] += 5300;
				}
				case 9:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $6.000{FFFFFF} por ser médico titular del hospital.");
					Info[playerid][pAccount] += 6000;
				}
				case 10:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $6.600{FFFFFF} por ser cirujano titular del hospital.");
					Info[playerid][pAccount] += 6600;
				}
				case 11:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $8.000{FFFFFF} por ser especialista del hospital.");
					Info[playerid][pAccount] += 8000;
				}
				case 12:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $8.750{FFFFFF} por ser cirujano especialista del hospital.");
					Info[playerid][pAccount] += 8750;
				}
				case 13:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $10.000{FFFFFF} por jefe de departamento ser  del hospital");
					Info[playerid][pAccount] += 10000;
				}
				case 14:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $11.500{FFFFFF} por jefe de cirugía ser  del hospital");
					Info[playerid][pAccount] += 11500;
				}
				case 15:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $14.500{FFFFFF} por ser adjunto del hospital");
					Info[playerid][pAccount] += 14500;
				}
				case 16:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $16.000{FFFFFF} por ser director del hospital");
					Info[playerid][pAccount] += 16000;
				}
			}
		}
		case 5: // FOX
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $8.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 8000;
				}
			}
		}
		case 6: // Gas Monkey
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $8.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 8000;
				}
			}
		}
		case 7: // Gobierno
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $12.000{FFFFFF} por ser staff del gobierno.");
					Info[playerid][pAccount] += 12000;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $12.000{FFFFFF} por ser secretario.");
					Info[playerid][pAccount] += 12000;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $20.000{FFFFFF} por ser alcalde.");
					Info[playerid][pAccount] += 20000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $34.000{FFFFFF} por ser ministro.");
					Info[playerid][pAccount] += 34000;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $42.000{FFFFFF} por ser vicepresidente.");
					Info[playerid][pAccount] += 42000;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $50.000{FFFFFF} por ser presidente.");
					Info[playerid][pAccount] += 50000;
				}
			}
		}
		case 20: // Bomberos
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $2.000{FFFFFF} por ser bombero ESO de la estación de bomberos.");
					Info[playerid][pAccount] += 2000;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $3.000{FFFFFF} por ser bachillerato de la estación de bomberos.");
					Info[playerid][pAccount] += 3000;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $4.000{FFFFFF} por ser sargento de la estación de bomberos.");
					Info[playerid][pAccount] += 4000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} por ser sargento mayor de la estación de bomberos.");
					Info[playerid][pAccount] += 5000;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $6.000{FFFFFF} por ser sub-director de la estación de bomberos.");
					Info[playerid][pAccount] += 6000;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $7.000{FFFFFF} por ser director de la estación de bomberos.");
					Info[playerid][pAccount] += 7000;
				}
			}
		}
		case 22: // Play Music Radio
		{
			switch(Info[playerid][pRank])
			{
				case 1:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 3:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 4:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $5.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 5000;
				}
				case 6:
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "+ $8.000{FFFFFF} de subsidio.");
					Info[playerid][pAccount] += 8000;
				}
			}
		}
	}
}

function RecogerItem(playerid)
{
SetPlayerCheckpoint(playerid, 2376.2676,-1888.2104,13.5000, 3.0);
return 1;
}

function RecogerItem2(playerid)
{
SetPlayerCheckpoint(playerid, 2262.8792,-1663.0928,13.2382, 3.0);
return 1;
}

function RecogerItem3(playerid)
{
SetPlayerCheckpoint(playerid, 2245.0291,-1665.0726,13.4766, 3.0);
return 1;
}

function RecogerItem4(playerid)
{
SetPlayerCheckpoint(playerid, 2085.4810,-1795.1569,13.4668, 3.0);
return 1;
}

function RecogerItem5(playerid)
{
SetPlayerCheckpoint(playerid, 2103.8171,-1806.8013,13.5547, 3.0);
return 1;
}

function RecogerItem6(playerid)
{
SetPlayerCheckpoint(playerid, 1951.2883,-1786.8141,13.4682, 3.0);
return 1;
}

function RecogerItem7(playerid)
{
SetPlayerCheckpoint(playerid, 1931.0723,-1776.5352,13.5469, 3.0);
return 1;
}
function RecogerItem8(playerid)
{
SetPlayerCheckpoint(playerid, 1835.3311,-1869.4673,13.3828, 3.0);
return 1;
}
function RecogerItem9(playerid)
{
SetPlayerCheckpoint(playerid, 1832.7766,-1842.4673,13.5781, 3.0);
return 1;
}
function RecogerItem10(playerid)
{
SetPlayerCheckpoint(playerid, 1376.9827,-1838.2129,13.6553, 3.0);
return 1;
}
function RecogerItem11(playerid)
{
SetPlayerCheckpoint(playerid, 1362.3383,-1795.5511,13.7141, 3.0);
return 1;
}
function RecogerItem12(playerid)
{
SetPlayerCheckpoint(playerid, 1448.1895,-1151.3889,24.1081, 3.0);
return 1;
}
function RecogerItem13(playerid)
{
SetPlayerCheckpoint(playerid, 1456.5751,-1138.3091,23.9748, 3.0);
return 1;
}
function RecogerItem14(playerid)
{
SetPlayerCheckpoint(playerid, 2096.3450,-1216.3312,23.8047, 3.0);
return 1;
}
function RecogerItem15(playerid)
{
SetPlayerCheckpoint(playerid, 2113.0313,-1211.9625,23.9636, 3.0);
return 1;
}
function RecogerItem16(playerid)
{
SetPlayerCheckpoint(playerid, 1826.5663,-1681.9127,13.5455, 3.0);
return 1;
}
function RecogerItem17(playerid)
{
SetPlayerCheckpoint(playerid, 1835.3750,-1683.0509,13.3924, 3.0);
return 1;
}
function RecogerItem18(playerid)
{
SetPlayerCheckpoint(playerid, 2423.8936,-2091.2354,13.5469, 3.0);
return 1;
}

function A_Info(string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (Info[i][pAdminZC] >= 1)
			{
				SendClientMessage(i, 0xFF9562FF, string);
			}
		}
	}
	return 1;
}

function GiveArmorToPlayer(playerid, Float:armour)
{
	SetPlayerArmour(playerid, Float:armour);
	HasArmor[playerid] = 1;
	ScriptArmor[playerid] = armour;
	return 1;
}
timer Anticheat[1000]()
{
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i)){
	        new Float:health, Float:armor;
	        GetPlayerHealth(i, health);
   			if(health > Info[i][pHealth]){
			    SetPlayerHealth(i, Info[i][pHealth]);
	  		}
	        GetPlayerArmour(i, armor);
	  		if(armor > ScriptArmor[i]){
				GiveArmorToPlayer(i, ScriptArmor[i]);
			}
		}
	}
 return 1;
}

function RecargarBalas(playerid, weap)
{
	new balas = GetPlayerAmmo(playerid);
	GivePlayerWeapon(playerid, weap, -balas);
	GivePlayerWeapon(playerid, weap,  balas);
	return 1;
}
#define SetPlayerArmour GiveArmorToPlayer

//*******************Variables*******************
//***********Sistema de Música***********
new NombreCancion[MAX_PLAYERS];
new gMusic[MAX_PLAYERS];
//*******************Trucker Job*******************
new Bar:LoadTruckBar[MAX_PLAYERS] = INVALID_BAR_ID;
new LoadTruckTime[MAX_PLAYERS];
new TruckDeliver[MAX_PLAYERS];
new TruckUsed[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new TruckContents[MAX_VEHICLES] = 0;
new gPlayerCheckpointStatus[MAX_PLAYERS];
new InsideMainMenu[MAX_PLAYERS];
new HelpingNewbie[MAX_PLAYERS];
new Advisors = 0;
new AdvisorCall = 999;
//*******************
new InviteOffer[MAX_PLAYERS];
new InviteFaction[MAX_PLAYERS];
new InviteFamily[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
//*******************Vender Veh*******************
new VehicleOffer[MAX_PLAYERS];
new VehicleId[MAX_PLAYERS];
new VehiclePrice[MAX_PLAYERS];
//*******************Vender Casa*******************
new HouseOffer[MAX_PLAYERS];
new House[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];
//*******************Vender ARMA*******************
new GunOffer[MAX_PLAYERS];
new GunId[MAX_PLAYERS];
new GunMats[MAX_PLAYERS];
new Text3D:Camera3D[MAX_PLAYERS];
//*******************EMS*******************
new EMSCallTime[MAX_PLAYERS];
new EMSAccepted[MAX_PLAYERS];
//*******************TextDraw*******************
new Text:PLACAPD, Text:PLACAMD, Text:PLACABOM, Text:PLACAEM, Text:PLACAAININT;
new Text:TEXTPLACAA, Text:TEXTPLACAB, Text:TEXTPLACAC;
new Text:LoginMenu[9], Text:AyudaT[15];
new Text:XCierreA;
new Text:AyudaTexdrawS;
new Text:PFAVig_1, Text:PFAVig_2, Text:PFAVig_3, Text:PFAVig_4;
//*******************ADO[KK]1NG*******************
new Text:king0;
new Text:king1;
new Text:king2;
//*******************TUTORIAL*******************
new Text:TutorialTxd[5];
new Text:TextTut[MAX_PLAYERS];
new TutStep[MAX_PLAYERS];
new TutError[MAX_PLAYERS];
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
//*******************Cuenta*******************
new
Text:cargando,
Text:looking,
Text:streamer,
Text:box;
//*******************LAPD int*******************
new courtjail[MAX_PLAYERS];
new courtbuttons[5], courtgates[2];
new fen1,fen2,fen3,fen4,fen5,fen6, JDoor1, JDoor2, JDoor3, JDoor4, JDoor5, JDoor6;
//new JDoor1, JDoor2, fen1,fen2;
new eastlobby1, eastlobby2, westlobby1, westlobby2, cctv1, cctv2, locker1, locker2, chief1, chief2;
new eastin, eastout, lockerin, lockerout, cctvin, cctvout, elevator, roofkey, garagekey, chiefout, chiefin, westin, westout;
//*******************CIA Int*******************
new cia1, cia2, buttompna, buttompna2, rejacia;
//*******************LAPD Portones*******************
new pdgate1, usmc1,usmc2;
//*******************ipod*******************
new Ipadon[MAX_PLAYERS];
// Cámaras de Seguridad y Drones
new SistemaCam[MAX_PLAYERS];
new DronesCam[MAX_PLAYERS];
// Autorización del uso /B
new C_OOC[MAX_PLAYERS];
// Contratos
new ContratoFac[MAX_PLAYERS];
// Sistema de Estado
new EstadoPJ[MAX_PLAYERS];
//*******************GIFTS*******************
new dynamicgift;
new Text3D:dynamicgift3DText;
//-------> Botones y Puertas - AININT HQ NUEVA
new AININTDoor1, AININTDoor2, AININTDoor3, AININTDoor4, AININTDoor5;
new AININTDoor1BTN, AININTDoor2BTN, AININTDoor3BTN, AININTDoor4BTN, AININTDoor5BTN;
//*******************CNN Portones*******************
new tvp, tvp1;
//*******************S.J Porton*******************
new sisporton;
//*******************portones Mafia Rusa*******************
new portoru;
//*******************Gobierno Portones*******************
new gobiernogate, gobiernogate1;
//****************Celdas***************************
new celdagate1;
new celdagate2;
new celdagate3;
new celdagate4;
//**************Elevadores**************
new elevadorns;
// Concesionaria Grotti
new elevadorcg;
//**************Portones**************
new porton_ns1, porton_ns2;
new porton_ss1;
new porton_sf1, porton_sf2;
//****************************Hospital Portones****************************
new hospitalgate;
//****************************Rusa Portones****************************
new RejaRusa;
//****************************Yakuza Porton****************************
new yakuzagate;
//****************************Santana Rejas****************************
new SantanaReja;
//****************************alqaeda Rejas****************************
new AlqaedaReja;
//****************************VIP PORTON****************************
new rejavip;
//****************************Mecanicos Rejas****************************
new mecareja;
//****************************Reja LCN****************************
new rejalcn;
new rejalcn2;
//****************************Rejas Peaje****************************
new PeajeLA_SF1, PeajeLA_SF2, PeajeLA_LV1, PeajeLA_LV2;
//*******************Autos De Facciones*******************
new LAPDVehicles[60];
new LAMDVehicles[10];
new MecanicosVehicle[8];
new AININTVehicle[20];
new USMCLandVehicles[52];
new FOXVehicle[4];
new GobiernoCar[20];
new Hitman_Vehicle[15];
new CBP_Vehicle[18];
new BMC_Vehicle[10];
new Broadway_Vehicle[8];
new Longos_Vehicle[30];
new Rusa_Vehicle[8];
new LCN_Vehicle[15];
new Yakuza_Vehicle[13];
new CIAVehicles[1];
new Santana_Vehicle[12];
new Alqaeda_Vehicle[9];
new BomberosBAVeh[10];
new MotorVehicle [10];
new PlayMusicVehicle [10];
new AutosJudicial[8];
//*******************Autos de Jobs*******************
new PizzaBike[6];
new TruckerVehicles[13];
new TaxiTrans[8];
new TBuses[8];
new CochesHeladero[15];
new TrenVEH[20];
new C_Basurero[6];
new CamionerosPC[4];
//**************Autos de Conces***************
new AutosConces [1];
//*******************OTROS*******************
new VortexVehicle[9];
new RentaVehicle[25];
new CarVIP[12];
//*******************Sistema "Rent Bike"*******************
new RentTime[MAX_PLAYERS];
new IsaRent[MAX_PLAYERS];
new HireKey[MAX_PLAYERS];
//*******************
new Carnada[MAX_PLAYERS];
new Lineas[MAX_PLAYERS];
new CreatedCars[100];
new Barricade[MAX_BARRICADES];
//*******************Mats Seller*******************
new MatsOffer[MAX_PLAYERS];
new MatsPrice[MAX_PLAYERS];
new MatsAmount[MAX_PLAYERS];
new GGOffer[MAX_PLAYERS];
new GGPrice[MAX_PLAYERS];
new VIPOffer[MAX_PLAYERS];
new VIPPrice[MAX_PLAYERS];
new GGAmount[MAX_PLAYERS];
new FOffer[MAX_PLAYERS];
new FPrice[MAX_PLAYERS];
new FAmount[MAX_PLAYERS];
//*******************matrimonio*******************
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
//*******************
new JobDuty             [MAX_PLAYERS];
new PuedeP[MAX_PLAYERS];
//*******************Petition*******************
new Petition_ID[MAX_PLAYERS];
new NumBuy[MAX_PLAYERS], NumSeller[MAX_PLAYERS], NumPrice[MAX_PLAYERS];
new See_MP[MAX_PLAYERS];
new SubsiLeft = 60;
new SubsiOn = 0;
new CraftOffer[MAX_PLAYERS], CraftId[MAX_PLAYERS], CraftMats[MAX_PLAYERS], CraftName[MAX_PLAYERS][50];
new Blinded[MAX_PLAYERS], Tied[MAX_PLAYERS];
new Rope[MAX_PLAYERS];
new AdminChat[MAX_PLAYERS];
new advisorchat[MAX_PLAYERS];
new DrugFarming[MAX_PLAYERS];
new nod = 0;
new Editing[MAX_PLAYERS];
//*******************Hitman*******************
new HitOffer[MAX_PLAYERS];
new HitToGet[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
//*******************Security comands spam*******************
new CommandSpamTimes[MAX_PLAYERS];
new CommandSpamUnmute[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new WhoFind[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new RequestingBackup[MAX_PLAYERS];
new ReqF_Faction[MAX_PLAYERS];
new ReqF_Name[MAX_PLAYERS][32];
new Seatbelt[MAX_PLAYERS];
new FreezeLast[MAX_PLAYERS];
new Misile_Launcher;
new PuertaH1;
new PuertaH2;
new HaciaArriba = 0;
new HaciaAbajo = 0;
new TotalDM, TotalTDM, PlayersRed, PlayersBlue, TotalDM2, TRedKills, TBlueKills;
new Ganzuas[MAX_PLAYERS];
new Interview = 0;
new Interviewer[32] = "Nadie";
new Tax = 0;
new nonewbie = 0;
new Tv = 1;
new TaxValue = 0;
new Jackpot = 0;
new Blood = 1000;
new Fuel = 200;
new Mechanics = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new InLive = 0;
new Medics = 0;
new MedicCall = 999;
new MedicCallTime[MAX_PLAYERS];
new MedicAccepted[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCall = 999;
new TaxiCallTime[MAX_PLAYERS];
new AntiAbuso[MAX_PLAYERS]; //Anti-Abusos
new TaxiAccepted[MAX_PLAYERS];
new TreneroDuty[MAX_PLAYERS];
new Bus_Route1[MAX_PLAYERS];
new Bus_Route2[MAX_PLAYERS];
new CEntregas_01[MAX_PLAYERS];
new CEntregas_02[MAX_PLAYERS];
new CEntregas_03[MAX_PLAYERS];
new CEntregas_04[MAX_PLAYERS];
new BasureroR[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new Tren_Route[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new RStep[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new Paquetes[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new Situacion[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new TazerTimeout[MAX_PLAYERS];
new pTazer[MAX_PLAYERS];
new pTazerReplace[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS char];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
new gNewbie[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new GettingSpectated[MAX_PLAYERS];
new Spectating[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new noac = 0;
new nofac = 0;
new iAdverTimer;
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new realtime = 1;
new wtime = 16;
new callcost = 2; //20 seconds
new timeshift = -1;
new shifthour;
new gTime;
new gWeather;
new WeatherCalling;
new explevel = 4;
new cchargetime = 30;
new txtcost = 1;
new Text:TiempoD, Text:FechaD;
forward Clock(playerid);
//*********Velocidad*********
new Speedlimit[MAX_PLAYERS];
//*********Arrastrar*********
new Drag[MAX_PLAYERS];
new Dragged[MAX_PLAYERS];
//*******************
new pCurrentWeapon[MAX_PLAYERS];
new KnockedDown[MAX_PLAYERS];
new UnidentifedCall[MAX_PLAYERS];
new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
new PlayerIsSweeping[MAX_PLAYERS];
//***sistema muebles***
new ObjetoUsar[MAX_PLAYERS];
new IDObjetoUsar[MAX_PLAYERS];
new ObjetoUsarEnCasa[MAX_PLAYERS];
new Objeto_Por_Jugador[MAX_PLAYERS];
new MueblesObj = mS_INVALID_LISTID;
//*******************Drugs System*******************
new CrackOffer[MAX_PLAYERS];
new CrackPrice[MAX_PLAYERS];
new CrackGram[MAX_PLAYERS];
new PotOffer[MAX_PLAYERS];
new PotPrice[MAX_PLAYERS];
new PotGram[MAX_PLAYERS];
//*******************Sell spray*******************
new SprayOffer[MAX_PLAYERS];
new SprayPrice[MAX_PLAYERS];
new SprayGram[MAX_PLAYERS];
//*******************
new UsedWeed[MAX_PLAYERS];
new UsedCrack[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
//*******************Bartender Var*******************
new DrinkOffer[MAX_PLAYERS];
//*******************Rob Sys.*******************
new TelfRob[MAX_PLAYERS];
//*******************
//******* Estado /estado **********
new Text3D:estado[MAX_PLAYERS];
//********************************
new VehicleWindows[MAX_VEHICLES] = 0;
new AdminDuty[MAX_PLAYERS];
new pdtrace = 0;
new Float:pdtrace_x;
new Float:pdtrace_y;
new Float:pdtrace_z;
new emdtrace = 0;
new Float:emdtrace_x;
new Float:emdtrace_y;
new Float:emdtrace_z;
new PlayerNeedsHelp[MAX_PLAYERS];
new PlayerDuda[MAX_PLAYERS];
new IsSmoking[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new RegText[MAX_PLAYERS];
new RegConfig[MAX_PLAYERS];
new RadioOn[MAX_PLAYERS];
new gRadio[MAX_PLAYERS];
new NOPTrigger[MAX_PLAYERS];


//*******************Factura*******************
new Facturing[MAX_PLAYERS];
new fPay[MAX_PLAYERS];
new fDest[MAX_PLAYERS];
new fFacturer[MAX_PLAYERS];

new Refueling[MAX_PLAYERS];

stock HorseInfo(Text:horseid)
{
	TextDrawFont(horseid, 4);
	TextDrawColor(horseid,0xFFFFFFFF);
	TextDrawTextSize(horseid,64,64);
}
stock HorseNumInfo(Text:horsenumid)
{
	TextDrawFont(horsenumid, 4);
	TextDrawColor(horsenumid,0xFFFFFFFF);
	TextDrawTextSize(horsenumid,32,32);
}
stock Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock Candado(vehicleid,Float:x,Float:y,Float:z)
{
    VehiculoConCepo[vehicleid] = CreateObject(2422, x,y,z,   0.00000, 0.00000, 0.00000);
    SetObjectMaterialText(VehiculoConCepo[vehicleid], "   PD", 0, 140, "Arial", 100, 1, -65536, -2987776, 1);
    SetObjectMaterialText(VehiculoConCepo[vehicleid], ".", 1, 140, "Arial", 100, 1, -65536, -2987776, 1);
    SetObjectMaterialText(VehiculoConCepo[vehicleid], ".", 2, 140, "Arial", 100, 1, -65536, -2987776, 1);
    return 1;
}

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}


Float: player_get_speed(playerid) {

	new
		Float: Floats[3];

	GetVehicleVelocity(GetPlayerVehicleID(playerid), Floats[0], Floats[1], Floats[2]);
	return floatsqroot(Floats[0] * Floats[0] + Floats[1] * Floats[1] + Floats[2] * Floats[2]) * 150;
}
stock GetPlayerID(const playername[], partofname=0)
{
   new i;
   new playername1[64];
   for (i=0;i<MAX_PLAYERS;i++)
   {
      if (IsPlayerConnected(i))
      {
         GetPlayerName(i,playername1,sizeof(playername1));
         if (strcmp(playername1,playername,true)==0)
         {
            return i;
         }
      }
   }
   new correctsigns_userid=-1;
   new tmpuname[128];
   new hasmultiple=-1;
   if(partofname)
   {
      for (i=0;i<MAX_PLAYERS;i++)
      {
         if (IsPlayerConnected(i))
         {
            GetPlayerName(i,tmpuname,sizeof(tmpuname));

            if(!strfind(tmpuname,playername1[partofname],true, 0))
            {
               hasmultiple++;
               correctsigns_userid=i;
            }
            if (hasmultiple>0)
            {
               return -2;
            }
         }
      }
   }
   return correctsigns_userid;
}

Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
	new Float:d;
	d += floatpower(x1-x2, 2.0 );
	d += floatpower(y1-y2, 2.0 );
	d += floatpower(z1-z2, 2.0 );
	d = floatsqroot(d);
	return d;
}

stock ShowEditMenu(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, slotselection[playerid]))
	{
 		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
	}
	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
	PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);

    new stringg[512];
    format(stringg, sizeof(stringg), "%sParte (%s)\n", stringg, HoldingBones[PlayerToyInfo[playerid][slotselection[playerid]][ptBone]]);
	format(stringg, sizeof(stringg), "%sOffset X (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosX]*100));
	format(stringg, sizeof(stringg), "%sOffset Y (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosY]*100));
	format(stringg, sizeof(stringg), "%sOffset Z (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ]*100));
	format(stringg, sizeof(stringg), "%sRotación X (%f)\n", stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotX]);
	format(stringg, sizeof(stringg), "%sRotación Y (%f)\n", stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotY]);
	format(stringg, sizeof(stringg), "%sRotación Z (%f)\n" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ]);
    format(stringg, sizeof(stringg), "%sTamaño X (%f)\n" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX]);
    format(stringg, sizeof(stringg), "%sTamaño Y (%f)\n" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY]);
    format(stringg, sizeof(stringg), "%sTamaño Z (%f)\n" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);
	format(stringg, sizeof(stringg), "%s{FF0000}Editor Personalizado", stringg);
	SafeDialogEx(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "{CC0066}Sección: {FFFFFF}Editor de Toy", stringg, "Seleccionar", "Cancelar");
}

new duda[MAX_PLAYERS];
new NewUsed[MAX_PLAYERS];

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new SpikeStrips[10][Spikes];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};


new Float:gDrugFarmVar[36][3] = {
{-185.3228,-1317.1489,7.1035},
{-246.2611,-1325.3730,9.2741},
{-303.1622,-1331.1433,8.3333},
{-309.2864,-1360.5656,8.9590},
{-257.7550,-1359.5704,9.0483},
{-196.6190,-1365.5883,5.0239},
{-172.1196,-1396.5133,3.4446},
{-220.4347,-1411.7063,6.0334},
{-263.0047,-1408.4238,10.0635},
{-313.4148,-1414.5681,14.1628},
{-390.4383,-1384.0735,23.3209},
{-446.1223,-1386.8136,24.5732},
{-501.2999,-1399.7622,17.2126},
{-544.2471,-1417.4092,12.9750},
{-567.7300,-1402.1232,14.1216},
{-525.0230,-1373.6072,15.7744},
{-467.6557,-1357.2484,27.7073},
{-401.6945,-1344.8910,25.1707},
{-362.7484,-1325.6840,22.8734},
{-393.6260,-1308.3167,28.4393},
{-435.1279,-1310.3947,33.6799},
{-509.7585,-1320.6877,24.8110},
{-575.2841,-1315.8783,22.2980},
{-577.9167,-1291.7388,22.7439},
{-519.3121,-1296.5244,24.4281},
{-423.2869,-1295.4117,32.1762},
{-362.5505,-1276.5599,29.1589},
{-327.4338,-1482.3693,14.0189},
{-324.4474,-1512.9646,13.5750},
{-324.0075,-1541.0874,14.0058},
{-291.2176,-1549.8875,8.0946},
{-282.1975,-1526.1547,6.4469},
{-277.8730,-1486.5804,5.3489},
{-240.1097,-1480.2266,5.3911},
{-221.2401,-1498.2483,8.4973},
{-236.0034,-1539.2045,6.3595}
};

new Float:OOCJail[4][3] = {
{-11338.48535,9282.86035,2.51994},
{-11338.48535,9282.86035,2.51994},
{-11338.48535,9282.86035,2.51994},
{-11338.48535,9282.86035,2.51994}
};

new Float:ICPrisonSpawns[4][3] = {
{181.6174,1953.3961,3867.2429},
{190.7607,1951.7330,3867.2358},
{199.2319,1951.4128,3867.2358},
{173.4761,1951.0363,3867.2429}
};

new Float:WarrantJail[3][3] = {
{2136.1924,1297.5011,7699.0610},
{2136.0273,1310.5793,7699.0547},
{2131.5989,1309.8353,7699.0547}
};

new Float:PrisonDillmore[2][3] = {
{318.8560,313.0484,999.1484},
{318.7299,317.0638,999.1484}
};

new Float:PFAPrisonSpawns[6][3] = {
{1415.2723,-1548.9581,4340.1563},
{1422.5714,-1548.8588,4340.1563},
{1429.5242,-1549.0853,4340.1563},
{1428.2515,-1571.7660,4340.1563},
{1422.7365,-1570.9240,4340.1563},
{1414.3912,-1571.0795,4340.1563}
};
//*******************Vehicle Names*******************

new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

new VehicleName[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","Rancher Federal","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","Camioneta Blindada",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","Camioneta de Hot Dog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Patrulla (Los Angeles)","Patrulla (San Francisco)",
	"Patrulla (LV)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

stock GetVehicleFriendlyName(vehicleid)
{
	new GVFNstring[56];
	format(GVFNstring, sizeof(GVFNstring), VehicleName[GetVehicleModel(vehicleid)-400]);
	return GVFNstring;
}

forward KickxD(playerid);

new Peds[217][1] = {
{299},
{288},
{286},{287},{228},{113},{120},{147},{294},{227},{61},{171},
{247},
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},
{291},
{292},
{293},
{187},
{296},
{297},
{298},
{299}
};

function LoadUser_data(playerid,name[],value[])
{
    INI_Int("TarjetaCredito",Info[playerid][pTarjetaCredito]);
    INI_Int("Level",Info[playerid][pLevel]);
    INI_Int("AdminNivelZC",Info[playerid][pAdminZC]);
    INI_Int("AdminZC",Info[playerid][pLvlAdminZC]);
    INI_Int("BanAppealer",Info[playerid][pBanAppealer]);
    INI_Int("FactionModerator",Info[playerid][pFactionModerator]);
    INI_Int("ModStaff",Info[playerid][pModStaff]);
    INI_Int("GangModerator",Info[playerid][pGangModerator]);
    INI_Int("Helper",Info[playerid][pHelper]);
    INI_Int("ConnectedTime",Info[playerid][pConnectTime]);
    INI_Int("Registered",Info[playerid][pReg]);
    INI_Int("IntTest",Info[playerid][pInTest]);
    INI_Int("Stats",Info[playerid][pStats_U]);
    INI_Int("Sex",Info[playerid][pSex]);
    INI_Int("Age",Info[playerid][pAge]);
    INI_Int("Origin",Info[playerid][pOrigin]);
    INI_Int("Respect",Info[playerid][pExp]);
    INI_Int("Suciedad",Info[playerid][pSuci]);
    INI_Int("CEmergencias",Info[playerid][pCRet]);
    INI_Int("Money",Info[playerid][pCash]);
	SetPVarInt(playerid,"Cash",Info[playerid][pCash]);
    INI_Int("Bank",Info[playerid][pAccount]);
    INI_String("IP", Info[playerid][pIP], 32);
    INI_Int("Kills",Info[playerid][pKills]);
    INI_Int("Deaths",Info[playerid][pDeaths]);
    INI_Int("BGomas",Info[playerid][pBGomas]);
    INI_Int("Arrested",Info[playerid][pArrested]);
    INI_Int("Alcohol",Info[playerid][pAlcohol]);
    INI_Int("JailAdmin",Info[playerid][pJailAdmin]);
    INI_Int("LottoNr",Info[playerid][pLottoNr]);
    INI_Int("Negocio",Info[playerid][pPbizzkey]);
    INI_Int("Skinn",Info[playerid][pgskin]);
    INI_Int("robita",Info[playerid][probita]);
    INI_String("DNIName",Info[playerid][pDNIName], 32);
    INI_Int("DNIFalse",Info[playerid][pDNIFalse]);
    INI_Int("Job",Info[playerid][pJob]);
    INI_Int("NewMuted",Info[playerid][pNMute]);
    INI_Int("NewMutedTotal",Info[playerid][pNMuteTotal]);
    INI_Int("Warn",Info[playerid][pWarn]);
    INI_Int("WRestricted",Info[playerid][pWRestricted]);
    INI_Int("Jailed",Info[playerid][pJailed]);
    INI_Int("JailTime",Info[playerid][pJailTime]);
    INI_Int("Materials",Info[playerid][pMats]);
    INI_Int("Packages",Info[playerid][pPackages]);
    SetPVarInt(playerid,"Packages",Info[playerid][pPackages]);
    INI_Int("Drugs",Info[playerid][pDrugs]);
    INI_Int("Cosecha",Info[playerid][pCosecha]);
    INI_Int("Crack",Info[playerid][pCrack]);
    INI_Int("Pot",Info[playerid][pPot]);
    INI_Int("Crates",Info[playerid][pCrates]);
    INI_Int("Adic",Info[playerid][pAdiccion]);
    INI_Int("Leader",Info[playerid][pLeader]);
    INI_Int("Member",Info[playerid][pMember]);
    INI_Int("FMember",Info[playerid][pFMember]);
    INI_Int("Division",Info[playerid][pDivision]);
    INI_Int("Rank",Info[playerid][pRank]);
    INI_Int("Char",Info[playerid][pChar]);
    INI_Float("pHealth",Info[playerid][pHealth]);
    INI_Float("pArmour",Info[playerid][pArmour]);
    INI_Int("Team",Info[playerid][pTeam]);
    INI_Int("Model",Info[playerid][pModel]);
    INI_Int("PhoneNr",Info[playerid][pPnumber]);
    INI_Int("Sprunk",Info[playerid][pSprunk]);
    INI_Int("Phonebook",Info[playerid][pPhoneBook]);
    INI_Int("House",Info[playerid][pPhousekey]);
    INI_Int("House2",Info[playerid][pPhousekey2]);
    INI_Int("Int", Info[playerid][pInt]);
    INI_Float("Pos_x",Info[playerid][pPos_x]);
    INI_Float("Pos_y",Info[playerid][pPos_y]);
    INI_Float("Pos_z",Info[playerid][pPos_z]);
    INI_Float("SPos_r",Info[playerid][pPos_r]);
    INI_Int("CarLic",Info[playerid][pCarLic]);
    INI_Int("FlyLic",Info[playerid][pFlyLic]);
    INI_Int("BoatLic",Info[playerid][pBoatLic]);
    INI_Int("GunLic",Info[playerid][pGunLic]);
    INI_Int("Gafas",Info[playerid][pGafas]);
    INI_Int("Tutorial",Info[playerid][pTut]);
    INI_Int("Test",Info[playerid][pTestTut]);
    INI_Int("VWorld",Info[playerid][pVW]);
    INI_Int("Lighter",Info[playerid][pLighter]);
    INI_Int("Cigarettes",Info[playerid][pCigarettes]);
    INI_Int("BanZC",Info[playerid][pBannedZC]);
    INI_Int("DisabledZC",Info[playerid][pDisabledZC]);
    INI_Int("BlockBug",Info[playerid][pBlockBug]);
    INI_Int("DNI",Info[playerid][pDNI]);
    INI_Int("VSkill",Info[playerid][pArmsSkill]);
    INI_Int("TSkill",Info[playerid][pTruckSkill]);
    INI_Int("SmugglerSkill",Info[playerid][pSmugSkill]);
    INI_Int("DrugsSkill",Info[playerid][pDrugsSkill]);
    INI_Int("SIDA",Info[playerid][pSIDA]);
    INI_Int("Cancer" ,Info[playerid][pCancer]);
    INI_Int("Epilepsia",Info[playerid][pEpilepsia]);
    INI_Int("Alcohol",Info[playerid][pAlcohol]);
    INI_Int("Dengue",Info[playerid][pDengue]);
    INI_Int("CertificadoMD",Info[playerid][pCertificadoMD]);
    INI_Int("FStyle",Info[playerid][pFStyle]);
    INI_Int("Busqueda",Info[playerid][pWantedLevel]);
    INI_Int("AntiSIDA",Info[playerid][pAntiSIDA]);
    INI_Int("AntiCancer",Info[playerid][pAntiCancer]);
    INI_Int("AntiEpilepsia",Info[playerid][pAntiEpilepsia]);
    INI_Int("Rent",Info[playerid][pRenting]);
    INI_Int("prMoney",Info[playerid][p_Pr_Money]);
    INI_Int("Rob",Info[playerid][pRob]);
    INI_Int("Premium",Info[playerid][pVIP]);
    INI_Int("FichasCash",Info[playerid][pPTR]);
    INI_Int("CarPremium",Info[playerid][pCarKey2]);
    INI_Int("BanDuda",Info[playerid][pBanDuda]);
    INI_Int("ReportMuted",Info[playerid][pRMuted]);
    INI_Int("ReportMutedTotal",Info[playerid][pRMutedTotal]);
    INI_Int("ReportMutedTime",Info[playerid][pRMutedTime]);
    INI_Int("Pasaporte",Info[playerid][pPasaporte]);
    INI_Int("RadioP", Info[playerid][pRadio]);
    INI_Int("KHZ",Info[playerid][pRadioFreq]);
    INI_Int("Ipad",Info[playerid][pIpadMusic]);
    INI_Int("GiftTime",Info[playerid][pGiftTime]);
    INI_Int("Boombox", Info[playerid][pBoombox]);
    for( new m = 0; m < 13; m++ )
	{
	    new mStr[24];
		format( mStr, sizeof( mStr ), "Gun%d", m);
		INI_Int(mStr, Info[playerid][pWeapons][m]);
	}
    INI_Int("Acento",Info[playerid][pAccent]);
    INI_Int("Ingles",Info[playerid][pIngles]);
    INI_Int("Aleman",Info[playerid][pAleman]);
    INI_Int("Ruso",Info[playerid][pRuso]);
    INI_Int("Japones",Info[playerid][pJapones]);
    INI_Int("Italiano",Info[playerid][pItaliano]);
    INI_Int("Arabe",Info[playerid][pArabe]);
    INI_Int("Britanico",Info[playerid][pItaliano]);
    INI_Int("Chino",Info[playerid][pItaliano]);
    INI_Int("Koreano",Info[playerid][pItaliano]);
    INI_Int("Frances",Info[playerid][pItaliano]);
    INI_Int("Israeli",Info[playerid][pItaliano]);
    INI_Int("InglesSkill",Info[playerid][pInglesSkill]);
    INI_Int("AlemanSkill",Info[playerid][pAlemanSkill]);
    INI_Int("RusoSkill",Info[playerid][pRusoSkill]);
    INI_Int("JaponesSkill",Info[playerid][pJaponesSkill]);
    INI_Int("ItalianoSkill",Info[playerid][pItalianoSkill]);
    INI_Int("ArabeSkill",Info[playerid][pArabeSkill]);
    INI_Int("BritanicoSkill",Info[playerid][pItaliano]);
    INI_Int("ChinoSkill",Info[playerid][pItaliano]);
    INI_Int("KoreanoSkill",Info[playerid][pItaliano]);
    INI_Int("FrancesSkill",Info[playerid][pItaliano]);
    INI_Int("IsraeliSkill",Info[playerid][pItaliano]);
    INI_Int("PTokens",Info[playerid][pPaintTokens]);
    INI_Int("Undercover",Info[playerid][pUndercover]);
    INI_Int("Head",Info[playerid][pHead]);
    INI_Int("TaxiLicense", Info[playerid][pTaxiLicense]);
    INI_Int("Hospital",Info[playerid][pHospital]);
    INI_Int("CHits",Info[playerid][pCHits]);
    INI_Int("FHits",Info[playerid][pFHits]);
    INI_Int("Spraycan",Info[playerid][pSpraycan]);
    INI_Int("Married",Info[playerid][pMarried]);
    INI_String("MarriedTo",Info[playerid][pMarriedTo], MAX_PLAYER_NAME);
    INI_String("ContractBy",Info[playerid][pContractBy], MAX_PLAYER_NAME);
    INI_String("ContractDetail",Info[playerid][pContractDetail], 64);
    INI_Int("pWExists",Info[playerid][pWExists]);
    INI_Float("pWX",Info[playerid][pWX]);
    INI_Float("pWY",Info[playerid][pWY]);
    INI_Float("pWZ",Info[playerid][pWZ]);
    INI_Int("pWVW",Info[playerid][pWVW]);
    INI_Int("pWInt",Info[playerid][pWInt]);
    INI_Int("pWValue",Info[playerid][pWValue]);
    INI_Int("pWSeeds",Info[playerid][pWSeeds]);
    INI_Int("PayEx",Info[playerid][YaCobre]);
    INI_Int("AdMuted",Info[playerid][pADMute]);
    INI_Int("AdMutedTotal",Info[playerid][pADMuteTotal]);
    INI_String("Warrants",Info[playerid][pWarrant], 128);
    INI_Int("JudgeJailTime",Info[playerid][pJudgeJailTime]);
    INI_Int("JudgeJailType",Info[playerid][pJudgeJailType]);
    INI_Int("BeingSentenced",Info[playerid][pBeingSentenced]);
    INI_Int("ProbationTime",Info[playerid][pProbationTime]);
    INI_Int("RewardsHours",Info[playerid][pRHours]);
    INI_Int("ADTime",Info[playerid][pADTime]);
    INI_Int("Otros",Info[playerid][pOther]);
    INI_Int("GGTokens",Info[playerid][pGTokens]);
    INI_Int("HDExp",Info[playerid][pDobleExp]);
    INI_Int("DPHoras",Info[playerid][pDPHours]);
    INI_Int("DPTiempo",Info[playerid][pDPTime]);
    INI_Int("DPTotal",Info[playerid][pDPTotal]);
    INI_Int("Order",Info[playerid][pOrder]);
    INI_Int("TempVIP",Info[playerid][pTempVIP]);
    INI_Int("VIPInviteDay",Info[playerid][pVIPInviteDay]);
    INI_Int("BuddyInvite",Info[playerid][pBuddyInvited]);
    INI_Int("VTokens",Info[playerid][pVTokens]);
    INI_Int("Job2",Info[playerid][pJob2]);
    INI_Int("TypeSpawn",Info[playerid][pTypeSpawn]);
    INI_Int("ShopTech",Info[playerid][pShopTech]);
    INI_Int("Status",Info[playerid][pEstado]);
    INI_Int("DayVIP",Info[playerid][pVIPDateD]);
    INI_Int("MonthVIP",Info[playerid][pVIPDateM]);
    INI_Int("IDRegalo",Info[playerid][pRegalo]);
    INI_Int("Screwdrivers", Info[playerid][pScrewdriver]);
    INI_Int("Firstaid", Info[playerid][pFirstaid]);
    INI_Int("CamOculta", Info[playerid][pSurveillance]);
	for( new a = 0; a < 11; a++ )
	{
 	new mStr[24];
		format( mStr, sizeof( mStr ), "Mueble%d", a);
		INI_Int(mStr, Info[playerid][pMuebles][a]);
	}
    for(new v = 0; v < MAX_PLAYERTOYS; v++)
    {
     new string[128];
		format( string, sizeof( string ), "pt%dModelID", v);
		INI_Int(string, PlayerToyInfo[playerid][v][ptModelID]);
		format(string, 128, "pt%dBone",v);
		INI_Int(string, PlayerToyInfo[playerid][v][ptBone]);
		format(string, 128, "pt%dPosX",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosX]);
		format(string, 128, "pt%dPosY",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosY]);
		format(string, 128, "pt%dPosZ",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosZ]);
		format(string, 128, "pt%dRotX",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotX]);
		format(string, 128, "pt%dRotY",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotY]);
		format(string, 128, "pt%dRotZ",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotZ]);
		format(string, 128, "pt%dSizX",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleX]);
		format(string, 128, "pt%dSizY",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleY]);
		format(string, 128, "pt%dSizZ",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleZ]);
    }
    for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        new string[128];
        format(string, 128, "pv%dPosX",v);
        INI_Float(string,PlayerVehicleInfo[playerid][v][pvPosX]);
        format(string, 128, "pv%dPosY",v);
        INI_Float(string,PlayerVehicleInfo[playerid][v][pvPosY]);
        format(string, 128, "pv%dPosZ",v);
        INI_Float(string,PlayerVehicleInfo[playerid][v][pvPosZ]);
        format(string, 128, "pv%dPosAngle",v);
        INI_Float(string,PlayerVehicleInfo[playerid][v][pvPosAngle]);
		format(string, 128, "pv%dVirtualW",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvVW]);
		format(string, 128, "pv%dModelId",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvModelId]);
		format(string, 128, "pv%dLock",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvLock]);
		format(string, 128, "pv%dLocked",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvLocked]);
		format(string, 128, "pv%dPaintJob",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvPaintJob]);
		format(string, 128, "pv%dColor1",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvColor1]);
		format(string, 128, "pv%dColor2",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvColor2]);
		format(string, 128, "pv%dPrice",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvPrice]);
		format(string, 128, "pv%dTicket",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvTicket]);
		format(string, 128, "pv%dWeapon0",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][0]);
		format(string, 128, "pv%dWeapon1",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][1]);
		format(string, 128, "pv%dWeapon2",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][2]);
		format(string, 128, "pv%dWeapon3",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][3]);
		format(string, 128, "pv%dWeapon4",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][4]);
		format(string, 128, "pv%dWeapon5",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][5]);
		format(string, 128, "pv%dWeapon6",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][6]);
		format(string, 128, "pv%dWeapon7",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][7]);
		format(string, 128, "pv%dWepUpgrade",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWepUpgrade]);
		format(string, 128, "pv%dFuel",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvFuel]);
		format(string, 128, "pv%dImpound",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvImpounded]);
		format(string, 128, "pv%dHealth",v);
		INI_Float(string,PlayerVehicleInfo[playerid][v][pvHealth]);
		for(new m = 0; m < MAX_MODS; m++)
		{
		    format(string, 128, "pv%dMod%d", v, m);
		    INI_Int(string,PlayerVehicleInfo[playerid][v][pvMods][m]);
		}
    }
    return 0;
}

INI_Exist(nickname[])
{
  new tmp[128];
  format(tmp,sizeof(tmp),USERFILE, nickname);
  return fexist(tmp);
}

stock UserPath(playerid)
{
    new string[128],playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid,playername,sizeof(playername));
    format(string,sizeof(string),USERFILE,playername);
    return string;
}

function LoadUser_pass(playerid,name[],value[])
{
    INI_Int("Password",Info[playerid][pKey]);
    return 1;
}
stock SaveVarGarages(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new gfile[64];
			format(gfile, 64, GARAGES_FILE, id);
			new INI:File = INI_Open(gfile);
			INI_SetTag(File,"GarageData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new gfile[64];
			format(gfile, 64, GARAGES_FILE, id);
			new INI:File = INI_Open(gfile);
			INI_SetTag(File,"GarageData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}
//Credits to Dracoblue*******************
stock udb_hash(buf[])
{
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
	{
        s1 = (s1 + buf[n]) % 65521;
        s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

RespawnNearbyVehicles(playerid, Float:radi)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i=1; i<MAX_VEHICLES; i++)
    {
        if(GetVehicleModel(i))
        {
            new Float:posx, Float:posy, Float:posz;
            new Float:tempposx, Float:tempposy, Float:tempposz;
            GetVehiclePos(i, posx, posy, posz);
            tempposx = (posx - x);
            tempposy = (posy - y);
            tempposz = (posz - z);
            if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
            {
                SetVehicleToRespawn(i);
            }
        }
    }
}

vehicle_lock_doors(vehicle)
{
	new
		vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

vehicle_unlock_doors(vehicle)
{
	new
		vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock IsSeatAvailable(vehicleid, seat)
{
	new carmodel = GetVehicleModel(vehicleid);
	for (new i = 0; i < sizeof( OneSeatVehicles ); i++ )
	{
	    if( carmodel == OneSeatVehicles[i] ) return 0;
	}
	foreach(Player, i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}

SurfingCheck(vehicleid)
{
	foreach(Player, p)
	{
		if(GetPlayerSurfingVehicleID(p) == vehicleid)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(p, x, y, z);
		    SetPVarFloat(p, "tempPosX", x);
			SetPVarFloat(p, "tempPosY", x);
			SetPVarFloat(p, "tempPosZ", x);

			SetTimerEx("SurfingFix", 2000, 0, "i", p);
		}
	}
}

function SurfingFix(playerid)
{
	SetPlayerPos(playerid, GetPVarFloat(playerid, "tmpPosX"), GetPVarFloat(playerid, "tmpPosY"), GetPVarFloat(playerid, "tmpPosZ"));
	DeletePVar(playerid, "tmpPosX");
	DeletePVar(playerid, "tmpPosY");
	DeletePVar(playerid, "tmpPosZ");

	return 1;
}

main()
{
    repeat severTimers();
    repeat severTimers2();
    repeat Anticheat();
    repeat SyncUp();
    //repeat saveAccounts();
    repeat VehicleUpdate();
    repeat ServerMicrobeat();
    repeat Mensajes();
    repeat EMSUpdate();
    repeat SpecUpdate();
	print (" ");
	print (" ");
	print (" ");
	print ("\t____________________________________________________________");
	print ("\t");
	print ("\t» Comunidad: Absolute Titanium ®");
	print ("\t» Versión: 2.1");
	print ("\t» Modo: RolePlay");
	print ("\t» Desarrollo: Killian_Mihaly");
	print ("\t» Idioma: Español-Spanish");
	print ("\t____________________________________________________________\n\n");
	print (" ");
	print (" ");
}

function DollahScoreUpdate()
{
	foreach(Player, i){
		if(IsPlayerConnected(i)){
			SetPlayerScore(i, Info[i][pLevel]);
		}
	}
	return 1;
}

//*******************
function GetColorCode(clr[]) {
	new color = -1;
	if (isnumeric(clr))
	{
		color = strval(clr);
		return color;
	}
	if(strcmp(clr, "black", true)==0) color=0;
	if(strcmp(clr, "white", true)==0) color=1;
	if(strcmp(clr, "blue", true)==0) color=2;
	if(strcmp(clr, "red", true)==0) color=3;
	if(strcmp(clr, "green", true)==0) color=16;
	if(strcmp(clr, "purple", true)==0) color=5;
	if(strcmp(clr, "yellow", true)==0) color=6;
	if(strcmp(clr, "lightblue", true)==0) color=7;
	if(strcmp(clr, "navy", true)==0) color=94;
	if(strcmp(clr, "beige", true)==0) color=102;
	if(strcmp(clr, "darkgreen", true)==0) color=51;
	if(strcmp(clr, "darkblue", true)==0) color=103;
	if(strcmp(clr, "darkgrey", true)==0) color=13;
	if(strcmp(clr, "gold", true)==0) color=99;
	if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) color=55;
	if(strcmp(clr, "darkbrown", true)==0) color=84;
	if(strcmp(clr, "darkred", true)==0) color=74;
	if(strcmp(clr, "maroon", true)==0) color=115;
	if(strcmp(clr, "pink", true)==0) color=126;
	return color;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvPaintJob] = paintjobid;
	}
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvColor1] = color1;
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvColor2] = color2;
	}
    return 1;
}

public OnEnterExitModShop( playerid, enterexit, interiorid ){
	if( enterexit == 0 ){
		if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1) {
			UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
		}
		SetPlayerInterior( playerid, 0);
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!(1 <= GetPlayerInterior(playerid) <= 3))
	{
		new szMessage[128];
		format(szMessage, sizeof(szMessage), "AT-RP Hacks: %s tal vez esté usando hacks de modificaciones de autos (aplicando: %s %s en un %s).", GetPlayerNameEx(playerid), partName(componentid), partType(GetVehicleComponentType(componentid)), GetVehicleName(vehicleid));
		ABroadCast(COLOR_GENERAL, szMessage, 2);
	}
	//**security**
	#if defined AntiCrash 1
if((IsPlayerInRangeOfPoint(playerid,2,617.5303,-1.9900,1000.651) && GetPlayerInterior(playerid) == 1) ||
(IsPlayerInRangeOfPoint(playerid,2,616.7830,-74.8150,997.772) && GetPlayerInterior(playerid) == 2) ||
(IsPlayerInRangeOfPoint(playerid,2,615.2862,-124.2390,997.697) && GetPlayerInterior(playerid) == 3)) return 1;
new Menu[1024];
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
switch(componentid)
{
case 1008..1010: if(AutoProhibido(playerid)) RemoveVehicleComponent(vehicleid, componentid);
}
if(!AutoCrash(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid);
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Usted ha sido expulsado por posible cheat de Car Crasher.  \n", 1024);
strcat(Menu, "{FFFFFF} Si es un error, evite tunear su auto con lo último que le puso.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - Seguridad V2: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado por Seguridad V2. Razón: Posible Crasher.", Nombre);
SendClientMessageToAll(Gris, Texto);
Kick(playerid);
#endif
	//************
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
new model = GetVehicleModel( vehicleid );
    if (model == 400)
    {
        GameTextForPlayer(playerid,"~g~Landstalker",3000,1);
	}
    if (model == 401)
    {
        GameTextForPlayer(playerid,"~g~Bravura",3000,1);
    }
    if (model == 402)
    {
        GameTextForPlayer(playerid,"~g~Buffalo",3000,1);
    }
    if (model == 403)
    {
        GameTextForPlayer(playerid,"~g~Linerunner",3000,1);
    }
    if (model == 404)
    {
        GameTextForPlayer(playerid,"~g~Perenniel",3000,1);
    }
    if (model == 405)
    {
        GameTextForPlayer(playerid,"~g~Sentinel",3000,1);
    }
    if (model == 406)
    {
        GameTextForPlayer(playerid,"~g~Dumper",3000,1);
    }
    if (model == 407)
    {
        GameTextForPlayer(playerid,"~g~Firetruck",3000,1);
    }
    if (model == 408)
    {
        GameTextForPlayer(playerid,"~g~Trashmaster",3000,1);
    }
    if (model == 409)
    {
        GameTextForPlayer(playerid,"~g~Stretch",3000,1);
    }
    if (model == 410)
    {
        GameTextForPlayer(playerid,"~g~Manana",3000,1);
    }
    if (model == 411)
    {
        GameTextForPlayer(playerid,"~g~Infernus",3000,1);
    }
    if (model == 412)
    {
        GameTextForPlayer(playerid,"~g~Voodoo",3000,1);
    }
    if (model == 413)
    {
        GameTextForPlayer(playerid,"~g~Pony",3000,1);
    }
    if (model == 414)
    {
        GameTextForPlayer(playerid,"~g~Mule",3000,1);
    }
    if (model == 415)
    {
        GameTextForPlayer(playerid,"~g~Cheetah",3000,1);
    }
    if (model == 416)
    {
        GameTextForPlayer(playerid,"~g~Ambulancia",3000,1);
    }
    if (model == 417)
    {
        GameTextForPlayer(playerid,"~g~Leviathan",3000,1);
    }
    if (model == 418)
    {
        GameTextForPlayer(playerid,"~g~Moonbeam",3000,1);
    }
    if (model == 419)
    {
        GameTextForPlayer(playerid,"~g~Esperanto",3000,1);
    }
    if (model == 420)
    {
        GameTextForPlayer(playerid,"~g~Taxi",3000,1);
    }
    if (model == 421)
    {
        GameTextForPlayer(playerid,"~g~Washington",3000,1);
    }
    if (model == 422)
    {
        GameTextForPlayer(playerid,"~g~Bobcat",3000,1);
    }
    if (model == 423)
    {
        GameTextForPlayer(playerid,"~g~Mr Whoopee",3000,1);
    }
    if (model == 424)
    {
        GameTextForPlayer(playerid,"~g~BF Injection",3000,1);
    }
    if (model == 425)
    {
        GameTextForPlayer(playerid,"~g~Hunter",3000,1);
    }
    if (model == 426)
    {
        GameTextForPlayer(playerid,"~g~Premier",3000,1);
    }
    if (model == 427)
    {
        GameTextForPlayer(playerid,"~g~Enforcer",3000,1);
    }
    if (model == 428)
    {
        GameTextForPlayer(playerid,"~g~Securicar",3000,1);
    }
    if (model == 429)
    {
        GameTextForPlayer(playerid,"~g~Banshee",3000,1);
    }
    if (model == 430)
    {
        GameTextForPlayer(playerid,"~g~Predator",3000,1);
    }
    if (model == 431)
    {
        GameTextForPlayer(playerid,"~g~Bus",3000,1);
    }
    if (model == 432)
    {
        GameTextForPlayer(playerid,"~g~Rhino",3000,1);
    }
    if (model == 433)
    {
        GameTextForPlayer(playerid,"~g~Barracks",3000,1);
    }
    if (model == 434)
    {
        GameTextForPlayer(playerid,"~g~Hotknife",3000,1);
    }
    if (model == 435)
    {
        GameTextForPlayer(playerid,"~g~Article Trailer",3000,1);
    }
    if (model == 436)
    {
        GameTextForPlayer(playerid,"~g~Previon",3000,1);
    }
    if (model == 437)
    {
        GameTextForPlayer(playerid,"~g~Coach",3000,1);
    }
    if (model == 438)
    {
        GameTextForPlayer(playerid,"~g~Cabbie",3000,1);
    }
    if (model == 439)
    {
        GameTextForPlayer(playerid,"~g~Stallion",3000,1);
    }
    if (model == 440)
    {
        GameTextForPlayer(playerid,"~g~Rumpo",3000,1);
    }
    if (model == 441)
    {
        GameTextForPlayer(playerid,"~g~RC Bandit",3000,1);
    }
    if (model == 442)
    {
        GameTextForPlayer(playerid,"~g~Romero",3000,1);
    }
    if (model == 443)
    {
        GameTextForPlayer(playerid,"~g~Packer",3000,1);
    }
    if (model == 444)
    {
        GameTextForPlayer(playerid,"~g~Monster",3000,1);
    }
    if (model == 445)
    {
        GameTextForPlayer(playerid,"~g~Admiral",3000,1);
    }
    if (model == 446)
    {
        GameTextForPlayer(playerid,"~g~Squallo",3000,1);
	}
	if (model == 447)
    {
        GameTextForPlayer(playerid,"~g~Seasparrow",3000,1);
    }
    if (model == 448)
    {
        GameTextForPlayer(playerid,"~g~Pizzaboy",3000,1);
    }
    if (model == 449)
    {
        GameTextForPlayer(playerid,"~g~Tram",3000,1);
    }
    if (model == 450)
    {
        GameTextForPlayer(playerid,"~g~Article Trailer 2",3000,1);
    }
    if (model == 451)
    {
        GameTextForPlayer(playerid,"~g~Turismo",3000,1);
    }
    if (model == 452)
    {
        GameTextForPlayer(playerid,"~g~Speeder",3000,1);
    }
    if (model == 453)
    {
        GameTextForPlayer(playerid,"~g~Reefer",3000,1);
    }
    if (model == 454)
    {
        GameTextForPlayer(playerid,"~g~Tropic",3000,1);
    }
    if (model == 455)
    {
        GameTextForPlayer(playerid,"~g~Flatbed",3000,1);
    }
    if (model == 456)
    {
        GameTextForPlayer(playerid,"~g~Yankee",3000,1);
    }
	if (model == 457)
    {
        GameTextForPlayer(playerid,"~g~Caddy",3000,1);
    }
	if (model == 458)
    {
        GameTextForPlayer(playerid,"~g~Solair",3000,1);
    }
    if (model == 459)
    {
        GameTextForPlayer(playerid,"~g~Berkley's RC Van",3000,1);
    }
    if (model == 460)
    {
        GameTextForPlayer(playerid,"~g~Skimmer",3000,1);
    }
    if (model == 461)
    {
        GameTextForPlayer(playerid,"~g~PCJ-600",3000,1);
    }
    if (model == 462)
    {
        GameTextForPlayer(playerid,"~g~Faggio",3000,1);
    }
    if (model == 463)
    {
        GameTextForPlayer(playerid,"~g~Freeway",3000,1);
    }
    if (model == 464)
    {
        GameTextForPlayer(playerid,"~g~RC Baron",3000,1);
    }
    if (model == 465)
    {
        GameTextForPlayer(playerid,"~g~RC Raider",3000,1);
    }
    if (model == 466)
    {
        GameTextForPlayer(playerid,"~g~Glendale",3000,1);
    }
    if (model == 467)
    {
        GameTextForPlayer(playerid,"~g~Oceanic",3000,1);
    }
    if (model == 468)
    {
        GameTextForPlayer(playerid,"~g~Sanchez",3000,1);
    }
    if (model == 469)
    {
        GameTextForPlayer(playerid,"~g~Sparrow",3000,1);
    }
    if (model == 470)
    {
        GameTextForPlayer(playerid,"~g~Patriot",3000,1);
    }
    if (model == 471)
    {
        GameTextForPlayer(playerid,"~g~Quad",3000,1);
    }
    if (model == 472)
    {
        GameTextForPlayer(playerid,"~g~Coastguard",3000,1);
    }
    if (model == 473)
    {
        GameTextForPlayer(playerid,"~g~Dinghy",3000,1);
    }
    if (model == 474)
    {
        GameTextForPlayer(playerid,"~g~Hermes",3000,1);
    }
    if (model == 475)
    {
        GameTextForPlayer(playerid,"~g~Sabre",3000,1);
    }
    if (model == 476)
    {
        GameTextForPlayer(playerid,"~g~Rustler",3000,1);
    }
    if (model == 477)
    {
        GameTextForPlayer(playerid,"~g~ZR-350",3000,1);
    }
    if (model == 478)
    {
        GameTextForPlayer(playerid,"~g~Walton",3000,1);
    }
    if (model == 479)
    {
        GameTextForPlayer(playerid,"~g~Regina",3000,1);
    }
    if (model == 480)
    {
        GameTextForPlayer(playerid,"~g~Comet",3000,1);
    }
    if (model == 481)
    {
        GameTextForPlayer(playerid,"~g~BMX",3000,1);
    }
    if (model == 482)
    {
        GameTextForPlayer(playerid,"~g~Burrito",3000,1);
    }
    if (model == 483)
    {
        GameTextForPlayer(playerid,"~g~Camper",3000,1);
    }
    if (model == 484)
    {
        GameTextForPlayer(playerid,"~g~Marquis",3000,1);
    }
    if (model == 485)
    {
        GameTextForPlayer(playerid,"~g~Baggage",3000,1);
    }
    if (model == 486)
    {
        GameTextForPlayer(playerid,"~g~Dozer",3000,1);
    }
    if (model == 487)
    {
        GameTextForPlayer(playerid,"~g~Maverick",3000,1);
    }
    if (model == 488)
    {
        GameTextForPlayer(playerid,"~g~SAN News Maverick",3000,1);
    }
    if (model == 489)
    {
        GameTextForPlayer(playerid,"~g~Rancher",3000,1);
    }
    if (model == 490)
    {
        GameTextForPlayer(playerid,"~g~Rancher Federal",3000,1);
    }
    if (model == 491)
    {
        GameTextForPlayer(playerid,"~g~Virgo",3000,1);
    }
    if (model == 492)
    {
        GameTextForPlayer(playerid,"~g~Greenwood",3000,1);
    }
    if (model == 493)
    {
        GameTextForPlayer(playerid,"~g~Jetmax",3000,1);
    }
    if (model == 494)
    {
        GameTextForPlayer(playerid,"~g~Hotring Racer",3000,1);
    }
    if (model == 495)
    {
        GameTextForPlayer(playerid,"~g~Sandking",3000,1);
    }
    if (model == 496)
    {
        GameTextForPlayer(playerid,"~g~Blista Compact",3000,1);
    }
    if (model == 497)
    {
        GameTextForPlayer(playerid,"~g~Police Maverick",3000,1);
    }
    if (model == 498)
    {
        GameTextForPlayer(playerid,"~g~Boxville",3000,1);
    }
    if (model == 499)
    {
        GameTextForPlayer(playerid,"~g~Benson",3000,1);
    }
    if (model == 500)
    {
        GameTextForPlayer(playerid,"~g~Mesa",3000,1);
    }
    if (model == 501)
    {
        GameTextForPlayer(playerid,"~g~RC Goblin",3000,1);
    }
    if (model == 502)
    {
        GameTextForPlayer(playerid,"~g~Hotring Racer",3000,1);
    }
    if (model == 503)
    {
        GameTextForPlayer(playerid,"~g~Hotring Racer",3000,1);
    }
    if (model == 504)
    {
        GameTextForPlayer(playerid,"~g~Bloodring Banger",3000,1);
    }
    if (model == 505)
    {
        GameTextForPlayer(playerid,"~g~Rancher",3000,1);
    }
    if (model == 506)
    {
        GameTextForPlayer(playerid,"~g~Super GT",3000,1);
    }
    if (model == 507)
    {
        GameTextForPlayer(playerid,"~g~Elegant",3000,1);
    }
    if (model == 508)
    {
        GameTextForPlayer(playerid,"~g~Journey",3000,1);
    }
    if (model == 509)
    {
        GameTextForPlayer(playerid,"~g~Bike",3000,1);
    }
    if (model == 510)
    {
        GameTextForPlayer(playerid,"~g~Mountain Bike",3000,1);
    }
    if (model == 511)
    {
        GameTextForPlayer(playerid,"~g~Beagle",3000,1);
    }
    if (model == 512)
    {
        GameTextForPlayer(playerid,"~g~Cropduster",3000,1);
    }
    if (model == 513)
    {
        GameTextForPlayer(playerid,"~g~Stuntplane",3000,1);
    }
    if (model == 514)
    {
        GameTextForPlayer(playerid,"~g~Tanker",3000,1);
    }
    if (model == 515)
    {
        GameTextForPlayer(playerid,"~g~Roadtrain",3000,1);
    }
    if (model == 516)
    {
        GameTextForPlayer(playerid,"~g~Nebula",3000,1);
    }
    if (model == 517)
    {
        GameTextForPlayer(playerid,"~g~Majestic",3000,1);
    }
    if (model == 518)
    {
        GameTextForPlayer(playerid,"~g~Buccaneer",3000,1);
    }
    if (model == 519)
    {
        GameTextForPlayer(playerid,"~g~Shamal",3000,1);
    }
    if (model == 520)
    {
        GameTextForPlayer(playerid,"~g~Hydra",3000,1);
    }
    if (model == 521)
    {
        GameTextForPlayer(playerid,"~g~FCR-900",3000,1);
    }
    if (model == 522)
    {
        GameTextForPlayer(playerid,"~g~NRG-500",3000,1);
    }
    if (model == 523)
    {
        GameTextForPlayer(playerid,"~g~HPV1000",3000,1);
    }
    if (model == 524)
    {
        GameTextForPlayer(playerid,"~g~Cement Truck",3000,1);
    }
    if (model == 525)
    {
        GameTextForPlayer(playerid,"~g~Towtruck",3000,1);
    }
    if (model == 526)
    {
        GameTextForPlayer(playerid,"~g~Fortune",3000,1);
    }
    if (model == 527)
    {
        GameTextForPlayer(playerid,"~g~Cadrona",3000,1);
    }
    if (model == 528)
    {
        GameTextForPlayer(playerid,"~g~Camioneta Blindada",3000,1);
    }
    if (model == 529)
    {
        GameTextForPlayer(playerid,"~g~Willard",3000,1);
    }
    if (model == 530)
    {
        GameTextForPlayer(playerid,"~g~Forklift",3000,1);
    }
    if (model == 531)
    {
        GameTextForPlayer(playerid,"~g~Tractor",3000,1);
    }
    if (model == 532)
    {
        GameTextForPlayer(playerid,"~g~Combine Harvester",3000,1);
    }
    if (model == 533)
    {
        GameTextForPlayer(playerid,"~g~Feltzer",3000,1);
    }
    if (model == 534)
    {
        GameTextForPlayer(playerid,"~g~Remington",3000,1);
    }
    if (model == 535)
    {
        GameTextForPlayer(playerid,"~g~Slamvan",3000,1);
    }
    if (model == 536)
    {
        GameTextForPlayer(playerid,"~g~Blade",3000,1);
    }
    if (model == 537)
    {
        GameTextForPlayer(playerid,"~g~Freight (Train)",3000,1);
    }
    if (model == 538)
    {
        GameTextForPlayer(playerid,"~g~Brownstreak (Train)",3000,1);
    }
    if (model == 539)
    {
        GameTextForPlayer(playerid,"~g~Vortex",3000,1);
    }
    if (model == 540)
    {
        GameTextForPlayer(playerid,"~g~Vincent",3000,1);
    }
    if (model == 541)
    {
        GameTextForPlayer(playerid,"~g~Bullet",3000,1);
    }
    if (model == 542)
    {
        GameTextForPlayer(playerid,"~g~Clover",3000,1);
    }
    if (model == 543)
    {
        GameTextForPlayer(playerid,"~g~Sadler",3000,1);
    }
    if (model == 544)
    {
        GameTextForPlayer(playerid,"~g~Firetruck LA",3000,1);
    }
    if (model == 545)
    {
        GameTextForPlayer(playerid,"~g~Hustler",3000,1);
    }
    if (model == 546)
    {
        GameTextForPlayer(playerid,"~g~Intruder",3000,1);
    }
    if (model == 547)
    {
        GameTextForPlayer(playerid,"~g~Primo",3000,1);
    }
    if (model == 548)
    {
        GameTextForPlayer(playerid,"~g~Cargobob",3000,1);
    }
    if (model == 549)
    {
        GameTextForPlayer(playerid,"~g~Tampa",3000,1);
    }
    if (model == 550)
    {
        GameTextForPlayer(playerid,"~g~Sunrise",3000,1);
    }
    if (model == 551)
    {
        GameTextForPlayer(playerid,"~g~Merit",3000,1);
    }
    if (model == 552)
    {
        GameTextForPlayer(playerid,"~g~Utility Van",3000,1);
    }
    if (model == 553)
    {
        GameTextForPlayer(playerid,"~g~Nevada",3000,1);
    }
    if (model == 554)
    {
        GameTextForPlayer(playerid,"~g~Yosemite",3000,1);
    }
    if (model == 555)
    {
        GameTextForPlayer(playerid,"~g~Windsor",3000,1);
    }
    if (model == 556)
    {
        GameTextForPlayer(playerid,"~g~Monster A",3000,1);
    }
    if (model == 557)
    {
        GameTextForPlayer(playerid,"~g~Monster B",3000,1);
    }
    if (model == 558)
    {
        GameTextForPlayer(playerid,"~g~Uranus",3000,1);
    }
    if (model == 559)
    {
        GameTextForPlayer(playerid,"~g~Jester",3000,1);
    }
    if (model == 560)
    {
        GameTextForPlayer(playerid,"~g~Sultan",3000,1);
    }
    if (model == 561)
    {
        GameTextForPlayer(playerid,"~g~Stratum",3000,1);
    }
    if (model == 562)
    {
        GameTextForPlayer(playerid,"~g~Elegy",3000,1);
    }
	if (model == 563)
    {
        GameTextForPlayer(playerid,"~g~Raindance",3000,1);
    }
    if (model == 564)
    {
        GameTextForPlayer(playerid,"~g~RC Tiger",3000,1);
    }
    if (model == 565)
    {
        GameTextForPlayer(playerid,"~g~Flash",3000,1);
    }
    if (model == 566)
    {
        GameTextForPlayer(playerid,"~g~Tahoma",3000,1);
    }
    if (model == 567)
    {
        GameTextForPlayer(playerid,"~g~Savanna",3000,1);
    }
    if (model == 568)
    {
        GameTextForPlayer(playerid,"~g~Bandito",3000,1);
    }
    if (model == 569)
    {
        GameTextForPlayer(playerid,"~g~Freight Flat Trailer (Train)",3000,1);
    }
    if (model == 570)
    {
        GameTextForPlayer(playerid,"~g~Streak Trailer (Train)",3000,1);
    }
    if (model == 571)
    {
        GameTextForPlayer(playerid,"~g~Kart",3000,1);
    }
    if (model == 572)
    {
        GameTextForPlayer(playerid,"~g~Mower",3000,1);
    }
	if (model == 573)
    {
        GameTextForPlayer(playerid,"~g~Dune",3000,1);
    }
	if (model == 574)
    {
        GameTextForPlayer(playerid,"~g~Sweeper",3000,1);
    }
    if (model == 575)
    {
        GameTextForPlayer(playerid,"~g~Broadway",3000,1);
    }
    if (model == 576)
    {
        GameTextForPlayer(playerid,"~g~Tornado",3000,1);
    }
    if (model == 577)
    {
        GameTextForPlayer(playerid,"~g~AT400",3000,1);
    }
    if (model == 578)
    {
        GameTextForPlayer(playerid,"~g~DFT-30",3000,1);
    }
    if (model == 579)
    {
        GameTextForPlayer(playerid,"~g~Huntley",3000,1);
    }
    if (model == 580)
    {
        GameTextForPlayer(playerid,"~g~Stafford",3000,1);
    }
    if (model == 581)
    {
        GameTextForPlayer(playerid,"~g~BF-400",3000,1);
    }
    if (model == 582)
    {
        GameTextForPlayer(playerid,"~g~Newsvan",3000,1);
    }
    if (model == 583)
    {
        GameTextForPlayer(playerid,"~g~Tug",3000,1);
    }
    if (model == 584)
    {
        GameTextForPlayer(playerid,"~g~Petrol Trailer",3000,1);
    }
    if (model == 585)
    {
        GameTextForPlayer(playerid,"~g~Emperor",3000,1);
    }
    if (model == 586)
    {
        GameTextForPlayer(playerid,"~g~Wayfarer",3000,1);
    }
    if (model == 587)
    {
        GameTextForPlayer(playerid,"~g~Euros",3000,1);
    }
    if (model == 588)
    {
        GameTextForPlayer(playerid,"~g~Hot Dog",3000,1);
    }
    if (model == 589)
    {
        GameTextForPlayer(playerid,"~g~Club",3000,1);
    }
    if (model == 590)
    {
        GameTextForPlayer(playerid,"~g~Freight Box Trailer (Train)",3000,1);
    }
    if (model == 591)
    {
        GameTextForPlayer(playerid,"~g~Article Trailer 3",3000,1);
    }
    if (model == 592)
    {
        GameTextForPlayer(playerid,"~g~Andromada",3000,1);
    }
    if (model == 593)
    {
        GameTextForPlayer(playerid,"~g~Dodo",3000,1);
    }
    if (model == 594)
    {
        GameTextForPlayer(playerid,"~g~RC Cam",3000,1);
    }
    if (model == 595)
    {
        GameTextForPlayer(playerid,"~g~Launch",3000,1);
    }
    if (model == 596)
    {
        GameTextForPlayer(playerid,"~g~Police Car (LAPD)",3000,1);
    }
    if (model == 597)
    {
        GameTextForPlayer(playerid,"~g~Police Car (ARGD)",3000,1);
    }
    if (model == 598)
    {
        GameTextForPlayer(playerid,"~g~Police Car (LVPD)",3000,1);
    }
    if (model == 599)
    {
        GameTextForPlayer(playerid,"~g~Police Ranger",3000,1);
    }
    if (model == 600)
    {
        GameTextForPlayer(playerid,"~g~Picador",3000,1);
    }
    if (model == 601)
    {
        GameTextForPlayer(playerid,"~g~S.W.A.T.",3000,1);
    }
    if (model == 602)
    {
        GameTextForPlayer(playerid,"~g~Alpha",3000,1);
    }
    if (model == 603)
    {
        GameTextForPlayer(playerid,"~g~Phoenix",3000,1);
    }
    if (model == 604)
    {
        GameTextForPlayer(playerid,"~g~Glendale Shit",3000,1);
    }
    if (model == 605)
    {
        GameTextForPlayer(playerid,"~g~Sadler Shit",3000,1);
    }
    if (model == 606)
    {
        GameTextForPlayer(playerid,"~g~Baggage Trailer A",3000,1);
    }
    if (model == 607)
    {
        GameTextForPlayer(playerid,"~g~Baggage Trailer B",3000,1);
    }
    if (model == 608)
    {
        GameTextForPlayer(playerid,"~g~Tug Stairs Trailer",3000,1);
    }
    if (model == 609)
    {
        GameTextForPlayer(playerid,"~g~Boxville",3000,1);
    }
    if (model == 610)
    {
        GameTextForPlayer(playerid,"~g~Farm Trailer",3000,1);
    }
    if (model == 611)
    {
        GameTextForPlayer(playerid,"~g~Utility Trailer",3000,1);
    }
    Seatbelt[playerid] = 0;
    if(VehicleFuel[vehicleid] <= 0)
	{
 	SetVehicleEngine(vehicleid, playerid);
 	}
    if(GetPVarInt(playerid, "Injured") == 1) SetPVarInt(playerid, "ToBeEjected", 1);
    if(Info[playerid][pEstado] != 0) SetPVarInt( playerid, "ToBeEjected", 1 );
    SetPVarInt(playerid, "LastWeapon", GetPlayerWeapon(playerid));
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510: VehicleFuel[vehicleid] = 200, arr_Engine{vehicleid} = 1, SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 1;
		default: SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 0;
	}
	if(!ispassenger)
	{
		if(AININT_Vehicle(vehicleid))
	  	{
  		    if(Team_AININT(playerid)) { return 1; }
		    else
     		{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer al AININT.");
				return 1;
			}
		}
		else if(LAMD_Vehicle(vehicleid))
  		{
  		    if(Team_LAMD(playerid)) { return 1; }
  		    else
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en LAMD.");
				return 1;
			}
		}
		else if(Mecanico_Vehicle(vehicleid))
  		{
  		    if(Team_Mecanicos(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer al taller de mecánicos.");
				return 1;
			}
		}
        else if(IsAnRusaCar(vehicleid))
  		{
  		    if(Team_Rusa(playerid)) { return 1; }
  		    else
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer a la Mafia Rusa.");
				return 1;
			}
		}
		else if(VIP_Car(vehicleid))
		{
  		    if(Info[playerid][pVIP] != 0) return SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en el Club VIP.");
			RemovePlayerFromVehicle(playerid);
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz);
			NOPCheck(playerid);
			SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en el Club VIP.");
			return 1;
		}
		else if(CNN_Vehicle(vehicleid))
  		{
  		    if(Team_LSTV(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer a Fox.");
				return 1;
			}
		}
		else if(GobierAuto(vehicleid))
  		{
  		    if(Gobierno(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer al Gobierno.");
				return 1;
			}
		}
		else if(SistemaJudicialAuto(vehicleid))
  		{
  		    if(Team_Judicial(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No formas parte del Sistema Judicial.");
				return 1;
			}
		}
		else if(IsAnUSMCCar(vehicleid))
  		{
			if(Team_USMC(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer al Cuerpo de la Marina.");
				return 1;
			}
		}
		else if (LAPD_OrgGobCar(vehicleid))
		{
			if(Team_LAPD(playerid)) return 1;
  			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer al Cuerpo Policial.");
				return 1;
			}
		}
		else if (CIA_OrgGobCar(vehicleid))
		{
			if(Team_CIA(playerid)) return 1;
  			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer a la CIA.");
				return 1;
			}
		}
		else if(IsAnBroadwayCar(vehicleid))
		{
			if(Team_Broadway(playerid)) return 1;
			else
			{
                RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en N/S Broadway XIV.");
				return 1;
			}
		}
		else if (IsAnBMCCar(vehicleid))
		{
			if(Team_BMC(playerid)) return 1;
  			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en Boulevard Mafia Crips.");
				return 1;
			}
		}
		else if(IsAnSurCar(vehicleid))
		{
			if(Team_Longos(playerid)) return 1;
			else
			{
                RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en Varrio Longos 13.");
				return 1;
			}
		}
		else if(IsAnCBPCar(vehicleid))
		{
		   if(Team_CBP(playerid)) return 1;
	       else
		   {
                RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer a Cedar Block Piru.");
				return 1;
		    }
		}
		else if (IsAnHitmanCar(vehicleid))
		{
		    if (Hitman(playerid)) return 1;
            else
            {
                RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer a la agencia Hitman.");
				return 1;
		    }
		}

		else if(IsAnLCNCar(vehicleid))
  		{
  		    if(Team_LCN(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en LCN.");
				return 1;
		   }
	    }
	    else if(IsAnYakuzaCar(vehicleid))
  		{
  		    if(Team_Yakuza(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer em Yakuza.");
				return 1;
			}
		}
        else if(VehiculoBomberosBA(vehicleid))
  		{
			if(Team_BomberosBA(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer al cuerpo de Bomberos.");
				return 1;
			}
		}
		else if(IsAnSantanaCar(vehicleid))
  		{
			if(Team_Santana(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en Santana.");
				return 1;
			}
		}
   	    else if(IsAnAlqaedaCar(vehicleid))
  		{
  		    if(Team_Alqaeda(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer al Terrorismo.");
				return 1;
			}
		}
			else if(Motor_Vehicle(vehicleid))
  		{
  		    if(Team_Motor(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en Hell's Angels.");
				return 1;
			}
		}
			else if(Play_Music_Vehicle(vehicleid))
  		{
  		    if(Play_Music(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no pertenecer en Play Music Radio.");
				return 1;
			}
		}
//*******************Jobs*******************
		else if(TrabajoCam(vehicleid))
		{
		    if(Info[playerid][pJob] == 5 || Info[playerid][pJob2] == 5) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo ya que no trabajas de camionero.");
				return 1;
			}
		}
		else if(TrabajoHeladero(vehicleid))
		{
		    if(Info[playerid][pJob] == 14 || Info[playerid][pJob2] == 14) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no ser Heladero.");
				return 1;
			}
		}
		else if(Tren_Vehicle(vehicleid))
		{
		    if(Info[playerid][pJob] == 15|| Info[playerid][pJob2] == 15) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no ser Conductor de Trenes.");
				return 1;
			}
		}
		else if(TBuses_Vehicle(vehicleid))
		{
		    if(Info[playerid][pJob] == 3 || Info[playerid][pJob2] == 3) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no ser Chofer de Autobuses.");
				return 1;
			}
		}
		else if(IsAPizzabike(vehicleid))
		{
		    if(Info[playerid][pJob] == 4 || Info[playerid][pJob2] == 4) { return 1; }
    	    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no ser Pizzero.");
				return 1;
			}
		}
  		else if(Taxi_Vehicle(vehicleid))
  		{
		    if(Info[playerid][pJob] == 8 || Info[playerid][pJob2] == 8) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no ser Taxista.");
				return 1;
			}
		}
  		else if(IsAHarvest(vehicleid))
  		{
		    if(Info[playerid][pJob] == 9 || Info[playerid][pJob2] == 9) { return 1; }
		    else
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no ser Granjero.");
				return 1;
			}
		}
  		else if(BasureroLA(vehicleid))
  		{
		    if(Info[playerid][pJob] == 16 || Info[playerid][pJob2] == 16) { return 1; }
		    else
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_VEH, "Inf. Vehículo: {FFFFFF}No puedes ingresar a este vehículo tras no ser Basurero.");
				return 1;
			}
		}
		else if(Vortex_Vehicle(vehicleid))
  		{
		    if(Vortex[playerid]== 0)
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No Tienes un ticket.");
				return 1;
			}
		}
		else if(IsATruckerCar(vehicleid))
		{
	    	if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6)
			{
				new string[128];
				new truckcontents = TruckContents[vehicleid];
				new truckcontentname[25];
				if(truckcontents == 0)
				{ format(truckcontentname, sizeof(truckcontentname), "Nada"); }
				else if(truckcontents >= 1 && truckcontents <= 3)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Alimentos y comida");}
				else if(truckcontents >= 4 && truckcontents <= 6)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Ropa y Calzado"); }
				else if(truckcontents == 7)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Materiales Legales"); }
				else if(truckcontents >= 8 && truckcontents <= 10)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Objetos de tiendas 24 horas"); }
				else if(truckcontents >= 11 && truckcontents <= 15)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Armas Ilegales"); }
				else if(truckcontents >= 16 && truckcontents <= 20)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Drogas"); }
				else if(truckcontents >= 21 && truckcontents <= 25)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Materiales Ilegales"); }
				format(string, sizeof(string), "{5ABAFF}[JOB]:{FFFFFF} (Registro: %s %d) - (Contenido: %s)", GetVehicleName(vehicleid), vehicleid, truckcontentname);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				if(OrgGob(playerid) && truckcontents >= 11)
				{
					SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} Para remover productos ilegales usa /limpiarcamion cerca del camión.");
				}
				if(truckcontents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
					SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} Para entregar productos usa /robarcamion como el conductor.");
				}
				else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
   					SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} Para obtener productos y entregarlos usa /cargarcamion siendo el conductor.");
				}
				else if(TruckUsed[playerid] == vehicleid && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
				{
					SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} Este es tu camión, aún no lo has devuelto a Ocean Docks para que te pagen.");
				}
				else if(TruckUsed[playerid] == vehicleid)
				{
   					SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} Este es tu camión, aún no has entregado los productos.");
   				}
				else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
				{
   					SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} Ya estás en otra entrega, usa /cancelar camión para cancelar la entrega.");
   				}
			}
	    	else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "No eres camionero.");
			}
		}
	}
	else if(!IsPlayerInRangeOfVehicle(playerid, vehicleid, 7.5) || LockStatus[vehicleid] >= 1){
		ClearAnimations(playerid);
	}
	return 1;
}

Team_LAPD(playerid){
	if(IsPlayerConnected(playerid)){
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	1){
		    return 1;
		}
		else if(leader	==	1)
		{
		    return 1;
		}
	}
	return 0;
}

Team_AININT(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	2)
		{
		    return 1;
		}
		else if(leader	==	2)
		{
		    return 1;
		}
	}
	return 0;
}

Team_USMC(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	3)
		{
		    return 1;
		}
		else if(leader	==	3)
		{
		    return 1;
		}
	}
	return 0;
}

Team_LAMD(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	4)
		{
		    return 1;
		}
		else if(leader	==	4)
		{
		    return 1;
		}
	}
	return 0;
}

Team_LSTV(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	5)
		{
		    return 1;
		}
		else if(leader	==	5)
		{
		    return 1;
		}
	}
	return 0;
}

Team_Mecanicos(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	6)
		{
		    return 1;
		}
		else if(leader	==	6)
		{
		    return 1;
		}
	}
	return 0;
}

Gobierno(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	7)
		{
		    return 1;
		}
		else if(leader == 7)
		{
		    return 1;
		}
	}
	return 0;
}

Hitman(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	8)
		{
		    return 1;
		}
		else if(leader	==	8)
		{
		    return 1;
		}
	}
	return 0;
}

Team_Judicial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	9)
		{
		    return 1;
		}
		else if(leader == 9)
		{
		    return 1;
		}
	}
	return 0;
}

Team_BomberosBA(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	20)
		{
		    return 1;
		}
		else if(leader	==	20)
		{
		    return 1;
		}
	}
	return 0;
}
Team_CBP(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new leader = Info[playerid][pLeader];
       new member = Info[playerid][pMember];
       if(member==10)
       {
           return 1;
       }
       else if(leader==10)
       {
	       return 1;
       }
   }
   return 0;
}
Team_BMC(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new leader = Info[playerid][pLeader];
       new member = Info[playerid][pMember];
       if(member==11)
       {
           return 1;
       }
       else if(leader==11)
       {
	       return 1;
       }
   }
   return 0;
}
Team_Broadway(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new leader = Info[playerid][pLeader];
       new member = Info[playerid][pMember];
       if(member==12)
       {
           return 1;
       }
       else if(leader==12)
       {
	       return 1;
       }
   }
   return 0;
}
Team_Longos(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new leader = Info[playerid][pLeader];
       new member = Info[playerid][pMember];
       if(member==13)
       {
           return 1;
       }
       else if(leader==13)
       {
	       return 1;
       }
   }
   return 0;
}
Team_Rusa(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	14)
		{
		    return 1;
		}
		else if(leader	==	14)
		{
		    return 1;
		}
	}
	return 0;
}
Team_LCN(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	== 15)
		{
		    return 1;
		}
		else if(leader	==	15)
		{
		    return 1;
		}
	}
	return 0;
}
Team_Yakuza(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	16)
		{
		    return 1;
		}
		else if(leader	==	16)
		{
		    return 1;
		}
	}
	return 0;
}

Presidente(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
		if(leader == 7)
		{
		    return 1;
		}
	}
	return 0;
}

Team_CIA(playerid){
	if(IsPlayerConnected(playerid)){
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	17){
		    return 1;
		}
		else if(leader	==	17)
		{
		    return 1;
		}
	}
	return 0;
}

Team_Santana(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	18)
		{
		    return 1;
		}
		else if(leader	==	18)
		{
		    return 1;
		}
	}
	return 0;
}
Team_Alqaeda(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	== 19)
		{
		    return 1;
		}
		else if(leader	==	19)
		{
		    return 1;
		}
	}
	return 0;
}
Team_Motor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	21)
		{
		    return 1;
		}
		else if(leader	==	21)
		{
		    return 1;
		}
	}
	return 0;
}
Play_Music(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	22)
		{
		    return 1;
		}
		else if(leader	==	22)
		{
		    return 1;
		}
	}
	return 0;
}

OrgGob(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	1 || member	==	2 || member	==	3 || member ==  17)
		{
		    return 1;
		}
		else if(leader	==	1 || leader	==	2 || leader	==	3 || leader ==	 17)
		{
		    return 1;
		}
	}
	return 0;
}

OrgGob_T(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	1 || member	==	2 || member	==	3 || member ==  17)
		{
		    return 1;
		}
		else if(leader	==	1 || leader	==	2 || leader	==	3 || leader ==	 17)
		{
		    return 1;
		}
	}
	return 0;
}

IsAPolice(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member==1)
		{
		    return 1;
		}
		else if(leader==1)
		{
		    return 1;
		}
	}
	return 0;
}

IsAPNA(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	10)
		{
		    return 1;
		}
		else if(leader	==	10)
		{
		    return 1;
		}
	}
	return 0;
}

IsANewsCar(carid)
{
	if(GetVehicleModel(carid)== 582 || GetVehicleModel(carid)== 488)
	{
		return 1;
	}
	return 0;
}

Float:GetPizzaDistance(houseid)
{
	new Float: pDistance;
	pDistance = GetDistance(2098.6919,-1789.5027,13.5547, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
    return pDistance;
}

IsAtClothShop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,25.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047))
		{//Binco & Sub urban
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid,50.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-2664.3318,1538.4259,907.1797) || IsPlayerInRangeOfPoint(playerid,50.0,1395.0045,-1896.1139,13.3733))
		{// SaC HQ
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,202.6777,-163.0623,1000.5306))
		{//Diedier Sachs
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,997.3839,-1266.6259,15.2554))
		{//Armario de Familias /fropa
		    return 1;
		}
 	}
	return 0;
}

IsAtArrestPoint(playerid){
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0,1524.483154,-1677.866455,1645.3226)){return 1;} //LAPD
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 613.3228,-589.1623,17.2266)){ return 1; } //LAPD Dillmore
  		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 257.940612,90.723182,1002.445312)){ return 1; } // CIA
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 317.4623,-1506.9045,24.9219)){ return 1; } //AININT
 	}
	return 0;
}

IsAtTruckDeliveryPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 1025.6554,-1362.6024,13.5649) || IsPlayerInRangeOfPoint(playerid, 6, 455.2845,-1501.5569,31.0434) ||
	IsPlayerInRangeOfPoint(playerid, 6, 793.0801,-1625.8910,13.3906) || IsPlayerInRangeOfPoint(playerid, 6, 2112.7766,-1216.1750,23.8047) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1197.6417,-887.7512,43.0229) || IsPlayerInRangeOfPoint(playerid, 6, -64.5445,-1120.5356,1.0781) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1320.5774,-865.3797,39.7044) || IsPlayerInRangeOfPoint(playerid, 6, -86.3670,-1195.7297,2.1664) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1347.0487,-1752.1692,13.7886) || IsPlayerInRangeOfPoint(playerid, 6, -70.8884,-1549.4922,2.6172) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1925.5968,-1789.5017,13.1459) || IsPlayerInRangeOfPoint(playerid, 6, 1474.4786,-1140.6188,24.0781) ||
	IsPlayerInRangeOfPoint(playerid, 6, 2247.2351,-1661.2406,15.6749))
	{ return true; }
	return false;
}

IsAtCelPublic(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,1539.70581,-1716.85315,13.24403)) { return 1; } //LAPD
		else if(PlayerToPoint(5.0,playerid,1787.11865,-1867.34717,13.25548)) { return 1; } // Unity
		else if(PlayerToPoint(5.0,playerid,1360.15808,-1741.92334,13.21186)) { return 1; } //24 Horas Ayuntamiento
		else if(PlayerToPoint(5.0,playerid,1831.61340,-1834.29578,13.09475)) { return 1; } //24 Horas Vinewood
		else if(PlayerToPoint(5.0,playerid,1037.0452,-1937.8800,13.1434)) { return 1; } //24 Horas Unity
		else if(PlayerToPoint(5.0,playerid,646.75494,-1367.14209,13.20490)) { return 1; } //LSTV
		else if(PlayerToPoint(5.0,playerid,1172.52185,-1318.99805,14.99944)) { return 1; } //LAMD
		else if(PlayerToPoint(5.0,playerid,330.66650,-1816.76074,3.90099)) { return 1; } //conce de playa autos
		else if(PlayerToPoint(5.0,playerid,320.81638,309.34296,999.11597)) { return 1; } //Dillimore
	}
	return 0;
}

IsAt247(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,-1833.8270,62.3936,1055.1891)) { return 1; } //intaero
		else if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-28.7605,-185.1333,1003.5469)) { return 1; } //LV 1er 24-7
		else if(PlayerToPoint(5.0,playerid,-10.3085,-178.2465,1003.5469)) { return 1; } // LV 1er 24-7 >
		else if(PlayerToPoint(5.0,playerid,2.3437,-29.0118,1003.5494)) { return 1; } //LV 2do 24-7
		else if(PlayerToPoint(5.0,playerid,-28.0818,-89.9434,1003.5469)) { return 1; } //LV 3er 24-7
		else if(PlayerToPoint(5.0,playerid,-29.1318,-184.7204,1003.5469)) { return 1; } //LV 3er 24-7
		else if(PlayerToPoint(5.0,playerid,-25.7885,-183.2835,1003.5469)) { return 1; } //LV 3er 24-7
		else if(PlayerToPoint(3.0,playerid,664.8079,-568.7150,16.3433)) { return 1; }
	}
	return 0;
}
MapaInteres(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,1544.6503,-1681.0081,13.5588)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1738.1191,-1862.8081,13.5758)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,981.88, -1157.62, 23.86)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1195.7616,-919.6393,43.1544)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,562.7845,-1250.2927,17.2599)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,805.9656,-1387.7549,13.5602)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,159.1252,-1946.8750,3.7734)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1309.5337,-912.6902,38.6741)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1756.7098,-1147.4298,23.9336)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1829.0646,-1679.4893,13.5469)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1934.2709,-1761.6580,13.5469)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1205.8312,-1842.7323,13.5432)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,844.4606,-2059.8254,12.8672)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1355.6024,-1739.5306,13.5469)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,2047.2003,-1920.9122,13.5469)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1832.5538,-1845.5059,13.1817)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1719.21936,-1888.48071,13.36670)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1711.10828,-1888.84167,13.36670)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,329.49081,-1820.73584,4.62030)) { return 1; } //Playa
		else if(PlayerToPoint(3.0,playerid,1186.11218,-1342.46997,13.36460)) { return 1; } //Hospital
		else if(PlayerToPoint(3.0,playerid,1046.93445,13.17331,1290.15356)) { return 1; } //Ayuntamiento Interior
		else if(PlayerToPoint(3.0,playerid,2177.45117,-2249.47241,13.11317)) { return 1; } //Destructora LS
		else if(PlayerToPoint(3.0,playerid,1335.00525,-978.81915,33.71564)) { return 1; } //Banco Interior
		else if(PlayerToPoint(3.0,playerid,1299.52588,-971.49048,1087.70654)) { return 1; } //Banco Exterior
	}
	return 0;
}

IsAtGasT(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,-60.2884,59.0147,1023.5759)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-59.3870,58.2315,1004.8693)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-60.4091,58.8382,1043.5759)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-60.1126,58.8346,1063.5759)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-60.4153,58.8366,1083.5759)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-60.9187,58.8351,1098.5759)) { return 1; }
	}
	return 0;
}

IsAtATM(playerid)
{
    if(IsPlayerConnected(playerid))
	{
				if(PlayerToPoint(2.0,playerid,1467.93250, -1769.47314, 18.34897)) { return 1; } //Ayuntamiento LS
		else if(PlayerToPoint(2.0,playerid,1494.46448, -1768.74097, 18.33230)) { return 1; } //Ayuntamiento LS
		else if(PlayerToPoint(2.0,playerid,1833.24268, -1846.19141, 13.17900)) { return 1; } //24 Horas Unity
		else if(PlayerToPoint(2.0,playerid,2010.88110, -1451.23486, 13.17634)) { return 1; } //Hospital LS
		else if(PlayerToPoint(2.0,playerid,2118.22583, -1119.08044, 24.91362)) { return 1; } //COncesionario de Motos LS
		else if(PlayerToPoint(2.0,playerid,607.25879, -1233.42444, 17.88725)) { return 1; } //BAnco Exterior LS
		else if(PlayerToPoint(2.0,playerid,562.59302, -1253.75623, 16.82513)) { return 1; } //Concesionario Grotti LS
		else if(PlayerToPoint(2.0,playerid,158.84294, -1949.27344, 3.35796)) { return 1; } //Faro LS
		else if(PlayerToPoint(2.0,playerid,1254.49707, -1695.39844, 13.12211)) { return 1; } //Inicio de SPawn LS
		else if(PlayerToPoint(2.0,playerid,2449.93066, -1998.21167, 13.06436)) { return 1; } //Mercado Negro LS
		else if(PlayerToPoint(2.0,playerid,2379.11353, 1112.15613, 33.88081)) { return 1; } //Vip Interior Los Ángeles
		else if(PlayerToPoint(2.0,playerid,26.65027, -2646.30688, 40.05251)) { return 1; } //24 Horas Camino Hacia San Francisco
		else if(PlayerToPoint(2.0,playerid,1541.30005, -1601.90002, 13.20000)) { return 1; } //LAPD
		else if(PlayerToPoint(2.0,playerid,1356.69995, -1759.19995, 13.30000)) { return 1; } //24 Horas Ayuntamiento
		else if(PlayerToPoint(2.0,playerid,1318.59998, -897.79999, 39.20000)) { return 1; } //24 Horas Vinewood
		else if(PlayerToPoint(2.0,playerid,536.59998, -1740.69995, 11.90000)) { return 1; }  //Casi En La Playa LS
		else if(PlayerToPoint(2.0,playerid,1415.00000, -1020.79999, 23.50000)) { return 1; } //Por Vinewood LS
		else if(PlayerToPoint(2.0,playerid,1186.19995, -1372.50000, 13.20000)) { return 1; } //Antiguo Hospital LS
		else if(PlayerToPoint(2.0,playerid,2228.38989, -1707.78003, 13.25000)) { return 1; } //GYM LS
		else if(PlayerToPoint(2.0,playerid,665.59003, -577.96997, 15.96000)) { return 1; } //Dilmori LS
		else if(PlayerToPoint(2.0,playerid,1319.62622, -967.63330, 1087.50049)) { return 1; } // Banco 1
		else if(PlayerToPoint(2.0,playerid,1319.62622, -974.29010, 1087.50049)) { return 1; } // Banco 2
		else if(PlayerToPoint(2.0,playerid,1319.62622, -981.10638, 1087.50049)) { return 1; } // Banco 3
		else if(PlayerToPoint(2.0,playerid,1319.62622, -987.35577, 1087.50049)) { return 1; } // Banco 4
		else if(PlayerToPoint(2.0,playerid,1319.62622, -997.47162, 1087.50049)) { return 1; } // Banco 5
		else if(PlayerToPoint(2.0,playerid,1319.62622, -992.63489, 1087.50049)) { return 1; } // Banco 6
		else if(PlayerToPoint(2.0,playerid,1039.507812, -9.067229, 1290.392211)) { return 1; } // Interior del Ayuntamiento 1
		else if(PlayerToPoint(2.0,playerid,1035.674926, -9.064530, 1290.392211)) { return 1; } // Interior del Ayuntamiento 2
		else if(PlayerToPoint(2.0,playerid,2878.98438, -1953.85046, 8.93780)) { return 1; } // Concesionario de Botes
		else if(PlayerToPoint(2.0,playerid,357.96741, -1837.76257, 4.44880)) { return 1; } // Playa 1
		else if(PlayerToPoint(2.0,playerid,357.96741, -1834.40967, 4.44880)) { return 1; } // Playa 2
		else if(PlayerToPoint(2.0,playerid,174.70081, -127.03640, 992.93329)) { return 1; } // PC
	}
	return 0;
}

IsAtHotDogCar(playerid)
{
    if(IsPlayerConnected(playerid))
	{

		if(PlayerToPoint(2.0,playerid, 375.313995, -2008.023681, 7.835937)) { return 1; } // Muelle Santa Maria Beach
		else if(PlayerToPoint(2.0,playerid, 156.164581, -1758.303344, 4.770605)) { return 1; } // El Faro
		else if(PlayerToPoint(2.0,playerid, 1706.127441, -1821.671264, 13.546875)) { return 1; } // Unity Station
		else if(PlayerToPoint(2.0,playerid, 1248.021850, -1417.393188, 13.594080)) { return 1; } // Ciber
		else if(PlayerToPoint(2.0,playerid, 1497.316040, -1718.298095, 14.046875)) { return 1; } // Plaza central
	}
	return 0;
}

IsAtVagabundo(playerid)
{
    if(IsPlayerConnected(playerid))
	{

		if(PlayerToPoint(5.0,playerid, 1727.83582, -1943.43445, 12.66570)) { return 1; } // Unity Station
		if(PlayerToPoint(5.0,playerid, 1337.6619, -967.0424, 33.0245)) { return 1; } // Banco Nacional
		if(PlayerToPoint(5.0,playerid, 369.8949, -1785.7242, 4.4760)) { return 1; } // Santa Maria Beach
	}
	return 0;
}

IsAtDeliverPatientPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1174.6427,-1308.5641,13.9963))//LAMD
	{
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0,166.90126,2040.03259,19.59791))//USMC
	{
		return 1;
	}
	return 0;
}

IsAtImpoundingPoint(playerid)
{
	return (IsPlayerInRangeOfPoint(playerid, 5.0,1658.9924,-1807.1152,13.5508));
}

IsAtGasStation(playerid){
    if(IsPlayerConnected(playerid)){
  	if(PlayerToPoint(12.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(10.0,playerid,1944.3260,-1772.9254,13.3906))
		{// Temple
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391))
		{// Flint County
		    return 1;
		}
		else if(PlayerToPoint(12.0,playerid,-1676.6323,414.0262,6.9484))
		{// San Francisco
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,1637.0149,2331.5129,10.8722) || PlayerToPoint(6.0,playerid,1636.6686,2325.8711,10.8722))
		{// Las Vegas
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,1636.6140,2320.6423,10.8722) || PlayerToPoint(12.0,playerid,1595.5337,2198.9404,10.8203)|| PlayerToPoint(6.0,playerid,1839.58, -2522.52, 13.55))
		{// Las Vegas
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,656.4265,-559.8610,16.5015) || PlayerToPoint(8.0,playerid,656.3797,-570.4138,16.5015) || PlayerToPoint(6.0,playerid,2294.2227,-1911.0593,13.5971) )
		{// Dillimore
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,2549.13696, 25.05020, 26.33920) || PlayerToPoint(8.0,playerid,2549.13696, 19.48110, 26.33920) || PlayerToPoint(6.0,playerid,2549.13696, 13.78000, 26.33920) )
		{// Palomino Creek
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,583.529724,1274.296875,11.847764))
		{// Gas del tren
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,203.050247,-1440.544433,13.105228))
		{// Rodeo
		    return 1;
		}
		else if(PlayerToPoint(9.0,playerid,2114.010498,920.246398,10.820312))
		{// Las Vegas
		    return 1;
		}
	}
	return 0;
}

IsAtTaller(playerid){
    if(IsPlayerConnected(playerid)){
     	if(PlayerToPoint(15.0,playerid,1023.7999,-1421.4210,14.6054)){// Cabina del taller 1
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,1041.8518,-1421.4210, 14.6054)){// Cabina del taller 2
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,1032.8699,-1421.4210, 14.6054)){// Cabina del taller 3
		    return 1;
        }
	}
	return 0;
 }


IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(10.0,playerid,496.3752,-76.0410,998.7578))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,496.3752,-76.0410,998.7578))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,499.9703,-20.3358,1000.6797))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1779.2051,-1556.7195,-49.6550))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1215.9480,-13.3519,1000.9219))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
		{
		    return 1;

		}
		else if(PlayerToPoint(10.0,playerid,1259.2834,-791.0306,1084.0078))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,681.2731,-453.8256,-25.6172))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1704.3322,-1877.6541,13.5692))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2792.1606,2407.6143,1240.5311))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2555.6563,1417.1293,7703.7041))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1361.9528,-1764.1641,19.0781))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,-2794.7278,273.3174,27.1350))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1189.0221,-1318.5779,3.1242))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,222.5211,297.6729,955.9631))//
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1396.6166,-1887.1215,17.5559))// BAR NEWA
		{
		    return 1;
		}
	}
	return 0;
}

IsAtLav(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(10.0,playerid,2247.94873, -1208.95886, 1049.05579)) // Interior 1
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2312.75439, -1011.55298, 1050.13147)) // Interior 2
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,230.13884, 1249.64917, 1081.12512)) // Interior 3
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,242.50922, 1042.72607, 1087.26379)) // Interior 4
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2817.23169, -1173.87830, 1024.55054)) // Interior 5
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2447.35669, -1689.40527, 1012.58057)) // Interior 6
		{
		    return 1;

		}
		else if(PlayerToPoint(10.0,playerid,331.48318, 1485.49597, 1083.42676)) // Interior 7
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,216.72394, 1292.21118, 1081.11890)) // Interior 8
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2337.45508, -1140.18115, 1049.85754)) // Interior 9
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,232.78564, 1207.15442, 1079.25818)) // Interior 10
		{
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,378.483886, 1457.166870, 1080.187500)) // Interior 11
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,216.64632, 1292.23022, 1081.25806)) // Interior 12
		{
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,22.377122, 1410.647705, 1084.429687)) // Interior 13
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,86.08141, 1342.80603, 1087.34412)) // Interior 14
		{
		    return 1;
		}
		else if(PlayerToPoint(20.0,playerid,136.000823, 1380.542846, 1083.867675)) // Interior 15
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,232.79556, 1112.44946, 1079.97705)) // Interior 16
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2193.74536, -1226.74597, 1048.01538)) // Interior 17
		{
		    return 1;
		}
	}
	return 0;
}

IsAtjob(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(10.0,playerid,-105.9964,-1577.9606,2.6172))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2102.6831,-1807.8751,13.5547))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2022.3375,-1274.7028,23.9763))
		{
		    return 1;
		}
	}
	return 0;
}

CancelTruckDelivery(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsATruckerCar(vehicleid)) SetVehicleToRespawn(vehicleid);
	}
 	DestroyProgressBar(LoadTruckBar[playerid]);
	LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadTruckTime[playerid] = 0;
	DeletePVar(playerid, "TruckDeliver");
	TruckContents[TruckUsed[playerid]] = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	DisablePlayerCheckpoint(playerid);
	return 1;
}

//*******************CARS*******************
IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574)
	{
		return 1;
	}
	return 0;
}
IsAnBus(carid)
{
	if(GetVehicleModel(carid) == 431 || GetVehicleModel(carid) == 437)
	{
		return 1;
	}
	return 0;
}
LAPD_OrgGobCar(carid)
{
	for(new v = 0; v < sizeof(LAPDVehicles); v++)
	{
	    if(carid == LAPDVehicles[v]) return 1;
	}
	return 0;
}
IsAnSantanaCar(carid)
{
	for(new v = 0; v < sizeof(Santana_Vehicle); v++)
	{
	    if(carid == Santana_Vehicle[v]) return 1;
	}
	return 0;
}

IsAnTaxi(carid)
{
	if(GetVehicleModel(carid) == 420 || GetVehicleModel(carid) == 438)
	{
		return 1;
	}
	return 0;
}
IsAnRusaCar(carid)
{
	for(new v = 0; v < sizeof(Rusa_Vehicle); v++)
	{
	    if(carid == Rusa_Vehicle[v]) return 1;
	}
	return 0;
}
Taxi_Vehicle(carid)
{
	for(new v = 0; v < sizeof(TaxiTrans); v++)
	{
	    if(carid == TaxiTrans[v]) return 1;
	}
	return 0;
}
TBuses_Vehicle(carid)
{
	for(new v = 0; v < sizeof(TBuses); v++)
	{
	    if(carid == TBuses[v]) return 1;
	}
	return 0;
}
TrabajoCam(carid)
{
	for(new v = 0; v < sizeof(CamionerosPC); v++)
	{
	    if(carid == CamionerosPC[v]) return 1;
	}
	return 0;
}
TrabajoHeladero(carid)
{
	for(new v = 0; v < sizeof(CochesHeladero); v++)
	{
	    if(carid == CochesHeladero[v]) return 1;
	}
	return 0;
}
BasureroLA(carid)
{
	for(new v = 0; v < sizeof(C_Basurero); v++)
	{
	    if(carid == C_Basurero[v]) return 1;
	}
	return 0;
}
Tren_Vehicle(carid)
{
	for(new v = 0; v < sizeof(TrenVEH); v++)
	{
	    if(carid == TrenVEH[v]) return 1;
	}
	return 0;
}
IsATruckerCar(carid)
{
	for(new v = 0; v < sizeof(TruckerVehicles); v++)
	{
	    if(carid == TruckerVehicles[v]) return 1;
	}
	return 0;
}

IsAHarvest(carid)
{
	if(GetVehicleModel(carid) == 532)
	{
		return 1;
	}
	return 0;
}

Vortex_Vehicle(carid)
{
	if(GetVehicleModel(carid) == 539)
	{
		return 1;
	}
	return 0;
}

IsAPizzabike(carid)
{
	for(new v = 0; v < sizeof(PizzaBike); v++)
	{
	    if(carid == PizzaBike[v]) return 1;
	}
	return 0;
}

IsAnAmbulance(carid)
{
	if(GetVehicleModel(carid) == 416)
	{
		return 1;
	}
	return 0;
}

LAMD_Vehicle(carid)
{
	for(new v = 0; v < sizeof(LAMDVehicles); v++)
	{
	    if(carid == LAMDVehicles[v]) return 1;
	}
	return 0;
}

Mecanico_Vehicle(carid)
{
	for(new v = 0; v < sizeof(MecanicosVehicle); v++)
	{
	    if(carid == MecanicosVehicle[v]) return 1;
	}
	return 0;
}

AININT_Vehicle(carid)
{
	for(new v = 0; v < sizeof(AININTVehicle); v++)
	{
	    if(carid == AININTVehicle[v]) return 1;
	}
	return 0;
}
IsAnAlqaedaCar(carid)
{
	for(new v = 0; v < sizeof(Alqaeda_Vehicle); v++)
	{
	    if(carid == Alqaeda_Vehicle[v]) return 1;
	}
	return 0;
}
CNN_Vehicle(carid)
{
	for(new v = 0; v < sizeof(FOXVehicle); v++)
	{
	    if(carid == FOXVehicle[v]) return 1;
	}
	return 0;
}
VIP_Car(carid)
{
	for(new v = 0; v < sizeof(CarVIP); v++)
	{
	    if(carid == CarVIP[v]) return 1;
	}
	return 0;
}

IsARentCar(carid)
{
	for(new v = 0; v < sizeof(RentaVehicle); v++)
	{
	    if(carid == RentaVehicle[v]) return 1;
	}
	return 0;
}

IsAnUSMCCar(carid)
{
	for(new i = 0; i < sizeof(USMCLandVehicles); i++)
	{
		if(USMCLandVehicles[ i ] == carid) return 1;
	}
	return 0;
}
SistemaJudicialAuto(carid)
{
	for(new v = 0; v < sizeof(AutosJudicial); v++)
	{
	    if(carid == AutosJudicial[v]) return 1;
	}
	return 0;
}

GobierAuto(carid)
{
	for(new v = 0; v < sizeof(GobiernoCar); v++)
	{
	    if(carid == GobiernoCar[v]) return 1;
	}
	return 0;
}
IsAnHitmanCar(carid)
{
   for(new v = 0; v < sizeof(Hitman_Vehicle); v++)
   {
       if(carid == Hitman_Vehicle[v]) return 1;
   }
return 0;
}
IsAnCBPCar(carid)
{
   for(new v = 0; v < sizeof(CBP_Vehicle); v++)
   {
	   if(carid == CBP_Vehicle[v]) return 1;
   }
   return 0;
}

IsAnBMCCar(carid)
{
   for(new v = 0; v < sizeof(BMC_Vehicle); v++)
   {
	   if(carid == BMC_Vehicle[v]) return 1;
   }
   return 0;
}
IsAnBroadwayCar(carid)
{
   for(new v = 0; v < sizeof(Broadway_Vehicle); v++)
   {
	   if(carid == Broadway_Vehicle[v]) return 1;
   }
   return 0;
}
IsAnSurCar(carid)
{
   for(new v = 0; v < sizeof(Longos_Vehicle); v++)
   {
	   if(carid == Longos_Vehicle[v]) return 1;
   }
   return 0;
}
IsAnLCNCar(carid)
{
	for(new v = 0; v < sizeof(LCN_Vehicle); v++)
	{
	    if(carid == LCN_Vehicle[v]) return 1;
	}
	return 0;
}
IsAnYakuzaCar(carid)
{
	for(new v = 0; v < sizeof(Yakuza_Vehicle); v++)
	{
	    if(carid == Yakuza_Vehicle[v]) return 1;
	}
	return 0;
}

CIA_OrgGobCar(carid)
{
	for(new v = 0; v < sizeof(CIAVehicles); v++)
	{
	    if(carid == CIAVehicles[v]) return 1;
	}
	return 0;
}

VehiculoBomberosBA(carid)
{
	for(new i = 0; i < sizeof(BomberosBAVeh); i++)
	{
		if(BomberosBAVeh[ i ] == carid) return 1;
	}
	return 0;
}
Motor_Vehicle(carid)
{
	for(new v = 0; v < sizeof(MotorVehicle); v++)
	{
	    if(carid == MotorVehicle[v]) return 1;
	}
	return 0;
}
Play_Music_Vehicle(carid)
{
	for(new v = 0; v < sizeof(PlayMusicVehicle); v++)
	{
	    if(carid == PlayMusicVehicle[v]) return 1;
	}
	return 0;
}

IsABike(carid)
{
	if(GetVehicleModel(carid) == 509 || GetVehicleModel(carid) ==  481 || GetVehicleModel(carid) == 510)
	{
		return 1;
	}
	return 0;
}

IsAMBike(fahrzeug)
{
    new Motorads[] = { 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471 };
    for(new i = 0; i < sizeof(Motorads); i++) {
        if(GetVehicleModel(fahrzeug) == Motorads[i]) return 1;
    }
    return 0;
}

IsAPlane(carid)
{
	switch(GetVehicleModel(carid)) {
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}

GivePlayerValidWeapon(playerid, WeaponID){
    if((Info[playerid][pConnectTime] < 0 || Info[playerid][pWRestricted] > 0) && WeaponID != 46 && WeaponID != 43) return 1;
	switch( WeaponID ){
  		case 0, 1:{
			Info[playerid][pWeapons][ 0 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:{
			Info[playerid][pWeapons][ 1 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1);
		}
		case 22, 23, 24:{
			Info[playerid][pWeapons][ 2 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 57);
		}
		case 25, 26, 27:{
			Info[playerid][pWeapons][ 3 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 20);
		}
		case 28, 29, 32:{
			Info[playerid][pWeapons][ 4 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 100);
		}
		case 30, 31:{
			Info[playerid][pWeapons][ 5 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 350);
		}
		case 33, 34:{
			Info[playerid][pWeapons][ 6 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 10);
		}
		case 35, 36, 37, 38:{
			Info[playerid][pWeapons][ 7 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1);
		}
		case 16, 17, 18, 39:{
			Info[playerid][pWeapons][ 8 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1);
		}
		case 41, 42, 43:{
			Info[playerid][pWeapons][ 9 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1000);
		}
		case 10, 11, 12, 13, 14, 15:{
			Info[playerid][pWeapons][ 10 ] = WeaponID;
   			GivePlayerWeapon( playerid, WeaponID, 1);
		}
		case 44, 45, 46:{
			Info[playerid][pWeapons][ 11 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1);
		}
	    case 40: {
	        Info[playerid][pWeapons][12] = WeaponID;
	        GivePlayerWeapon(playerid, WeaponID, 1);
	    }
	}
	return 1;
}
stock GetWeaponSlot(weaponid) {
	switch(weaponid) {
		case 0, 1: return 0;
		case 2 .. 9: return 1;
		case 22 .. 24: return 2;
		case 25 .. 27: return 3;
		case 28, 29, 32: return 4;
		case 30, 31: return 5;
		case 33, 34: return 6;
		case 35 .. 38: return 7;
		case 16, 17, 18, 39: return 8;
		case 41 .. 43: return 9;
		case 10 .. 15: return 10;
		case 44 .. 46: return 11;
		case 40: return 12;
	}
	return -1;
}
stock ResetPlayerWeaponsEx( playerid ){
	ResetPlayerWeapons(playerid);
	Info[playerid][pWeapons][0] = 0;
	Info[playerid][pWeapons][1] = 0;
	Info[playerid][pWeapons][2] = 0;
	Info[playerid][pWeapons][3] = 0;
	Info[playerid][pWeapons][4] = 0;
	Info[playerid][pWeapons][5] = 0;
	Info[playerid][pWeapons][6] = 0;
	Info[playerid][pWeapons][7] = 0;
	Info[playerid][pWeapons][8] = 0;
	Info[playerid][pWeapons][9] = 0;
	Info[playerid][pWeapons][10] = 0;
	Info[playerid][pWeapons][11] = 0;
	Info[playerid][pWeapons][12] = 0;
	return 1;
}
stock PlayerPlaySoundEx(soundid, Float:x, Float:y, Float:z) { //Realistic sound playback
	foreach(Player, i) {
		if(IsPlayerInRangeOfPoint(i, 20.0, x, y, z))
			PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}
partType(type)
{
	new name[64];
	switch(type){
	    case 0: name = "Alerón";
        case 1: name = "Capó";
        case 2: name = "Techo";
        case 3: name = "Lados";
        case 4: name = "Lamps";
        case 5: name = "Nitro";
        case 6: name = "Escape";
        case 7: name = "Ruedas";
        case 8: name = "Stereo";
        case 9: name = "Hidráulica";
        case 10: name = "Parachoque D.";
        case 11: name = "Parachoque T.";
        case 12: name = "Ventilacion Izq.";
        case 13: name = "Ventilacion Der.";
        default: name = "Desconocida";
	}
	return name;
}

partName(part){

	new
		name[24];

	switch(part - 1000) {
		case 0:	name = "Pro";
		case 1: name = "Win";
		case 2: name = "Drag";
		case 3: name = "Alpha";
		case 4: name = "Champ Scoop";
		case 5: name = "Fury Scoop";
		case 6: name = "Roof Scoop";
		case 7: name = "Sideskirt";
		case 8: name = "2x";
		case 9: name = "5x";
		case 10: name = "10x";
		case 11: name = "Race Scoop";
		case 12: name = "Worx Scoop";
		case 13: name = "Round Fog";
		case 14: name = "Champ";
		case 15: name = "Race";
		case 16: name = "Worx";
		case 17: name = "Sideskirt";
		case 18: name = "Upswept";
		case 19: name = "Twin";
		case 20: name = "Large";
		case 21: name = "Medium";
		case 22: name = "Small";
		case 23: name = "Fury";
		case 24: name = "Square Fog";
		case 26: name = "Alien";
		case 27: name = "Alien";
		case 28: name = "Alien";
		case 29: name = "X-Flow";
		case 30: name = "X-Flow";
		case 31: name = "X-Flow";
		case 32: name = "Alien Roof Vent";
		case 33: name = "X-Flow Roof Vent";
		case 34: name = "Alien";
		case 35: name = "X-Flow Roof Vent";
		case 36: name = "Alien";
		case 37: name = "X-Flow";
		case 38: name = "Alien Roof Vent";
		case 39: name = "X-Flow";
		case 40: name = "Alien";
		case 41: name = "X-Flow";
		case 42: name = "Chrome";
		case 43: name = "Slamin";
		case 44: name = "Chrome";
		case 45: name = "X-Flow";
		case 46: name = "Alien";
		case 47: name = "Alien";
		case 48: name = "X-Flow";
		case 49: name = "Alien";
		case 50: name = "X-Flow";
		case 51: name = "Alien";
		case 52: name = "X-Flow";
		case 53: name = "X-Flow";
		case 54: name = "Alien";
		case 55: name = "Alien";
		case 56: name = "Alien";
		case 57: name = "X-Flow";
		case 58: name = "Alien";
		case 59: name = "X-Flow";
		case 60: name = "X-Flow";
		case 61: name = "X-Flow";
		case 62: name = "Alien";
		case 63: name = "X-Flow";
		case 64: name = "Alien";
		case 65: name = "Alien";
		case 66: name = "X-Flow";
		case 67: name = "Alien";
		case 68: name = "X-Flow";
		case 69: name = "Alien";
		case 70: name = "X-Flow";
		case 71: name = "Alien";
		case 72: name = "X-Flow";
		case 88: name = "Alien";
		case 89: name = "X-Flow";
		case 90: name = "Alien";
		case 91: name = "X-Flow";
		case 92: name = "Alien";
		case 93: name = "X-Flow";
		case 94: name = "Alien";
		case 95: name = "X-Flow";
		case 99: name = "Chrome";
		case 100: name = "Chrome Grill";
		case 101: name = "Chrome Flames";
		case 102: name = "Chrome Strip";
		case 103: name = "Convertible";
		case 104: name = "Chrome";
		case 105: name = "Slamin";
		case 106: name = "Chrome Arches";
		case 107: name = "Chrome Strip";
		case 108: name = "Chrome Strip";
		case 109: name = "Chrome";
		case 110: name = "Slamin";
		case 113: name = "Chrome";
		case 114: name = "Slamin";
		case 115: name = "Chrome";
		case 116: name = "Slamin";
		case 117: name = "Chrome";
		case 118: name = "Chrome Trim";
		case 119: name = "Wheelcovers";
		case 120: name = "Chrome Trim";
		case 121: name = "Wheelcovers";
		case 122: name = "Chrome Flames";
		case 123: name = "Bullbar Chrome Bars";
		case 124: name = "Chrome Arches";
		case 125: name = "Bullbar Chrome Lights";
		case 126: name = "Chrome";
		case 127: name = "Slamin";
		case 128: name = "Vinyl Hardtop";
		case 129: name = "Chrome";
		case 130: name = "Hardtop";
		case 131: name = "Softtop";
		case 132: name = "Slamin";
		case 133: name = "Chrome Strip";
		case 134: name = "Chrome Strip";
		case 135: name = "Slamin";
		case 136: name = "Chrome";
		case 137: name = "Chrome Strip";
		case 138: name = "Alien";
		case 139: name = "X-Flow";
		case 140: name = "X-Flow";
		case 141: name = "Alien";
		case 142: name = "Left Oval Vents";
		case 143: name = "Right Oval Vents";
		case 144: name = "Left Square Vents";
		case 145: name = "Right Square Vents";
		case 146: name = "X-Flow";
		case 147: name = "Alien";
		case 148: name = "X-Flow";
		case 149: name = "Alien";
		case 150: name = "Alien";
		case 151: name = "X-Flow";
		case 152: name = "X-Flow";
		case 153: name = "Alien";
		case 154: name = "Alien";
		case 155: name = "Alien";
		case 156: name = "X-Flow";
		case 157: name = "X-Flow";
		case 158: name = "X-Flow";
		case 159: name = "Alien";
		case 160: name = "Alien";
		case 161: name = "X-Flow";
		case 162: name = "Alien";
		case 163: name = "X-Flow";
		case 164: name = "Alien";
		case 165: name = "X-Flow";
		case 166: name = "Alien";
		case 167: name = "X-Flow";
		case 168: name = "Alien";
		case 169: name = "Alien";
		case 170: name = "X-Flow";
		case 171: name = "Alien";
		case 172: name = "X-Flow";
		case 173: name = "X-Flow";
		case 174: name = "Chrome";
		case 175: name = "Slamin";
		case 176: name = "Chrome";
		case 177: name = "Slamin";
		case 178: name = "Slamin";
		case 179: name = "Chrome";
		case 180: name = "Chrome";
		case 181: name = "Slamin";
		case 182: name = "Chrome";
		case 183: name = "Slamin";
		case 184: name = "Chrome";
		case 185: name = "Slamin";
		case 186: name = "Slamin";
		case 187: name = "Chrome";
		case 188: name = "Slamin";
		case 189: name = "Chrome";
		case 190: name = "Slamin";
		case 191: name = "Chrome";
		case 192: name = "Chrome";
		case 193: name = "Slamin";
	}
	return name;
}

//**************************************

public OnPlayerRequestClass(playerid, classid)
{
    if(IsPlayerNPC(playerid)) return 1;
    return 1;
}

public OnPlayerConnect(playerid)
{
//***SISTEMA AFK***
Afk[playerid]=0;
//***sistema de fire***
Apagandofire[playerid] = 0;
llegarf[playerid] = false;
//**security**
#if defined AntiJoin 1
new Nombre[MAX_PLAYER_NAME];
new Entradas = 0;
new RegistroIP[20];
new Cuenta = GetTickCount();
new Nick[MAX_PLAYER_NAME];
new Codigo;
new Jugador;
new Menu[1024];
if(DetectarIP(ObtenerIP(playerid)) >= 10) return BanearBots(playerid), 0;
Jugadores = playerid > Jugadores ? playerid : IDMayor(),
BotServidor[playerid] = bool:IsPlayerNPC(playerid),
Advertencias[playerid] = 0;
Muertes[playerid] = 0;
MuerteReciente[playerid] = 0;
GetPlayerIp(playerid, RegistroIP, 19);
GetPlayerName(playerid, Nick, MAX_PLAYER_NAME);
for(Codigo = 0; Codigo < 10; Codigo++)
{
if(strlen(EntrarIP[Codigo]) < 10)  continue;
if(strcmp(RegistroIP, EntrarIP[Codigo], true) == 0)
{
if((Cuenta - MenorTiempo) < EntrarCuenta[Codigo])
{
Entradas++;
}
}
}
if (Entradas >= Logueos)
{
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por Hack.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - Seguridad V2: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
/*format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado. Razón: Posible intento de Score Hack.", Nombre);
SendClientMessageToAll(Gris, Texto);*/
Kick(playerid);
}
for (Codigo = 9; Codigo > 0; Codigo--)
{
Jugador = Codigo - 1;
format(EntrarIP[Codigo], 19, "%s", EntrarIP[Jugador]);
EntrarCuenta[Codigo] = EntrarCuenta[Jugador];
}
format(EntrarIP[0], 19, "%s", RegistroIP);
EntrarCuenta[0] = Cuenta;
#endif
	//************
    if(IsPlayerNPC(playerid)) return 1;
	new playerIP[16];
	FPS[playerid] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	GetPlayerIp(playerid, playerIP, sizeof(playerIP));
	SetPlayerColor(playerid,COLOR_GRAD2);
	PlayAudioStreamForPlayer(playerid, "http:///audio.mp3");
	for(new loop=0; loop<100; loop++)  SendClientMessage(playerid, COLOR_WHITE,"");
    GameTextForPlayer(playerid, "", 3000, 3);
	if (CheckBan(playerIP) == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_ROJO, "BANEADO:{FFFFFF} Para ingresar al servidor debes ir a www.titaniumgamers.es y realizar la apelación de desbaneo.");
		Kick(playerid);
		return 1;
 	}
	TotalConnect++;
	resetPlayerVariables(playerid);
	MapsRemoveForPlayer(playerid);
	ClearMarriage(playerid);
	SyncPlayerTime(playerid);
 	ShowMenuLogin(playerid);

	if(Iter_Count(Player) > MaxPlayersConnected)
	{
		MaxPlayersConnected = Iter_Count(Player);
		gettime(MPHour,MPMinute);
		getdate(MPYear,MPMonth,MPDay);
	}
	if(Info[playerid][pPbizzkey] == 0)
	{
	Info[playerid][pPbizzkey] = 9999;
	}
	if(MaxPlayersConnected > 200) MaxPlayersConnected = 200;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(!INI_Exist(playername))
	{
    	if(doesAccountExist(playername))
    	{
			ConvertAccount(playerid);
			return 1;
		}
	}
	SetTimerEx("SafeLogin", 4000, 0, "d", playerid);


	Koson1[playerid] = 0;Kosonrob[playerid] = 1 ;
    recojercesped[playerid]=0;
    papilla[playerid] = 0;
    acobrarcesped[playerid]=0;
    bgas[playerid] = 0;
    armaRecibir[playerid]=0;
	SetPVarInt(playerid,"PlayerStartDrova",0);
	lena1[playerid] = 0;
	HaveTaser[playerid] = 0;
	RemovePlayerAttachedObject(playerid, 0);
	SetPVarInt(playerid,"Miner", 0);
 	SetPVarInt(playerid,"Start", 0);
 	Vortex[playerid] = 0;
	//*******************texto estado*******************
	textdrawscount++;
 	VentaDeArmaCon[playerid][0] = -1;
    VentaDeArmaCon[playerid][1] = 0;
    Watching[playerid] = 0;
    manubrio[playerid] = 0;
    refuer[playerid] = 0;
    RadioOn[playerid] = 1;
    SetTimerEx("TimerROB",1200000,false,"d",playerid);

//***dni por textdraw***
DNI12[playerid] = CreatePlayerTextDraw(playerid,196.000000, 174.195556, "LD_SPAC:white");//skin
PlayerTextDrawBackgroundColor(playerid, DNI12[playerid], 0);
PlayerTextDrawTextSize(playerid, DNI12[playerid], 77.777770, 136.391113);
PlayerTextDrawUseBox(playerid, DNI12[playerid], 1);
PlayerTextDrawBoxColor(playerid, DNI12[playerid], 0x00000000);
PlayerTextDrawColor(playerid, DNI12[playerid], -1);
PlayerTextDrawFont(playerid, DNI12[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);

DNI0[playerid] = CreatePlayerTextDraw(playerid, 445.000000, 143.250000, "usebox");
PlayerTextDrawLetterSize(playerid, DNI0[playerid], 0.000000, 20.343055);
PlayerTextDrawTextSize(playerid, DNI0[playerid], 211.500000, 0.000000);
PlayerTextDrawAlignment(playerid, DNI0[playerid], 1);
PlayerTextDrawColor(playerid, DNI0[playerid], 0);
PlayerTextDrawUseBox(playerid, DNI0[playerid], true);
PlayerTextDrawBoxColor(playerid, DNI0[playerid], 102);
PlayerTextDrawSetShadow(playerid, DNI0[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI0[playerid], 0);
PlayerTextDrawFont(playerid, DNI0[playerid], 0);

DNI1[playerid] = CreatePlayerTextDraw(playerid, 213.000000, 142.187500, "ld_drv:ribbw");
PlayerTextDrawLetterSize(playerid, DNI1[playerid], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, DNI1[playerid], 106.000000, 34.562500);
PlayerTextDrawAlignment(playerid, DNI1[playerid], 1);
PlayerTextDrawColor(playerid, DNI1[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI1[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI1[playerid], 0);
PlayerTextDrawBackgroundColor(playerid, DNI1[playerid], -5963521);
PlayerTextDrawFont(playerid, DNI1[playerid], 4);

DNI2[playerid] = CreatePlayerTextDraw(playerid, 386.500000, 136.500000, "DNI");
PlayerTextDrawLetterSize(playerid, DNI2[playerid], 0.742500, 3.126873);
PlayerTextDrawAlignment(playerid, DNI2[playerid], 1);
PlayerTextDrawColor(playerid, DNI2[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI2[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI2[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI2[playerid], 51);
PlayerTextDrawFont(playerid, DNI2[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI2[playerid], 1);

DNI3[playerid] = CreatePlayerTextDraw(playerid, 390.500000, 164.937500, "596412235");
PlayerTextDrawLetterSize(playerid, DNI3[playerid], 0.210000, 1.429375);
PlayerTextDrawAlignment(playerid, DNI3[playerid], 1);
PlayerTextDrawColor(playerid, DNI3[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI3[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI3[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI3[playerid], 51);
PlayerTextDrawFont(playerid, DNI3[playerid], 1);
PlayerTextDrawSetProportional(playerid, DNI3[playerid], 1);

DNI4[playerid] = CreatePlayerTextDraw(playerid, 290.000000, 201.687500, "Nombre");
PlayerTextDrawLetterSize(playerid, DNI4[playerid], 0.373999, 2.238747);
PlayerTextDrawAlignment(playerid, DNI4[playerid], 1);
PlayerTextDrawColor(playerid, DNI4[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI4[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI4[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI4[playerid], 51);
PlayerTextDrawFont(playerid, DNI4[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI4[playerid], 1);

DNI5[playerid] = CreatePlayerTextDraw(playerid, 290.500000, 225.750000, "nombre apellido");
PlayerTextDrawLetterSize(playerid, DNI5[playerid], 0.173499, 1.678749);
PlayerTextDrawAlignment(playerid, DNI5[playerid], 1);
PlayerTextDrawColor(playerid, DNI5[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI5[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI5[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI5[playerid], 51);
PlayerTextDrawFont(playerid, DNI5[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI5[playerid], 1);

DNI6[playerid] = CreatePlayerTextDraw(playerid, 291.000000, 253.312500, "Edad");
PlayerTextDrawLetterSize(playerid, DNI6[playerid], 0.460499, 2.033123);
PlayerTextDrawAlignment(playerid, DNI6[playerid], 1);
PlayerTextDrawColor(playerid, DNI6[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI6[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI6[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI6[playerid], 51);
PlayerTextDrawFont(playerid, DNI6[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI6[playerid], 1);

DNI7[playerid] = CreatePlayerTextDraw(playerid, 291.000000, 276.500000, "99");
PlayerTextDrawLetterSize(playerid, DNI7[playerid], 0.403000, 1.258750);
PlayerTextDrawAlignment(playerid, DNI7[playerid], 1);
PlayerTextDrawColor(playerid, DNI7[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI7[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI7[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI7[playerid], 51);
PlayerTextDrawFont(playerid, DNI7[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI7[playerid], 1);

DNI8[playerid] = CreatePlayerTextDraw(playerid, 368.500000, 254.187500, "sexo");
PlayerTextDrawLetterSize(playerid, DNI8[playerid], 0.456999, 1.954373);
PlayerTextDrawAlignment(playerid, DNI8[playerid], 1);
PlayerTextDrawColor(playerid, DNI8[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI8[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI8[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI8[playerid], 51);
PlayerTextDrawFont(playerid, DNI8[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI8[playerid], 1);

DNI9[playerid] = CreatePlayerTextDraw(playerid, 368.500000, 276.937500, "hombre");
PlayerTextDrawLetterSize(playerid, DNI9[playerid], 0.281000, 1.118749);
PlayerTextDrawAlignment(playerid, DNI9[playerid], 1);
PlayerTextDrawColor(playerid, DNI9[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI9[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI9[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI9[playerid], 51);
PlayerTextDrawFont(playerid, DNI9[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI9[playerid], 1);

DNI10[playerid] = CreatePlayerTextDraw(playerid, 290.500000, 294.000000, "Nacionalidad");
PlayerTextDrawLetterSize(playerid, DNI10[playerid], 0.419500, 1.582500);
PlayerTextDrawAlignment(playerid, DNI10[playerid], 1);
PlayerTextDrawColor(playerid, DNI10[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI10[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI10[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI10[playerid], 51);
PlayerTextDrawFont(playerid, DNI10[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI10[playerid], 1);

DNI11[playerid] = CreatePlayerTextDraw(playerid, 309.000000, 312.812500, "Los Angeles");
PlayerTextDrawLetterSize(playerid, DNI11[playerid], 0.287500, 1.250000);
PlayerTextDrawAlignment(playerid, DNI11[playerid], 1);
PlayerTextDrawColor(playerid, DNI11[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI11[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI11[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI11[playerid], 51);
PlayerTextDrawFont(playerid, DNI11[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI11[playerid], 1);
//**********************
//***licencia por textdraw***
//textdraw licencias
 	LICENCIA0[playerid] = CreatePlayerTextDraw(playerid,423.333221, 146.851150, "usebox");
	PlayerTextDrawLetterSize(playerid, LICENCIA0[playerid], 0.000000, 17.713949);
	PlayerTextDrawTextSize(playerid, LICENCIA0[playerid], 197.111145, 0.000000);
	PlayerTextDrawAlignment(playerid, LICENCIA0[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA0[playerid], 0);
	PlayerTextDrawUseBox(playerid, LICENCIA0[playerid], true);
	PlayerTextDrawBoxColor(playerid, LICENCIA0[playerid], 102);
	PlayerTextDrawSetShadow(playerid, LICENCIA0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA0[playerid], 0);
	PlayerTextDrawFont(playerid, LICENCIA0[playerid], 0);

	LICENCIA5[playerid] = CreatePlayerTextDraw(playerid,290.222015, 229.475631, "nombre");
	PlayerTextDrawLetterSize(playerid, LICENCIA5[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, LICENCIA5[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA5[playerid], 869072810);
	PlayerTextDrawSetShadow(playerid, LICENCIA5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA5[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA5[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA5[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA5[playerid], 1);

	LICENCIA6[playerid] = CreatePlayerTextDraw(playerid,291.110992, 260.337951, "edad");
	PlayerTextDrawLetterSize(playerid, LICENCIA6[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, LICENCIA6[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA6[playerid], 869072810);
	PlayerTextDrawSetShadow(playerid, LICENCIA6[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA6[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA6[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA6[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA6[playerid], 1);

	LICENCIA7[playerid] = CreatePlayerTextDraw(playerid,291.999847, 281.742340, "sexo");
	PlayerTextDrawLetterSize(playerid, LICENCIA7[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, LICENCIA7[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA7[playerid], 869072810);
	PlayerTextDrawSetShadow(playerid, LICENCIA7[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA7[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA7[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA7[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA7[playerid], 1);

	LICENCIA1[playerid] = CreatePlayerTextDraw(playerid,204.888900, 155.306671, "_"); //SKIN
	PlayerTextDrawLetterSize(playerid, LICENCIA1[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LICENCIA1[playerid], 80.888839, 144.355529);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA1[playerid], 0);
	PlayerTextDrawUseBox(playerid, LICENCIA1[playerid], 1);
	PlayerTextDrawBoxColor(playerid, LICENCIA1[playerid], 0x00000000);
	PlayerTextDrawColor(playerid, LICENCIA1[playerid], -1);
	PlayerTextDrawFont(playerid, LICENCIA1[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);

	LICENCIA2[playerid] = CreatePlayerTextDraw(playerid,291.111358, 246.897644, "nombre_apellido");
	PlayerTextDrawLetterSize(playerid, LICENCIA2[playerid], 0.227332, 1.151991);
	PlayerTextDrawAlignment(playerid, LICENCIA2[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LICENCIA2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA2[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA2[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA2[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA2[playerid], 1);

	LICENCIA3[playerid] = CreatePlayerTextDraw(playerid,334.666656, 149.333389, "_");//ICONO LICENCIA
	PlayerTextDrawLetterSize(playerid, LICENCIA3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LICENCIA3[playerid], 82.222198, 80.640014);
	PlayerTextDrawTextSize(playerid, LICENCIA3[playerid], 82.222198, 80.640014);
	PlayerTextDrawAlignment(playerid, LICENCIA3[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LICENCIA3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA3[playerid], 0);
	PlayerTextDrawFont(playerid, LICENCIA3[playerid], 4);

	LICENCIA4[playerid] = CreatePlayerTextDraw(playerid,352.000061, 262.826721, "99");
	PlayerTextDrawLetterSize(playerid, LICENCIA4[playerid], 0.227332, 1.151998);
	PlayerTextDrawAlignment(playerid, LICENCIA4[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LICENCIA4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA4[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA4[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA4[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA4[playerid], 1);

	LICENCIA8[playerid] = CreatePlayerTextDraw(playerid,351.555389, 284.231170, "hombre");
	PlayerTextDrawLetterSize(playerid, LICENCIA8[playerid], 0.227332, 1.151998);
	PlayerTextDrawAlignment(playerid, LICENCIA8[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA8[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LICENCIA8[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA8[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA8[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA8[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA8[playerid], 1);
	//textdraw dni
	DNI12[playerid] = CreatePlayerTextDraw(playerid,196.000000, 174.195556, "LD_SPAC:white");//skin
	PlayerTextDrawBackgroundColor(playerid, DNI12[playerid], 0);
	PlayerTextDrawTextSize(playerid, DNI12[playerid], 77.777770, 136.391113);
	PlayerTextDrawUseBox(playerid, DNI12[playerid], 1);
	PlayerTextDrawBoxColor(playerid, DNI12[playerid], 0x00000000);
	PlayerTextDrawColor(playerid, DNI12[playerid], -1);
	PlayerTextDrawFont(playerid, DNI12[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);
//**********************
	return 1;
}



function SafeLogin(playerid)
{
ClearChatbox(playerid);
new LogeoReglas[10000];
strcat(LogeoReglas, "Absolute Titanium RolePlay ®");
SafeDialogEx(playerid, ACEPTAR_TER, DIALOG_STYLE_MSGBOX, "{FFFFFF}Bienvenido A:", LogeoReglas, "Ingresar","");
return 1;
}

ShowMainMenuDialog(playerid, frame)
{
	new titlestring[1000];
	new string[1000];
	InsideMainMenu[playerid] = true;
	switch(frame)
	{
		case 1:
		{
		    INI_ParseFile(UserPath(playerid), "LoadUser_pass", .bExtra = true, .extra = playerid);
			new ip[32];
			GetPlayerIp(playerid, ip, 32);
			format(titlestring, sizeof(titlestring), "{FFFFFF}Cuenta: {2EDFFF}%s", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "{FFFFFF}• Esta cuenta está registrada en nuestra base de datos, ingresaste\n  con la siguiente IP: {2EDFFF}%s\n\n\n{FFFFFF}• Ingrese la clave de su cuenta:", ip);
			SafeDialogEx(playerid,DLOGIN,DIALOG_STYLE_PASSWORD ,titlestring,string,"Entrar","Salir");
			SetPlayerVirtualWorld(playerid, 20);
		}
		case 2:
		{
			new ip[32];
			GetPlayerIp(playerid, ip, 32);
			format(titlestring, sizeof(titlestring), "{FFFFFF}Cuenta: {2EDFFF}%s", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "{FFFFFF}• Esta cuenta {FF0000}no se encuentra registrada{FFFFFF} en nuestra base de datos, lo\n  cual debe proceder a los siguientes pasos de registro.\n\n\n{FFFFFF}• Ingrese la clave de registro:", ip);
			SafeDialogEx(playerid,DREGISTER,DIALOG_STYLE_INPUT ,titlestring,string,"Registrar","Salir");
	    	SetPlayerVirtualWorld(playerid, 20);
		}
	}
}

ShowMenuLogin(playerid)
{
    ClearChatbox(playerid);
	new string[128];
	for(new i = 0; i < 9; i++)
	{
		TextDrawShowForPlayer(playerid, LoginMenu[i]);
	}
	format(string, sizeof(string), "", GlobalMOTD);
	TextDrawSetString(LoginMenu[8], string);
	return 1;
}

HideMenuLogin(playerid)
{
	for(new i = 0; i < 9; i++) { TextDrawHideForPlayer(playerid, LoginMenu[i]); }
	return 1;
}



function Lotto(number)
{
	new JackpotFallen = 0;
	new string[128];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "* El número ganador es: {FFFFFF}%d", number);
    OOCNews(COLOR_VIP, string);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(Info[i][pLottoNr] > 0)
			{
			    if(Info[i][pLottoNr] == number)
				{
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "Lotería: {FFFFFF}¡%s ha ganado $%d!", winner, Jackpot);
					OOCNews(COLOR_VIP, string);
					format(string, sizeof(string), "[SMS]: Has ganado $%d con tu boleta de lotería - Felicitaciones. De: 9891 - (Lotería)", Jackpot);
					SendClientMessageEx(i, COLOR_YELLOW, string);
					GivePlayerCash(i, Jackpot);
					PlayerPlayMusic(i);
			    }
			    else
			    {
			        SendClientMessageEx(i, COLOR_GREY, "* No has ganado la loteria, suerte en la próxima.");
			    }
			}
			Info[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    new rand = random(20000); rand += 5000;
	    Jackpot = rand;
	    SaveStuff();
	    format(string, sizeof(string), "Lotería: {FFFFFF}Iniciamos con un nuevo acumulado de $%d.", Jackpot);
		OOCNews(COLOR_VIP, string);
	}
	else
	{
	    new rand = random(5000); rand += 2158;
	    Jackpot += rand;
	    SaveStuff();
	    format(string, sizeof(string), "Lotería:{FFFFFF} El premio se ha aumentado a $%d.", Jackpot);
		OOCNews(COLOR_VIP, string);
	}
	return 1;

}
//****************************************************************************

resetPlayerVariables(playerid)
{
    Info[playerid][pTarjetaCredito] = 0;
	SetPVarInt(playerid, "shrequest", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "IsInArena", 0);
	SetPVarInt(playerid, "ArenaMode", 0);
	SetPVarInt(playerid, "FirstSpawn", 1);
	SetPVarInt(playerid, "editingfamhq", 255);
	SetPVarInt(playerid, "editingcd", -1);
	SetPVarInt(playerid, "editingcdveh", -1);
// Alcohol
Info[playerid][pAlcohol] = 0;
//***************************
   	UsedCrack[playerid] = 0; 					UsedWeed[playerid] = 0;             CurrentDialog[playerid] = -1;       gMusic[playerid] = 0;
	CrackOffer[playerid] = 999; 				CrackGram[playerid] = 0; 			CrackPrice[playerid] = 0;           PlayerStoned[playerid] = 0;
   	PotPrice[playerid] = 0; 					PotGram[playerid] = 0;              estacionp[playerid] = 0;            PotOffer[playerid] = 999;
	gOoc[playerid] = 0; 						gNews[playerid] = 0; 				BigEar[playerid] = 0; 				gFam[playerid] = 0;
	gPlayerLogged{playerid} = 0;                NewbieTimer[playerid] = 0; 			VIPTimer[playerid] = 0;             gNewbie[playerid] = 1;
	gPlayerSpawned[playerid] = 0; 				gLastCar[playerid] = 0;             gPlayerAccount[playerid] = 0;       gPlayerLogTries[playerid] = 0;
	TicketOffer[playerid] = 999; 				TicketMoney[playerid] = 0;          InsideMainMenu[playerid] = 0;       PlayerTazeTime[playerid] = 0;
	Paquetes[playerid] = 0; 					TutTime[playerid] = 0; 				HireKey[playerid] = 9999;			TaxiAccepted[playerid] = 999;
	ReduceTime[playerid] = 0;           		KnockedDown[playerid] = 0; 			UnidentifedCall[playerid] = 0;      TransportDriver[playerid] = 999;
	TransportValue[playerid] = 0; 				TransportMoney[playerid] = 0; 		TransportTime[playerid] = 0; 		TransportCost[playerid] = 0;
    IDCode[playerid] = -1;                      BoomBox[playerid] = 0;              BoomOn[playerid] = 0;
	OwnableCarOffer[playerid] = 999; 			OwnableCarID[playerid] = 999; 		OwnableCarPrice[playerid] = 0; 		BlindFold[playerid] = 0;
	PlayerIsSweeping[playerid] = 0; 			AdminDuty[playerid] = 0; 			PlayerNeedsHelp[playerid] = 0; 		IsSmoking[playerid] = 0;
	HelpingNewbie[playerid] = 999;				PlayerDuda[playerid] = 0;
	NewUsed[playerid] = 0; 						gRadio[playerid] = 1;				slotselection[playerid] = 0;		JobDuty[playerid] = 0;
	PuedeP[playerid] = 0; 						PuedeD[playerid] = 0;				TelfRob[playerid] = 0;      		duda[playerid] = 0;
	Facturing[playerid] = 0; 					fPay[playerid] = 0; 				fDest[playerid] = 0; 				fFacturer[playerid] = 0;
	Refueling[playerid] = -1;					courtjail[playerid] = 0;    		RequestingBackup[playerid] = 0; 	PlayersChannel[playerid] = 999;
    Info[playerid][pMaskuse] = 0;               Info[playerid][pMask] = 0;
    Lineas[playerid] = 0; 						Carnada[playerid] = 0;				MedicAccepted[playerid] = 999;		MedicCallTime[playerid] = 0;
 	RegText[playerid] = 0;						RegConfig[playerid] = 0;			HidePM[playerid] = 0; 				PhoneOnline[playerid] = 0;
	FishCount[playerid] = 0;					UsedFind[playerid] = 0;				FreezeLast[playerid] = 0; 			MoneyMessage[playerid] = 0;
	Condom[playerid] = 0; 						LoadTruckTime[playerid] = 0;		TruckDeliver[playerid] = 0; 		TruckUsed[playerid] = INVALID_VEHICLE_ID;
	LiveOffer[playerid] = 999;					TakingLesson[playerid] = 0;         RStep[playerid] = 0;                LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadMonTimee[playerid] = 0;                 LoadMonTime[playerid] = 0;          LoadMoneyy[playerid] = INVALID_BAR_ID;                                                                                  LoadMoney[playerid] = INVALID_BAR_ID;
 	PlayerCuffedTime[playerid] = 0; 			TazerTimeout[playerid] = 0; 		pTazer[playerid] = 0; 				pTazerReplace[playerid] = 0;// tazer
 	Speedlimit[playerid] = 0;
    advisorchat[playerid] = 1;                  carsforplayer[playerid] = 0;        TalkingLive[playerid] = INVALID_PLAYER_ID;
   	Ipadon[playerid] = 0;                       OnDuty[playerid] = 0;               arr_Towing[playerid] = INVALID_VEHICLE_ID;
	Muted[playerid] = 0;                        pCurrentWeapon[playerid] = 0;       DrugFarming[playerid] = 0;          gPlayerCheckpointStatus[playerid] = 0;
	TutStep[playerid] = 0;                      PlayerIsSweeping[playerid] = 0;     TransportDuty[playerid] = 0;        gPlayerAnimLibsPreloaded[playerid] = 0;
	MatsOffer[playerid] = 999;                  MatsPrice[playerid] = 0;            MatsAmount[playerid] = 0;           gPlayerUsingLoopingAnim[playerid] = 0;
	GGOffer[playerid] = 999;                    GGPrice[playerid] = 0;              GGAmount[playerid] = 0;
 	VIPPrice[playerid] = 0;                     VIPOffer[playerid] = 999;       	EventLastInt[playerid] = 0;         EventLastVW[playerid] = 0;
	FOffer[playerid] = 999;						FPrice[playerid] = 0; 				FAmount[playerid] = 0;              Mobile[playerid] = INVALID_PLAYER_ID;
 	GuardOffer[playerid] = 999;                 GuardPrice[playerid] = 0;           JetPack[playerid] = 0;              MechanicCallTime[playerid] = 0;
	CurrentMoney[playerid] = 0;                 EMSAccepted[playerid] = 999;        EMSCallTime[playerid] = 0;          RefillOffer[playerid] = 999;
	RepairCar[playerid] = 0;                    RepairOffer[playerid] = 999;        RepairPrice[playerid] = 0;          tarmalimit[playerid] = -1;
	RefillPrice[playerid] = 0;                  TutError[playerid] = 0;
	InviteOffer[playerid] = 999;                InviteFaction[playerid] = 0;        InviteFamily[playerid] = 255;       JustDuda[playerid] = -1;
	GunOffer[playerid] = 999;                   GunMats[playerid] = 0;              GunId[playerid] = 0;                JustAfk[playerid] = -1;
	VehicleOffer[playerid] = 999;               VehiclePrice[playerid] = 0;         VehicleId[playerid] = -1;           BasureroR[playerid] = 0;
	JailPrice[playerid] = 0;                    duda[playerid] = 3;                 JustReported[playerid] = -1;        AntiAbuso[playerid] = 0;
	Spectating[playerid] = 0;                   GettingSpectated[playerid] = 999;   Spectate[playerid] = 999;           Unspec[playerid][sLocal] = 255;
	PlayerDrunkTime[playerid] = 0;           	PlayerDrunk[playerid] = 0;          Editing[playerid] = 0;              Bus_Route1[playerid] = 0;
 	Info[playerid][pDNIFalse] = 0;     	        strmid(DNIName[playerid], "Nadie", 0, strlen("Nadie"), 32);             Bus_Route2[playerid] = 0;
 	CEntregas_01[playerid] = 0;                 CEntregas_02[playerid] = 0;         CEntregas_03[playerid] = 0;         CEntregas_04[playerid] = 0;
    LoadMonTimeeee[playerid] = 0; 	                                                                                    strmid(Info[playerid][pDNIName], "Ninguno", 0, strlen("Ninguno"), 12);
 	LoadMoneyyyy[playerid] = INVALID_BAR_ID;
 	HotDog[playerid] = 0;
 	Drag[playerid] = -1;                        Dragged[playerid] = -1;
    Blinded[playerid] = 0; 						Tied[playerid] = 0;
	ShowRules[playerid] = 0;                    RulesTime[playerid] = 0;            TreneroDuty[playerid] = 0;
    CommandSpamTimes[playerid] = 0;				CommandSpamUnmute[playerid] = 0;
	HitOffer[playerid] = 999;					HitToGet[playerid] = 999; 			GoChase[playerid] = 999; 			GetChased[playerid] = 999;
    CraftOffer[playerid] = 999;				    CraftId[playerid] = 0;              CraftMats[playerid] = 0;
	format(QFA[playerid],24,"Nadie");
    InteriorLimusina[playerid] = 0;
	InteriorSwatVan[playerid] = 0;
	InteriorTren[playerid] = 0;
	InteriorBeagle[playerid] = 0;

	for(new i = 0; i < 6; i++)
	{
	    EventFloats[playerid][i] = 0.0;
	}

	for(new s = 0; s < 40; s++)
	{
		ListItemReportId[playerid][s] = -1;
		ListItemTrackId[playerid][s] = -1;
	}

	for(new s = 0; s < 13; s++)
	{
		Info[playerid][pWeapons][s] = 0;
	}
    for(new s = 0; s < 11; s++)
	{
		Info[playerid][pMuebles][s] = -1;
	}
	//*******************Player Variables*******************
	Info[playerid][pCheques] = 0;               Info[playerid][pDNIFalse] = 0;
	Info[playerid][pTarjetaCredito] = 0;        Info[playerid][pBoombox] = 0;
	Info[playerid][pLevel] = 0;					Info[playerid][pAdminZC] = 0;
	Info[playerid][pFactionModerator] = 0;		Info[playerid][pGangModerator] = 0;
	Info[playerid][pLvlAdminZC] = 0;			Info[playerid][pHelper] = 0;
	Info[playerid][pBanAppealer] = 0;			Info[playerid][pConnectTime] = 0;
	Info[playerid][pReg] = 0;                   Info[playerid][pInTest] = 0;
	Info[playerid][pSex] = 0;                   Info[playerid][pStats_U] = 0;
	Info[playerid][pAge] = 0;					Info[playerid][pOrigin] = 0;
	Info[playerid][pExp] = 0;					Info[playerid][pSuci] = 0;
	Info[playerid][pAccount] = 0;               Info[playerid][pCRet] = 0;
	Info[playerid][pDeaths] = 0;                Info[playerid][pBGomas] = 0;
	Info[playerid][pArrested] = 0;
	Info[playerid][pJailAdmin] = 0; 			Info[playerid][pOrder] = 0;
	Info[playerid][pTempVIP] = 0; 				Info[playerid][pBuddyInvited] = 0;
	Info[playerid][pVIPInviteDay] = 0;			Info[playerid][pVTokens] = 0;
	Info[playerid][pJob2] = 0;					Info[playerid][pTypeSpawn] = 0;
	Info[playerid][pShopTech] = 0;				Info[playerid][pEstado] = 0;
	Info[playerid][pVIPDateM] = -1;				Info[playerid][pVIPDateD] = -1;
	Info[playerid][pRegalo] = -1;				Info[playerid][pLottoNr] = 0;
	Info[playerid][pJob] = 0;					Info[playerid][pNMute] = 0;
	Info[playerid][pNMuteTotal] = 0;			Info[playerid][pWarn] = 0;
	Info[playerid][pWRestricted] = 0;			Info[playerid][pJailed] = 0;
	Info[playerid][pJailTime] = 0;				Info[playerid][pMats] = 0;
	Info[playerid][pDrugs] = 0;					Info[playerid][pCosecha] = 0;
	Info[playerid][pCrack] = 0;					Info[playerid][pPot] = 0;
	Info[playerid][pAdiccion] = 0;				Info[playerid][pPackages] = 0;
	Info[playerid][pLeader] = 0;				Info[playerid][pMember] = 0;
	Info[playerid][pDivision] = 0;				Info[playerid][pFMember] = 255;
	Info[playerid][pDPHours] = 0;				Info[playerid][pDPTime] = -1;
	Info[playerid][pDPTotal] = 0;				Info[playerid][pRank] = 0;
	Info[playerid][pChar] = 299;				Info[playerid][pHealth] = 50.0;
	Info[playerid][pArmour] = 0.0;				Info[playerid][pPos_x] = 1612.3240;
	Info[playerid][pPos_y] = -2330.1670;		Info[playerid][pPos_z] = 13.5469;
	Info[playerid][pInt] = 0;					Info[playerid][pTeam] = 3;
	Info[playerid][pModel] = 7;					Info[playerid][pSprunk] = 0;
	Info[playerid][pPnumber] = 0;				Info[playerid][pPhoneBook] = 0;
	Info[playerid][pPhousekey]=INVALID_HOUSE_ID;Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
	Info[playerid][pCarLic] = 0;				Info[playerid][pFlyLic] = 0;
	Info[playerid][pBoatLic] = 0;				Info[playerid][pGunLic] = 0;
	Info[playerid][pGafas] = 0;					Info[playerid][pTut] = 0;
	Info[playerid][pTestTut] = 0;				Info[playerid][pLighter] = 0;
	Info[playerid][pCigarettes] = 0;			Info[playerid][pHideNumber] = 0;
	Info[playerid][pSpeaker] = 0;				Info[playerid][pBannedZC] = 0;
	Info[playerid][pDisabledZC] = 0;			Info[playerid][pBlockBug] = 0;
	new dni = 100000 + random(899999);			Info[playerid][pDNI] = dni;
	Info[playerid][pArmsSkill] = 0;				Info[playerid][pTruckSkill] = 0;
    Info[playerid][pSmugSkill] = 0;				Info[playerid][pDrugsSkill] = 0;
	Info[playerid][pRequestingBackup] = 0;		Info[playerid][pSIDA] = 0;
	Info[playerid][pCancer] = 0;				Info[playerid][pEpilepsia] = 0;
	Info[playerid][pDengue] = 0;				Info[playerid][pWantedLevel] = 0;
	Info[playerid][pCertificadoMD] = 0;
    Info[playerid][pAntiSIDA] = 0;				Info[playerid][pAntiCancer] = 0;
    Info[playerid][pAntiEpilepsia] = 0;			Info[playerid][pRenting] = INVALID_HOUSE_ID;
    Info[playerid][p_Pr_Money] = 0;             Info[playerid][pRHours] = 0;
    Info[playerid][pRob] = 0;					Info[playerid][pVIP] = 0;
    Info[playerid][pBanDuda] = 0;				Info[playerid][pRMuted] = 0;
 	Info[playerid][pRMutedTotal] = 0;			Info[playerid][pRMutedTime] = 0;
	Info[playerid][pPasaporte] = 0;				Info[playerid][pRadio] = 0;
    Info[playerid][pRadioFreq] = 0;				Info[playerid][pIpadMusic] = 0;
    Info[playerid][pGiftTime] = 0;				Info[playerid][pAccent] = 0;
	Info[playerid][pPaintTeam] = 0; 			Info[playerid][pPaintTokens] = 0;
    Info[playerid][pUndercover] = 0;			Info[playerid][pVehicleKeysFrom] = INVALID_PLAYER_ID;
    Info[playerid][pVIPCHAT] = 0;				Info[playerid][pLockCar] = INVALID_VEHICLE_ID;
    Info[playerid][pSpraycan] = 0;				Info[playerid][pCarKey2]=INVALID_PLAYER_VEHICLE_ID;
    Info[playerid][pServiceTime] = 0; 			Info[playerid][pTriageTime] = 0;
    Info[playerid][pTaxiLicense] = 0;			Info[playerid][pLock] = 0;
    Info[playerid][pHead] = 0; 					Info[playerid][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
    Info[playerid][pCHits] = 0;					Info[playerid][pFHits] = 0;
	Info[playerid][pJudgeJailTime] = 0;			Info[playerid][pJudgeJailType] = 0;
	Info[playerid][pBeingSentenced] = 0;		Info[playerid][pProbationTime] = 0;
	Info[playerid][pWExists] = 0;				Info[playerid][pWX] = 0;
	Info[playerid][pWY] = 0;					Info[playerid][pWZ] = 0;
	Info[playerid][pWVW] = 0;					Info[playerid][pWInt] = 0;
	Info[playerid][pWValue] = -1;				Info[playerid][pWTimer] = -1;
	Info[playerid][pWSeeds] = 0;				Info[playerid][YaCobre] = 0;
 	Info[playerid][pADMute] = 0;				Info[playerid][pADMuteTotal] = 0;
	Info[playerid][pADTime] = 0;				Info[playerid][pOther] = 5;
	Info[playerid][pGTokens] = 0;				Info[playerid][pDobleExp] = 0;
	Info[playerid][pAdverID] = -1;              Info[playerid][pFirstaid] = 0;
	Info[playerid][pScrewdriver] = 0;           Info[playerid][pPTR] = 0;
	Info[playerid][pSurveillance] = 0;
    Info[playerid][pModStaff] = 0;
    /// Idiomas.
    Info[playerid][pIngles] = 0;				Info[playerid][pAleman] = 0;
    Info[playerid][pRuso] = 0;					Info[playerid][pJapones] = 0;
    Info[playerid][pItaliano] = 0;				Info[playerid][pArabe] = 0;
    Info[playerid][pBritanico] = 0;             Info[playerid][pChino] = 0;
    Info[playerid][pKoreano] = 0;               Info[playerid][pFrances] = 0;
    Info[playerid][pIsraeli] = 0;
	/// Habilidad.
 	Info[playerid][pInglesSkill] = 0;			Info[playerid][pAlemanSkill] = 0;
    Info[playerid][pRusoSkill] = 0;				Info[playerid][pJaponesSkill] = 0;
    Info[playerid][pItalianoSkill] = 0;			Info[playerid][pArabeSkill] = 0;
    Info[playerid][pBritanicoSkill] = 0;        Info[playerid][pChinoSkill] = 0;
    Info[playerid][pKoreanoSkill] = 0;          Info[playerid][pFrancesSkill] = 0;
    Info[playerid][pIsraeliSkill] = 0;

	format(Info[playerid][pAutoTextReply], 64, "Nada");
    format(Info[playerid][pContractBy], 32, "");
	format(Info[playerid][pContractDetail], 64, "");
	format(Info[playerid][pWarrant], 128, "");

    for(new v = 0; v < MAX_PLAYERTOYS; v++)
    {
        PlayerToyInfo[playerid][v][ptModelID] = 0;
        PlayerToyInfo[playerid][v][ptBone] = 0;
        PlayerToyInfo[playerid][v][ptPosX] = 0.0;
        PlayerToyInfo[playerid][v][ptPosY] = 0.0;
        PlayerToyInfo[playerid][v][ptPosZ] = 0.0;
        PlayerToyInfo[playerid][v][ptRotX] = 0.0;
        PlayerToyInfo[playerid][v][ptRotY] = 0.0;
        PlayerToyInfo[playerid][v][ptRotZ] = 0.0;
        PlayerToyInfo[playerid][v][ftscaleX] = 1;
        PlayerToyInfo[playerid][v][ftscaleY] = 1;
        PlayerToyInfo[playerid][v][ftscaleZ] = 1;
	}
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	{
        PlayerVehicleInfo[playerid][v][pvModelId] = 0;
        PlayerVehicleInfo[playerid][v][pvPosX] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosY] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosZ] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosAngle] = 0.0;
        PlayerVehicleInfo[playerid][v][pvVW] = 0;
        PlayerVehicleInfo[playerid][v][pvLock] = 0;
        PlayerVehicleInfo[playerid][v][pvLocked] = 0;
        PlayerVehicleInfo[playerid][v][pvPaintJob] = -1;
        PlayerVehicleInfo[playerid][v][pvColor1] = 0;
		PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
        PlayerVehicleInfo[playerid][v][pvColor2] = 0;
        PlayerVehicleInfo[playerid][v][pvPrice] = 0;
        PlayerVehicleInfo[playerid][v][pvTicket] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][0] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][1] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][2] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][3] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][4] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][5] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][6] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][7] = 0;
		PlayerVehicleInfo[playerid][v][pvWepUpgrade] = -1;
		PlayerVehicleInfo[playerid][v][pvFuel] = 200;
		PlayerVehicleInfo[playerid][v][pvSpawned]= 0;
		PlayerVehicleInfo[playerid][v][pvHealth] = 1000.0;
		strcpy(PlayerVehicleInfo[playerid][v][pvAllowPlayer], "Nadie", MAX_PLAYER_NAME);
        PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
        PlayerVehicleInfo[playerid][v][pvPark] = 0;
        for(new m = 0; m < MAX_MODS; m++)
	    {
            PlayerVehicleInfo[playerid][v][pvMods][m] = 0;
		}
	}
	GiveKeysTo[playerid] = INVALID_PLAYER_ID;	CancelReport[playerid] = -1;
	return true;
}

function ConvertAccount(playerid)
{
	new string2[64], string[128];
	new playername2[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername2, sizeof(playername2));
	format(string2, sizeof(string2), USERFILEOLD, playername2);
	new File: UserFile = fopen(string2, io_read);
	if(UserFile)
	{
		new key[ 256 ] , val[ 256 ];
		new Data[ 256 ];
		while ( fread( UserFile , Data , sizeof( Data ) ) )
		{
			key = ini_GetKey( Data );
            if( strcmp( key , "TarjetaCredito" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTarjetaCredito] = strval( val ); }
			if( strcmp( key , "Key" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pKey], val, 0, strlen(val)-1, 24); }
			if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLevel] = strval( val ); }
			if( strcmp( key , "AdminNivelZC" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAdminZC] = strval( val ); }
            if( strcmp( key , "AdminZC" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLvlAdminZC] = strval( val ); }
			if( strcmp( key , "BanAppealer" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBanAppealer] = strval( val ); }
			if( strcmp( key , "FactionModerator" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFactionModerator] = strval( val ); }
			if( strcmp( key , "ModStaff" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pModStaff] = strval( val ); }
            if( strcmp( key , "GangModerator" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGangModerator] = strval( val ); }
			if( strcmp( key , "Helper" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pHelper] = strval( val ); }
		 	if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pConnectTime] = strval( val ); }
			if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pReg] = strval( val ); }
			if( strcmp( key , "IntTest" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pInTest] = strval( val ); }
			if( strcmp( key , "Stats" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pStats_U] = strval( val ); }
			if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSex] = strval( val ); }
			if( strcmp( key , "Age" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAge] = strval( val ); }
		 	if( strcmp( key , "Origin" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pOrigin] = strval( val ); }
			if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pExp] = strval( val ); }
			if( strcmp( key , "Suciedad" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSuci] = strval( val ); }
			if( strcmp( key , "CEmergencias" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCRet] = strval( val ); }
			if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(playerid, "Cash", strval( val )); }
			if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAccount] = strval( val ); }
			if( strcmp( key , "IP" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pIP], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "Kills" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pKills] = strval( val ); }
			if( strcmp( key , "Deaths" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDeaths] = strval( val ); }
			if( strcmp( key , "BGomas" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBGomas] = strval( val ); }
           	if( strcmp( key , "Arrested" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArrested] = strval( val ); }
           	if( strcmp( key , "JailAdmin" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJailAdmin] = strval( val ); }
			if( strcmp( key , "LottoNr" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLottoNr] = strval( val ); }
			if( strcmp( key , "Job" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJob] = strval( val ); }
           	if( strcmp( key , "NewMuted" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pNMute] = strval( val ); }
           	if( strcmp( key , "NewMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pNMuteTotal] = strval( val ); }
           	if( strcmp( key , "Warn" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWarn] = strval( val ); }
            if( strcmp( key , "WRestricted" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWRestricted] = strval( val ); }
			if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJailed] = strval( val ); }
			if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJailTime] = strval( val ); }
			if( strcmp( key , "Materials" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pMats] = strval( val ); }
            if( strcmp( key , "Packages" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(playerid, key, strval( val )); }
			if( strcmp( key , "Drugs" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDrugs] = strval( val ); }
            if( strcmp( key , "Cosecha" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCosecha] = strval( val ); }
			if( strcmp( key , "Crack" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCrack] = strval( val ); }
            if( strcmp( key , "Pot" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPot] = strval( val ); }
            if( strcmp( key , "Crates" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCrates] = strval( val ); }
			if( strcmp( key , "Adic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAdiccion] = strval( val ); }
			if( strcmp( key , "Leader" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLeader] = strval( val ); }
			if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pMember] = strval( val ); }
            if( strcmp( key , "FMember" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFMember] = strval( val ); }
			if( strcmp( key , "Division" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDivision] = strval( val ); }
			if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRank] = strval( val ); }
			if( strcmp( key , "Char" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pChar] = strval( val ); }
			if( strcmp( key , "pHealth" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pHealth] = floatstr( val ); }
			if( strcmp( key , "pArmour" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArmour] = floatstr( val ); }
			if( strcmp( key , "Team" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTeam] = strval( val ); }
			if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pModel] = strval( val ); }
			if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPnumber] = strval( val ); }
			if( strcmp( key , "Sprunk" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSprunk] = strval( val ); }
			if( strcmp( key , "Phonebook" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPhoneBook] = strval( val ); }
			if( strcmp( key , "House" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPhousekey] = strval( val ); }
            if( strcmp( key , "House2" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPhousekey2] = strval( val ); }
			if( strcmp( key , "Int" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pInt] = strval( val ); }
			if( strcmp( key , "Pos_x" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPos_x] = floatstr( val ); }
	        if( strcmp( key , "Pos_y" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPos_y] = floatstr( val ); }
	        if( strcmp( key , "Pos_z" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPos_z] = floatstr( val ); }
            if( strcmp( key , "SPos_r" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPos_r] = floatstr( val ); }
			if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCarLic] = strval( val ); }
            if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFlyLic] = strval( val ); }
			if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBoatLic] = strval( val ); }
	        if( strcmp( key , "GunLic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGunLic] = strval( val ); }
	        if( strcmp( key , "Gafas" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGafas] = strval( val ); }
			if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTut] = strval( val ); }
            if( strcmp( key , "Test" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTestTut] = strval( val ); }
			if( strcmp( key , "VWorld" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVW] = strval( val ); }
	        if( strcmp( key , "Lighter" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLighter] = strval( val ); }
	        if( strcmp( key , "Cigarettes" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCigarettes] = strval( val ); }
	        if( strcmp( key , "BanZC" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBannedZC] = strval( val ); }
	        if( strcmp( key , "DisabledZC" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDisabledZC] = strval( val ); }
			if( strcmp( key , "BlockBug" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBlockBug] = strval( val ); }
			if( strcmp( key , "DNI" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDNI] = strval( val ); }
	        if( strcmp( key , "VSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArmsSkill] = strval( val ); }
	        if( strcmp( key , "TSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTruckSkill] = strval( val ); }
            if( strcmp( key , "SmugglerSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSmugSkill] = strval( val ); }
            if( strcmp( key , "DrugsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDrugsSkill] = strval( val ); }
			if( strcmp( key , "SIDA" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSIDA] = strval( val ); }
			if( strcmp( key , "Cancer" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCancer] = strval( val ); }
	        if( strcmp( key , "Epilepsia" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pEpilepsia] = strval( val ); }
	        if( strcmp( key , "CertificadoMD" , true ) == 0 ) { val = ini_GetValue ( Data ); Info[playerid][pCertificadoMD] = strval ( val ); }
	        if( strcmp( key , "Dengue" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDengue] = strval( val ); }
	        if( strcmp( key , "FStyle" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFStyle] = strval( val ); }
	        if( strcmp( key , "Busqueda" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWantedLevel] = strval( val ); }
	        if( strcmp( key , "AntiSIDA" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAntiSIDA] = strval( val ); }
	        if( strcmp( key , "AntiCancer" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAntiCancer] = strval( val ); }
	        if( strcmp( key , "AntiEpilepsia" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAntiEpilepsia] = strval( val ); }
	        if( strcmp( key , "Rent" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRenting] = strval( val ); }

	        if( strcmp( key , "prMoney" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][p_Pr_Money] = strval( val ); }
	        if( strcmp( key , "Rob" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRob] = strval( val ); }
            if( strcmp( key , "Premium" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVIP] = strval( val ); }
            if( strcmp( key , "FichasCash" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPTR] = strval( val ); }
            if( strcmp( key , "CarPremium" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCarKey2] = strval( val ); }
            if( strcmp( key , "BanDuda" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBanDuda] = strval( val ); }
			if( strcmp( key , "ReportMuted" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRMuted] = strval( val ); }
            if( strcmp( key , "ReportMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRMutedTotal] = strval( val ); }
			if( strcmp( key , "ReportMutedTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRMutedTime] = strval( val ); }
		    if( strcmp( key , "Pasaporte" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPasaporte] = strval( val ); }
            if( strcmp( key , "RadioP" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRadio] = strval( val ); }
			if( strcmp( key , "KHZ" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRadioFreq] = strval( val ); }
			if( strcmp( key , "Ipad" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pIpadMusic] = strval( val ); }
			if( strcmp( key , "Alcohol" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAlcohol] = strval( val ); }
			//______________________________________//
   			if( strcmp( key , "GiftTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGiftTime] = strval( val ); }
   			if( strcmp( key , "Negocio" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPbizzkey] = strval( val ); }
   			if( strcmp( key , "skinn" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pgskin] = strval( val ); }
     	    if( strcmp( key , "robita" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][probita] = strval( val ); }
     	    if( strcmp( key , "Boombox" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBoombox] = strval( val ); }
			for(new s = 0; s < 13; s++)
			{
				format(string, 128, "Gun%d", s);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWeapons][s] = strval( val ); }
			}
			if( strcmp( key , "Acento" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAccent] = strval( val ); }
			if( strcmp( key , "Ingles" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pIngles] = strval( val ); }
			if( strcmp( key , "Aleman" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAleman] = strval( val ); }
			if( strcmp( key , "Ruso" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRuso] = strval( val ); }
			if( strcmp( key , "Japones" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJapones] = strval( val ); }
			if( strcmp( key , "Italiano" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pItaliano] = strval( val ); }
			if( strcmp( key , "Arabe" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArabe] = strval( val ); }
			if( strcmp( key , "Britanico" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBritanico] = strval( val ); }
			if( strcmp( key , "Chino" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pChino] = strval( val ); }
			if( strcmp( key , "Koreano" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pKoreano] = strval( val ); }
			if( strcmp( key , "Frances" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFrances] = strval( val ); }
			if( strcmp( key , "Israeli" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pIsraeli] = strval( val ); }
			if( strcmp( key , "InglesSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pInglesSkill] = strval( val ); }
			if( strcmp( key , "AlemanSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAlemanSkill] = strval( val ); }
			if( strcmp( key , "RusoSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRusoSkill] = strval( val ); }
			if( strcmp( key , "JaponesSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJaponesSkill] = strval( val ); }
			if( strcmp( key , "ItalianoSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pItalianoSkill] = strval( val ); }
			if( strcmp( key , "ArabeSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArabeSkill] = strval( val ); }
			if( strcmp( key , "BritanicoSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBritanicoSkill] = strval( val ); }
			if( strcmp( key , "ChinoSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pChinoSkill] = strval( val ); }
			if( strcmp( key , "KoreanoSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pKoreanoSkill] = strval( val ); }
			if( strcmp( key , "FrancesSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFrancesSkill] = strval( val ); }
			if( strcmp( key , "IsraeliSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pIsraeliSkill] = strval( val ); }
			if( strcmp( key , "PTokens" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPaintTokens] = strval( val ); }
			if( strcmp( key , "Undercover" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pUndercover] = strval( val ); }
            if( strcmp( key , "Head" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pHead] = strval( val ); }
            if( strcmp( key, "TaxiLicense" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTaxiLicense] = strval( val ); }
            if( strcmp( key , "Hospital" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pHospital] = strval( val ); }
			if( strcmp( key , "CHits" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCHits] = strval( val ); }
			if( strcmp( key , "FHits" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFHits] = strval( val ); }
           	if( strcmp( key , "Spraycan" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSpraycan] = strval( val ); }
			if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pMarried] = strval( val ); }
			if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "ContractBy" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pContractBy], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "ContractDetail" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pContractDetail], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "pWExists" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWExists] = strval( val ); }
			if( strcmp( key , "pWX" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWX] = floatstr( val ); }
			if( strcmp( key , "pWY" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWY] = floatstr( val ); }
			if( strcmp( key , "pWZ" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWZ] = floatstr( val ); }
			if( strcmp( key , "pWVW" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWVW] = strval( val ); }
			if( strcmp( key , "pWInt" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWInt] = strval( val ); }
			if( strcmp( key , "pWValue" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWValue] = strval( val ); }
			if( strcmp( key , "pWSeeds" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWSeeds] = strval( val ); }
			if( strcmp( key , "PayEx" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][YaCobre] = strval( val ); }
            if( strcmp( key , "AdMuted" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pADMute] = strval( val ); }
			if( strcmp( key , "AdMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pADMuteTotal] = strval( val ); }
            if( strcmp( key , "Warrants" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pWarrant], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "JudgeJailTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJudgeJailTime] = strval( val ); }
			if( strcmp( key , "JudgeJailType" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJudgeJailType] = strval( val ); }
            if( strcmp( key , "BeingSentenced" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBeingSentenced] = strval( val ); }
            if( strcmp( key , "ProbationTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pProbationTime] = strval( val ); }
  	        if( strcmp( key , "BiggestFish" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBiggestFish] = strval( val ); }
            if( strcmp( key , "RewardsHours" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRHours] = strval( val ); }
            if( strcmp( key , "ADTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pADTime] = strval( val ); }
            if( strcmp( key , "Otros" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pOther] = strval( val ); }
            if( strcmp( key , "GGTokens" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pGTokens] = strval( val ); }
            if( strcmp( key , "HDExp" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pDobleExp] = strval( val ); }
            if( strcmp( key , "DPHoras" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pDPHours] = strval( val ); }
            if( strcmp( key , "DPTiempo" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pDPTime] = strval( val ); }
            if( strcmp( key , "DPTotal" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pDPTotal] = strval( val ); }
            if( strcmp( key , "Order" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pOrder] = strval( val ); }
            if( strcmp( key , "TempVIP" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTempVIP] = strval( val ); }
            if( strcmp( key , "VIPInviteDay" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVIPInviteDay] = strval( val ); }
			if( strcmp( key , "BuddyInvite" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBuddyInvited] = strval( val ); }
            if( strcmp( key , "VTokens" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVTokens] = strval( val ); }
			if( strcmp( key , "Job2" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJob2] = strval( val ); }
			if( strcmp( key , "TypeSpawn" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTypeSpawn] = strval( val ); }
   			if( strcmp( key , "ShopTech" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pShopTech] = strval( val ); }
            if( strcmp( key , "Status" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pEstado] = strval( val ); }
            if( strcmp( key , "DayVIP" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVIPDateD] = strval( val ); }
            if( strcmp( key , "MonthVIP" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVIPDateM] = strval( val ); }
            if( strcmp( key , "IDRegalo" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRegalo] = strval( val ); }
			for(new v = 0; v < MAX_PLAYERTOYS; v++)
	        {
	        	format(string, 128, "pt%dModelID",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptModelID] = strval( val ); }
				format(string, 128, "pt%dBone",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptBone] = strval( val ); }
				format(string, 128, "pt%dPosX",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosX] = floatstr( val ); }
				format(string, 128, "pt%dPosY",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosY] = floatstr( val ); }
				format(string, 128, "pt%dPosZ",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosZ] = floatstr( val ); }
				format(string, 128, "pt%dRotX",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotX] = floatstr( val ); }
				format(string, 128, "pt%dRotY",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotY] = floatstr( val ); }
				format(string, 128, "pt%dRotZ",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotZ] = floatstr( val ); }
				format(string, 128, "pt%dSizX",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ftscaleX] = floatstr( val ); }
				format(string, 128, "pt%dSizY",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ftscaleY] = floatstr( val ); }
				format(string, 128, "pt%dSizZ",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ftscaleZ] = floatstr( val ); }
			}
			for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	        {
				format(string, 128, "pv%dPosX",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosX] = floatstr( val ); }
				format(string, 128, "pv%dPosY",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosY] = floatstr( val ); }
				format(string, 128, "pv%dPosZ",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosZ] = floatstr( val ); }
				format(string, 128, "pv%dPosAngle",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosAngle] = floatstr( val ); }
				format(string, 128, "pv%dVirtualW",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvVW] = strval( val ); }
				format(string, 128, "pv%dModelId",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvModelId] = strval( val ); }
				format(string, 128, "pv%dLock",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvLock] = strval( val ); }
				format(string, 128, "pv%dLocked",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvLocked] = strval( val ); }
				format(string, 128, "pv%dPaintJob",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPaintJob] = strval( val ); }
				format(string, 128, "pv%dColor1",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvColor1] = strval( val ); }
				format(string, 128, "pv%dColor2",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvColor2] = strval( val ); }
				format(string, 128, "pv%dPrice",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPrice] = strval( val ); }
				format(string, 128, "pv%dTicket",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvTicket] = strval( val ); }
				format(string, 128, "pv%dWeapon0",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][0] = strval( val ); }
				format(string, 128, "pv%dWeapon1",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][1] = strval( val ); }
				format(string, 128, "pv%dWeapon2",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][2] = strval( val ); }
				format(string, 128, "pv%dWeapon3",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][3] = strval( val ); }
				format(string, 128, "pv%dWeapon4",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][4] = strval( val ); }
				format(string, 128, "pv%dWeapon5",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][5] = strval( val ); }
				format(string, 128, "pv%dWeapon6",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][6] = strval( val ); }
				format(string, 128, "pv%dWeapon7",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][7] = strval( val ); }
				format(string, 128, "pv%dWepUpgrade",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWepUpgrade] = strval( val ); }
				format(string, 128, "pv%dFuel",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvFuel] = strval( val ); }
				format(string, 128, "pv%dImpound",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvImpounded] = strval( val ); }
				format(string, 128, "pv%dHealth",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvHealth] = floatstr( val ); }
				/*format(string, 128, "pv%dNumPlate",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); strcpy(PlayerVehicleInfo[playerid][v][pvNumberPlate], Data, 32); }*/ //PlayerVehicleInfo[playerid][v][pvNumberPlate] = floatstr( val ); }
				for(new m = 0; m < MAX_MODS; m++)
	        	{
            	    format(string, 128, "pv%dMod%d", v, m);
                    if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvMods][m] = strval( val ); }
	        	}
	        }
		}
    	if(!INI_Exist(playername2))
    	{
	    	new INI:File = INI_Open(UserPath(playerid));
	    	INI_SetTag(File,"data");
	        INI_WriteInt(File,"Alcohol",Info[playerid][pAlcohol]);
     		INI_WriteInt(File,"Password",udb_hash(Info[playerid][pKey]));
	    	INI_WriteInt(File,"Level",Info[playerid][pLevel]);
	    	INI_WriteInt(File,"AdminNivelZC",Info[playerid][pAdminZC]);
	    	INI_WriteInt(File,"AdminZC",Info[playerid][pLvlAdminZC]);
	    	INI_WriteInt(File,"BanAppealer",Info[playerid][pBanAppealer]);
			INI_WriteInt(File,"FactionModerator",Info[playerid][pFactionModerator]);
			INI_WriteInt(File,"ModStaff",Info[playerid][pModStaff]);
			INI_WriteInt(File,"GangModerator",Info[playerid][pGangModerator]);
			INI_WriteInt(File,"Helper",Info[playerid][pHelper]);
			INI_WriteInt(File,"ConnectedTime",Info[playerid][pConnectTime]);
			INI_WriteInt(File,"Registered",Info[playerid][pReg]);
			INI_WriteInt(File,"IntTest",Info[playerid][pInTest]);
			INI_WriteInt(File,"Stats",Info[playerid][pStats_U]);
			INI_WriteInt(File,"Sex",Info[playerid][pSex]);
			INI_WriteInt(File,"Age",Info[playerid][pAge]);
			INI_WriteInt(File,"Origin",Info[playerid][pOrigin]);
			INI_WriteInt(File,"Respect",Info[playerid][pExp]);
			INI_WriteInt(File,"Suciedad",Info[playerid][pSuci]);
			INI_WriteInt(File,"CEmergencias",Info[playerid][pCRet]);
        	INI_WriteInt(File,"Money",GetPVarInt(playerid, "Cash"));
        	INI_WriteInt(File,"Bank",Info[playerid][pAccount]);
        	INI_WriteString(File,"IP", Info[playerid][pIP]);
        	INI_WriteInt(File,"DNIFalse",Info[playerid][pDNIFalse]);
        	INI_WriteString( File, "DNIName",Info[playerid][pDNIName]);
        	INI_WriteInt(File,"Kills",Info[playerid][pKills]);
        	INI_WriteInt(File,"Deaths",Info[playerid][pDeaths]);
        	INI_WriteInt(File,"BGomas",Info[playerid][pBGomas]);
        	INI_WriteInt(File,"Arrested",Info[playerid][pArrested]);
        	INI_WriteInt(File,"JailAdmin",Info[playerid][pJailAdmin]);
        	INI_WriteInt(File,"LottoNr",Info[playerid][pLottoNr]);
        	INI_WriteInt(File,"Job",Info[playerid][pJob]);
        	INI_WriteInt(File,"NewMuted",Info[playerid][pNMute]);
        	INI_WriteInt(File,"NewMutedTotal",Info[playerid][pNMuteTotal]);
        	INI_WriteInt(File,"Warn",Info[playerid][pWarn]);
        	INI_WriteInt(File,"WRestricted",Info[playerid][pWRestricted]);
        	INI_WriteInt(File,"Jailed",Info[playerid][pJailed]);
        	INI_WriteInt(File,"JailTime",Info[playerid][pJailTime]);
        	INI_WriteInt(File,"Materials",Info[playerid][pMats]);
        	INI_WriteInt(File,"Packages",GetPVarInt(playerid, "Packages"));
        	INI_WriteInt(File,"Drugs",Info[playerid][pDrugs]);
        	INI_WriteInt(File,"Cosecha",Info[playerid][pCosecha]);
        	INI_WriteInt(File,"Crack",Info[playerid][pCrack]);
        	INI_WriteInt(File,"Pot",Info[playerid][pPot]);
        	INI_WriteInt(File,"Crates",Info[playerid][pCrates]);
        	INI_WriteInt(File,"Adic",Info[playerid][pAdiccion]);
        	INI_WriteInt(File,"Leader",Info[playerid][pLeader]);
        	INI_WriteInt(File,"Member",Info[playerid][pMember]);
        	INI_WriteInt(File,"FMember",Info[playerid][pFMember]);
        	INI_WriteInt(File,"Division",Info[playerid][pDivision]);
        	INI_WriteInt(File,"Rank",Info[playerid][pRank]);
        	INI_WriteInt(File,"Char",Info[playerid][pChar]);
        	INI_WriteFloat(File,"pHealth",Info[playerid][pHealth]);
        	INI_WriteFloat(File,"pArmour",Info[playerid][pArmour]);
        	INI_WriteInt(File,"Team",Info[playerid][pTeam]);
        	INI_WriteInt(File,"Model",Info[playerid][pModel]);
        	INI_WriteInt(File,"PhoneNr",Info[playerid][pPnumber]);
        	INI_WriteInt(File,"Sprunk",Info[playerid][pSprunk]);
        	INI_WriteInt(File,"Phonebook",Info[playerid][pPhoneBook]);
        	INI_WriteInt(File,"House",Info[playerid][pPhousekey]);
       		INI_WriteInt(File,"House2",Info[playerid][pPhousekey2]);
        	INI_WriteInt(File,"Int", Info[playerid][pInt]);
        	INI_WriteFloat(File,"Pos_x",Info[playerid][pPos_x]);
        	INI_WriteFloat(File,"Pos_y",Info[playerid][pPos_y]);
        	INI_WriteFloat(File,"Pos_z",Info[playerid][pPos_z]);
   		    INI_WriteFloat(File,"SPos_r",Info[playerid][pPos_r]);
   	        INI_WriteInt(File,"CarLic",Info[playerid][pCarLic]);
	        INI_WriteInt(File,"FlyLic",Info[playerid][pFlyLic]);
	        INI_WriteInt(File,"BoatLic",Info[playerid][pBoatLic]);
	        INI_WriteInt(File,"GunLic",Info[playerid][pGunLic]);
	        INI_WriteInt(File,"Gafas",Info[playerid][pGafas]);
	        INI_WriteInt(File,"Tutorial",Info[playerid][pTut]);
	        INI_WriteInt(File,"Test",Info[playerid][pTestTut]);
	        INI_WriteInt(File,"VWorld",Info[playerid][pVW]);
	        INI_WriteInt(File,"Lighter",Info[playerid][pLighter]);
	        INI_WriteInt(File,"Cigarettes",Info[playerid][pCigarettes]);
	        INI_WriteInt(File,"BanZC",Info[playerid][pBannedZC]);
	        INI_WriteInt(File,"DisabledZC",Info[playerid][pDisabledZC]);
	        INI_WriteInt(File,"BlockBug",Info[playerid][pBlockBug]);
	        INI_WriteInt(File,"DNI",Info[playerid][pDNI]);
	        INI_WriteInt(File,"VSkill",Info[playerid][pArmsSkill]);
	        INI_WriteInt(File,"TSkill",Info[playerid][pTruckSkill]);
	        INI_WriteInt(File,"SmugglerSkill",Info[playerid][pSmugSkill]);
	        INI_WriteInt(File,"DrugsSkill",Info[playerid][pDrugsSkill]);
	        INI_WriteInt(File,"SIDA",Info[playerid][pSIDA]);
	        INI_WriteInt(File,"Cancer" ,Info[playerid][pCancer]);
	        INI_WriteInt(File,"Epilepsia",Info[playerid][pEpilepsia]);
	        INI_WriteInt(File,"Dengue",Info[playerid][pDengue]);
			INI_WriteInt(File,"CertificadoMD", Info[playerid][pCertificadoMD]);
	        INI_WriteInt(File,"FStyle",Info[playerid][pFStyle]);
	        INI_WriteInt(File,"Busqueda",Info[playerid][pWantedLevel]);
	        INI_WriteInt(File,"AntiSIDA",Info[playerid][pAntiSIDA]);
	        INI_WriteInt(File,"AntiCancer",Info[playerid][pAntiCancer]);
	        INI_WriteInt(File,"AntiEpilepsia",Info[playerid][pAntiEpilepsia]);
	        INI_WriteInt(File,"Rent",Info[playerid][pRenting]);
	        INI_WriteInt(File,"prMoney",Info[playerid][p_Pr_Money]);
	        INI_WriteInt(File,"Rob",Info[playerid][pRob]);
	        INI_WriteInt(File,"Premium",Info[playerid][pVIP]);
	        INI_WriteInt(File,"FichasCash",Info[playerid][pPTR]);
	        INI_WriteInt(File,"CarPremium",Info[playerid][pCarKey2]);
	        INI_WriteInt(File,"BanDuda",Info[playerid][pBanDuda]);
	        INI_WriteInt(File,"ReportMuted",Info[playerid][pRMuted]);
	        INI_WriteInt(File,"ReportMutedTotal",Info[playerid][pRMutedTotal]);
	        INI_WriteInt(File,"ReportMutedTime",Info[playerid][pRMutedTime]);
	        INI_WriteInt(File,"Pasaporte",Info[playerid][pPasaporte]);
	        INI_WriteInt(File,"RadioP", Info[playerid][pRadio]);
	        INI_WriteInt(File,"KHZ",Info[playerid][pRadioFreq]);
	        INI_WriteInt(File,"Ipad",Info[playerid][pIpadMusic]);
	        INI_WriteInt(File,"GiftTime",Info[playerid][pGiftTime]);
	        INI_WriteInt(File,"Boombox", Info[playerid][pBoombox]);
			for( new m = 0; m < 13; m++ )
			{
			    new mStr[24];
			    format(mStr,sizeof(mStr), "Gun%d", m);
			    INI_WriteInt(File,mStr, Info[playerid][pWeapons][m]);
			}
			INI_WriteInt(File,"Acento",Info[playerid][pAccent]);
			INI_WriteInt(File,"Ingles",Info[playerid][pIngles]);
    		INI_WriteInt(File,"Aleman",Info[playerid][pAleman]);
    		INI_WriteInt(File,"Ruso",Info[playerid][pRuso]);
    		INI_WriteInt(File,"Japones",Info[playerid][pJapones]);
    		INI_WriteInt(File,"Italiano",Info[playerid][pItaliano]);
    		INI_WriteInt(File,"Arabe",Info[playerid][pArabe]);
    		INI_WriteInt(File,"Britanico",Info[playerid][pBritanico]);
    		INI_WriteInt(File,"Chino",Info[playerid][pChino]);
    		INI_WriteInt(File,"Koreano",Info[playerid][pKoreano]);
    		INI_WriteInt(File,"Frances",Info[playerid][pFrances]);
    		INI_WriteInt(File,"Israeli",Info[playerid][pIsraeli]);
    		INI_WriteInt(File,"InglesSkill",Info[playerid][pInglesSkill]);
    		INI_WriteInt(File,"AlemanSkill",Info[playerid][pAlemanSkill]);
    		INI_WriteInt(File,"RusoSkill",Info[playerid][pRusoSkill]);
    		INI_WriteInt(File,"JaponesSkill",Info[playerid][pJaponesSkill]);
    		INI_WriteInt(File,"ItalianoSkill",Info[playerid][pItalianoSkill]);
    		INI_WriteInt(File,"ArabeSkill",Info[playerid][pArabeSkill]);
    		INI_WriteInt(File,"BritanicoSkill",Info[playerid][pBritanicoSkill]);
    		INI_WriteInt(File,"ChinoSkill",Info[playerid][pChinoSkill]);
    		INI_WriteInt(File,"KoreanoSkill",Info[playerid][pKoreanoSkill]);
    		INI_WriteInt(File,"FrancesSkill",Info[playerid][pFrancesSkill]);
    		INI_WriteInt(File,"IsraeliSkill",Info[playerid][pIsraeliSkill]);
			INI_WriteInt(File,"PTokens",Info[playerid][pPaintTokens]);
			INI_WriteInt(File,"Undercover",Info[playerid][pUndercover]);
			INI_WriteInt(File,"Head",Info[playerid][pHead]);
			INI_WriteInt(File,"TaxiLicense", Info[playerid][pTaxiLicense]);
			INI_WriteInt(File,"Hospital",Info[playerid][pHospital]);
			INI_WriteInt(File,"CHits",Info[playerid][pCHits]);
			INI_WriteInt(File,"FHits",Info[playerid][pFHits]);
			INI_WriteInt(File,"Spraycan",Info[playerid][pSpraycan]);
			INI_WriteInt(File,"Married",Info[playerid][pMarried]);
			INI_WriteString(File,"MarriedTo",Info[playerid][pMarriedTo]);
			INI_WriteString(File,"ContractBy",Info[playerid][pContractBy]);
			INI_WriteString(File,"ContractDetail",Info[playerid][pContractDetail]);
			INI_WriteInt(File,"pWExists",Info[playerid][pWExists]);
			INI_WriteFloat(File,"pWX",Info[playerid][pWX]);
			INI_WriteFloat(File,"pWY",Info[playerid][pWY]);
			INI_WriteFloat(File,"pWZ",Info[playerid][pWZ]);
			INI_WriteInt(File,"pWVW",Info[playerid][pWVW]);
			INI_WriteInt(File,"pWInt",Info[playerid][pWInt]);
			INI_WriteInt(File,"pWValue",Info[playerid][pWValue]);
			INI_WriteInt(File,"pWSeeds",Info[playerid][pWSeeds]);
			INI_WriteInt(File,"PayEx",Info[playerid][YaCobre]);
			INI_WriteInt(File,"AdMuted",Info[playerid][pADMute]);
			INI_WriteInt(File,"AdMutedTotal",Info[playerid][pADMuteTotal]);
			INI_WriteString(File,"Warrants",Info[playerid][pWarrant]);
			INI_WriteInt(File,"JudgeJailTime",Info[playerid][pJudgeJailTime]);
			INI_WriteInt(File,"JudgeJailType",Info[playerid][pJudgeJailType]);
			INI_WriteInt(File,"BeingSentenced",Info[playerid][pBeingSentenced]);
			INI_WriteInt(File,"ProbationTime",Info[playerid][pProbationTime]);
			INI_WriteInt(File,"RewardsHours",Info[playerid][pRHours]);
			INI_WriteInt(File,"ADTime",Info[playerid][pADTime]);
			INI_WriteInt(File,"Otros",Info[playerid][pOther]);
			INI_WriteInt(File,"GGTokens",Info[playerid][pGTokens]);
			INI_WriteInt(File,"HDExp",Info[playerid][pDobleExp]);
			INI_WriteInt(File,"DPHoras",Info[playerid][pDPHours]);
			INI_WriteInt(File,"DPTiempo",Info[playerid][pDPTime]);
			INI_WriteInt(File,"DPTotal",Info[playerid][pDPTotal]);
			INI_WriteInt(File,"Order",Info[playerid][pOrder]);
			INI_WriteInt(File,"TempVIP",Info[playerid][pTempVIP]);
			INI_WriteInt(File,"VIPInviteDay",Info[playerid][pVIPInviteDay]);
			INI_WriteInt(File,"BuddyInvite",Info[playerid][pBuddyInvited]);
			INI_WriteInt(File,"VTokens",Info[playerid][pVTokens]);
			INI_WriteInt(File,"Job2",Info[playerid][pJob2]);
			INI_WriteInt(File,"TypeSpawn",Info[playerid][pTypeSpawn]);
			INI_WriteInt(File,"ShopTech",Info[playerid][pShopTech]);
			INI_WriteInt(File,"Status",Info[playerid][pEstado]);
			INI_WriteInt(File,"DayVIP",Info[playerid][pVIPDateD]);
			INI_WriteInt(File,"MonthVIP",Info[playerid][pVIPDateM]);
			INI_WriteInt(File,"IDRegalo",Info[playerid][pRegalo]);
			INI_WriteInt(File,"Negocio",Info[playerid][pPbizzkey]);
			INI_WriteInt(File,"skinn",Info[playerid][pgskin]);
			INI_WriteInt(File,"robita",Info[playerid][probita]);
	    	for(new v = 0; v < MAX_PLAYERTOYS; v++)
    		{
	    		new string3[64];
				format( string3, sizeof( string3 ), "pt%dModelID", v);
				INI_WriteInt(File,string3, PlayerToyInfo[playerid][v][ptModelID]);
				format(string3, 64, "pt%dBone",v);
				INI_WriteInt(File,string3, PlayerToyInfo[playerid][v][ptBone]);
				format(string3, 64, "pt%dPosX",v);
				INI_WriteFloat(File,string3, PlayerToyInfo[playerid][v][ptPosX]);
				format(string3, 64, "pt%dPosY",v);
				INI_WriteFloat(File,string3, PlayerToyInfo[playerid][v][ptPosY]);
				format(string3, 64, "pt%dPosZ",v);
				INI_WriteFloat(File,string3, PlayerToyInfo[playerid][v][ptPosZ]);
				format(string3, 64, "pt%dRotX",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ptRotX]);
				format(string3, 64, "pt%dRotY",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ptRotY]);
				format(string3, 64, "pt%dRotZ",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ptRotZ]);
				format(string3, 64, "pt%dSizX",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ftscaleX]);
				format(string3, 64, "pt%dSizY",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ftscaleY]);
				format(string3, 64, "pt%dSizZ",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ftscaleZ]);
    		}
    		for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    		{
    	    	new string3[64];
        		format(string3, 64, "pv%dPosX",v);
        		INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvPosX]);
        		format(string3, 64, "pv%dPosY",v);
        		INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvPosY]);
        		format(string3, 64, "pv%dPosZ",v);
        		INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvPosZ]);
        		format(string3, 64, "pv%dPosAngle",v);
        		INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvPosAngle]);
				format(string3, 64, "pv%dVirtualW",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvVW]);
				format(string3, 64, "pv%dModelId",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvModelId]);
				format(string3, 64, "pv%dLock",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvLock]);
				format(string3, 64, "pv%dLocked",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvLocked]);
				format(string3, 64, "pv%dPaintJob",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvPaintJob]);
				format(string3, 64, "pv%dColor1",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvColor1]);
				format(string3, 64, "pv%dColor2",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvColor2]);
				format(string3, 64, "pv%dPrice",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvPrice]);
				format(string3, 64, "pv%dTicket",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvTicket]);
				format(string3, 64, "pv%dWeapon0",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][0]);
				format(string3, 64, "pv%dWeapon1",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][1]);
				format(string3, 64, "pv%dWeapon2",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][2]);
				format(string3, 64, "pv%dWeapon3",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][3]);
				format(string3, 64, "pv%dWeapon4",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][4]);
				format(string3, 64, "pv%dWeapon5",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][5]);
				format(string3, 64, "pv%dWeapon6",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][6]);
				format(string3, 64, "pv%dWeapon7",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][7]);
				format(string3, 64, "pv%dWepUpgrade",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWepUpgrade]);
				format(string3, 64, "pv%dFuel",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvFuel]);
				format(string3, 64, "pv%dImpound",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvImpounded]);
				format(string3, 64, "pv%dHealth",v);
				INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvHealth]);

				for(new m = 0; m < MAX_MODS; m++)
				{
				    format(string3, 64, "pv%dMod%d", v, m);
				    INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvMods][m]);
				}
			}
			INI_Close(File); // Closing Account and finish file
			fclose(UserFile);
			print("DEBUG: CUENTA guardada Y_INI - Archivo .ini cerrado");
			SendClientMessage(playerid, -1, "Administración: Tu cuenta ha sido convertida correctamente a y_ini.");
			SendClientMessage(playerid, -1, "Administración: Para guardarla correctamente por favor vuelve a ingresar.");
			SendClientMessage(playerid, COLOR_GENERAL, "Administración: Has sido expulsado automáticamente de AT-RP.");
			SetPlayerName(playerid, "InvalidNick - Use: Nombre_Apellido");
			Kick(playerid);
		}
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
// Interiores en vehículos.
InteriorLimusina[playerid] = 0;
InteriorSwatVan[playerid] = 0;
InteriorTren[playerid] = 0;
InteriorBeagle[playerid] = 0;
// Recorrido de Autobuses
Bus_Route1[playerid] = 0;
Bus_Route2[playerid] = 0;
// Camioneros Entregas
CEntregas_01[playerid] = 0;
CEntregas_02[playerid] = 0;
CEntregas_03[playerid] = 0;
CEntregas_04[playerid] = 0;
// Recorrido de Basurero
BasureroR[playerid] = 0;
//****sistema afk***
Afk[playerid]=0;
TextDrawHideForPlayer(playerid,Text:Messageafk);
KillTimer(Timer[playerid]);
// Servicio de maquinista
TreneroDuty[playerid] = 0;
//**security**
Jugadores = IDMayor(playerid);
if(BotServidor[playerid]) BotServidor[playerid] = false;
if(Barra[playerid] != -1)
{
KillTimer(Barra[playerid]);
Barra[playerid] = -1;
}
Advertencias[playerid] = 0;
	//************
    if(GetPVarType(playerid, "PlacedBB"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
        DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
        if(GetPVarType(playerid, "BBArea"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                {
                    StopAudioStreamForPlayer(i);
                    SendClientMessage(i, COLOR_WHITE, "{FFFFFF}* La música deja de sonar ((El propietario de la {00AFED}boombox{FFFFFF} se ha desconectado)).");
                }
            }
        }
    }
    TextDrawHideForPlayer(playerid, Experiencia[playerid]); //sistema experiencia//
	new plname[MAX_PLAYER_NAME];
	Delete3DTextLabel(estado[playerid]);
	GetPlayerName(playerid, plname, sizeof(plname));
	if(!strcmp(plname, "BannedPlayer", true)) return 1;
	if(!strcmp(plname, "InvalidNick", true)) return 1;
	if(playerid == MAX_PLAYERS) return 1;
	if(GetPVarInt(playerid, "TempName") == 1)
	{
	    new name[MAX_PLAYER_NAME];
		GetPVarString(playerid, "TempNameName", name, sizeof(name));
		SetPlayerName(playerid, name);
		SetPVarInt(playerid, "TempName", 0);
	}
	if(Info[playerid][pWExists] == 1)
	{
		WeedLogout(playerid);
	}
	if(pTazer[playerid] == 1) GivePlayerValidWeapon(playerid,pTazerReplace[playerid]);
	if(GetPVarInt(playerid, "SpeedRadar") == 1) GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"));
	if(GetPVarInt(playerid, "Injured") == 1)
	{
	    Info[playerid][pHospital] = 1;
	    KillEMSQueue(playerid);
        ResetPlayerWeaponsEx(playerid);
	}
	if(Info[playerid][pLockCar] != INVALID_VEHICLE_ID)
	{
		vehicle_unlock_doors(Info[playerid][pLockCar]);
	}
	if(Info[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        PlayerVehicleInfo[Info[playerid][pVehicleKeysFrom]][Info[playerid][pVehicleKeys]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	}
	new string[128];
	switch (reason)
	{
 	   	case 0:
	   	{
		   	format(string, sizeof(string), "%s se desconectó del servidor por crash.", GetPlayerNameEx(playerid));
		   	ProxDetector(100.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		   	if(Info[playerid][pEstado] == 2)
		   	{
                Info[playerid][pJailed] = 1;
				Info[playerid][pJailTime] += 20*60;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
                for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		    	{
					if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
					{
						new Float:x, Float:y, Float:z, Float:angle, vw;
						vw = GetPlayerVirtualWorld(playerid);
						GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
						GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], angle);
						PlayerVehicleInfo[playerid][d][pvPosX] = x;
						PlayerVehicleInfo[playerid][d][pvPosY] = y;
						PlayerVehicleInfo[playerid][d][pvPosZ] = z;
		 				PlayerVehicleInfo[playerid][d][pvPosAngle] = angle;
		 				PlayerVehicleInfo[playerid][d][pvVW] = vw;
					}
				}
	   		}
	   	}
	   	case 1:
 	  	{
		   	format(string, sizeof(string), "%s se desconectó del servidor por su propia cuenta.", GetPlayerNameEx(playerid));
		   	ProxDetector(100.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		   	if(Info[playerid][pEstado] == 2)
		   	{
                Info[playerid][pJailed] = 1;
				Info[playerid][pJailTime] += 20*60;
			}
		}
		case 2:
	    {
			format(string, sizeof(string), "%s se desconectó del servidor por kick o ban", GetPlayerNameEx(playerid));
			ProxDetector(8.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	   	}
	}
	if(InfoEvento[EventRequest] == playerid)
	{
	    InfoEvento[EventRequest] = 999;
		ABroadCast( COLOR_GENERAL, "AT-RP: El jugador que estaba solicitando un evento se ha desconectado o crasheó.", 4 );
	}
	if(InfoEvento[EventCreator] == playerid)
	{
	    InfoEvento[EventCreator] = 999;
		ABroadCast( COLOR_GENERAL, "AT-RP: El jugador que creó el evento se ha desconectado o crasheó.", 4 );
	}
	if(InfoEvento[EventStaff][0] == playerid)
	{
	    InfoEvento[EventStaff][0] = 999;
	}
	else if(InfoEvento[EventStaff][1] == playerid)
	{
	    InfoEvento[EventStaff][1] = 999;
	}
	else if(InfoEvento[EventStaff][2] == playerid)
	{
	    InfoEvento[EventStaff][2] = 999;
	}
	else if(InfoEvento[EventStaff][3] == playerid)
	{
	    InfoEvento[EventStaff][3] = 999;
	}
	else if(InfoEvento[EventStaff][4] == playerid)
	{
	    InfoEvento[EventStaff][4] = 999;
	}
	if(GetPVarInt(playerid, "IsInArena") == 1)
	{
	    PaintballDisconnect(playerid);
		Info[playerid][pPos_x] = GetPVarFloat(playerid, "pbOldX");
		Info[playerid][pPos_y] = GetPVarFloat(playerid, "pbOldY");
		Info[playerid][pPos_z] = GetPVarFloat(playerid, "pbOldZ");
		Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
		Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
		Info[playerid][pHealth] = GetPVarFloat(playerid, "pbOldHealth");
		Info[playerid][pArmour] = GetPVarFloat(playerid, "pbOldArmor");
		SetHP(playerid,GetPVarFloat(playerid, "pbOldHealth"));
		SetPlayerArmour(playerid,GetPVarFloat(playerid, "pbOldArmor"));
	}
	else if(GetPVarInt(playerid, "EventToken") == 0)
	{
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		Info[playerid][pPos_x] = x;
		Info[playerid][pPos_y] = y;
		Info[playerid][pPos_z] = z;
		GetPlayerFacingAngle(playerid, Info[playerid][pPos_r]);
		Info[playerid][pInt] = GetPlayerInterior(playerid);
		Info[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		Info[playerid][pChar] = GetPlayerSkin(playerid);
		if(Info[playerid][pChar] == 0) Info[playerid][pChar] = 299;
	}
	else if(GetPVarInt(playerid, "EventToken") == 1)
	{
	    Info[playerid][pInt] = EventLastInt[playerid];
		Info[playerid][pVW] = EventLastVW[playerid];
		Info[playerid][pChar] = Info[playerid][pChar];
		Info[playerid][pPos_r] = EventFloats[playerid][0];
		Info[playerid][pPos_x] = EventFloats[playerid][1];
		Info[playerid][pPos_y] = EventFloats[playerid][2];
		Info[playerid][pPos_z] = EventFloats[playerid][3];
	}
	else if(ShowRules[playerid] == 1)
	{
		Info[playerid][pVW] = GetPVarInt(playerid, "rOldVW");
		Info[playerid][pInt] = GetPVarInt(playerid, "rOldInt");
        Info[playerid][pPos_x] = GetPVarFloat(playerid, "rOldX");
        Info[playerid][pPos_y] = GetPVarFloat(playerid, "rOldY");
        Info[playerid][pPos_z] = GetPVarFloat(playerid, "rOldZ");
    }
	if(Spectate[playerid] < 553)
	{
        Info[playerid][pInt] = GetPVarInt(playerid, "SpecInt");
		Info[playerid][pVW] = GetPVarInt(playerid, "SpecVW");
		Info[playerid][pPos_x] = GetPVarFloat(playerid, "SpecPosX");
		Info[playerid][pPos_y] = GetPVarFloat(playerid, "SpecPosY");
		Info[playerid][pPos_z] = GetPVarFloat(playerid, "SpecPosZ");
	    GettingSpectated[Spectate[playerid]] = 999;
	    Spectate[playerid] = 999;
	}
	if(Info[playerid][pAdverID] != -1) ClearAd(Info[playerid][pAdverID]);
	if(HireKey[playerid] != 9999)
	{
	    SetVehicleToRespawn(HireKey[playerid]);
	}
    if(Interview != 0)
	{
		if(strcmp(Interviewer,plname,true) == 0 )
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Se canceló tu entrevista.");
		    Interviewer = "Nadie";
		    Interview = 0;
		}
	}
  	OnPlayerSavedStats(playerid);
  	UnloadPlayerVehicles(playerid);
	ResetPlayerWeapons(playerid);

	for(new i = 0; i < MAX_REPORTS; i++)
	{
	    if(Reports[i][ReportFrom] == playerid)
	    {
	        Reports[i][ReportFrom] = 999;
			Reports[i][BeingUsed] = 0;
			Reports[i][TimeToExpire] = 0;
		}
	}
	foreach(Player, i)
	{
		if(TaxiAccepted[i] == playerid)
		{
			TaxiAccepted[i] = 999;
			GameTextForPlayer(i, "~w~jugador~n~~r~se desconecto", 5000, 1);
			TaxiCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(EMSAccepted[i] == playerid)
		{
			EMSAccepted[i] = 999;
			GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
			EMSCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(MedicAccepted[i] == playerid)
		{
			TaxiAccepted[playerid] = 999; MedicAccepted[playerid] = 999;
			GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
			MedicCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
		if(IsPlayerConnected(TransportDriver[playerid]))
		{
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			format(string, sizeof(string), "~w~Pasajero se fue~n~~g~ganaste $%d",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
			TransportDriver[playerid] = 999;
		}
	}
	if(GotHit[playerid] > 0)
	{
		if(GetChased[playerid] < 999)
		{
			if(IsPlayerConnected(GetChased[playerid]))
			{
				SendClientMessageEx(GetChased[playerid], COLOR_YELLOW, "Tu hit salió del servidor.");
				GoChase[GetChased[playerid]] = 999;
			}
		}
	}
 	if(GoChase[playerid] < 999){
      GetChased[GoChase[playerid]] = 999;
      GotHit[GoChase[playerid]] = 999;
 	}
	if(GetPVarInt(playerid, "AdvisorDuty") == 1) { Advisors--; }
	if(Team_Mecanicos(playerid))
	{
		if(OnDuty[playerid] == 1) { Mechanics -= 1; }
	}
	if(TransportDuty[playerid] == 1) { TaxiDrivers -= 1; }
	SetPVarInt(playerid,"Miner", 0);
 	SetPVarInt(playerid,"Start", 0);
 	if(BOMBA[playerid]){DestroyObject(BOMBA[playerid]);}
 	MoneyBet[playerid] = 0;
  	BetOnHorse[playerid] = 0;
  	Watching[playerid] = 0;
 return 1;
}




function MissileLaunchEx(Float:x, Float:y, Float:z, Float:radius, type)
{
    CreateExplosion(x, y, z, type, radius);
    Misile_Launcher --;
    new string[128];
    format(string, sizeof(string), "** Lanzamiento detonado en %0.2f - %0.2f - %0.2f, radio %d",x,y,z,radius);
    SendRadioMessage(3, TEAM_RADIO_COLOR, string);
    return 1;
}

function MissileLaunch(vehicleid)
{
	new Float:x,Float:y,Float:z;
	GetVehiclePos(vehicleid, x, y, z);
    CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);
    Misile_Launcher --;
    new string[64];
    format(string, sizeof(string), "** Lanzamiento detonado en objetivo vehículo %d",vehicleid);
    SendRadioMessage(3, TEAM_RADIO_COLOR, string);
    return 1;
}
//*******************funciones de puertas dinamicas*******************
forward IntentarTimer(playerid);
public IntentarTimer(playerid)
{
	Intentar[playerid] = 0;
}
function CloseCourtGate1()
{
	MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934,7698.23632812,4);
	return 1;
}
function CloseCourtGate2()
{
	MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719,7698.24169922,4);
	return 1;
}
function GateCloseCia()
{
	MoveDynamicObject(rejacia,1269.97668, -1838.51514, 15.06336,4);
	return 1;
}
function CloseCia1()
{
	MoveDynamicObject(cia1,244.81964, 72.43684, 1002.63965,4);
	return 1;
}
function CloseCia2()
{
	MoveDynamicObject(cia2,247.82359, 72.47114, 1002.63959,4);
	return 1;
}
function GateClose5()
{
	  MoveDynamicObject(pdgate1, 1547.68433, -1627.64075, 14.98080, 3.0);
      return 1;
}
function GateCloseCNN(){
       MoveDynamicObject(tvp, 781.77209500,-1330.31884800,12.68660500,5.0);
       return 1;
}
function OpenDoorNG(){
       MoveDynamicObject(usmc1, 94.38630, 2071.34570, 18.95180,5.0);
       return 1;
}
function OpenDoorNG2(){
       MoveDynamicObject(usmc2, 1490.58777, -1501.39136, 15.16192,5.0);
       return 1;
}
function Portonrus(){
       MoveDynamicObject(portoru, -2281.21021, 120.32613, 38.03923,3.0);
       return 1;
}
function GateCloseGob(){
       MoveDynamicObject(gobiernogate, 1286.73914, -2056.57129, 60.36075,5.0);
       return 1;
}
function GateCloseGob1(){
       MoveDynamicObject(gobiernogate1, 1391.29980469,-1629.89941406,12.52500343,5.0);
       return 1;
}
function celdagateclosed1()
{
       MoveDynamicObject(celdagate1, 320.83261, 317.07980, 999.43982, 2.5);
       return 1;
}
function celdagateclosed2()
{
       MoveDynamicObject(celdagate2, 1320.11169, -791.13708, 1084.24451, 2.5);
       return 1;
}
function celdagateclosed3()
{
       MoveDynamicObject(celdagate3, 168.70000, 1944.80005, 3866.30005, 2.5);
       return 1;
}
function celdagateclosed4()
{
       MoveDynamicObject(celdagate4, 195.39999, 1944.80005, 3869.60010, 2.5);
       return 1;
}
function elevadorv()
{
       MoveDynamicObject(elevadorns, 816.23108, -2068.20703, 11.83470, 5.0);
       return 1;
}
function elevcgcierre()
{
       MoveDynamicObject(elevadorcg, 542.29300, -1296.64026, 18.18355, 1.5);
       return 1;
}
function portonc1()
{
       MoveDynamicObject(porton_ns1,  836.57581, -1843.10083, 13.98331, 2.0);
       return 1;
}
function portonc2()
{
       MoveDynamicObject(porton_ns2,  836.31250, -2065.30396, 14.56855, 2.0);
       return 1;
}
function cerrarportonss1()
{
       MoveDynamicObject(porton_ss1,  1003.75085, -643.76111, 121.69682, 2.0);
       return 1;
}
function portonsfc1()
{
       MoveDynamicObject(porton_sf1,  2902.44287, -792.23291, 12.44275, 2.0);
       return 1;
}
function portonsfc2()
{
       MoveDynamicObject(porton_sf2,  3052.19629, -792.22852, 11.34650, 2.0);
       return 1;
}
/*function CloseCell2()
{
	MoveDynamicObject(fen2,1425.90002441,-1555.00000000,4334.70019531,4);
	return 1;
}*/
function CloseCell3()
{
	MoveDynamicObject(fen3,1429.50000000,-1554.80004883,4334.70019531,4);
	return 1;
}
function CloseCell4()
{
	MoveDynamicObject(fen4,1422.19995117,-1567.00000000,4334.60009766,4);
	return 1;
}
function CloseCell5()
{
	MoveDynamicObject(fen6,1430.19995117,-1566.69995117,4334.70019531,4);
	return 1;
}
function CloseCell6()
{
	MoveDynamicObject(fen5,1414.80004883,-1566.69995117,4334.60009766,4);
	return 1;
}
function GateClose4()
{
      MoveDynamicObject(hospitalgate,1141.40002441,-1293.69995117,15.39999962, 1.5);
      return 1;
}
function GateCloseRusa3()
{
      MoveDynamicObject(RejaRusa, -1051.45422, -1313.16553, 130.20287,1.5);
      return 1;
}
function GateCloseYakuza()
{
      MoveDynamicObject(yakuzagate, 321.5790,-1188.6155,76.3494, 1.5);
      return 1;
}
function GateCloseSis()
{
      MoveDynamicObject(sisporton, 1457.14, -1505.88, 15.28, 1.5);
      return 1;
}
function GateCloseSantana()
{
      MoveDynamicObject(SantanaReja, 1245.56, -766.85, 94.06, 1.5);
      return 1;
}
function GateCloseAlqaeda()
{
      MoveDynamicObject(AlqaedaReja, 1023.6000, -371.7000, 75.3000, 1.5);
      return 1;
}
function GateCloseRejavip(){
       MoveDynamicObject(rejavip, 2909.96484, -666.21680, 12.56295,5.0);
       return 1;
}

function GateCloseCNN1(){
       MoveDynamicObject(tvp1, 774.11425781,-1384.98632812,12.92022705,5.0);
       return 1;
}

function GateCloseMecas()
{
	MoveDynamicObject(mecareja, 1051.63110,-1439.83557,13.94245, 2.5);
	return 1;
}
function GateCloseLCN()
{
	MoveDynamicObject(rejalcn,2106.68213, 1862.31934, 12.30965, 2.5);
	return 1;
}
function GateCloseLCN2()
{
	MoveDynamicObject(rejalcn2,2107.68262, 1969.38855, 12.19972, 2.5);
	return 1;
}
function GateClosePeajeLA_SF1()
{
	MoveDynamicObject(PeajeLA_SF1, 58.27050, -1527.54785, 4.86570, 1.5, 0.00000, -91.22000, -99.42000);
	return 1;
}

function GateClosePeajeLA_SF2()
{
	MoveDynamicObject(PeajeLA_SF2, 56.23930, -1536.98804, 4.86570, 1.5, 0.00000, -269.32001, -98.40001);
	return 1;
}

function GateClosePeajeLA_LV1()
{
	MoveDynamicObject(PeajeLA_LV1, 1748.83765, 534.92969, 26.97870, 1.5, 0.00000, 90.00000, -19.48000);
	return 1;
}

function GateClosePeajeLA_LV2()
{
	MoveDynamicObject(PeajeLA_LV2,1734.72253, 530.06592, 27.33740, 1.5, 0.00000, -90.00000, -18.00000);
	return 1;
}
//**************************************
SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerSkin(playerid, Info[playerid][pChar]);
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		if(x == 0.0 && y == 0.0 && z == 0.0)
		{
  			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid, 1715.1201,-1903.1711,13.5665);
			SetPlayerFacingAngle(playerid, 359.4621);
			SetCameraBehindPlayer(playerid);
		}
	    if(GetPVarInt(playerid, "IsInArena") == 1)
		{
			SpawnPaintballArena(playerid);
			return 1;
		}
 		if( GetPVarInt(playerid, "SpecOff" ) == 1 )
		{
			SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecPosX"), GetPVarFloat(playerid, "SpecPosY"), GetPVarFloat(playerid, "SpecPosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecInt"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
			SetPVarInt(playerid, "SpecOff", 0 );
			SetPVarInt(playerid, "SpecState", -1 );
			return 1;
		}
	    if(Info[playerid][pReg] == 0)
	    {
			TextDrawShowForPlayer(playerid, LoginMenu[0]);
	     	TextDrawShowForPlayer(playerid, LoginMenu[1]);
	     	TextDrawHideForPlayer(playerid, LoginMenu[8]);
    		SetTimerEx("FreezePlayer", 1000, false, "i", playerid);
			gNewbie[playerid]=1; gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
            SetPosEx(playerid, 1730.2910,-2335.4670,13.5540, 0, 0, 0);
            SetPlayerFacingAngle(playerid, 0.0000);
            SetPlayerCameraPos(playerid, 1730.2790,-2326.4793,13.5540);
            SetPlayerCameraLookAt(playerid, 1730.2790,-2335.4670,13.5540);
            SetPlayerVirtualWorld(playerid, 0);
			Info[playerid][pAge] = 30; Info[playerid][pSex] = 1;
			new sex[]= "{F0F0F0}• ¿Qué sexo es tu personaje?:\n";
			SafeDialogEx(playerid,REG_SEX,DIALOG_STYLE_MSGBOX, "{C3FF23}Paso Nº 1", sex, "Masculino", "Femenino");
			return 1;
	    }
	    if(Info[playerid][pTut] == 0)
	    {
	        ClearChatbox(playerid);
	        SetPlayerVirtualWorld(playerid, 501); Info[playerid][pReg] = 1;
		    TutStep[playerid] = 1;
    		TutTime[playerid] = 1;
   			Tutorial_Inside(playerid);
			TextDrawHideForPlayer(playerid, LoginMenu[0]);
	     	TextDrawHideForPlayer(playerid, LoginMenu[1]);
	     	TextDrawHideForPlayer(playerid, LoginMenu[8]);
			return 1;
		}
		new rand;
		if(Info[playerid][pBeingSentenced] > 0)
		{
		    PhoneOnline[playerid] = 1;
		    rand = random(sizeof(WarrantJail));
			SetPlayerPos(playerid, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2]);
			if(rand != 0) courtjail[playerid] = 2;
			else courtjail[playerid] = 1;
			LoadObjects(playerid);
			SetPlayerInterior(playerid, 0);
			Info[playerid][pInt] = 0;
			return 1;
		}
		if(Info[playerid][pJailed] == 1)
		{
		    Info[playerid][pEstado] = 0;
		    PhoneOnline[playerid] = 1;
		    SetPlayerInterior(playerid, 0);
			rand = random(sizeof(OOCJail));
			LoadObjects(playerid);
			SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SetPlayerSkin(playerid, 50);
			new Sancionado[1000];
			strcat(Sancionado, "{FFFFFF}Fuiste sancionado por el centro administrativo mientras estabas conectado/desconectado y es\n");
			strcat(Sancionado, "{FFFFFF}importante que seas notificado y saber cual fue la razón, por eso te dejamos algunas de\n");
			strcat(Sancionado, "{FFFFFF}estas y solicitar soporte para que te informen mejor dicha razón.");
			strcat(Sancionado, "\n\n\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}Desconectarse en medio de un rol\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}Reporte en foro\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}Evadir una sanción\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}Romper las reglas del servidor\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}No respetar los conceptos roleplay");
			ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF0000}Estadísticas de Sanción", Sancionado, "Cerrar", "");
			SetPlayerColor(playerid, COLOR_SANCION);
			return 1;
		}
		if(Info[playerid][pJailed] == 2)
		{
		    PhoneOnline[playerid] = 1;
		    rand = random(sizeof(PFAPrisonSpawns));
		    SetPlayerPos(playerid, PFAPrisonSpawns[rand][0], PFAPrisonSpawns[rand][1], PFAPrisonSpawns[rand][2]);
		    LoadObjects(playerid);
			SetPlayerToTeamColor(playerid);
			Info[playerid][pInt] = 10;
			SetPlayerInterior(playerid, 10);
			Info[playerid][pVW] = 500;
			SetPlayerVirtualWorld(playerid, 500);
			return 1;
		}
		if(Info[playerid][pJailed] == 3)
		{
			LoadObjects(playerid);
		    PhoneOnline[playerid] = 1;
			SetPlayerInterior(playerid, 1);
			Info[playerid][pVW] = 600;
			Info[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 600);
			SetPlayerInterior(playerid, 1);
			SetPlayerPos(playerid,315.1677,-1451.5564,-33.5292);
			return 1;
		}
		if(Info[playerid][pJailed] == 4)
		{
		    PhoneOnline[playerid] = 1;
		    Info[playerid][pInt] = 0;
			rand = random(sizeof(OOCJail));
			LoadObjects(playerid);
			SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SetPlayerInterior(playerid, 15);
			new Sancionado[1000];
			strcat(Sancionado, "{FFFFFF}Fuiste sancionado por el centro administrativo mientras estabas conectado/desconectado y es\n");
			strcat(Sancionado, "{FFFFFF}importante que seas notificado y saber cual fue la razón, por eso te dejamos algunas de\n");
			strcat(Sancionado, "{FFFFFF}estas y solicitar soporte para que te informen mejor dicha razón.");
			strcat(Sancionado, "\n\n\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}Desconectarse en medio de un rol\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}Reporte en foro\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}Evadir una sanción\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}Romper las reglas del servidor\n");
			strcat(Sancionado, "{FF0000}- {FFFFFF}No respetar los conceptos roleplay");
			ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF0000}Estadísticas de Sanción", Sancionado, "Cerrar", "");
			SetPlayerColor(playerid, COLOR_SANCION);
			return 1;
		}
		if(Info[playerid][pJailed] == 5)
		{
		    PhoneOnline[playerid] = 1;
      		LoadObjects(playerid);
			SetPlayerInterior(playerid, 0);
			Info[playerid][pInt] = 0;
			rand = random(sizeof(ICPrisonSpawns));
			SetPlayerPos(playerid, ICPrisonSpawns[rand][0], ICPrisonSpawns[rand][1], ICPrisonSpawns[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SetPlayerSkin(playerid, 50);
			return 1;
		}
		if(Info[playerid][pJailed] == 6)
		{
		    PhoneOnline[playerid] = 1;
			SetPlayerInterior(playerid, 5);
			Info[playerid][pInt] = 5;
			rand = random(sizeof(PrisonDillmore));
			SetPlayerPos(playerid, PrisonDillmore[rand][0], PrisonDillmore[rand][1], PrisonDillmore[rand][2]);
			SetPlayerVirtualWorld(playerid, 400);
			return 1;
		}
		if(GetPVarInt(playerid, "EventToken") == 1)
		{
		    DeletePVar(playerid, "EventToken");
		    SetPlayerWeapons(playerid);
		    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
			SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			SetPlayerInterior(playerid,EventLastInt[playerid]);
			SetHP(playerid, EventFloats[playerid][4]);
			SetPlayerArmour(playerid, EventFloats[playerid][5]);
			for(new i = 0; i < 6; i++)
			{
			    EventFloats[playerid][i] = 0.0;
			}
			EventLastVW[playerid] = 0;
			EventLastInt[playerid] = 0;
			return 1;
		}
		for(new i; i < 5; i++)
		{
		    if(InfoEvento[EventStaff][i] == playerid)
		    {
		        SetPlayerWeapons(playerid);
			    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
				SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
				SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
				SetPlayerInterior(playerid,EventLastInt[playerid]);
				SetHP(playerid, EventFloats[playerid][4]);
				SetPlayerArmour(playerid, EventFloats[playerid][5]);
				for(new d = 0; d < 6; d++)
				{
				    EventFloats[playerid][d] = 0.0;
				}
				EventLastInt[playerid] = 0;
				EventLastVW[playerid] = 0;
				InfoEvento[EventStaff][i] = 999;
		    }
		}
		if(GetPVarInt(playerid, "FirstSpawn") == 2 && GetPVarInt(playerid, "Injured") == 1)
		{
		    SendEMSQueue(playerid,1);
		    return 1;
		}
		if(GetPVarInt(playerid, "FirstSpawn") == 1 && GetPVarInt(playerid, "Hospital") != 0)
		{
		    DeletePVar(playerid, "Hospital");
 			if(Info[playerid][pTypeSpawn] == 1)
 			{
				SendClientMessageEx(playerid, COLOR_SALMON, "Informe Médico:{FFFFFF} El centro médico de Los Ángeles ha confiscado tus pertenencias ilegales!");
				SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} Te llevaron a tu casa por la caracteristica premium activada.");
				for(new i = 0; i < sizeof(HouseInfo); i++)
	            {
					if(Info[playerid][pPhousekey] == i || Info[playerid][pPhousekey2] == i)
					{
						Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
						SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
						LoadObjects(playerid);
						SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 5000, 1);
						Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
						Info[playerid][pVW] = i+6000;
						SetPlayerVirtualWorld(playerid, i+6000);
					}
				}
				ResetPlayerWeaponsEx(playerid);
				return 1;
 			}
		    if(Info[playerid][pWantedLevel] > 0)
		    {
		        Info[playerid][pJailed] = 2; Info[playerid][pJailTime] = 15*60; GivePlayerCash(playerid, -1000);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Figuras como sospechoso es el sistema del gobierno.");
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Te has recuperado y te pusimos en mano de las fuerzas de la ley.");
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Como te encontramos herido te condenaron sólo unos días. (15 min)");
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 10);
				Info[playerid][pInt] = 10;
		    	rand = random(sizeof(PFAPrisonSpawns));
		    	SetPlayerPos(playerid, PFAPrisonSpawns[rand][0], PFAPrisonSpawns[rand][1], PFAPrisonSpawns[rand][2]);
		    	LoadObjects(playerid);
				StopAudioStreamForPlayer(playerid);
				ResetPlayerWeaponsEx(playerid);
		    	return 1;
		    }
		    else
		    {
              if(Team_USMC(playerid))
			  {
			    SetPlayerCameraPos(playerid, -206.967803, -1735.454345, 675.967651);
				SetPlayerCameraLookAt(playerid, -199.202789, -1747.970336, 675.967651);
				SetPosEx(playerid, -198.579238, -1736.524902, 675.768737, 185.280609,0,playerid);
				SetPlayerInterior(playerid,5);
				SendClientMessageEx(playerid, COLOR_WHITE, "Un médico de la USMC te ha salvado la vida, te trajeron a la ciudad.");
			  }
			  else if(Info[playerid][pOrigin] == 1)
			  {
				SetPlayerCameraPos(playerid, -206.967803, -1735.454345, 675.967651);
				SetPlayerCameraLookAt(playerid, -199.202789, -1747.970336, 675.967651);
				SetPosEx(playerid, -198.579238, -1736.524902, 675.768737, 185.280609,0,playerid);
				SetPlayerInterior(playerid,5);
				SendClientMessageEx(playerid, COLOR_SALMON, "Informe Médico:{FFFFFF} El centro médico de Los Ángeles ha confiscado tus pertenencias ilegales!");
		      }
		      else if(Info[playerid][pOrigin] == 2)
		      {
		        SetPlayerCameraPos(playerid, -206.967803, -1735.454345, 675.967651);
				SetPlayerCameraLookAt(playerid, -199.202789, -1747.970336, 675.967651);
				SetPosEx(playerid, -198.579238, -1736.524902, 675.768737, 185.280609,0,playerid);
				SetPlayerInterior(playerid,5);
				SendClientMessageEx(playerid, COLOR_SALMON, "Informe Médico:{FFFFFF} El centro médico de Los Ángeles ha confiscado tus pertenencias ilegales!");
			  }

		      	SetTimerEx("HospitalFun", 15000, false, "i", playerid); StopAudioStreamForPlayer(playerid);
		      	ResetPlayerWeaponsEx(playerid);
    	  		return 1;
    	  	}
		}
	    if(GetPVarInt(playerid, "FirstSpawn") == 1 && GetPVarInt(playerid, "Hospital") == 0)
  		{
    		SetPlayerPos(playerid,Info[playerid][pPos_x],Info[playerid][pPos_y],Info[playerid][pPos_z]);
			SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
			SetPlayerFacingAngle(playerid, Info[playerid][pPos_r]);
	    	SetPlayerInterior(playerid,Info[playerid][pInt]);
	    	SetHP(playerid, Info[playerid][pHealth]);
			SetPlayerArmour(playerid, Info[playerid][pArmour]);
			SetCameraBehindPlayer(playerid);
			if(Info[playerid][pInt] > 0 || Info[playerid][pVW] > 0)
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW2, "! {FFFFFF}Te desconectaste en un interior, están cargando los objetos, espera un momento por favor.");
				LoadObjects(playerid);
			}
		    return 1;
		}
		SetPlayerToTeamColor(playerid);
	}
	return 1;
}

function firstaid5(playerid){
	if(GetPVarInt(playerid, "usingfirstaid") == 1){
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(health < 100.0){
		    if((health+10.0) <= 100.0) { SetHP(playerid, health+10.0); }
		}
	}
}
function firstaidexpire(playerid)
{
	SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ATENCION]:{FFFFFF} Tu kit de primeros auxilios ya no te hará efecto.");
 	KillTimer(GetPVarInt(playerid, "firstaid5"));
  	SetPVarInt(playerid, "usingfirstaid", 0);
}
//****************************************************************************
public Detect(playerid)
{
	new Ping = GetPlayerPing(playerid);
	if(Ping <= 0 || Ping >= 100000)
	{
	 if(Advertencias[playerid] >= 1) BanearBots(playerid);
	 else Advertencias[playerid]++, Barra[playerid] = SetTimerEx("Detectar", 1500, false, "Ping", playerid);
	}
	return 0;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerConnected(killerid) && GetPVarInt(playerid, "IsInArena") == 0)
	{
        format(QFA[playerid],24,"%s",GetPlayerNameEx(killerid));
	}
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	pTazer[playerid] = 0;
	Info[playerid][pArmour] = 0.0;
	PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 0;
	DeletePVar(playerid, "SpeedRadar");
    DeletePVar(playerid, "UsingSprunk");
    KillTimer(GetPVarInt(playerid, "firstaid5"));
  	DeletePVar(playerid, "usingfirstaid");
  	// Sistema de Interiores en vehículos.
   	if(InteriorLimusina[playerid] != 0) {InteriorLimusina[playerid] = 0;}
	if(InteriorSwatVan[playerid] != 0) {InteriorSwatVan[playerid] = 0;}
	if(InteriorTren[playerid] != 0) {InteriorTren[playerid] = 0;}
	if(InteriorBeagle[playerid] != 0) {InteriorBeagle[playerid] = 0;}
	foreach(Player, i)
	{
		if(EMSAccepted[i] < 999)
		{
 			if(EMSAccepted[i] == playerid)
   			{
     			EMSAccepted[i] = 999;
       			GameTextForPlayer(i, "~w~Paciente~n~~r~muerto", 5000, 1);
	        	EMSCallTime[i] = 0;
	        	DisablePlayerCheckpoint(i);
			}
		}
	}
	for(new x;x<MAX_PLAYERTOYS;x++) RemovePlayerAttachedObject(playerid, x);
	new Float:px,Float:py,Float:pz;
	if(GetPVarInt(playerid, "EventToken") == 0)
	{
		if(GetPVarInt(playerid, "IsInArena") == 0)
		{
			SetPVarInt(playerid, "Injured", 1);
			SetPVarInt(playerid, "FirstSpawn", 2);
			new Float:mX, Float:mY, Float:mZ;
			GetPlayerPos(playerid, mX, mY, mZ);
			SetPVarFloat(playerid, "MedicX", mX);
			SetPVarFloat(playerid, "MedicY", mY);
			SetPVarFloat(playerid, "MedicZ", mZ);
			SetPVarInt(playerid, "MedicVW", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "MedicInt", GetPlayerInterior(playerid));
		}
	}
	gPlayerSpawned[playerid] = 0;
	if(GetPVarInt(playerid, "IsInArena") == 1){
	    new string[128];
		if(reason >= 0 && reason <= 46){
		    new weapon[24];
		    Info[killerid][pKills] += 1;
			if(Info[killerid][pPaintTeam] == 1){
			    if(Info[killerid][pPaintTeam] == Info[playerid][pPaintTeam]){
			        TRedKills -= 1;
			        TBlueKills += 1;
			        SetHP(killerid, 0);
			        Info[killerid][pKills] -= 2;
			        Info[killerid][pDeaths] += 1;
		    		Info[playerid][pDeaths] -= 1;
			        SendClientMessageEx(killerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No mates a los de tu mismo equipo.");
			    }
			    else{
		    		TRedKills += 1;
				}
			}
			if(Info[killerid][pPaintTeam] == 2){
			    if(Info[killerid][pPaintTeam] == Info[playerid][pPaintTeam]){
			        TRedKills += 1;
			        TBlueKills -= 1;
			        SetHP(killerid, 0);
			        Info[killerid][pKills] -= 2;
			        Info[killerid][pDeaths] += 1;
		    		Info[playerid][pDeaths] -= 1;
			        SendClientMessageEx(killerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No mates a los de tu mismo equipo.");
			    }
	    		TBlueKills += 1;
			}
		    GetWeaponName(reason,weapon,sizeof(weapon));
			if(reason == 0){
   				Info[killerid][pPaintTokens] += 16;
   				Info[playerid][pPaintTokens] -= 16;
   				if(Info[playerid][pPaintTokens] < 0) Info[playerid][pPaintTokens] = 0;
			    format(string,sizeof(string),"[Paintball Arena] %s ganó 16 fichas de bonus por para muerte a mano.",GetPlayerNameEx(killerid));
				SendPaintballArenaMessage(GetPVarInt(killerid,"ArenaMode"), COLOR_YELLOW, string);
				GameTextForPlayer(playerid,"-16 fichas", 3000, 1);
				PlayerPlaySound(killerid, 1052, 0.0, 0.0, 0.0);
	    		format(string,sizeof(string),"[Paintball Arena] %s mató a %s con sus propias manos.",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid));
			}
			else{
   				Info[killerid][pPaintTokens] += 8;
   				Info[playerid][pPaintTokens] -= 8;
   				if(Info[playerid][pPaintTokens] < 0) Info[playerid][pPaintTokens] = 0;
			    format(string,sizeof(string),"[Paintball Arena] %s ganó 8 fichas de bonus por un kill.",GetPlayerNameEx(killerid));
				SendPaintballArenaMessage(GetPVarInt(killerid,"ArenaMode"), COLOR_YELLOW, string);
				GameTextForPlayer(playerid,"-8 fichas", 3000, 1);
				PlayerPlaySound(killerid, 1052, 0.0, 0.0, 0.0);
			    format(string,sizeof(string),"[Paintball Arena] %s mató a %s con una %s.",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid),weapon);
			}
		}
		else{
		    Info[playerid][pDeaths] += 1;
			format(string,sizeof(string),"[Paintball Arena] %s se ha suicidado.",GetPlayerNameEx(playerid));
		}
	    SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_RED, string);
	}
	GetPlayerPos(playerid, px, py, pz);
	if(GetPVarInt(playerid, "Injured") == 0)
	{
		if( GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "IsInArena") == 1)
		{
			ResetPlayerWeapons(playerid);
		}
		else
		{
			ResetPlayerWeaponsEx(playerid);
		}
	}
	new caller = Mobile[playerid];
	if(caller != INVALID_PLAYER_ID)
	{
		if(caller < INVALID_PLAYER_ID)
		{
			SendClientMessageEx(caller,  COLOR_GRAD2, "Comunicación perdida, razón: (Mala señal/Telefono apagado).");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
	}
	new string[128];
	if(Info[playerid][pHead] >= 1)
	{
		if(IsPlayerConnected(killerid))
		{
			if(GoChase[killerid] == playerid)
			{
			    new asesino[MAX_PLAYER_NAME],
					nombre[MAX_PLAYER_NAME];

				nombre = GetPlayerNameEx(playerid);
				asesino = GetPlayerNameEx(killerid);

				new takemoney = Info[playerid][pHead] / 4 * 2;
				GivePlayerCash(killerid, takemoney);
				format(string,128,"{A2DC35}[INFO]:{FFFFFF} Hitman %s ha cumplido con el contrato de %s y recaudó $%d.",asesino,nombre,Info[playerid][pHead]);
				SendFamilyMessage(17, COLOR_YELLOW, string);
				GivePlayerCash(playerid, -takemoney);
    			format(string,128,"{A2DC35}[INFO]:{FFFFFF} Has sido gravemente herido por un asesino a sueldo y pérdiste $%d.",takemoney);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				ResetPlayerWeaponsEx(playerid);
				Info[playerid][pHead] = 0;
				Info[killerid][pCHits] += 1;
				GotHit[playerid] = 0;
				GetChased[playerid] = 999;
				GoChase[killerid] = 999;
			}
		}
	}
	if(IsPlayerConnected(killerid))
 	{
		if(GoChase[playerid] == killerid)
		{
		    new asesino[MAX_PLAYER_NAME], nombre[MAX_PLAYER_NAME];

		    nombre = GetPlayerNameEx(playerid);
			asesino = GetPlayerNameEx(killerid);

			new takemoney = Info[playerid][pHead];
			GivePlayerCash(killerid, takemoney);
			format(string,128,"{A2DC35}[INFO]:{FFFFFF} Hitman %s ha fallado el contrato de %s y perdió $%d.",nombre,asesino,Info[killerid][pHead]);
			SendFamilyMessage(17, COLOR_YELLOW, string);
		   	format(string,128,"{A2DC35}[INFO]:{FFFFFF} Has matado a un asesino a sueldo y ganaste $%d, fuiste removido de la lista",Info[killerid][pHead]);
			SendClientMessageEx(killerid, COLOR_YELLOW, string);
			Info[killerid][pHead] = 0;
			Info[playerid][pFHits] += 1;
			GotHit[playerid] = 0;
			GetChased[killerid] = 999;
			GoChase[playerid] = 999;
		}
	}
 if(gPlayerUsingLoopingAnim[playerid] == 1)
	{
        gPlayerUsingLoopingAnim[playerid] = 0;
	}
	//**security**
	#if defined AntiScore 1
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
if(Muertes[playerid] == 0)
{
MuerteReciente[playerid] = gettime();
}
Muertes[playerid]++;
if(Muertes[playerid] == 5)
{
if((gettime() - MuerteReciente[playerid]) <= 5)
{
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por Hack.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - Seguridad V2: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
/*format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado. Razón: Posible intento de Score Hack.", Nombre);
SendClientMessageToAll(Gris, Texto);*/
Kick(playerid);
}
else if((gettime() - MuerteReciente[playerid]) > 5)
{
Muertes[playerid] = 0;
}
}
#endif
	//************
	return 1;
}

public OnPlayerSpawn(playerid)
{
    //********sistema experiencia******//
	new string[128];
 	format(string, sizeof(string), "Lvl: %d Exp: %d/%d", Info[playerid][pLevel],  Info[playerid][pExp], (Info[playerid][pLevel]+1)*(explevel));
    TextDrawSetString(Experiencia[playerid], string);
    TextDrawShowForPlayer(playerid, Experiencia[playerid]);
    //***********************************************************//
	TextDrawShowForPlayer(playerid, king1);
    TextDrawShowForPlayer(playerid, king0);
    TextDrawShowForPlayer(playerid, king2);
	if(!gPlayerLogged{playerid})
	{
	    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No has ingresado correctamente al servidor, intentelo de nuevo.");
        Kick(playerid);
        return 1;
 	}
	if(IsPlayerNPC(playerid)) return 1;
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
        LoadAnimLibs(playerid);
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	TextDrawShowForPlayer(playerid, Text:FechaD);
    TextDrawShowForPlayer(playerid, Text:TiempoD);
	SetPlayerWantedLevel(playerid, Info[playerid][pWantedLevel]);
	gTeam[playerid] = Info[playerid][pTeam];
	SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
	OnDuty[playerid] = 0;
	SetPlayerToTeamColor(playerid);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	SyncPlayerTime(playerid);
	if(Info[playerid][pTut] == 1)
	{
	StopAudioStreamForPlayer(playerid);
	}
	return 1;
}

public OnVehicleDeath(vehicleid)
{
	// Sistema de intermitentes.
    if(Intermitentes_xqz[vehicleid][2]) DestroyObject(Intermitentes_xqz[vehicleid][2]), DestroyObject(Intermitentes_xqz[vehicleid][3]),DestroyObject(Intermitentes_xqz[vehicleid][5]),Intermitentes_xqz[vehicleid][2]=0;
	if(Intermitentes_xqz[vehicleid][0]) DestroyObject(Intermitentes_xqz[vehicleid][0]), DestroyObject(Intermitentes_xqz[vehicleid][1]),DestroyObject(Intermitentes_xqz[vehicleid][4]),Intermitentes_xqz[vehicleid][0]=0;
    if(Lamp[vehicleid] == 1)
	{
    	DestroyObject(light[vehicleid]);
        Lamp[vehicleid] = 0;
    }
    if(GetVehicleModel(vehicleid) == 409)
    {
       	for(new i=0; i<MAX_PLAYERS; i++)
   		{
         	if(InteriorLimusina[i] != 0)
           	{
            	SetPlayerHealth(i, 0);
            	SendClientMessage(i, COLOR_GREY, "El vehículo en el que usted estaba adentro, ha explotado!");
         	}
      	}
   	}
    if(GetVehicleModel(vehicleid) == 427)
    {
       	for(new i=0; i<MAX_PLAYERS; i++)
      	{
         	if(InteriorSwatVan[i] != 0)
           	{
            	SetPlayerHealth(i, 0);
            	SendClientMessage(i, COLOR_GREY, "El vehículo en el que usted estaba adentro, ha explotado!");
         	}
      	}
   	}
    if(GetVehicleModel(vehicleid) == 508)
    {
    	for(new i=0; i<MAX_PLAYERS; i++)
      	{
         	if(InteriorTren[i] != 0)
           	{
            	SetPlayerHealth(i, 0);
            	SendClientMessage(i, COLOR_GREY, "El vehículo en el que usted estaba adentro, ha explotado!");
         	}
      	}
   	}
    if(GetVehicleModel(vehicleid) == 511)
    {
       	for(new i=0; i<MAX_PLAYERS; i++)
   		{
         	if(InteriorBeagle[i] != 0)
           	{
            	SetPlayerHealth(i, 0);
            	SendClientMessage(i, COLOR_GREY, "El vehículo en el que usted estaba adentro, ha explotado!");
         	}
      	}
   	}
    VehicleStatus{vehicleid} = 1;
    arr_Engine{vehicleid} = 0;
    estacionveh[vehicleid] = 0;
  	return 1;
}

Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[156],
		i_dateTime[2][3],
		File: fileHandle = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}
//
public OnPlayerEnterCheckpoint(playerid)
{
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    new carid = GetPlayerVehicleID(playerid), string[128];
	if(GetPVarInt(playerid,"FindJob") == 1)
	{
		DeletePVar(playerid, "FindJob");
		DisablePlayerCheckpoint(playerid);
	}
	if(GetPVarInt(playerid,"FINDHQ") == 1)
	{
		DeletePVar(playerid, "FINDHQ");
		DisablePlayerCheckpoint(playerid);
		SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Llegaste, últiza F para ingresar.");
	}
	//***sistema de fire***
	if(llegarf[playerid] == false)
    {
        llegarf[playerid] = true;
    }
	if(MechanicCallTime[playerid] > 0)
	{
	    if(Team_Mecanicos(playerid))
		{
			MechanicCallTime[playerid] = 0;
			GameTextForPlayer(playerid, "~r~Llegaste!", 2500, 1);
			DisablePlayerCheckpoint(playerid);
		}
	}
	if(GetPVarInt(playerid, "Pizza") > 0 && IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorX], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorY], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorZ]))
	{
		if (GetPVarInt(playerid, "tpPizzaTimer") != 0)
		{
			format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
  			ABroadCast( COLOR_YELLOW, string, 2 );
    		format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
	    	Log("logs/- Hacks Reportados.log", string);
		}
		DestroyProgressBar(PizzaBar[playerid]);
		format(string, sizeof(string), "Has entregado la pizza en su destino! + $%d a tu paycheck.", (GetPVarInt(playerid, "pizzaTimer") * 50));
		SaveStuff();
  		//Info[playerid][pPayCheck] += floatround((GetPVarInt(playerid, "pizzaTimer") * 50), floatround_round);
  		GivePlayerCash(playerid, floatround((GetPVarInt(playerid, "pizzaTimer") * 50), floatround_round));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		SetPVarInt(playerid, "Pizza", 0);
		DisablePlayerCheckpoint(playerid);
	}
	for(new h = 0; h < MAX_POINTS; h++)
	{
		if(Points[h][Type] == 3 && GetPVarInt(playerid, "CrateDeliver") == 1 && IsPlayerInRangeOfPoint(playerid, 6.0, 2165.8655,-1675.2634,15.0859)) // POT
		{
	    	if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
	   		{
		   		format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
		   		ABroadCast( COLOR_YELLOW, string, 2 );
		   		format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
		   		Log("logs/- Hacks Reportados.log", string);
			}
			DisablePlayerCheckpoint(playerid);
			new level = Info[playerid][pSmugSkill];
   			if(level >= 0 && level <= 20)

			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $1250 a tu paycheck por traficar paquetes de droga.");// 20 viajes
				GivePlayerCash(playerid, 1250);
			}
			else if(level >= 21 && level <= 50)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $1471 a tu paycheck por traficar paquetes de droga.");// 29 viajes
				GivePlayerCash(playerid, 1471);
			}
			else if(level >= 51 && level <= 100)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $1528 a tu paycheck por traficar paquetes de droga.");// 49 viajes
				GivePlayerCash(playerid, 1528);
			}
			else if(level >= 101 && level <= 200)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $1875 a tu paycheck por traficar paquetes de droga.");// 99 viajes
				GivePlayerCash(playerid, 1875);
			}
			else if(level >= 201)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $2183 a tu paycheck por traficar paquetes de droga.");// Ilimitado
				GivePlayerCash(playerid, 2183);
			}
			DeletePVar(playerid, "CrateDeliver");
			Info[playerid][pCrates] = 0;
			//Info[playerid][pSmugSkill]++; //CAMBIR
	        if(Info[playerid][pDobleExp] == 0)
			{
              	Info[playerid][pSmugSkill]++;
			}
			else
			{
				Info[playerid][pSmugSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}JOB:{FFFFFF} Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
			}
			Points[h][Stock] += 10;
			format(string, sizeof(string), " MARIHUANA DISPONIBLE: %d/1000.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		if(Points[h][Type] == 4 && GetPVarInt(playerid, "CrateDeliver") == 2 && IsPlayerInRangeOfPoint(playerid, 6.0, 2348.6213,-1168.0778,27.8631)) // CRACK
		{
		    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
		   	{
			   	format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast( COLOR_YELLOW, string, 2 );
			   	format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
			   	Log("logs/- Hacks Reportados.log", string);
			}
			DisablePlayerCheckpoint(playerid);
			new level = Info[playerid][pSmugSkill];
			if(level >= 0 && level <= 20)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $1250 a tu paycheck por traficar paquetes de droga.");// 20 viajes
				GivePlayerCash(playerid, 1250);
			}
			else if(level >= 21 && level <= 50)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $1471 a tu paycheck por traficar paquetes de droga.");// 29 viajes
				GivePlayerCash(playerid, 1471);
			}
			else if(level >= 51 && level <= 100)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $1528 a tu paycheck por traficar paquetes de droga.");// 49 viajes
				GivePlayerCash(playerid, 1528);
			}
			else if(level >= 101 && level <= 200)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $1875 a tu paycheck por traficar paquetes de droga.");// 99 viajes
				GivePlayerCash(playerid, 1875);
			}
			else if(level >= 201)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $2183 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 2183);
			}
			DeletePVar(playerid, "CrateDeliver");
			Info[playerid][pCrates] = 0;
	        if(Info[playerid][pDobleExp] == 0)
			{
              	Info[playerid][pSmugSkill]++;
			}
			else
			{
				Info[playerid][pSmugSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}JOB:{FFFFFF} Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
			}
			Points[h][Stock] += 10;
			format(string, sizeof(string), " COCAINA DISPONIBLE: %d/1000.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		else if(Points[h][Type] == 2 && GetPVarInt(playerid, "MatDeliver") == 555 && IsPlayerInRangeOfPoint(playerid, 6.0, 2317.739990,-2303.850830,13.545999)) // Punto de materiales
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
			    	format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast( COLOR_YELLOW, string, 2 );
			    	format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
			    	Log("logs/- Hacks Reportados.log", string);
				}
				new payout = (25)*(GetPVarInt(playerid, "Packages"));

				if(Info[playerid][pVIP] == 1)
				{
				    Info[playerid][pMats] += 375;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 375 materiales por tu paquete de 15 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"VIP BRONCE:{FFFFFF} Recibes 1.5x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] == 2)
				{
				    Info[playerid][pMats] += 500;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 500 materiales por tu paquete de 20 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"VIP PLATA:{FFFFFF} Recibes 2x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] == 3)
				{
				    Info[playerid][pMats] += 550;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 550 materiales por tu paquete de 20 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"VIP ORO:{FFFFFF} Recibes 2x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] >= 4)
				{
				    Info[playerid][pMats] += 625;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 625 materiales por tu paquete de 25 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"VIP PLATINO:{FFFFFF} Recibes 2.5x más materiales de lo normal.");

				}
				else
				{
    				Info[playerid][pMats] += 250;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te dio 250 materiales por tus 10 paquetes.");
				}

				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);
				for(new p = 0; p < sizeof(fINFO); p++)
				{
     if(strcmp(Points[h][Owner], fINFO[p][FamilyName], true) == 0)
					{
						fINFO[p][FamilyBank] = fINFO[p][FamilyBank]+(payout/3);
					}
				}
				return 1;
			}
		}
		else if(GetPVarInt(playerid, "MatDeliver") == 333 && IsPlayerInRangeOfPoint(playerid, 6.0, 1083.0131,-1226.7869,15.8203))// 2do Punto de materiales
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				if(Info[playerid][pVIP] == 1)
				{
			    	Info[playerid][pMats] += 675;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 675 materiales por tu paquete de 23 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Recibes 1.5x más materiales de lo normal.");
				}
				else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
				{
			    	Info[playerid][pMats] += 900;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 900 materiales por tu paquete de 30 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATAGOLDVIP]:{FFFFFF} Recibes 2x más materiales de lo normal.");
				}
				else if(Info[playerid][pVIP] >= 4)
				{
			    	Info[playerid][pMats] += 625;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 1125 materiales por tu paquete de 38 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATINOVIP]:{FFFFFF} Recibes 2.5x más materiales de lo normal.");
				}
				else
				{
					Info[playerid][pMats] += 450;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te dio 450 materiales por tus 15 paquetes.");
				}
				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);
			}
			if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			{
			   	format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast( COLOR_YELLOW, string, 2 );
			   	format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
			   	Log("logs/- Hacks Reportados.log", string);
			}
		}
		else if(GetPVarInt(playerid, "MatDeliver") == 444 && IsPlayerInRangeOfPoint(playerid, 6.0, 2534.2683,-1063.3899,69.5655)) // 3er punto de materiales
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				if(Info[playerid][pVIP] == 1)
				{
				    Info[playerid][pMats] += 450;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 450 materiales por tu paquete de 18 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Recibes 1.5x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
				{
				    Info[playerid][pMats] += 600;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 600 materiales por tu paquete de 24 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATAGOLDVIP]:{FFFFFF} Recibes 2x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] >= 4)
				{
				    Info[playerid][pMats] += 750;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 750 materiales por tu paquete de 30 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATINOVIP]:{FFFFFF} Recibes 2.5x más materiales de lo normal.");

				}
				else
				{
			    	Info[playerid][pMats] += 300;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "*La fabrica te dio 300 materiales por tus 12 paquetes.");
				}

				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);
				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
			    	format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast( COLOR_YELLOW, string, 2 );
			    	format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
			    	Log("logs/- Hacks Reportados.log", string);
				}
				return 1;
			}
		}
	}
	if(GetPVarInt(playerid,"TrackCar") != 0)
	{
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "TrackCar");
		return 1;
	}
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
		TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~llegaste!", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(GetPVarInt(playerid, "TruckDeliver") > 0 && gPlayerCheckpointStatus[playerid] != CHECKPOINT_RETURNTRUCK)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}JOB:{FFFFFF} ¡Este no es un camión!, Buscá otro.");
	        return 1;
	    }
	    if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}JOB:{FFFFFF} Este no es tu camión con la mercancía que debes entregar.");
	        return 1;
	    }

		if(!IsAtTruckDeliveryPoint(playerid))
 		{
			CancelTruckDelivery(playerid);
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Entraste a un checkpoint erronéo. No se completó la entrega.");
			return 1;
   		}
		if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
		{
			format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
  			ABroadCast( COLOR_YELLOW, string, 2 );
    		format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
	    	Log("logs/- Hacks Reportados.log", string);
		}
		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
		TruckContents[vehicleid] = 0;

		if(truckdeliver >= 1 && truckdeliver <= 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado la comida y bebidas, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 4 && truckdeliver <= 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado la ropa y calzado, regresa para recolectar tu paga.");
		}
		else if(truckdeliver == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado los materiales, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 8 && truckdeliver <= 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado los objetos de la tienda 24 horas, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado las armas, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado las drogas, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado los materiales ilegales, regresa para recolectar tu paga.");
		}
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_RETURNTRUCK;
		SetPlayerCheckpoint(playerid, 2189.829345,-2638.869628,12.5469, 5);
		GameTextForPlayer(playerid, "~w~Reg:~r~Ocean Docks", 5000, 1);
		SendClientMessageEx(playerid, COLOR_YELLOW2, "Indicación:{FFFFFF} Regresa a Ocean Docks. (Mira el checkpoint en el radar).");

		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		return 1;
	}
	else if(EMSCallTime[playerid] > 0 && EMSAccepted[playerid] < 999)
	{
	    if(GetPVarInt(EMSAccepted[playerid], "Injured") == 1)
	    {
	    	SendEMSQueue(EMSAccepted[playerid],2);
	    	EMSAccepted[playerid] = 999;
	    	GameTextForPlayer(playerid, "~w~Llegaste", 5000, 1);
	    	EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
		else
		{
            EMSAccepted[playerid] = 999;
		    GameTextForPlayer(playerid, "~r~El paciente ha muerto.", 5000, 1);
		    EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
	}// Entrega 1
	else if(Info[playerid][pJob] == 5 && CEntregas_01[playerid] > 0 ||  Info[playerid][pJob2] == 5 && CEntregas_01[playerid] > 0)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !TrabajoCam(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un camión!"); CEntregas_01[playerid] = 0; return 1; }

	    if(CEntregas_01[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 1154.1096, -1849.7893, 14.2547, 5.0);
	        CEntregas_01[playerid] = 2;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_01[vehicleid]);
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 1/4: {F0F0F0}Dirígete a la segunda entrega.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_01[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 857.4225, -1217.2032, 17.3919, 5.0);
	        CEntregas_01[playerid] = 3;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_02[vehicleid]);
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 2/4: {F0F0F0}Dirígete a la tercera entrega.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_01[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 844.5405, -584.2823, 17.5104, 5.0);
	        CEntregas_01[playerid] = 4;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_03[vehicleid]);
            MatCam[vehicleid] = 0;
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 3/4: {F0F0F0}Dirígete a la última entrega.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_01[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 2361.0261, -79.0503, 26.9409, 5.0);
	        CEntregas_01[playerid] = 5;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_04[vehicleid]);
            MatCam[vehicleid] = 0;
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 4/4: {F0F0F0}Regresa a Palomino Creek para pagarte.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_01[playerid] == 5)
	    {
	        CEntregas_01[playerid] = 0;
	        GivePlayerCash(playerid, 1310);
			SendClientMessageEx(playerid, COLOR_WHITE, "Paga : {B9C9CF}$1310");
			RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        DisablePlayerCheckpoint(playerid);
	        return 1;
	    }
	}// Entrega 2
	else if(Info[playerid][pJob] == 5 && CEntregas_02[playerid] > 0 ||  Info[playerid][pJob2] == 5 && CEntregas_02[playerid] > 0)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !TrabajoCam(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un camión!"); CEntregas_02[playerid] = 0; return 1; }

	    if(CEntregas_02[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 1154.1096, -1849.7893, 14.2547, 5.0);
	        CEntregas_02[playerid] = 2;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_01[vehicleid]);
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 1/3: {F0F0F0}Dirígete a la segunda entrega.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_02[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 2286.1921, -2217.9263, 14.0657, 5.0);
	        CEntregas_02[playerid] = 3;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_02[vehicleid]);
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 2/3: {F0F0F0}Dirígete a la tercera entrega.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_02[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 2361.0261, -79.0503, 26.9409, 5.0);
	        CEntregas_02[playerid] = 4;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_03[vehicleid]);
            MatCam[vehicleid] = 0;
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 3/3: {F0F0F0}Regresa a Palomino Creek para pagarte.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_02[playerid] == 4)
	    {
	        CEntregas_02[playerid] = 0;
	        GivePlayerCash(playerid, 946);
			SendClientMessageEx(playerid, COLOR_WHITE, "Paga : {B9C9CF}$946");
			RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        DisablePlayerCheckpoint(playerid);
	        return 1;
	    }
	}// Entrega 3
	else if(Info[playerid][pJob] == 5 && CEntregas_03[playerid] > 0 ||  Info[playerid][pJob2] == 5 && CEntregas_03[playerid] > 0)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !TrabajoCam(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un camión!"); CEntregas_03[playerid] = 0; return 1; }

	    if(CEntregas_03[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 1154.1096, -1849.7893, 14.2547, 5.0);
	        CEntregas_03[playerid] = 2;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_01[vehicleid]);
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 1/2: {F0F0F0}Dirígete a la segunda entrega.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_03[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 2361.0261, -79.0503, 26.9409, 5.0);
	        CEntregas_03[playerid] = 3;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_02[vehicleid]);
            MatCam[vehicleid] = 0;
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 2/2: {F0F0F0}Regresa a Palomino Creek para pagarte.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_03[playerid] == 3)
	    {
	        CEntregas_03[playerid] = 0;
	        GivePlayerCash(playerid, 849);
			SendClientMessageEx(playerid, COLOR_WHITE, "Paga : {B9C9CF}$849");
			RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        DisablePlayerCheckpoint(playerid);
	        return 1;
	    }
	}// Entrega 4
	else if(Info[playerid][pJob] == 5 && CEntregas_04[playerid] > 0 ||  Info[playerid][pJob2] == 5 && CEntregas_04[playerid] > 0)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !TrabajoCam(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un camión!"); CEntregas_04[playerid] = 0; return 1; }

	    if(CEntregas_04[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 2361.0261, -79.0503, 26.9409, 5.0);
	        CEntregas_04[playerid] = 2;
	        new vehicleid = GetPlayerVehicleID(playerid);
	        DestroyObject(ObjMat_01[vehicleid]);
            MatCam[vehicleid] = 0;
			SendClientMessageEx(playerid, COLOR_CSTAFF, "Entrega 1/1: {F0F0F0}Regresa a Palomino Creek para pagarte.");
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(CEntregas_04[playerid] == 2)
	    {
	        CEntregas_04[playerid] = 0;
	        GivePlayerCash(playerid, 644);
			SendClientMessageEx(playerid, COLOR_WHITE, "Paga : {B9C9CF}$644");
			RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        DisablePlayerCheckpoint(playerid);
	        return 1;
	    }
	}// Recorrido 1
	else if(Info[playerid][pJob] == 3 && Bus_Route1[playerid] > 0 ||  Info[playerid][pJob2] == 3 && Bus_Route1[playerid] > 0) // CMD - /rutabus.
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !IsAnBus(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un autobús!"); Bus_Route1[playerid] = 0; return 1; }

	    if(Bus_Route1[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 2089.70557, -1771.03381, 12.37620, 5.0);
	        Bus_Route1[playerid] = 2;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Idlewood", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 2398.41602, -1750.97961, 13.37142, 5.0);
	        Bus_Route1[playerid] = 3;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Ganton", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 2433.94922, -1458.13757, 23.74783, 5.0);
	        Bus_Route1[playerid] = 4;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~East Los Angeles", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 2645.07300, -1416.80530, 29.27670, 5.0);
	        Bus_Route1[playerid] = 5;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~East Beach", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 5)
	    {
            SetPlayerCheckpoint(playerid, 2706.42090, -1088.79529, 69.15760, 5.0);
	        Bus_Route1[playerid] = 6;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Las Colinas", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 6)
	    {
	        SetPlayerCheckpoint(playerid, 2383.51538, -1171.39966, 27.66880, 5.0);
	        Bus_Route1[playerid] = 7;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~East Los Angeles", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 7)
	    {
	        SetPlayerCheckpoint(playerid, 2268.75659, -1283.65002, 23.77001, 5.0);
	        Bus_Route1[playerid] = 8;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Jefferson", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 8)
	    {
	        SetPlayerCheckpoint(playerid, 2003.04956, -1338.68701, 23.85680, 5.0);
	        Bus_Route1[playerid] = 9;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Glen Park", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 9)
	    {
	        SetPlayerCheckpoint(playerid, 1845.74292, -1395.89136, 13.38650, 5.0);
	        Bus_Route1[playerid] = 10;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Glend Park", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 10)
	    {
	        SetPlayerCheckpoint(playerid, 1819.35938, -1596.52637, 13.37290, 5.0);
	        Bus_Route1[playerid] = 11;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Idlewood", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 11)
	    {
	        SetPlayerCheckpoint(playerid, 1704.38684, -1590.48157, 13.29670, 5.0);
	        Bus_Route1[playerid] = 12;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Commerce", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 12)
	    {
	        SetPlayerCheckpoint(playerid, 1687.22986, -1799.75806, 13.36310, 5.0);
	        Bus_Route1[playerid] = 13;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Commerce", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 30)
	    {
	        SetPlayerCheckpoint(playerid, 1819.64734, -1875.90930, 13.38740, 5.0);
	        Bus_Route1[playerid] = 14;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~El Corona", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 14)
	    {
	        SetPlayerCheckpoint(playerid, 1959.49976, -2033.44519, 13.36780, 5.0);
	        Bus_Route1[playerid] = 15;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~El Corona", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 15)
	    {
	        SetPlayerCheckpoint(playerid, 1786.19727, -2040.22498, 13.48611, 5.0);
	        Bus_Route1[playerid] = 16;
	        GivePlayerCash(playerid, 30);
			GameTextForPlayer(playerid, "~w~Ult. Parada: ~p~Autobuses", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route1[playerid] == 16)
	    {
	        GameTextForPlayer(playerid, "~p~FIN DEL RECORRIDO", 5000, 1);
	        Bus_Route1[playerid] = 0;
	        GivePlayerCash(playerid, 50);
	        RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        SetPlayerSkin(playerid, Info[playerid][pChar]);
	    }
	}// Recorrido 2 (No Dispoonible)
	else if(Info[playerid][pJob] == 3 && Bus_Route2[playerid] > 0 ||  Info[playerid][pJob2] == 3 && Bus_Route2[playerid] > 0) // CMD - /rutabus.
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !IsAnBus(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un autobús!"); Bus_Route2[playerid] = 0; return 1; }

	    if(Bus_Route2[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 1532.02576, -1886.18799, 13.51930, 5.0);
	        Bus_Route2[playerid] = 2;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Verdant Bluffs", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 1542.82349, -1730.07922, 13.26850, 5.0);
	        Bus_Route2[playerid] = 3;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Commerce", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 1314.60754, -1652.26367, 13.31280, 5.0);
	        Bus_Route2[playerid] = 4;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Verona Beach", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 1360.02991, -1257.85376, 13.45630, 5.0);
	        Bus_Route2[playerid] = 5;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Market", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 5)
	    {
            SetPlayerCheckpoint(playerid, 1370.91711, -1050.22192, 26.52280, 5.0);
	        Bus_Route2[playerid] = 6;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Temple", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 6)
	    {
	        SetPlayerCheckpoint(playerid, 1177.23865, -1037.51221, 31.70430, 5.0);
	        Bus_Route2[playerid] = 7;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Temple", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 7)
	    {
	        SetPlayerCheckpoint(playerid, 1263.18518, -420.47540, 2.58290, 5.0);
	        Bus_Route2[playerid] = 8;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Red Country", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 8)
	    {
	        SetPlayerCheckpoint(playerid, 834.17810, -543.14148, 16.16210, 5.0);
	        Bus_Route2[playerid] = 9;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Dillimore", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 9)
	    {
	        SetPlayerCheckpoint(playerid, 694.26819, -527.79327, 16.20910, 5.0);
	        Bus_Route2[playerid] = 10;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Dillimore", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 10)
	    {
	        SetPlayerCheckpoint(playerid, 792.54309, -1030.80627, 24.12320, 5.0);
	        Bus_Route2[playerid] = 11;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Vinewood", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 11)
	    {
	        SetPlayerCheckpoint(playerid, 794.76862, -1382.60559, 13.49940, 5.0);
	        Bus_Route2[playerid] = 12;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Market Station", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 12)
	    {
	        SetPlayerCheckpoint(playerid, 1286.10315, -1408.27539, 13.36010, 5.0);
	        Bus_Route2[playerid] = 13;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Market", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 13)
	    {
	        SetPlayerCheckpoint(playerid, 1295.23755, -1839.59265, 13.32770, 5.0);
	        Bus_Route2[playerid] = 14;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Conference Centre", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 14)
	    {
	        SetPlayerCheckpoint(playerid, 1515.78699, -1874.51611, 13.27580, 5.0);
	        Bus_Route2[playerid] = 15;
	        GivePlayerCash(playerid, 200);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~Verdant Bluffs", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 15)
	    {
	        SetPlayerCheckpoint(playerid, 1807.58020, -2168.62231, 13.40170, 5.0);
	        Bus_Route2[playerid] = 16;
	        GivePlayerCash(playerid, 100);
			GameTextForPlayer(playerid, "~w~Sig. Parada: ~p~El Corona", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 16)
	    {
	        SetPlayerCheckpoint(playerid, 1786.19727, -2040.22498, 13.48611, 5.0);
	        Bus_Route2[playerid] = 17;
	        GivePlayerCash(playerid, 100);
			GameTextForPlayer(playerid, "~w~Ult. Parada: ~p~Autobuses", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route2[playerid] == 17)
	    {
	        GameTextForPlayer(playerid, "~p~FIN DEL RECORRIDO", 5000, 1);
	        Bus_Route2[playerid] = 0;
	        GivePlayerCash(playerid, 1000);
	        RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        SetPlayerSkin(playerid, Info[playerid][pChar]);
	    }
	}
	else if(Info[playerid][pJob] == 15 && Tren_Route[playerid] > 0 ||  Info[playerid][pJob2] == 15 && Tren_Route[playerid] > 0) // CMD - /rutatren.
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !Tren_Vehicle(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un tren!"); Tren_Route[playerid] = 0; return 1; }
		if(Tren_Route[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, -1943.2317,159.9102,27.0006, 20.0);
	        GameTextForPlayer(playerid, "~w~Proxima Estacion: ~y~Cranberry", 5000, 1);
	        Tren_Route[playerid] = 2;
			GivePlayerCash(playerid, 391);// 9 lineas en total con el fin de limpiar el mapa de los pasajeros!
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
	        format(string, sizeof(string), "[Transporte Público]:  {FFFFFF}• Estación Actual: Market Station    • Próxima Estación: Cranberry - San Francisco", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
	        //SetTimerEx("TrenTimer", 5000, false, "d", playerid); // 10 Segundos.
	        return 1;
	    }
	    else if(Tren_Route[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 1455.6279,2632.2500,12.1256, 5.0);
	        GameTextForPlayer(playerid, "~w~Proxima Estacion: ~y~Yellow Bell", 5000, 1);
	        Tren_Route[playerid] = 3;
	        GivePlayerCash(playerid, 525);// 9 lineas en total con el fin de limpiar el mapa de los pasajeros!
	        format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
	        format(string, sizeof(string), "[Transporte Público]:  {FFFFFF}• Estación Actual: Cranberry    • Próxima Estación: Yellow Bell - Las Vegas", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
	        //SetTimerEx("TrenTimer", 5000, false, "d", playerid); // 10 Segundos.
	        return 1;
	    }
	    else if(Tren_Route[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 2864.7500,1274.8271,12.1256, 5.0);
	        GameTextForPlayer(playerid, "~w~Proxima Estacion: ~y~Linden", 5000, 1);
	        Tren_Route[playerid] = 4;
	        GivePlayerCash(playerid, 477);// 9 lineas en total con el fin de limpiar el mapa de los pasajeros!
	        format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
	        format(string, sizeof(string), "[Transporte Público]:  {FFFFFF}• Estación Actual: Yellow Bell    • Próxima Estación: Linden Station", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
	        //SetTimerEx("TrenTimer", 5000, false, "d", playerid); // 10 Segundos.
	        return 1;
	    }
	    else if(Tren_Route[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 1715.0220,-1953.7056,14.8756, 5.0);
	        GameTextForPlayer(playerid, "~w~Proxima Estacion: ~y~Unity", 5000, 1);
	        Tren_Route[playerid] = 5;
	        GivePlayerCash(playerid, 429);// 9 lineas en total con el fin de limpiar el mapa de los pasajeros!
	        format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
	        format(string, sizeof(string), "[Transporte Público]:  {FFFFFF}• Estación Actual: Linden Station    • Próxima Estación: Unity Station - Los Angeles", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
	        //SetTimerEx("TrenTimer", 5000, false, "d", playerid); // 10 Segundos.
	        return 1;
	    }
	    else if(Tren_Route[playerid] == 5)
	    {
	        GameTextForPlayer(playerid, "~w~Viaje finalizado!", 5000, 1);
	        Tren_Route[playerid] = 0;
	        GivePlayerCash(playerid, 468);// 9 lineas en total con el fin de limpiar el mapa de los pasajeros!
	        format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			format(string, sizeof(string), "", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
	        format(string, sizeof(string), "[Transporte Público]:  {FFFFFF}• Finalizamos el viaje, el tren sale aproximadamente en 2 minutos.", GetPlayerNameEx(playerid));
			ProxDetector(99.0, playerid,string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
	        Message(playerid, COLOR_FADE1, "Jefe de maquinistas dice: ¿Cómo fue tu viaje?, Espero que bien y sigas trabajando para nosotros!");
	        RemovePlayerFromVehicle(playerid);
	        SetPosEx(playerid, 1685.189575,-1944.738159,13.546875,0,0,0);
	        SetPlayerFacingAngle(playerid, 267.875854);
	        SetPlayerSkin(playerid, Info[playerid][pChar]);
	        RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	    }
	}
	else if(Info[playerid][pJob] == 16 && BasureroR[playerid] > 0 ||  Info[playerid][pJob2] == 16 && BasureroR[playerid] > 0)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !BasureroLA(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un camion de basura!!!"); Bus_Route2[playerid] = 0; return 1; }

	    if(BasureroR[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 2399.258789, -1974.641357, 13.382812, 5.0);
	        BasureroR[playerid] = 2;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 2416.117675, -1745.683105, 13.382812, 5.0);
	        BasureroR[playerid] = 3;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 2433.557128, -1517.620483, 23.833192, 5.0);
	        BasureroR[playerid] = 4;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 2392.728515, -1387.542236, 23.890615, 5.0);
	        BasureroR[playerid] = 5;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 5)
	    {
            SetPlayerCheckpoint(playerid, 2307.573974, -1340.638793, 23.852800, 5.0);
	        BasureroR[playerid] = 6;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 6)
	    {
	        SetPlayerCheckpoint(playerid, 2276.498779, -1145.609497, 26.739709, 5.0);
	        BasureroR[playerid] = 7;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 7)
	    {
	        SetPlayerCheckpoint(playerid, 2028.156982, -1067.985961, 24.550926, 5.0);
	        BasureroR[playerid] = 8;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 8)
	    {
	        SetPlayerCheckpoint(playerid, 1870.482421, -1053.220336, 23.679687, 5.0);
	        BasureroR[playerid] = 9;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 9)
	    {
	        SetPlayerCheckpoint(playerid, 1766.931396, -1164.539306, 23.651935, 5.0);
	        BasureroR[playerid] = 10;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 10)
	    {
	        SetPlayerCheckpoint(playerid, 1432.095947, -1157.758789, 23.656250, 5.0);
	        BasureroR[playerid] = 11;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 11)
	    {
	        SetPlayerCheckpoint(playerid, 1283.598388, -1137.922851, 23.656250, 5.0);
	        BasureroR[playerid] = 12;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
            SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 12)
	    {
	        SetPlayerCheckpoint(playerid, 1251.686279, -924.795166, 42.575630, 5.0);
	        BasureroR[playerid] = 13;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 13)
	    {
	        SetPlayerCheckpoint(playerid, 960.149719, -1128.075561, 23.666421, 5.0);
	        BasureroR[playerid] = 14;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 14)
	    {
	        SetPlayerCheckpoint(playerid, 939.893981, -1303.837280, 13.702860, 5.0);
	        BasureroR[playerid] = 15;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 15)
	    {
	        SetPlayerCheckpoint(playerid, 914.632751, -1383.854736, 13.292768, 5.0);
	        BasureroR[playerid] = 16;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 16)
	    {
	        SetPlayerCheckpoint(playerid, 1050.908691, -1408.515991, 13.372652, 5.0);
	        BasureroR[playerid] = 17;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 17)
	    {
	        SetPlayerCheckpoint(playerid, 1294.886474, -1604.692626, 13.382812, 5.0);
	        BasureroR[playerid] = 18;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 18)
	    {
	        SetPlayerCheckpoint(playerid, 1326.379760, -1855.753051, 13.382812, 5.0);
	        BasureroR[playerid] = 19;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 19)
	    {
	        SetPlayerCheckpoint(playerid, 1527.258056, -1887.852783, 13.600594, 5.0);
	        BasureroR[playerid] = 20;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 20)
	    {
	        SetPlayerCheckpoint(playerid, 1946.565795, -2169.281005, 13.390106, 5.0);
	        BasureroR[playerid] = 21;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 21)
	    {
	        SetPlayerCheckpoint(playerid, 1946.565795, -2169.281005, 13.390106, 5.0);
	        BasureroR[playerid] = 22;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 22)
	    {
	        SetPlayerCheckpoint(playerid, 2173.126464, -2195.255371, 13.336221, 5.0);
	        BasureroR[playerid] = 23;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 23)
	    {
	        SetPlayerCheckpoint(playerid, 2181.168457, -1987.198852, 13.550259, 5.0);
	        BasureroR[playerid] = 24;
	        GivePlayerCash(playerid, 28);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(BasureroR[playerid] == 24)
	    {
	        GameTextForPlayer(playerid, "~g~PAGA EN TOTAL~n~~w~$672", 4000, 3);
	        BasureroR[playerid] = 0;
	        GivePlayerCash(playerid, 28);
	        RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        SetPlayerSkin(playerid, Info[playerid][pChar]);
	    }
	}
	else if(Info[playerid][pJob] == 9  || Info[playerid][pJob2] == 9)
	{
	    if(DrugFarming[playerid] == 1)
	    {
	        if(IsAHarvest(carid) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	        {
	            if(Info[playerid][pCosecha] < 41)
	            {
	            	new cos = random(6);
         	    	DisablePlayerCheckpoint(playerid);
	            	format(string, sizeof(string), "¡Has cosechado y has conseguido %i Kg de cosecha!", cos+1);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					Info[playerid][pCosecha] += cos+1;
					new randomize = random(sizeof(gDrugFarmVar));
	      			SetPlayerCheckpoint(playerid, gDrugFarmVar[randomize][0], gDrugFarmVar[randomize][1], gDrugFarmVar[randomize][2], 5.0);
					return 1;
				}
				else
				{
				    DisablePlayerCheckpoint(playerid);
					format(string, sizeof(string), "Acumulado para vender {2EDFFF}%d{FFFFFF} KG || /Vendercosecha en cualquier tienda 24 horas.", Info[playerid][pCosecha]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				    DrugFarming[playerid] = 0;
				    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				    return 1;
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW, "No estás en el coche de cosechador.");
			    DrugFarming[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    return 1;
			}
	    }
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_LOADTRUCK:
			{
			    if(IsPlayerInRangeOfPoint(playerid, 6, 2198.1377,-2660.1250,13.5469))
			    {
				    new vehicleid = GetPlayerVehicleID(playerid);
	   				if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    		{
		    		    DisablePlayerCheckpoint(playerid);
				    	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				    	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
						TogglePlayerControllable(playerid, 0);
						SetPVarInt(playerid, "IsFrozen", 1);
						SafeDialogEx(playerid,DIALOG_LOADTRUCK,DIALOG_STYLE_LIST,"{2EDFFF}Transportaciones disponibles","{00F70C}Mercancía Legal {FFFFFF}(Ningún riesgo)\n{FF0606}Mercancía Ilegal {FFFFFF}(Riesgo de quedar encarcelado)","Ok","Cancelar");
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "No estás en un camión para transportar, buscá uno.");
				}
			}
			case CHECKPOINT_RETURNTRUCK:
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 6, 2189.829345,-2638.869628,12.5469))
			    {
                    CancelTruckDelivery(playerid);
                    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Fuiste a un checkpoint erronéo, la entrega no se completo.");
					return 1;
			    }
 				if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
				{
					format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
  					ABroadCast( COLOR_YELLOW, string, 2 );
    				format(string, sizeof(string), "{FF0000}[Cleo Detected]{FF0000} {FFFF00}%s [ID %d] puede que esté usando: {FF0000}Hack Teleport", GetPlayerNameEx(playerid), playerid);
	    			Log("logs/- Hacks Reportados.log", string);
				}
   				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    		{
	        		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en un camión, busque uno.");
	        		return 1;
	    		}
	    		if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    		{
	        		SendClientMessageEx(playerid, COLOR_WHITE, "Este no es el carro que utilizas, devuelve el camión para recibir su pago!");
	        		return 1;
	    		}

			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			    SetVehicleToRespawn(vehicleid);

   				new payment;
				new level = Info[playerid][pTruckSkill];
				if(level >= 0 && level <= 50) payment = 200;
				else if(level >= 51 && level <= 100) payment = 400;
				else if(level >= 101 && level <= 200) payment = 600;
				else if(level >= 201 && level <= 400) payment = 800;
				else if(level >= 401) payment = 1000;

				SaveStuff();
				GivePlayerCash(playerid, payment);
    			format(string, sizeof(string), "* Sumaron $%d a tu paycheck por entregar mercancías y devolver el camión.", payment);
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

                new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
				if(truckdeliver == 11)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio una 9mm de bonus por entregar armas ilegales.");
				    GivePlayerValidWeapon(playerid, 22);
				}
				else if(truckdeliver == 12)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio una 9mm de bonus por entregar armas ilegales.");
				    GivePlayerValidWeapon(playerid, 22);
				}
				else if(truckdeliver == 13)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio una uzi de bonus por entregar armas ilegales.");
				    GivePlayerValidWeapon(playerid, 28);
				}
				else if(truckdeliver == 14)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio una tec-9 de bonus por entregar armas ilegales.");
				    GivePlayerValidWeapon(playerid, 32);
				}
				else if(truckdeliver == 15)
				{
   					new randomweapon = Random(1, 3);
    				if(randomweapon == 1)
					{
    					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio una uzi y deagle de bonus por entregar armas ilegales.");
    					GivePlayerValidWeapon(playerid, 24);
    					GivePlayerValidWeapon(playerid, 28);
    				}
    				if(randomweapon == 2)
					{
    					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio una tec-9 y deagle de bonus por entregar armas ilegales.");
    					GivePlayerValidWeapon(playerid, 24);
    					GivePlayerValidWeapon(playerid, 32);
    				}
				}
				else if(truckdeliver == 16)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 3gr de droga por entregar mercancía ilegal.");
				    Info[playerid][pCrack] += 5;
				}
				else if(truckdeliver == 17)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 5gr de droga por entregar mercancía ilegal.");
				    Info[playerid][pCrack] += 5;
				}
				else if(truckdeliver == 18)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 8gr de marihuana por entregar mercancía ilegal.");
				    Info[playerid][pPot] += 8;
				}
				else if(truckdeliver == 19)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 10gr de marihuana por entregar mercancía ilegal.");
				    Info[playerid][pPot] += 10;
				}
				else if(truckdeliver == 20)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 15gr de droga por entregar mercancía ilegal.");
				    Info[playerid][pCrack] += 15;
				}
				else if(truckdeliver == 21)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 25 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 25;
				}
				else if(truckdeliver == 22)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 55 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 50;
				}
				else if(truckdeliver == 23)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 100 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 100;
				}
				else if(truckdeliver == 24)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 150 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 150;
				}
				else if(truckdeliver == 25)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 200 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 200;
				}
	            if(Info[playerid][pDobleExp] == 0)
				{
                   	Info[playerid][pTruckSkill]++;
				}
				else
				{
					Info[playerid][pTruckSkill] += 2;
					SendClientMessageEx(playerid, COLOR_YELLOW, "* {A2DC35}JOB:{FFFFFF} Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
				}
				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				DeletePVar(playerid, "TruckDeliver");
			}
		}
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}
//
stock SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num){
	for(new i = 0; i < MAX_PLAYERS; i++)	{
		if(IsPlayerConnected(i))		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
		}
	}

}

SendClientMessageEx(playerid, color, string[]){
	if(InsideMainMenu[playerid] == 1 || TutStep[playerid] == 1)
		return 0;
	else SendClientMessage(playerid, color, string);
	return 1;
}

SendClientMessageToAllEx(color, string[]){
	foreach(Player, i)	{
		if(InsideMainMenu[i] == 1 || TutStep[i] == 1) {}
		else SendClientMessage(i, color, string);
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	//***velocimetro***
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
        {
                TextDrawShowForPlayer(playerid, Tacho_Box0);
                TextDrawShowForPlayer(playerid, Tacho_Box1);
                TextDrawShowForPlayer(playerid, Tacho_KMH[playerid]);
                TextDrawShowForPlayer(playerid, Tacho_Box2);
                TextDrawShowForPlayer(playerid, Tacho_Zustand[playerid]);
                TextDrawShowForPlayer(playerid, Tacho_Tank[playerid]);
                TextDrawShowForPlayer(playerid, Tacho_Car[playerid]);
        }
        if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
        {
                TextDrawHideForPlayer(playerid, Tacho_Box0);
                TextDrawHideForPlayer(playerid, Tacho_Box1);
                TextDrawHideForPlayer(playerid, Tacho_KMH[playerid]);
                TextDrawHideForPlayer(playerid, Tacho_Box2);
                TextDrawHideForPlayer(playerid, Tacho_Zustand[playerid]);
                TextDrawHideForPlayer(playerid, Tacho_Tank[playerid]);
                TextDrawHideForPlayer(playerid, Tacho_Car[playerid]);
        }
	//*****************
	new string[128];
	new engine,lights,alarm,doors,bonnet,boot,objective;
    if(IsPlayerNPC(playerid))
	{
	    if(newstate == PLAYER_STATE_SPECTATING)
	    {
        	TogglePlayerSpectating(playerid, false);
		}
		return 1;
	}
	if(GettingSpectated[playerid] != 999)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = 999;
	        Spectate[spectator] = 999;
		}
	    if(newstate == PLAYER_STATE_DRIVER && Info[spectator][pAdminZC] >= 2 || newstate == PLAYER_STATE_PASSENGER && Info[spectator][pAdminZC] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID( playerid );
			PlayerSpectateVehicle( spectator, carid );
			SetPVarInt(spectator, "SpecState", newstate);
	    }
	    else if(newstate == PLAYER_STATE_ONFOOT && Info[spectator][pAdminZC] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
		   	PlayerSpectatePlayer( spectator, playerid );
		   	SetPlayerInterior( spectator, GetPlayerInterior( playerid ) );
			SetPVarInt(spectator, "SpecState", newstate);
	    }
	}
	//***armas en espalda***
	if(oldstate==PLAYER_STATE_ONFOOT)
	{
		StopPlayerHoldingObject(playerid);
		OldWeapon[playerid]=0;
		HoldingWeapon[playerid]=0;
	}
    //**********************
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		SetPlayerWeaponsEx(playerid);
	}
	else if(oldstate == PLAYER_STATE_PASSENGER) SetPlayerWeaponsEx(playerid);
	if(newstate == PLAYER_STATE_ONFOOT)
	{
 		if(estacionp[playerid] != 0)
		{
			StopAudioStreamForPlayer(playerid);
 			estacionp[playerid] = 0;
		}
        if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "{FFFFFF}Resultado en total de ganancias:{33AA33} Tarifa $%d", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			TransportTime[playerid] = 0;
   			TransportCost[playerid] = 0;
		}
		if(TransportDriver[playerid] < 999)
		{
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			format(string, sizeof(string), "~w~Costo del viaje:~n~~r~$%d",TransportCost[playerid]);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~w~Pasajero se fue~n~~g~ganaste $%d",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 3);
			GivePlayerCash(playerid, -TransportCost[playerid]);
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			TransportCost[playerid] = 0;
			TransportTime[playerid] = 0;
			TransportDriver[playerid] = 999;
		}
		if(DrugFarming[playerid] == 1)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 	    DrugFarming[playerid] = 0;
	 	    SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} Dejaste de cosechar.");
		    if(IsAHarvest(GetPlayerVehicleID(playerid)))
			{
		 		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			}
		}
	}
	if((newstate == 2 || newstate == 3 || newstate == 7 || newstate == 9) && pTazer[playerid] == 1)
	{
		GivePlayerValidWeapon(playerid, pTazerReplace[playerid]);
		pTazer[playerid] = 0;
	}
	if(newstate == PLAYER_STATE_PASSENGER){
 		if(estacionveh[GetPlayerVehicleID(playerid)] != 0){
		    new station[64], name[16];
			switch(estacionveh[GetPlayerVehicleID(playerid)]){
				case 1: format(station, sizeof(station), "http://streamer01.sonic.server54.net:8000/live128") && format(name, sizeof(name), "Sonic FM");
				case 2: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99179772") && format(name, sizeof(name), "Jazz");
				case 3: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=86425") && format(name, sizeof(name), "Radio Paradise");
				case 4: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=372869") && format(name, sizeof(name), "Reggaeton 24 horas");
				case 5: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=78551") && format(name, sizeof(name), "Energia FM");
				case 6: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=638308") && format(name, sizeof(name), "Tropicana");
				case 7: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=39428") && format(name, sizeof(name), "Dupstep");
				case 8: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616806") && format(name, sizeof(name), "Electronic Radio");
				case 9: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=36692") && format(name, sizeof(name), "Bachata Mix");
				case 10: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99182082") && format(name, sizeof(name), "Baladas");
				case 11: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1630446") && format(name, sizeof(name), "Dream Pop");
				case 12: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=524216") && format(name, sizeof(name), "Rock Radio");
				case 13: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1671321") && format(name, sizeof(name), "Salsa");
				case 14: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181500") && format(name, sizeof(name), "Radio Gansta");
			}
			StopAudioStreamForPlayer(playerid);
			estacionp[playerid] = PlayAudioStreamForPlayer(playerid, station, 1, 1, 1, 1, 0);
			format(string, sizeof(string), "{00C200}* Estación: {FFFFFF}%s - Puedes cambiar la emisora. {00C200}(/estacion)", name);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
		}
	    fVehSpeed[playerid] = 0.0;
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(Info[playerid][pWeapons][4] > 0)	SetPlayerArmedWeapon(playerid,Info[playerid][pWeapons][4]);
		else SetPlayerArmedWeapon(playerid,0);
		gLastCar[playerid] = vehicleid;
	    foreach(Player, i)
	    {
     		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
       		{
				if(GetPlayerCash(playerid) < TransportValue[i])
				{
					format(string, sizeof(string), "* Tu necesitas $%d para entrar al taxi.", TransportValue[i]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(playerid);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					SetPlayerPos(playerid, X, Y, Z+2);
					TogglePlayerControllable(playerid, 1);
				}
				else
				{
					if(TransportDuty[i] == 1)
					{
						format(string, sizeof(string), "* Pagaste $%d al taxista.", TransportValue[i]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s ha entrado a tu taxi.", GetPlayerNameEx(playerid));
						SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
						TransportTime[i] = 1;
						TransportTime[playerid] = 1;
						TransportCost[playerid] = TransportValue[i];
						TransportCost[i] = TransportValue[i];
						TransportDriver[playerid] = i;
					}
					GivePlayerCash(playerid, - TransportValue[i]);
					TransportMoney[i] += TransportValue[i];
	            }
	        }
	    }
	    if( GetPVarInt( playerid, "ToBeEjected" ) >= 1 )
    	{
	       	SetPVarInt( playerid, "ToBeEjected", 0 );
	       	RemovePlayerFromVehicle( playerid );
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid);
				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
   			}
   		}
   		if (GetVehicleModel(vehicleid) == 437) // Bus Interior
     	{
     	        LoadObjects(playerid);
                SetPlayerPos(playerid, 2021.983520,2235.242919,2103.953613);
                SetPlayerFacingAngle(playerid, 357.716552);
                SetCameraBehindPlayer(playerid);
                SetPlayerInterior(playerid, vehicleid);
                InteriorLimusina[playerid] = vehicleid;
        }
        if (GetVehicleModel(vehicleid) == 427) // Swat
     	{
     	        LoadObjects(playerid);
                SetPlayerPos(playerid, 1320.12549,-782.00012,1084.14233);
                SetPlayerFacingAngle(playerid, 177.402023);
                SetCameraBehindPlayer(playerid);
                SetPlayerInterior(playerid, vehicleid);
                InteriorSwatVan[playerid] = vehicleid;
        }
        if (GetVehicleModel(vehicleid) == 574) // Tren
     	{
     	        LoadObjects(playerid);
                SetPlayerPos(playerid, 8.626970,1362.938720,-9.982130);
                SetPlayerFacingAngle(playerid, 90.00000);
                SetCameraBehindPlayer(playerid);
                SetPlayerInterior(playerid, vehicleid);
                InteriorTren[playerid] = vehicleid;
        }
        if (GetVehicleModel(vehicleid) == 519) // Shamal.
     	{
     	        LoadObjects(playerid);
                SetPlayerPos(playerid, 2.676563,33.104297,1199.593750);
                SetPlayerFacingAngle(playerid, 90.00000);
                SetCameraBehindPlayer(playerid);
                SetPlayerInterior(playerid, vehicleid);
                InteriorBeagle[playerid] = vehicleid;
                SendClientMessage(playerid, COLOR_GREY, "[Atención]:{FFFFFF} Recuerda usar [INTRO] en este mismo lugar para salir fuera. En caso de bug, usar /desbug.");
        }
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    NOPCheck(playerid);
 		if(estacionveh[GetPlayerVehicleID(playerid)] != 0){
		    new station[64], name[36];
			switch(estacionveh[GetPlayerVehicleID(playerid)]){
				case 1: format(station, sizeof(station), "http://66.197.247.117:8000/listen.pls") && format(name, sizeof(name), "ATRP FM");
				case 2: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99179772") && format(name, sizeof(name), "Jazz");
				case 3: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=86425") && format(name, sizeof(name), "Radio Paradise");
				case 4: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=372869") && format(name, sizeof(name), "Reggaeton 24 Horas");
				case 5: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=78551") && format(name, sizeof(name), "Energia FM");
				case 6: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=638308") && format(name, sizeof(name), "Tropicana");
				case 7: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=39428") && format(name, sizeof(name), "Dupstep");
				case 8: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616806") && format(name, sizeof(name), "Electronic Radio");
				case 9: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=36692") && format(name, sizeof(name), "Bachata Mix");
				case 10: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99182082") && format(name, sizeof(name), "Baladas");
				case 11: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1630446") && format(name, sizeof(name), "Dream Pop");
				case 12: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=524216") && format(name, sizeof(name), "Rock Radio");
				case 13: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1671321") && format(name, sizeof(name), "Salsa");
				case 14: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181500") && format(name, sizeof(name), "Radio Gansta");
			}
			StopAudioStreamForPlayer(playerid);
			estacionp[playerid] = PlayAudioStreamForPlayer(playerid, station, 1, 1, 1, 1, 0);
			format(string, sizeof(string), "{00C200}* Estación: {FFFFFF}%s - Puedes cambiar la emisora. {00C200}(/estacion)", name);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
		}
		SetPlayerArmedWeapon(playerid, 0);
	    fVehSpeed[playerid] = 0.0;
		new newcar = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(newcar,arr_Engine{newcar},lights,alarm,doors,bonnet,boot,objective);
		if(IsABike(newcar) && !IsARentCar(newcar))
		{
		    SetVehicleParamsEx(newcar,1,lights,alarm,doors,bonnet,boot,objective);
		}
	    if(GetCarDealershipVehicleId(newcar) != -1 && GetCarDealershipVehicleId(newcar) == GetPVarInt(playerid, "editingcdveh")) return 1;
        if(GetCarDealershipVehicleId(newcar) != -1)
        {
			format(string, sizeof(string),"¿Quieres comprar este %s?\n\nEste vehiculo tiene el precio de $%d.", GetVehicleName(newcar), CDSInfo[GetCarDealershipId(newcar)][cdVehicleCost][GetCarDealershipVehicleId(newcar)]);
		    SafeDialogEx(playerid,DIALOG_CDBUY,DIALOG_STYLE_MSGBOX,"{FFFFFF}Advertencia:",string,"Comprar","Cancelar");
		    TogglePlayerControllable(playerid, false);
		    return 1;
        }
        GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510) {
			SendClientMessageEx(playerid, COLOR_TURQUESA, "! {FFFFFF}Este vehículo tiene el motor apagado, para encender este mismo use la tecla [N] o /Motor");
		}
		if(IsARentCar(newcar))
		{
		    if(IsaRent[playerid] == 0)
		    {
				TogglePlayerControllable(playerid,0);
				SafeDialogEx(playerid, RENT_VEH, DIALOG_STYLE_MSGBOX, "\t\t{FCFF03}Rentas de vehículos. . .","{FFFFFF}Tiempo:{FCFF03} 1 Hora\n{FFFFFF}Precio: {FCFF03}$1.000", "Rentar", "Cancelar");
   				return 1;
   			}
   			else
   			{
   			    TogglePlayerControllable(playerid,1);
   			}
		}
	    if( GetPVarInt( playerid, "ToBeEjected" ) >= 1 )
    	{
	       	SetPVarInt( playerid, "ToBeEjected", 0 );
	       	RemovePlayerFromVehicle( playerid );
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid);
				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
   			}
   		}
   		gLastCar[playerid] = newcar;
	 	foreach(Player, i)
		{
      		new v = GetPlayerVehicle(i, newcar);
		    if(v != -1)
			{
				if(i == playerid)
				{
					format(string, sizeof(string),"{FFFFFF}• Usted es el dueño de este vehículo:{C993FF} %s", GetVehicleName(newcar));
					SendClientMessageEx(playerid, COLOR_BLANCO, string);
					if(PlayerVehicleInfo[i][v][pvTicket] != 0)
					{
						format(string, sizeof(string),"Informe Policial:{FFFFFF} Tienes un total de $%d en multas.", PlayerVehicleInfo[i][v][pvTicket]);
						SendClientMessageEx(playerid, 0x8D8DFFFF, string);
					}
				}
				else if(i == Info[playerid][pVehicleKeysFrom]){
					format(string, sizeof(string),"- Este %s está a nombre de %s y tu tienes las llaves.", GetVehicleName(newcar), GetPlayerNameEx(i));
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else if(PlayerVehicleInfo[i][v][pvLocked] == 1 && PlayerVehicleInfo[i][v][pvLock] == 1)
				{
				    GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				else
				{
	    			format(string, sizeof(string), "- Este %s está a nombre de %s y no tienes las llaves.", GetVehicleName(newcar), GetPlayerNameEx(i));
	      			SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				return 1;
			}
		}
		for(new f = 0; f < MAX_FAMILY; f++)
		{
		    new v = GetPlayerVehicle(f, newcar);
			v = GetGangVehicle(f, newcar);
			if(v != -1)
			{
				if(Info[playerid][pFMember] == f)
				{
					format(string, sizeof(string), "- Este %s es de la familia el cual perteneces.", GetVehicleName(newcar));
	    			SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else if(FVINFO[f][v][fvLocked] == 1 && FVINFO[f][v][fvLock] == 1)
				{
					GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				return 1;
			}
		}
	}
	if(newstate == PLAYER_STATE_SPAWNED) gPlayerSpawned[playerid] = 1;


//**************************************
	enum
	{
  CHECKPOINT_1,
	}

    new newcar2 = GetPlayerVehicleID(playerid);
    if(newcar2 >= koscar[0] && newcar2 <= koscar[10])
		{
			if (recojercesped[playerid] == 1)
		 	{
    	        Kosonrob[playerid] = 1;
				pKosonrob[playerid] = CHECKPOINT_1;
				SetPlayerRaceCheckpoint(playerid,2,2046.7584,-1241.9952,22.9092,2040.4469,-1214.4858,22.6067,5.0);
			}
			if(recojercesped[playerid] == 0)
			{
				SendClientMessage(playerid,COLOR_ROJO,"!{FFFFFF} Primero debes unirte al trabajo para trabajar.");
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("AntiRemovePlayerFromVehicle" , 2800, false, "i", playerid);
			}
		}
 return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}
	switch(Seatbelt[playerid])
	{
	    case 1:
	    {
			new string[128];
	        if(IsABike(vehicleid))
			{
				format(string, sizeof(string), "* %s pone las manos en su casco, y se lo quita.", GetPlayerNameEx(playerid));
			}
			else
			{
				format(string, sizeof(string), "* %s tome el cinturón de seguridad y se lo retira así baja del vehículo.", GetPlayerNameEx(playerid));
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  			Seatbelt[playerid] = 0;
	    }
	}
	return 1;
}

function SetPlayerWeapons(playerid){
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(Info[playerid][pWeapons][s] > 0)
		{
			GivePlayerValidWeapon(playerid, Info[playerid][pWeapons][s]);
		}
	}
	return 1;
}

function SetPlayerWeaponsEx(playerid){
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(Info[playerid][pWeapons][s] > 0)
		{
			GivePlayerValidWeapon(playerid, Info[playerid][pWeapons][s]);
		}
	}
	SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "LastWeapon"));
}

stock GetPlayerFactionInfo(targetid, rank[64], division[64], employer[64])
{
	switch (Info[targetid][pMember])
	{
	    case 1:
		{
            employer = "LAPD";
			switch(Info[targetid][pRank])
			{
			    case 1: rank = "Agente en Prácticas";
			    case 2: rank = "Cadete";
			    case 3: rank = "Oficial I";
			    case 4: rank = "Oficial II";
			    case 5: rank = "Oficial III";
			    case 6: rank = "Oficial III+1";
			    case 7: rank = "Oficial Mayor";
			    case 8: rank = "Detective I";
			    case 9: rank = "Detective II";
			    case 10: rank = "Sargento I";
			    case 11: rank = "Detective III";
			    case 12: rank = "Sargento II";
			    case 13: rank = "Teniente I";
			    case 14: rank = "Teniente II";
			    case 15: rank = "Capitán I";
			    case 16: rank = "Capitán II";
			    case 17: rank = "Capitán III";
			    case 18: rank = "Comandante";
			    case 19: rank = "Subjefe de Policía I";
			    case 20: rank = "Subjefe de Policía II";
			    case 21: rank = "Jefe de Policía";
			    default: rank = "[Error]";
			}
			switch(Info[targetid][pDivision])
			{
			    case 1: division = "Sin asignación";
			    case 2: division = "División Servicios de Emergencia (DSE)";
			    case 3: division = "División de Robos y Homicidios (RHD)";
			    case 4: division = "División Delitos Mayores (DDM)";
			    case 5: division = "Robo Sección Especial (RSS)";
			    case 6: division = "Investigación Escena del Crimen (CSI)";
			    case 7: division = "Sección de Investigaciones Especiales (SIS)";
			    case 8: division = "Unidad Gang y Narcóticos (NGU)";
			    case 9: division = "Ciencias Forenses (FSD)";
			    case 10: division = "División de Respuesta en tiempo real y análisis crítico (RACR)";
			    case 11: division = "Pelotón A";
			    case 12: division = "Pelotón B";
			    case 13: division = "Pelotón C";
			    case 14: division = "Pelotón D";
			    case 15: division = "Pelotón E";
			    case 16: division = "Pelotón G";
			    case 17: division = "Pelotón K-9";
			    case 18: division = "Pelotón M";
			    case 19: division = "Sección Especial de Asalto (SAS)";
			    case 20: division = "Air Support Division (ASD)";
			    case 21: division = "Of. Operaciones Especiales";
			    default: division = "Sin asignación";
			}
		}
		case 2:
		{
            employer = "AININT";
			switch(Info[targetid][pRank])
			{
			    case 1: rank = "Agente";
			    case 2: rank = "Agente Especializado";
			    case 3: rank = "Agente Táctico";
			    case 4: rank = "Espía";
			    case 5: rank = "Sub-Director";
			    case 6: rank = "Director";
			    default: rank = "Agente";
			}
			switch(Info[targetid][pDivision])
			{
			    case 1: division = "FBI";
			    case 2: division = "CIA";
			    case 3: division = "DEA";
			    case 4: division = "BOPE";
			    case 5: division = "Aduanas";
			    case 6: division = "Interpol";
			    default: division = "FBI";
			}
		}
  		case 3:
		{
            employer = "United States Marine Corps";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "PVT";
					case 2: rank = "PFC";
					case 3: rank = "LCpl";
					case 4: rank = "Cpl";
					case 5: rank = "Sgt";
					case 6: rank = "SSgt";
					case 7: rank = "GySgt";
					case 8: rank = "MSgt";
					case 9: rank = "1st Sgt";
					case 10: rank = "MGySgt";
					case 11: rank = "SgtMaj";
					case 12: rank = "SMMC";
					case 13: rank = "WO";
					case 14: rank = "CWO2";
					case 15: rank = "CWO3";
					case 16: rank = "CWO4";
					case 17: rank = "CWO5";
					case 18: rank = "2ndLt";
					case 19: rank = "1stLt";
					case 20: rank = "Capt";
					case 21: rank = "Maj";
					case 22: rank = "LtCol";
					case 23: rank = "Col";
					case 24: rank = "BGen";
					case 25: rank = "MajGen";
					case 26: rank = "LtGen";
					case 27: rank = "General";
					default: rank = "PVT";
			}
			switch(Info[targetid][pDivision])
			{
				case 2: division = "SOCOM";
				case 3: division = "AFSOC";
				case 4: division = "ARSOC";
				case 5: division = "NAVSOC";
				case 6: division = "USAF";
				case 7: division = "USN";
				case 8: division = "AMEDD/AMS";
			    case 1: division = "";
			}
		}
  		case 4:
		{
            employer = "LAMD";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Enfermero Auxiliar";
				case 2: rank = "Enfermero";
				case 3: rank = "Médico Interno";
				case 4: rank = "Residente R1";
				case 5: rank = "Residente R2";
				case 6: rank = "Residente R3";
				case 7: rank = "Residente R4";
				case 8: rank = "Jefe de Residentes";
				case 9: rank = "Médico Titular";
				case 10: rank = "Cirujano Titular";
				case 11: rank = "Especialista";
				case 12: rank = "Cirujano Especialista";
				case 13: rank = "Jefe de Departamento";
				case 14: rank = "Jefe de Cirugía";
				case 15: rank = "Adjunto";
				case 16: rank = "Director";
				default: rank = "Enfermero Auxiliar";
			}
		}
		case 5:
		{
	        employer = "FOX";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Becario";
				case 2: rank = "Redactor";
				case 3: rank = "Periodista";
				case 4: rank = "Enviado Especial";
				case 5: rank = "Presentador";
				case 6: rank = "Director de FOX";
				default: rank = "Becario";
			}
			division = "Ninguna";
		}
  		case 6:
		{
            employer = "Mecánicos LS";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Ayudante";
				case 2: rank = "Trucker";
				case 3: rank = "Mecánico";
				case 4: rank = "Ingeniero";
				case 5: rank = "Supervisor";
				case 6: rank = "Director";
				default: rank = "Ayudante";
			}
			division = "Ninguna";
		}
  		case 7:
		{
	        employer = "Gobierno";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Staff";
				case 2: rank = "Secretario";
				case 3: rank = "Alcalde de LS";
				case 4: rank = "Ministro de";
				case 5: rank = "Vicegobernador";
				case 6: rank = "Gobernador";
				default: rank = "Staff";
			}
			switch(Info[targetid][pDivision])
			{
			    case 2: division = "Chofer";
			    case 3: division = "UG";
			    case 4: division = "Defensa";
			    case 5: division = "Justicia";
			    case 6: division = "Economía";
			    default: division = "Ninguna";
			}
			division = "Ninguna";
		}
		case 8:
		{
		    employer = "Agencia Hitman";
		    switch(Info[targetid][pRank])
		    {
    			case 1: rank = "Novato";
				case 2: rank = "Asesino";
				case 3: rank = "Sicario";
				case 4: rank = "Agente Especial";
				case 5: rank = "Vice Director";
				case 6: rank = "Director";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
		case 9:
		{
		    employer = "Sistema Judicial";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Abogado";
				case 2: rank = "Secretario";
				case 3: rank = "Fiscal";
				case 4: rank = "Juez";
				case 5: rank = "Asociado";
				case 6: rank = "Director General";
				default: rank = "Abogado";
			}
			division = "Ninguna";
		}
		case 10:
		{
			employer = "Cedar Block Piru";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
        case 11:
		{
			employer = "Boulevard Mafia Crips";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
        case 12:
		{
			employer = "N/S Broadway XIV";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
		case 13:
		{
		    employer = "Varrio Longos 13";
		    switch(Info[targetid][pRank])
		    {
		        case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
        case 14:
		{
			employer = "Mafia Rusa";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
		case 15:
		{
			employer = "La Cosa Nostra";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Principiante";
				case 2: rank = "Escolta";
				case 3: rank = "Terrorista";
				case 4: rank = "Asesino";
				case 5: rank = "Mano Derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}

		case 16:
		{
		    employer = "Yakuza";
		    switch(Info[targetid][pRank])
		    {
    			case 1: rank = "Kyodai";
				case 2: rank = "Wakashu";
				case 3: rank = "Senpai Kohai";
				case 4: rank = "Saiko Komon";
				case 5: rank = "Sumiyoshi";
				case 6: rank = "Oyabun";
				default: rank = "Kyodai";
			}
			division = "Ninguna";
		}
		case 17:
		{
            employer = "CIA";
			switch(Info[targetid][pRank])
			{
			    case 1: rank = "Agente";
			    case 2: rank = "Agente Secreto";
			    case 3: rank = "Espia";
			    case 4: rank = "Detective";
			    case 5: rank = "Sub Director";
			    case 6: rank = "Director";
			    default: rank = "Agente";
   			}
		}
        case 18:
		{
            employer = "Santana";
			switch(Info[targetid][pRank])
			{
                case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Hombre De Honor";
				case 4: rank = "Hombre de Confianza";
				case 5: rank = "Mano Derecha";
				case 6: rank = "Don";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
		case 19:
		{
	        employer = "ISIS";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Principiante";
				case 2: rank = "Buscador";
				case 3: rank = "Terrorista";
				case 4: rank = "Piloto";
				case 5: rank = "Soldado";
				case 6: rank = "General";
				default: rank = "NOVATO";
			}
			division = "Ninguna";
		}
        case 20:
		{
            employer = "Bomberos";
			switch(Info[targetid][pRank])
			{
                case 1: rank = "Practicante";
				case 2: rank = "Ayudante";
				case 3: rank = "Rescatista";
				case 4: rank = "Supervisor";
				case 5: rank = "Bombero";
				case 6: rank = "Director";
				default: rank = "Practicante";
			}
			division = "Ninguna";
		}
			  case 21:
			{
		    employer = "Motoqueros";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Prinicipiante";
				case 2: rank = "Motoquero";
				case 3: rank = "Motoquero Fierrero";
				case 4: rank = "Motoquero Veterano";
				case 5: rank = "Motoquero RightHand";
				case 6: rank = "Motor Head";
				default: rank = "Prinicipiante";
			}
			division = "Ninguna";
		}

	    default: { employer = "Ninguna"; division = "Ninguna"; rank = "N/A"; }
	}
	return 1;
}


ShowStats(playerid,targetid){
    if(IsPlayerConnected(targetid)){
	    ClearChatbox(playerid);
		new fMatriz[340], age = Info[targetid][pAge], level = Info[targetid][pLevel], atext[20], cash =  GetPlayerCash(targetid), account = Info[targetid][pAccount],pnumber[20];
		switch(Info[targetid][pSex]){
			case 1: atext = "Hombre";
			case 2: atext = "Mujer";
		}
		switch(Info[targetid][pPnumber]){
			case 0: pnumber = "Ninguno";
			default: format(pnumber, sizeof(pnumber), "%d", Info[targetid][pPnumber]);
		}
		format(fMatriz,sizeof(fMatriz),"!  {FFFFFF}Cuenta: %s",GetPlayerNameEx(targetid));
		SendClientMessageEx(playerid, COLOR_AT, fMatriz);
		SendClientMessageEx(playerid, COLOR_BLANCO, "");
		format(fMatriz,sizeof(fMatriz),"•  (Edad: %d) - (Nivel: %d) - (Sexo: %s) - (Dinero: %d$) - (Banco: %d$) - (Telefono: %s)",age,level,atext,cash,account,pnumber);
		SendClientMessageEx(playerid, COLOR_BLANCO, fMatriz);

		new nxtlevel = Info[targetid][pLevel]+1;
		new tokens = Info[targetid][pPaintTokens],exp = Info[targetid][pExp],expamount = nxtlevel*explevel,facfam[20], employer[64],division[64], rank[64], rango = Info[targetid][pRank];
		facfam = "Facción";
		if(Info[targetid][pFMember] < 255){
		    facfam = "Familia"; division = "Ninguna";
			format(employer, sizeof(employer), "%s", fINFO[Info[targetid][pFMember]][FamilyName]);
			switch(Info[targetid][pRank]){
				case 1: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank1]);
			}
		}
		else GetPlayerFactionInfo(targetid, rank, division, employer);
        format(fMatriz,sizeof(fMatriz),"•  (Fichas %d) - (Prox Nivel %d/%d) - (%s: %s) - (Rango %s (%d)) - (División %s)",tokens,exp,expamount,facfam,employer,rank,rango,division);
        SendClientMessageEx(playerid, -1, fMatriz);

		new jtext[21], jtext2[21];
		switch(Info[targetid][pJob]){
			case 0: jtext = "Ninguno";
			case 1: jtext = "Bartender";
            case 2: jtext = "Vendedor de Móviles";
            case 3: jtext = "Chofer de Autobuses";
            case 4: jtext = "Pizzero";
            case 5: jtext = "Camionero";
            case 6: jtext = "Repartidor";
            case 7: jtext = "Fabricante de Armas";
            case 8: jtext = "Taxista";
            case 9: jtext = "Granjero";
            case 10: jtext = "Traficante de Drogas";
            case 11: jtext = "Vendedor de Chalecos";
            case 12: jtext = "Artesano";
            case 13: jtext = "Jardinero";
            case 14: jtext = "Heladero";
		}
		switch(Info[targetid][pJob2]){
			case 0: jtext2 = "Ninguno";
			case 1: jtext2 = "Bartender";
            case 2: jtext2 = "Vendedor de Móviles";
            case 3: jtext2 = "Chofer de Autobuses";
            case 4: jtext2 = "Pizzero";
            case 5: jtext2 = "Camionero";
            case 6: jtext2 = "Repartidor";
            case 7: jtext2 = "Fabricante de Armas";
            case 8: jtext2 = "Taxista";
            case 9: jtext2 = "Granjero";
            case 10: jtext2 = "Traficante de Drogas";
            case 11: jtext2 = "Vendedor de Chalecos";
            case 12: jtext2 = "Artesano";
            case 13: jtext2 = "Jardinero";
            case 14: jtext2 = "Heladero";
		}
		new Float:health, Float:armor,fvip = Info[targetid][pVTokens];
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armor);
        format(fMatriz,sizeof(fMatriz),"•  (Trabajo 1: %s) - (Trabajo 2: %s) - (Vida %.1f) - (Chaleco %.1f) - (Fichas VIP: %d)",jtext,jtext2,health, armor, fvip);
        SendClientMessageEx(playerid, COLOR_BLANCO, fMatriz);
  		new dotext[16];
		switch(Info[targetid][pVIP]){
			case 1: dotext = "Bronce";
			case 2: dotext = "Plata";
			case 3: dotext = "Oro";
			case 4: dotext = "Platino";
			case 5: dotext = "Moderador";
			default: dotext = "No";
		}
		new sprunk = Info[targetid][pSprunk],
			arrest = Info[targetid][pArrested],
			housekey = Info[targetid][pPhousekey],
			housekey2 = Info[targetid][pPhousekey2],
			hirekey	= HireKey[targetid],
			adic=Info[targetid][pAdiccion],
			rentc = Info[targetid][pRenting];

		format(fMatriz,sizeof(fMatriz),"•  (Sprunk: %d) - (Arrestos: %d) - (VIP: %s) - (Casas: %d | %d) - (Veh. Renta: %d) - (Casa Renta: %d) - (Adicción: %d)",sprunk, arrest, dotext,housekey,housekey2, hirekey, rentc,adic);
        SendClientMessageEx(playerid, -1, fMatriz);

        new pot = Info[targetid][pPot],
			crack = Info[targetid][pCrack],
			crates = Info[targetid][pCrates],
			mats = Info[targetid][pMats],
			cso = Info[targetid][pCosecha],
			pto = Info[targetid][pPbizzkey],
			married[20];
		strmid(married, Info[targetid][pMarriedTo], 0, strlen(Info[targetid][pMarriedTo]), 255);
		format(fMatriz,sizeof(fMatriz),"•  (Cocaína: %d) - (Marihuana: %d) - (Paquetes: %d) - (Materiales: %d) - (Cosecha: %dKg) - (Negocio: %d) - (Casado(a) con: %s)", crack,pot,crates, mats, cso, pto, married);
        SendClientMessageEx(playerid, COLOR_BLANCO, fMatriz);

        new ctime = Info[targetid][pConnectTime],
            rmt = Info[targetid][pRMutedTotal],
			jaadm = Info[targetid][pJailAdmin],
		    tjail = Info[targetid][pJailTime],
			admutes = Info[targetid][pADMuteTotal],
			warn = Info[targetid][pWarn],
			xH = Info[targetid][pDobleExp];
		format(fMatriz,sizeof(fMatriz),"•  (Horas IG: %d) - (Report Bloq: %d) - (Sanciones: %d | Tiempo: %d) - (Warns: %d) - (AD Mutes: %d) - (Horas: 2x %d)", ctime, rmt, jaadm,tjail, warn,admutes, xH);
        SendClientMessageEx(playerid, -1, fMatriz);

		new totalwealth,
			wr = Info[targetid][pWRestricted],
 			name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		if(Info[targetid][pPhousekey] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[Info[targetid][pPhousekey]][hOwner], true) == 0) totalwealth += HouseInfo[Info[targetid][pPhousekey]][hSafeMoney];
		if(Info[targetid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[Info[targetid][pPhousekey2]][hOwner], true) == 0) totalwealth += HouseInfo[Info[targetid][pPhousekey2]][hSafeMoney];
        totalwealth = account + cash;
		format(fMatriz,sizeof(fMatriz),"•  (Dinero Total %d$)", totalwealth,wr);
        SendClientMessageEx(playerid, COLOR_BLANCO, fMatriz);

		if (Info[targetid][pVIP] > 0 && Info[targetid][pBuddyInvited] == 0){
			format(fMatriz, sizeof(fMatriz), "•  Información de miembrecía VIP: Nivel %d - Vence en %d Día(s) / %d Mes(es)",Info[playerid][pVIP], Info[targetid][pVIPDateD], Info[targetid][pVIPDateM]);
			SendClientMessageEx(playerid, COLOR_AMARILLO,fMatriz);
		}
	}
}

function SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPVarInt(playerid, "ArenaMode") == 2)
	    {
			switch(Info[playerid][pPaintTeam])
			{
			    case 1:
			    {
			        SetPlayerColor(playerid, PAINTBALL_TEAM_RED);
			    }
			    case 2:
			    {
			        SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);
			    }
	        }
	        return 1;
	    }
	    if(Info[playerid][pJailed] == 1 || Info[playerid][pJailed] == 4)
	    {
			return 1;
		}
		else if(Info[playerid][pJailed] == 2 || Info[playerid][pJailed] == 5 || Info[playerid][pJailed] == 6) // Arrestado desde LAPD
		{
			return 1;
		}
		else
		{
            SetPlayerColor(playerid,TEAM_HIT_COLOR);
		}
	    if(OrgGob(playerid))
	    {
			if(OnDuty[playerid] == 1)
			{
	    		if(Team_LAPD(playerid))
	        	{
	        		SetPlayerColor(playerid,TEAM_BLUE_COLOR);
				}
				else if(Team_AININT(playerid))
	        	{
	        		SetPlayerColor(playerid,TEAM_AININT_COLOR);
				}
				else if(Team_USMC(playerid))
				{
			    	SetPlayerColor(playerid, COLOR_NG);
				}
				else if(Team_LAMD(playerid))
				{
			    	SetPlayerColor(playerid, TEAM_MED_COLOR);
				}
				else
				{
				    SetPlayerColor(playerid,TEAM_HIT_COLOR);
				}
			}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
		}
		else
		{
		    if((Team_LSTV(playerid)) && OnDuty[playerid] == 1)
	    	{
	    		SetPlayerColor(playerid,TEAM_NEWS_COLOR);
			}
			else if((Team_LAMD(playerid)) && OnDuty[playerid] == 1)
			{
			   	SetPlayerColor(playerid, TEAM_MED_COLOR);
			}
			else if((Info[playerid][pJob] == 8 || Info[playerid][pJob2] == 8 || Info[playerid][pTaxiLicense] == 1) && TransportDuty[playerid] != 0)
			{
  				SetPlayerColor(playerid,TEAM_TAXI_COLOR);
	 		}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR);
   			}
		}
	}
	return 1;
}

public OnGameModeExit()
{
    djson_GameModeExit();
    //saveAccounts();
    //***SISTEMA AFK***
    for(new i = 0; i < MAX_PLAYERS; i++)
   	{
  	 KillTimer(Timer[i]);
  	 TextDrawHideForAll(Text:Messageafk);
  	 TextDrawDestroy(Text:Messageafk);
   	}
   	//***velocimetro***
   	for(new i = 0; i<MAX_PLAYERS; i++)
        {
                TextDrawHideForAll(Tacho_Box0);
                TextDrawDestroy(Tacho_Box0);
                TextDrawHideForAll(Tacho_Box1);
                TextDrawDestroy(Tacho_Box1);
                TextDrawHideForAll(Tacho_KMH[i]);
                TextDrawDestroy(Tacho_KMH[i]);
                TextDrawHideForAll(Tacho_Box2);
                TextDrawDestroy(Tacho_Box2);
                TextDrawHideForAll(Tacho_Zustand[i]);
                TextDrawDestroy(Tacho_Zustand[i]);
                TextDrawHideForAll(Tacho_Tank[i]);
                TextDrawDestroy(Tacho_Tank[i]);
                TextDrawHideForAll(Tacho_Car[i]);
                TextDrawDestroy(Tacho_Car[i]);
        }
   	//*****************
    return 1;
}
function AddWarrant(playerid,judgeid,crime[])
{
    new string[128];
    new month,day,year;
	getdate(year,month,day);
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    format(string,sizeof(string),"OrdenesJ/%s.ini",playername);
    new File: file = fopen(string, io_write);
	if(file)
	{
	    format(string,sizeof(string),"%s - %s (%d/%d/%d)",crime,GetPlayerNameEx(judgeid),month,day,year);
	    fwrite(file, string);
	    fclose(file);
	}
	return 1;
}

function RemoveWarrant(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	format(string,sizeof(string),"OrdenesJ/%s.ini",playername);
	if(fexist(string))
	{
		fremove(string);
		return 1;
	}
	else
	{
	    return 0;
	}
}

function OAddWarrant(name[],judgeid,crime[])
{
	new string[128];
	new month,day,year;
	getdate(year,month,day);
	format(string,sizeof(string),"OrdenesJ/%s.ini",name);
	new File: file = fopen(string, io_write);
	if(file)
	{
	    format(string,sizeof(string),"%s - %s (%d/%d/%d)",crime,GetPlayerNameEx(judgeid),month,day,year);
	    fwrite(file, string);
	    fclose(file);
	}
}

function ORemoveWarrant(name[])
{
	new string[128];
	format(string,sizeof(string),"OrdenesJ/%s.ini",name);
	if(fexist(string))
	{
	    fremove(string);
	    return 1;
	}
	else
	{
	    return 0;
	}
}

//****************************************************************************
LoadStuff()
{
	new arrCoords[6][64];
	new strFromFile2[128];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		if(Tax < 0) Tax = 0;
		if(TaxValue < 0) TaxValue = 0;
		TaxValue = strval(arrCoords[2]);
		Blood = strval(arrCoords[3]);
		Fuel = strval(arrCoords[4]);
		txtcost = strval(arrCoords[5]);
		fclose(file);
		print("\t- Objetos cargados correctamentes sin errores.");
	}
	else
	{
	    GameModeExit();
	}
	return 1;
}

SaveStuff()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d", Jackpot,Tax,TaxValue,Blood,Fuel,txtcost);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

//****************************************************************************

SaveDynamicDoors()
{

	new
		szFileStr[512],
		File: fHandle = fopen("dynamicdoors.cfg", io_write);

	for(new iIndex; iIndex < MAX_DDOORS; iIndex++)
	{
		format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%s|%d|%d\r\n",
			DDoorsInfo[iIndex][ddDescription],
			DDoorsInfo[iIndex][ddInteriorLoad],
			DDoorsInfo[iIndex][ddExteriorVW],
			DDoorsInfo[iIndex][ddExteriorInt],
			DDoorsInfo[iIndex][ddInteriorVW],
			DDoorsInfo[iIndex][ddInteriorInt],
			DDoorsInfo[iIndex][ddExteriorX],
			DDoorsInfo[iIndex][ddExteriorY],
			DDoorsInfo[iIndex][ddExteriorZ],
			DDoorsInfo[iIndex][ddExteriorA],
			DDoorsInfo[iIndex][ddInteriorX],
			DDoorsInfo[iIndex][ddInteriorY],
			DDoorsInfo[iIndex][ddInteriorZ],
			DDoorsInfo[iIndex][ddInteriorA],
			DDoorsInfo[iIndex][ddExteriorLoad],
			DDoorsInfo[iIndex][ddVIP],
	  		DDoorsInfo[iIndex][ddFamily],
	  		DDoorsInfo[iIndex][ddFaction],
	  		DDoorsInfo[iIndex][ddAdmin],
	  		DDoorsInfo[iIndex][ddWanted],
	  		DDoorsInfo[iIndex][ddVehicleAble],
	  		DDoorsInfo[iIndex][ddColor],
	  		DDoorsInfo[iIndex][ddPickupModel],
	  		DDoorsInfo[iIndex][dPass],
	  		DDoorsInfo[iIndex][dLocked],
			DDoorsInfo[iIndex][dMusic]);
			fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

LoadDynamicDoors()
{
	new arrCoords[26][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicdoors.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(DDoorsInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			strmid(DDoorsInfo[idx][ddDescription], arrCoords[0], 0, strlen(arrCoords[0]), 128);
	  		DDoorsInfo[idx][ddInteriorLoad] = strval(arrCoords[1]);
	  		DDoorsInfo[idx][ddExteriorVW] = strval(arrCoords[2]);
	  		DDoorsInfo[idx][ddExteriorInt] = strval(arrCoords[3]);
	  		DDoorsInfo[idx][ddInteriorVW] = strval(arrCoords[4]);
	  		DDoorsInfo[idx][ddInteriorInt] = strval(arrCoords[5]);
	  		DDoorsInfo[idx][ddExteriorX] = floatstr(arrCoords[6]);
	  		DDoorsInfo[idx][ddExteriorY] = floatstr(arrCoords[7]);
	  		DDoorsInfo[idx][ddExteriorZ] = floatstr(arrCoords[8]);
	  		DDoorsInfo[idx][ddExteriorA] = floatstr(arrCoords[9]);
	  		DDoorsInfo[idx][ddInteriorX] = floatstr(arrCoords[10]);
	  		DDoorsInfo[idx][ddInteriorY] = floatstr(arrCoords[11]);
	  		DDoorsInfo[idx][ddInteriorZ] = floatstr(arrCoords[12]);
	  		DDoorsInfo[idx][ddInteriorA] = floatstr(arrCoords[13]);
	  		DDoorsInfo[idx][ddExteriorLoad] = strval(arrCoords[14]);
	  		DDoorsInfo[idx][ddVIP] = strval(arrCoords[15]);
	  		DDoorsInfo[idx][ddFamily] = strval(arrCoords[16]);
	  		DDoorsInfo[idx][ddFaction] = strval(arrCoords[17]);
	  		DDoorsInfo[idx][ddAdmin] = strval(arrCoords[18]);
	  		DDoorsInfo[idx][ddWanted] = strval(arrCoords[19]);
	  		DDoorsInfo[idx][ddVehicleAble] = strval(arrCoords[20]);
	  		DDoorsInfo[idx][ddColor] = strval(arrCoords[21]);
	  		DDoorsInfo[idx][ddPickupModel] = strval(arrCoords[22]);
	  		strmid(DDoorsInfo[idx][dPass], arrCoords[23], 0, strlen(arrCoords[23]), 24);
	  		DDoorsInfo[idx][dLocked] = strval(arrCoords[24]);
	  		DDoorsInfo[idx][dMusic] = strval(arrCoords[25]);
	  		if(!isnull(DDoorsInfo[idx][ddDescription]))
	  		{
	  		    CreateDynamicDoor(idx);
			}
			idx++;
		}
		print("\t- Puertas dinámicas cargadas correctamente sin errores.");
		fclose(file);
	}
	return 1;
}

LoadcDealerships()
{
	new idx, idx2;
	new string[128];
	new owner[MAX_PLAYER_NAME];
	new message[128];
	djAutocommit(false);
	while (idx < sizeof(CDSInfo))
	{
        format(string, sizeof(string), "%d/owned", idx);
		CDSInfo[idx][cdOwned] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/owner", idx);
		format(owner, sizeof(owner), "%s", dj("cardealerships.json", string));
		strmid(CDSInfo[idx][cdOwner], owner, 0, strlen(owner), 255);
		format(string, sizeof(string), "%d/entrance/x", idx);
		CDSInfo[idx][cdEntranceX] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/entrance/y", idx);
		CDSInfo[idx][cdEntranceY] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/entrance/z", idx);
		CDSInfo[idx][cdEntranceZ] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/x", idx);
		CDSInfo[idx][cdExitX] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/y", idx);
		CDSInfo[idx][cdExitY] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/z", idx);
	    CDSInfo[idx][cdExitZ] = djFloat("cardealerships.json", string);
	    format(string, sizeof(string), "%d/message", idx);
		format(message, sizeof(message), "%s", dj("cardealerships.json", string));
		strmid(CDSInfo[idx][cdMessage], message, 0, strlen(message), 255);
		format(string, sizeof(string), "%d/till", idx);
		CDSInfo[idx][cdTill] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/interior", idx);
		CDSInfo[idx][cdInterior] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/x", idx);
		CDSInfo[idx][cdVehicleSpawn][0] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/y", idx);
		CDSInfo[idx][cdVehicleSpawn][1] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/z", idx);
		CDSInfo[idx][cdVehicleSpawn][2] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/a", idx);
		CDSInfo[idx][cdVehicleSpawn][3] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/radius", idx);
		CDSInfo[idx][cdRadius] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/price", idx);
		CDSInfo[idx][cdPrice] = djInt("cardealerships.json", string);
		while (idx2 < MAX_DEALERSHIPVEHICLES)
		{
            format(string, sizeof(string), "%d/vehicleangle/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleSpawnAngle][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawnx/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleSpawnX][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawny/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleSpawnY][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawnz/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleSpawnZ][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclecost/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleCost][idx2] = djInt("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehicletypes/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleModel][idx2] = djInt("cardealerships.json", string);
		    idx2++;
		}
		idx2 = 0;
		idx++;
	}
	djAutocommit(true);
	return 1;
}

SavecDealership(id)
{
	new idx2;
	new string[128];
    format(string, sizeof(string), "%d/owned", id);
	djSetInt("cardealerships.json", string, CDSInfo[id][cdOwned]);
	format(string, sizeof(string), "%d/owner", id);
	djSet("cardealerships.json", string, CDSInfo[id][cdOwner]);
	format(string, sizeof(string), "%d/entrance/x", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdEntranceX]);
	format(string, sizeof(string), "%d/entrance/y", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdEntranceY]);
	format(string, sizeof(string), "%d/entrance/z", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdEntranceZ]);
	format(string, sizeof(string), "%d/exit/x", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdExitX]);
	format(string, sizeof(string), "%d/exit/y", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdExitY]);
	format(string, sizeof(string), "%d/exit/z", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdExitZ]);
	format(string, sizeof(string), "%d/message", id);
	djSet("cardealerships.json", string, CDSInfo[id][cdMessage]);
	format(string, sizeof(string), "%d/till", id);
	djSetInt("cardealerships.json", string, CDSInfo[id][cdTill]);
	format(string, sizeof(string), "%d/interior", id);
	djSetInt("cardealerships.json", string, CDSInfo[id][cdInterior]);
	format(string, sizeof(string), "%d/vehiclespawn/x", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawn][0]);
	format(string, sizeof(string), "%d/vehiclespawn/y", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawn][1]);
	format(string, sizeof(string), "%d/vehiclespawn/z", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawn][2]);
	format(string, sizeof(string), "%d/vehiclespawn/a", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawn][3]);
	format(string, sizeof(string), "%d/radius", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdRadius]);
	format(string, sizeof(string), "%d/price", id);
	djSetInt("cardealerships.json", string, CDSInfo[id][cdPrice]);
	while (idx2 < MAX_DEALERSHIPVEHICLES)
	{
        format(string, sizeof(string), "%d/vehicleangle/%d", id, idx2);
        djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawnAngle][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawnx/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawnX][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawny/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawnY][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawnz/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawnZ][idx2]);
	    format(string, sizeof(string), "%d/vehiclecost/%d", id, idx2);
	    djSetInt("cardealerships.json", string, CDSInfo[id][cdVehicleCost][idx2]);
	    format(string, sizeof(string), "%d/vehicletypes/%d", id, idx2);
	    djSetInt("cardealerships.json", string, CDSInfo[id][cdVehicleModel][idx2]);
	    idx2++;
	}
	return 1;
}

LoadServerStats()
{
	#define SERVER_STATS "serverstat.ini"

	if(!fexist(SERVER_STATS)) return 1;

	new	File: i_FileHandle = fopen("serverstat.ini", io_read), sz_FileStr[256];
    print("\t- Stats cargados correctamente sin errores.");
	fread(i_FileHandle, sz_FileStr);
	sscanf(sz_FileStr, "p<,>iiiiiiiiiii", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister, MaxPlayersConnected, MPDay, MPMonth, MPYear, MPHour, MPMinute, TotalUptime);
	return fclose(i_FileHandle);
}

SaveServerStats()
{
	new sz_FileStr[256], File: i_FileHandle = fopen(SERVER_STATS, io_write);
	format(sz_FileStr, sizeof(sz_FileStr), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,TotalUptime);
	fwrite(i_FileHandle, sz_FileStr);
	#undef SERVER_STATS
	return fclose(i_FileHandle);
}


LoadMOTDs()
{
	new arrCoords[6][128];
	new strFromFile2[512];
	new File: file = fopen("motd.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, '|');
		strmid(GlobalMOTD, arrCoords[0], 0, strlen(arrCoords[0]), 255);
		strmid(AdminMOTD, arrCoords[1], 0, strlen(arrCoords[1]), 255);
		strmid(CAMOTD, arrCoords[2], 0, strlen(arrCoords[2]), 255);
		strmid(FACMOTD, arrCoords[3], 0, strlen(arrCoords[3]), 255);
		strmid(FAMMOTD, arrCoords[4], 0, strlen(arrCoords[4]), 255);
		strmid(VIPMOTD, arrCoords[5], 0, strlen(arrCoords[5]), 255);
		fclose(file);
		print("\t- Mensajes de inicio cargados correctamente sin errores.");
	}
	else
	{
		fcreate("motd.ini");
		format(GlobalMOTD, sizeof(GlobalMOTD), "Global MOTD: No hay ningún mensaje.");
		format(AdminMOTD, sizeof(AdminMOTD), "Administración MOTD: No hay ningún mensaje.");
		format(CAMOTD, sizeof(CAMOTD), "Ayudantes MOTD: No hay ningún mensaje.");
		format(FACMOTD, sizeof(FACMOTD), "Facción MOTD: No hay ningún mensaje.");
		format(FAMMOTD, sizeof(FAMMOTD), "Familia MOTD: No hay ningún mensaje.");
		format(VIPMOTD, sizeof(VIPMOTD), "VIP MOTD: No hay ningún mensaje.");
  		SaveMOTDs();
	}
	return 1;
}

SaveMOTDs()
{
	new coordsstring[512];
	format(coordsstring, sizeof(coordsstring), "%s|%s|%s|%s|%s|%s", GlobalMOTD,AdminMOTD,CAMOTD,FACMOTD,FAMMOTD,VIPMOTD);
	new File: file2 = fopen("motd.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

LoadFamilies() {

	if(!fexist("families.cfg")) return 1;

	new
		szFileStr[512],
		iIndex,
		File: iFileHandle = fopen("families.cfg", io_read);

	while (iIndex < sizeof(fINFO) && fread(iFileHandle, szFileStr)) {

		sscanf(szFileStr, "p<|>is[42]s[65]s[24]iiifffiiis[20]s[20]s[20]s[20]s[20]s[20]iiiiiiiiiiiiiiiiiiiiii",
			fINFO[iIndex][FamilyTaken],
			fINFO[iIndex][FamilyName],
			fINFO[iIndex][FamilyMOTD],
			fINFO[iIndex][FamilyLeader],
			fINFO[iIndex][FamilyBank],
			fINFO[iIndex][FamilyCash],
			fINFO[iIndex][FamilyUSafe],
			fINFO[iIndex][FamilySafe][0],
			fINFO[iIndex][FamilySafe][1],
			fINFO[iIndex][FamilySafe][2],
			fINFO[iIndex][FamilyPot],
			fINFO[iIndex][FamilyCrack],
			fINFO[iIndex][FamilyMats],
			fINFO[iIndex][FamilyRank1],
			fINFO[iIndex][FamilyRank2],
			fINFO[iIndex][FamilyRank3],
			fINFO[iIndex][FamilyRank4],
			fINFO[iIndex][FamilyRank5],
			fINFO[iIndex][FamilyRank6],
			fINFO[iIndex][FamilyMembers],
			fINFO[iIndex][FamilyMaxSkins],
			fINFO[iIndex][FamilySkins][0],
			fINFO[iIndex][FamilySkins][1],
			fINFO[iIndex][FamilySkins][2],
			fINFO[iIndex][FamilySkins][3],
			fINFO[iIndex][FamilySkins][4],
			fINFO[iIndex][FamilySkins][5],
			fINFO[iIndex][FamilySkins][6],
			fINFO[iIndex][FamilySkins][7],
			fINFO[iIndex][FamilyColor],
			fINFO[iIndex][FamilyTurfTokens],
			fINFO[iIndex][FamilyGuns][0],
			fINFO[iIndex][FamilyGuns][1],
			fINFO[iIndex][FamilyGuns][2],
			fINFO[iIndex][FamilyGuns][3],
			fINFO[iIndex][FamilyGuns][4],
			fINFO[iIndex][FamilyGuns][5],
			fINFO[iIndex][FamilyGuns][6],
			fINFO[iIndex][FamilyGuns][7],
			fINFO[iIndex][FamilyGuns][8],
			fINFO[iIndex][FamilyGuns][9]
		);
		++iIndex;
	}
	print("\t- Familias cargadas correctamente sin errores.");
	return fclose(iFileHandle);
}

LoadHouses() {

	if(!fexist("apartments.cfg")) return 1;

	new
		szFileStr[1024],
		File: iFileHandle = fopen("apartments.cfg", io_read),
		iIndex;

	while(iIndex < sizeof(HouseInfo) && fread(iFileHandle, szFileStr)) {
		sscanf(szFileStr, "p<|>iiis[128]s[24]ffffffffiiiiiiiiiiiiiiiiiff",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hInteriorLoad],
			HouseInfo[iIndex][hExteriorLoad],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA]
		);

		if(HouseInfo[iIndex][hOwned])
		{
			if(HouseInfo[iIndex][hRentable] == 0) format(szFileStr, sizeof(szFileStr), "{CC0000}• Propiedad Privada •\n\n{FFFFFF}Dirección: {CC0000}%d\n{FFFFFF}(/Timbre)",iIndex);
			else format(szFileStr, sizeof(szFileStr), "{55F032}Dueño{FFFFFF}\n%s\n{55F032}Renta:{FFFFFF} $%d\n{55F032}Nivel:{FFFFFF} %d\n{55F032}Escribe /rentar para rentar aquí",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hRentFee],HouseInfo[iIndex][hLevel],iIndex);
		}
		else format(szFileStr, sizeof(szFileStr), "{55F032}• Propiedad en Venta •\n\n{FFFFFF}Dirección: {55F032}%d\n{FFFFFF}Precio: {55F032}$%d\n{FFFFFF}(/Comprarcasa)",iIndex, HouseInfo[iIndex][hValue]);
		HouseInfo[iIndex][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]);
		HouseInfo[iIndex][hTextID] = CreateDynamic3DTextLabel(szFileStr, COLOR_GREEN2, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]+0.5,2.0);
		++iIndex;
	}
	print("\t- Casas cargadas correctamente sin errores.");
	return fclose(iFileHandle);
}

// Garajes.
saveGarages(iIndex)
{
    new gfile[64];
	format(gfile, 64, GARAGES_FILE, iIndex);
	if(!INI_Exist(gfile)) // If not existing
	{
	    new INI:File = INI_Open(gfile);
	    INI_SetTag(File,"GarageData");
        INI_WriteInt(File,"Tipo", GaragesVariables[iIndex][gType]);
        INI_WriteString(File,"Nombre", GaragesVariables[iIndex][gName]);
        INI_WriteString(File,"Dueño", GaragesVariables[iIndex][gOwner]);
        INI_WriteFloat(File,"ExteriorX", GaragesVariables[iIndex][gExteriorPos][0]);
        INI_WriteFloat(File,"ExteriorY", GaragesVariables[iIndex][gExteriorPos][1]);
        INI_WriteFloat(File,"ExteriorZ", GaragesVariables[iIndex][gExteriorPos][2]);
        INI_WriteFloat(File,"ExteriorAngulo", GaragesVariables[iIndex][gExteriorPos][3]);
        INI_WriteFloat(File,"InteriorX", GaragesVariables[iIndex][gInteriorPos][0]);
        INI_WriteFloat(File,"InteriorY", GaragesVariables[iIndex][gInteriorPos][1]);
        INI_WriteFloat(File,"InteriorZ", GaragesVariables[iIndex][gInteriorPos][2]);
        INI_WriteFloat(File,"InteriorAngulo", GaragesVariables[iIndex][gInteriorPos][3]);
        INI_WriteInt(File,"Interior", GaragesVariables[iIndex][gInterior]);
		INI_WriteInt(File,"Precio", GaragesVariables[iIndex][gPrice]);
		INI_WriteInt(File,"Nivel", GaragesVariables[iIndex][gLevel]);
		INI_WriteInt(File,"Locked", GaragesVariables[iIndex][gLocked]);
        INI_Close(File);
	}
	return 1;
}
loadGarages()
{
    new gfile[64];
    new strings[280];
	for(new iIndex = 0; iIndex < sizeof(GaragesVariables); iIndex++)
	{
		format(gfile, 64, GARAGES_FILE, iIndex);
		INI_ParseFile(gfile, "loadgarages_data", .bExtra = true, .extra = iIndex );
		switch(GaragesVariables[iIndex][gLocked]){
			case 1:
			{ // Garages Icono
       			if(!strcmp("Sin Dueño", GaragesVariables[iIndex][gOwner])){format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
				iIndex);}
				else{format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({FF0000}Cerrado{FFFFFF})",
				iIndex);}
			}
			case 0:{
			    if(!strcmp("Sin Dueño", GaragesVariables[iIndex][gOwner])){format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
				iIndex);}
				else{format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({00F70C}Abierto{FFFFFF})",
				iIndex);}
			}
		}
		GaragesVariables[iIndex][gLabelID] = CreateDynamic3DTextLabel(strings, -1, GaragesVariables[iIndex][gExteriorPos][0], GaragesVariables[iIndex][gExteriorPos][1], GaragesVariables[iIndex][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		GaragesVariables[iIndex][gPickupID] = CreateDynamicPickup(19522, 23, GaragesVariables[iIndex][gExteriorPos][0], GaragesVariables[iIndex][gExteriorPos][1], GaragesVariables[iIndex][gExteriorPos][2], 0, 0, -1, 250);
	}
	print("\t- Todos los garajes fueron cargados correctamentes sin errores.");
	return 1;
}
function loadgarages_data(id, name[], value[])
{
    INI_Int("Tipo", GaragesVariables[id][gType]);
    INI_String("Nombre", GaragesVariables[id][gName],48);
    INI_String("Dueño", GaragesVariables[id][gOwner],MAX_PLAYER_NAME);
    INI_Float("ExteriorX", GaragesVariables[id][gExteriorPos][0]);
    INI_Float("ExteriorY", GaragesVariables[id][gExteriorPos][1]);
    INI_Float("ExteriorZ", GaragesVariables[id][gExteriorPos][2]);
    INI_Float("ExteriorAngulo", GaragesVariables[id][gExteriorPos][3]);
    INI_Float("InteriorX", GaragesVariables[id][gInteriorPos][0]);
    INI_Float("InteriorY", GaragesVariables[id][gInteriorPos][1]);
    INI_Float("InteriorZ", GaragesVariables[id][gInteriorPos][2]);
    INI_Float("InteriorAngulo", GaragesVariables[id][gInteriorPos][3]);
    INI_Int("Interior", GaragesVariables[id][gInterior]);
    INI_Int("Precio", GaragesVariables[id][gPrice]);
    INI_Int("Nivel", GaragesVariables[id][gLevel]);
    INI_Int("Locked", GaragesVariables[id][gLocked]);
	return 1;
}

SaveHouses() {

	new
		szFileStr[1024],
		File: fHandle = fopen("apartments.cfg", io_write);

	for(new iIndex; iIndex < MAX_HOUSES; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%s|%s|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f\r\n",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
   			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hInteriorLoad],
			HouseInfo[iIndex][hExteriorLoad],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

UpdatePoints()
{
	new idx;
	new File: file2;
	while (idx < sizeof(Points))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f|%f|%f|%d|%d|%s|%s|%s|%d\n",
		Points[idx][Pointx],
		Points[idx][Pointy],
		Points[idx][Pointz],
		Points[idx][Type],
		Points[idx][Vulnerable],
		Points[idx][Owner],
		Points[idx][CapperName],
		Points[idx][Name],
		Points[idx][MatPoint]);
		if(idx == 0)
		{
			file2 = fopen("points.cfg", io_write);
		}
		else
		{
			file2 = fopen("points.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

LoadPoints(){
	new arrCoords[9][64];
	new strFromFile2[256];
	new File: file = fopen("points.cfg", io_read);
	if (file){
		new idx;
		while (idx < sizeof(Points)){
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			Points[idx][Pointx] = floatstr(arrCoords[0]);
			Points[idx][Pointy] = floatstr(arrCoords[1]);
			Points[idx][Pointz] = floatstr(arrCoords[2]);
			Points[idx][Type] = strval(arrCoords[3]);
			Points[idx][Vulnerable] = strval(arrCoords[4]);
			strmid(Points[idx][Owner], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(Points[idx][CapperName], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(Points[idx][Name], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			Points[idx][MatPoint] = strval(arrCoords[8]);
			Points[idx][CaptureTimerEx2] = -1;
			Points[idx][ClaimerId] = INVALID_PLAYER_ID;
			Points[idx][PointPickupID] = CreateDynamicPickup( 1239, 23, Points[idx][Pointx], Points[idx][Pointy], Points[idx][Pointz]);
			idx++;
		}
		print("\t- Puntos cargados correctamente sin errores.");
		fclose(file);
	}
	return 1;
}

saveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(fINFO))
	{
		new coordsstring[512];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%d|%d|%d|%f|%f|%f|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		fINFO[idx][FamilyTaken],
		fINFO[idx][FamilyName],
		fINFO[idx][FamilyMOTD],
		fINFO[idx][FamilyLeader],
		fINFO[idx][FamilyBank],
		fINFO[idx][FamilyCash],
		fINFO[idx][FamilyUSafe],
		fINFO[idx][FamilySafe][0],
		fINFO[idx][FamilySafe][1],
		fINFO[idx][FamilySafe][2],
		fINFO[idx][FamilyPot],
		fINFO[idx][FamilyCrack],
		fINFO[idx][FamilyMats],
		fINFO[idx][FamilyRank1],
		fINFO[idx][FamilyRank2],
		fINFO[idx][FamilyRank3],
		fINFO[idx][FamilyRank4],
		fINFO[idx][FamilyRank5],
		fINFO[idx][FamilyRank6],
		fINFO[idx][FamilyMembers],
		fINFO[idx][FamilyMaxSkins],
		fINFO[idx][FamilySkins][0],
		fINFO[idx][FamilySkins][1],
		fINFO[idx][FamilySkins][2],
		fINFO[idx][FamilySkins][3],
		fINFO[idx][FamilySkins][4],
		fINFO[idx][FamilySkins][5],
		fINFO[idx][FamilySkins][6],
		fINFO[idx][FamilySkins][7],
		fINFO[idx][FamilyColor],
		fINFO[idx][FamilyTurfTokens],
		fINFO[idx][FamilyGuns][0],
		fINFO[idx][FamilyGuns][1],
		fINFO[idx][FamilyGuns][2],
		fINFO[idx][FamilyGuns][3],
		fINFO[idx][FamilyGuns][4],
		fINFO[idx][FamilyGuns][5],
		fINFO[idx][FamilyGuns][6],
		fINFO[idx][FamilyGuns][7],
		fINFO[idx][FamilyGuns][8],
		fINFO[idx][FamilyGuns][9]);
		if(idx == 0)
		{
			file2 = fopen("families.cfg", io_write);
		}
		else
		{
			file2 = fopen("families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

LoadFamiliesHQ()
{
    new string2[64];
	format(string2, sizeof(string2), "familieshq.ini");
	new File: GangFile = fopen(string2, io_read);
	if(GangFile)
	{
		new key[256], val[256], Data[256];
		while(fread(GangFile,Data,sizeof(Data)))
		{
		    new string[128];
		    for(new f = 0; f < MAX_FAMILY; f++)
    		{
				key = ini_GetKey( Data );
				format(string, 128, "Family%dEntranceX",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyEntrance][0] = floatstr( val ); }
				format(string, 128, "Family%dEntranceY",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyEntrance][1] = floatstr( val ); }
				format(string, 128, "Family%dEntranceZ",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyEntrance][2] = floatstr( val ); }
				format(string, 128, "Family%dEntranceA",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyEntrance][3] = floatstr( val ); }
				format(string, 128, "Family%dExitX",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyExit][0] = floatstr( val ); }
				format(string, 128, "Family%dExitY",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyExit][1] = floatstr( val ); }
				format(string, 128, "Family%dExitZ",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyExit][2] = floatstr( val ); }
				format(string, 128, "Family%dExitA",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyExit][3] = floatstr( val ); }
				format(string, 128, "Family%dInterior",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyInterior] = strval( val ); }
				format(string, 128, "Family%dCustomMap",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyCustomMap] = strval( val ); }
				format(string, 128, "Family%dVirtualWorld",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyVirtualWorld] = strval( val ); }
				for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    			{
    			    format(string, 128, "Family%dVeh%dModelId",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvModelId] = strval( val ); }
					format(string, 128, "Family%dVeh%dSpawnx",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvSpawnx] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawny",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvSpawny] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawnz",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvSpawnz] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawna",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvSpawna] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dLock",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvLock] = strval( val ); }
					format(string, 128, "Family%dVeh%dLocked",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvLocked] = strval( val ); }
					format(string, 128, "Family%dVeh%dPaintJob",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvPaintJob] = strval( val ); }
					format(string, 128, "Family%dVeh%dColor1",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvColor1] = strval( val ); }
					format(string, 128, "Family%dVeh%dColor2",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvColor2] = strval( val ); }
					format(string, 128, "Family%dVeh%dFuel",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvFuel] = strval( val ); }
    			}
			}
		}
		print("\t- HQ's Familias cargadas correctamente sin errores.");
		fclose(GangFile);
	}
	return 1;
}

saveFamiliesHQ()
{
	new string3[32];
	format(string3, sizeof(string3), "familieshq.ini");
	new File: hFile = fopen(string3, io_write);
	if (hFile)
	{
		new var[32];
		for(new f = 0; f < MAX_FAMILY; f++)
   		{
			format(var, 32, "Family%dEntranceX=%.1f\n",f, fINFO[f][FamilyEntrance][0]);fwrite(hFile, var);
			format(var, 32, "Family%dEntranceY=%.1f\n",f, fINFO[f][FamilyEntrance][1]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceZ=%.1f\n",f, fINFO[f][FamilyEntrance][2]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceA=%.1f\n",f, fINFO[f][FamilyEntrance][3]); fwrite(hFile, var);
			format(var, 32, "Family%dExitX=%.1f\n",f, fINFO[f][FamilyExit][0]); fwrite(hFile, var);
			format(var, 32, "Family%dExitY=%.1f\n",f, fINFO[f][FamilyExit][1]); fwrite(hFile, var);
			format(var, 32, "Family%dExitZ=%.1f\n",f, fINFO[f][FamilyExit][2]); fwrite(hFile, var);
			format(var, 32, "Family%dExitA=%.1f\n",f, fINFO[f][FamilyExit][3]); fwrite(hFile, var);
			format(var, 32, "Family%dInterior=%d\n",f, fINFO[f][FamilyInterior]); fwrite(hFile, var);
			format(var, 32, "Family%dCustomMap=%d\n",f, fINFO[f][FamilyCustomMap]); fwrite(hFile, var);
			format(var, 32, "Family%dVirtualWorld=%d\n",f, fINFO[f][FamilyVirtualWorld]); fwrite(hFile, var);

			for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
   			{
   			    format(var, 32, "Family%dVeh%dModelId=%d\n",f, fv, FVINFO[f][fv][fvModelId]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnx=%.1f\n",f, fv,FVINFO[f][fv][fvSpawnx]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawny=%.1f\n",f, fv,FVINFO[f][fv][fvSpawny]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnz=%.1f\n",f, fv,FVINFO[f][fv][fvSpawnz]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawna=%.1f\n",f, fv,FVINFO[f][fv][fvSpawna]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLock=%d\n",f, fv,FVINFO[f][fv][fvLock]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLocked=%d\n",f, fv,FVINFO[f][fv][fvLocked]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dPaintJob=%d\n",f, fv,FVINFO[f][fv][fvPaintJob]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor1=%d\n",f, fv,FVINFO[f][fv][fvColor1]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor2=%d\n",f, fv,FVINFO[f][fv][fvColor2]); fwrite(hFile, var);
				if(FVINFO[f][fv][fvId] != INVALID_VEHICLE_ID) FVINFO[f][fv][fvFuel] = VehicleFuel[FVINFO[f][fv][fvId]];
				format(var, 32, "Family%dVeh%dFuel=%d\n",f, fv,FVINFO[f][fv][fvFuel]); fwrite(hFile, var);
    		}
  		}
		fclose(hFile);
	}
	return 1;
}
function Test(playerid)
{
    OnPlayerSavedStats(playerid); // En la función "Test" se guardan los stats. Para saber que está registrado, pero que no acabó el tutorial.
    SetPosEx(playerid,  180.25316, -1884.93567, 0.97625, -90.0000,0,20); // Últimos digitos: Angulo, Interior, Mundo Virtual.
    SetPlayerCameraPos(playerid, 182.50420, -1885.23413, 6.7768);
    SetPlayerCameraLookAt(playerid, 332.10699, -1888.74329, 0.67798);
	SetHP(playerid,100);
	for(new loop=0; loop<10; loop++)  SendClientMessage(playerid, COLOR_WHITE,"");
    TogglePlayerControllable(playerid, 0);
	new test0[500];
	strcat(test0,"{FFFFFF}1)... Preguntarle en donde queda alguna concesionaria o algún negocio\n2)... Ahorrarme el trabajo de reportar a un usuario, y decirle por /b\n");
	strcat(test0,"3)... Seguir mi camino, ya que debo llamarlo con /soporte y esperar\n4)... Hablarle de todos los problemas que encontré en el servidor\n");
	strcat(test0,"5)... Darle una invitación para que rolee un rato, o quizás más tarde");
    ShowPlayerDialog(playerid, TEST_0, DIALOG_STYLE_LIST, "{C3FF23}1/10: Si me cruzo a un administrador en servicio, debo...",test0, "Seleccionar", "");
}
function Tutorial_Outside(playerid)
{
    for(new loop=0; loop<20; loop++)  SendClientMessage(playerid, COLOR_WHITE,"");
    TextDrawHideForPlayer(playerid, LoginMenu[0]);
   	TextDrawHideForPlayer(playerid, LoginMenu[1]);
   	TextDrawHideForPlayer(playerid, LoginMenu[8]);
   	TutError[playerid] = 0;
	TutStep[playerid] = 1;
	TutTime[playerid] = 1;
	TogglePlayerControllable(playerid, 0);
	Tutorial_Inside(playerid);
}

AntiDeAMX()
{
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

new AutoMensajes [][] =
{
"{FFFFFF}• No olvides visitar nuestro sitio web y dejar tu like: {2EDFFF}www.titaniumgamers.es",
"{FFFFFF}• Es importante ver nuestras actualizaciones anteriores y actuales, coloque: {2EDFFF}/Actualizaciones",
"{FFFFFF}• Si eres nuevo en la comunidad, te recomendamos utilizar: {2EDFFF}/Ayuda - /Duda"
};
//****************************************************************************
public LoadBizz()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("bizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			BizzInfo[idx][bOwned] = strval(arrCoords[0]);
			strmid(BizzInfo[idx][bOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BizzInfo[idx][bName], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BizzInfo[idx][bExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			BizzInfo[idx][bEntrancex] = floatstr(arrCoords[4]);
			BizzInfo[idx][bEntrancey] = floatstr(arrCoords[5]);
			BizzInfo[idx][bEntrancez] = floatstr(arrCoords[6]);
			BizzInfo[idx][bLevelNeeded] = strval(arrCoords[7]);
			BizzInfo[idx][bBuyPrice] = strval(arrCoords[8]);
			BizzInfo[idx][bTill] = strval(arrCoords[9]);
			BizzInfo[idx][bTillEx] = strval(arrCoords[10]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}
//***velocimetro***
forward SpeedoUpdate();
//******************************************************************************
public OnGameModeInit()
{
    AntiDeAMX();
	SendRconCommand("onfoot_rate 40");
	SendRconCommand("incar_rate 40");
	SendRconCommand("weapon_rate 40");
	SendRconCommand("stream_distance 250.0");
	SendRconCommand("stream_rate 1000");
	Streamer_TickRate(75);
	// Spam!
 //if(DetectarSpam("samp.titaniumgamers.com")) print("Hizo SPAM.");
 //****************velocimetro*****************
	Tacho_Box0 = TextDrawCreate(319.000000, 343.000000, "");
        TextDrawBackgroundColor(Tacho_Box0, 255);
        TextDrawFont(Tacho_Box0, 1);
        TextDrawLetterSize(Tacho_Box0, 0.500000, 1.000000);
        TextDrawColor(Tacho_Box0, -1);
        TextDrawSetOutline(Tacho_Box0, 0);
        TextDrawSetProportional(Tacho_Box0, 1);
        TextDrawSetShadow(Tacho_Box0, 1);
        TextDrawUseBox(Tacho_Box0, 1);
        TextDrawBoxColor(Tacho_Box0, 255);
        TextDrawTextSize(Tacho_Box0, 85.000000, 0.000000);

        Tacho_Box1 = TextDrawCreate(319.000000, 345.000000, "");
        TextDrawBackgroundColor(Tacho_Box1, 255);
        TextDrawFont(Tacho_Box1, 1);
        TextDrawLetterSize(Tacho_Box1, 0.500000, 1.400000);
        TextDrawColor(Tacho_Box1, -1);
        TextDrawSetOutline(Tacho_Box1, 0);
        TextDrawSetProportional(Tacho_Box1, 1);
        TextDrawSetShadow(Tacho_Box1, 1);
        TextDrawUseBox(Tacho_Box1, 1);
        TextDrawBoxColor(Tacho_Box1, 255);
        TextDrawTextSize(Tacho_Box1, 309.000000, 0.000000);

        Tacho_Box2 = TextDrawCreate(319.000000, 421.000000, "");
        TextDrawBackgroundColor(Tacho_Box2, 255);
        TextDrawFont(Tacho_Box2, 1);
        TextDrawLetterSize(Tacho_Box2, 0.500000, 1.000000);
        TextDrawColor(Tacho_Box2, -1);
        TextDrawSetOutline(Tacho_Box2, 0);
        TextDrawSetProportional(Tacho_Box2, 1);
        TextDrawSetShadow(Tacho_Box2, 1);
        TextDrawUseBox(Tacho_Box2, 1);
        TextDrawBoxColor(Tacho_Box2, 255);
        TextDrawTextSize(Tacho_Box2, 83.000000, 0.000000);

        SetTimer("SpeedoUpdate", 1000, 1);
        for(new i = 0; i<MAX_PLAYERS; i++)
        {
                Tacho_KMH[i] = TextDrawCreate(136.000000, 351.000000, "");
                TextDrawBackgroundColor(Tacho_KMH[i], 255);
                TextDrawFont(Tacho_KMH[i], 1);
                TextDrawLetterSize(Tacho_KMH[i], 0.500000, 1.000000);
                TextDrawColor(Tacho_KMH[i], -1);
                TextDrawSetOutline(Tacho_KMH[i], 0);
                TextDrawSetProportional(Tacho_KMH[i], 1);
                TextDrawSetShadow(Tacho_KMH[i], 1);

                Tacho_Zustand[i] = TextDrawCreate(136.000000, 366.000000, "");
                TextDrawBackgroundColor(Tacho_Zustand[i], 255);
                TextDrawFont(Tacho_Zustand[i], 1);
                TextDrawLetterSize(Tacho_Zustand[i], 0.500000, 1.000000);
                TextDrawColor(Tacho_Zustand[i], -1);
                TextDrawSetOutline(Tacho_Zustand[i], 0);
                TextDrawSetProportional(Tacho_Zustand[i], 1);
                TextDrawSetShadow(Tacho_Zustand[i], 1);

                Tacho_Tank[i] = TextDrawCreate(138.000000, 381.000000, "");
                TextDrawBackgroundColor(Tacho_Tank[i], 255);
                TextDrawFont(Tacho_Tank[i], 1);
                TextDrawLetterSize(Tacho_Tank[i], 0.500000, 1.000000);
                TextDrawColor(Tacho_Tank[i], -1);
                TextDrawSetOutline(Tacho_Tank[i], 0);
                TextDrawSetProportional(Tacho_Tank[i], 1);
                TextDrawSetShadow(Tacho_Tank[i], 1);

                Tacho_Car[i] = TextDrawCreate(138.000000, 398.000000, "");
                TextDrawBackgroundColor(Tacho_Car[i], 255);
                TextDrawFont(Tacho_Car[i], 1);
                TextDrawLetterSize(Tacho_Car[i], 0.500000, 1.000000);
                TextDrawColor(Tacho_Car[i], -1);
                TextDrawSetOutline(Tacho_Car[i], 0);
                TextDrawSetProportional(Tacho_Car[i], 1);
                TextDrawSetShadow(Tacho_Car[i], 1);
        }
	//****************Sistema AFK*****************
	Messageafk = TextDrawCreate(1.000000,435.000000,"  ");
   	TextDrawAlignment(Messageafk,0);
   	TextDrawBackgroundColor(Messageafk,0x000000ff);
   	TextDrawFont(Messageafk,2);
   	TextDrawLetterSize(Messageafk,0.598999,1.300000);
	TextDrawSetOutline(Messageafk,1);
   	TextDrawSetProportional(Messageafk,1);
   	TextDrawSetShadow(Messageafk,1);

	//****************ADO[K]1NG*****************
	SetTimer("ZL",6000,1);

    king1 = TextDrawCreate(11.000000, 431.000000, "");
    TextDrawBackgroundColor(king1, 255);
    TextDrawFont(king1, 2);
    TextDrawLetterSize(king1, 0.240000, 1.399999);
    TextDrawColor(king1, 0x33CCFFAA);
    TextDrawSetOutline(king1, 1);
    TextDrawSetProportional(king1, 1);

    king2 = TextDrawCreate(11.000000, 431.000000, "");
    TextDrawBackgroundColor(king2, 255);
    TextDrawFont(king2, 2);
    TextDrawLetterSize(king2, 0.240000, 1.399999);
    TextDrawColor(king2, 0x000000);
    TextDrawSetOutline(king2, 0);
    TextDrawSetProportional(king2, 1);
    TextDrawSetShadow(king2, 0);
	//*********************************
	//***sistema de fire**
	SetTimer("Fuegoo", 1000, true);
    F = false;
    new fire = random(sizeof(Fuego));
    LugarFuego[0] = Fuego[fire][0];
    LugarFuego[1] = Fuego[fire][1];
    LugarFuego[2] = Fuego[fire][2];
	//******************* Init gamemode*******************
	djson_GameModeInit();
	LoadBizz();
	OnGlobalBizzTextdrawUpdate();
	SendRconCommand("mapname Los Ángeles");
	SendRconCommand("weburl www.titaniumgamers.es");
	SendRconCommand("gamemodetext RolePlay");
	SendRconCommand("language Español");
	new servergmtextstr[64];
	format(servergmtextstr, 64, "hostname « Absolute Titanium RP » BETA ®", SERVER_GM_TEXT);
	SendRconCommand(servergmtextstr);
	new string[42];
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	EnableStuntBonusForAll(0);
	AllowAdminTeleport(0);
	DisableInteriorEnterExits();
	LoadHouses();
	ColocarMueblesCasas();
	LoadStuff();
	LoadServerStats();
	LoadFamilies();
	LoadPoints();
	LoadDynamicDoors();
	LoadcDealerships();
	LoadMapeos();
	loadGarages();
	LoadZonas();
	skinlist = LoadModelSelectionMenu("skins.txt");
	MueblesObj = 	LoadModelSelectionMenu("mSelection/MueblesModelos.txt");
	for(new f = 0; f < sizeof(fINFO); f++)
	{
		for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
		{
		    FVINFO[f][fv][fvModelId] = 0;
			FVINFO[f][fv][fvSpawnx] = 0.0;
			FVINFO[f][fv][fvSpawny] = 0.0;
			FVINFO[f][fv][fvSpawnz] = 0.0;
			FVINFO[f][fv][fvSpawna] = 0.0;
			FVINFO[f][fv][fvPaintJob] = -1;
			FVINFO[f][fv][fvColor1] = 126;
			FVINFO[f][fv][fvColor2] = 126;
			FVINFO[f][fv][fvPrice] = 0;
			FVINFO[f][fv][fvFuel] = 200;
	    	FVINFO[f][fv][fvId] = INVALID_VEHICLE_ID;
		}
	}
	LoadFamiliesHQ();
	LoadMOTDs();
	ClearReports();
	SetNameTagDrawDistance(5.0);
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
		gTime = wtime;
	}
	GiftAllowed = 1;
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
		CreatedCars[i] = INVALID_VEHICLE_ID;
	}
	for(new v = 0; v < MAX_VEHICLES; v++)
	{
	    VehicleFuel[v] = 200;
	}
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
Create3DTextLabel("",0xFFFFFFFF,-22.028297,-138.630065,1003.546875,100.0,0);
Create3DTextLabel("",0xFFFFFFFF,-30.602615,-28.996482,1003.557250,100.0,0);


    // Ayuda por Texdraw de 0 - By. Kevin Script
    AyudaTexdrawS = TextDrawCreate(136.000000, 154.000000, "usebox");
	TextDrawLetterSize(AyudaTexdrawS, 0.000000, 40.000000);
	TextDrawTextSize(AyudaTexdrawS, -5.500000, 0.000000);
	TextDrawAlignment(AyudaTexdrawS, 1);
	TextDrawColor(AyudaTexdrawS, 0);
	TextDrawUseBox(AyudaTexdrawS, true);
	TextDrawBoxColor(AyudaTexdrawS, 200);
	TextDrawSetShadow(AyudaTexdrawS, 0);
	TextDrawSetOutline(AyudaTexdrawS, 0);
	TextDrawFont(AyudaTexdrawS, 0);

	AyudaT[0] =
	TextDrawCreate(136.000000, 142.000000, "usebox");
	TextDrawLetterSize(AyudaT[0], 0.000000, 1.004000);
	TextDrawTextSize(AyudaT[0], -5.500000, 0.000000);
	TextDrawAlignment(AyudaT[0], 1);
	TextDrawColor(AyudaT[0], 0);
	TextDrawUseBox(AyudaT[0], true);
	TextDrawBoxColor(AyudaT[0], 255);
	TextDrawSetShadow(AyudaT[0], 0);
	TextDrawSetOutline(AyudaT[0], 0);
	TextDrawFont(AyudaT[0], 0);
	textdrawscount++;

	AyudaT[1] =
	TextDrawCreate(4.000000, 163.000000, "- Ayuda General");
	TextDrawBackgroundColor(AyudaT[1], 255);
	TextDrawFont(AyudaT[1], 1);
	TextDrawLetterSize(AyudaT[1], 0.340000, 1.389999);
	TextDrawColor(AyudaT[1], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[1], 0);
	TextDrawSetProportional(AyudaT[1], 1);
	TextDrawSetShadow(AyudaT[1], 1);
	TextDrawSetSelectable(AyudaT[1], 1);
	textdrawscount++;

	AyudaT[2] =
	TextDrawCreate(4.000000, 183.000000, "- Ayuda Faccion");
	TextDrawBackgroundColor(AyudaT[2], 0x000000cc);
	TextDrawFont(AyudaT[2], 1);
	TextDrawLetterSize(AyudaT[2], 0.340000, 1.389999);
	TextDrawColor(AyudaT[2], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[2], 0);
	TextDrawSetProportional(AyudaT[2], 1);
	TextDrawSetShadow(AyudaT[2], 1);
	TextDrawSetSelectable(AyudaT[2], 1);
	textdrawscount++;

	AyudaT[3] =
	TextDrawCreate(4.000000, 203.000000, "- Ayuda Chat");
	TextDrawBackgroundColor(AyudaT[3], 0x000000cc);
	TextDrawFont(AyudaT[3], 1);
	TextDrawLetterSize(AyudaT[3], 0.340000, 1.389999);
	TextDrawColor(AyudaT[3], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[3], 0);
	TextDrawSetProportional(AyudaT[3], 1);
	TextDrawSetShadow(AyudaT[3], 1);
	TextDrawSetSelectable(AyudaT[3], 1);
	textdrawscount++;

	AyudaT[4] =
	TextDrawCreate(4.000000, 223.000000, "- Ayuda Lider");
	TextDrawBackgroundColor(AyudaT[4], 0x000000cc);
	TextDrawFont(AyudaT[4], 1);
	TextDrawLetterSize(AyudaT[4], 0.340000, 1.389999);
	TextDrawColor(AyudaT[4], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[4], 0);
	TextDrawSetProportional(AyudaT[4], 1);
	TextDrawSetShadow(AyudaT[4], 1);
	TextDrawSetSelectable(AyudaT[4], 1);
	textdrawscount++;

	AyudaT[5] =
	TextDrawCreate(4.000000, 243.000000, "- Ayuda Telefono");
	TextDrawBackgroundColor(AyudaT[5], 0x000000cc);
	TextDrawFont(AyudaT[5], 1);
	TextDrawLetterSize(AyudaT[5], 0.340000, 1.389999);
	TextDrawColor(AyudaT[5], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[5], 0);
	TextDrawSetProportional(AyudaT[5], 1);
	TextDrawSetShadow(AyudaT[5], 1);
	TextDrawSetSelectable(AyudaT[5], 1);
	textdrawscount++;

	AyudaT[6] =
	TextDrawCreate(4.000000, 263.000000, "- Ayuda Casa");
	TextDrawBackgroundColor(AyudaT[6], 0x000000cc);
	TextDrawFont(AyudaT[6], 1);
	TextDrawLetterSize(AyudaT[6], 0.340000, 1.389999);
	TextDrawColor(AyudaT[6], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[6], 0);
	TextDrawSetProportional(AyudaT[6], 1);
	TextDrawSetShadow(AyudaT[6], 1);
	TextDrawSetSelectable(AyudaT[6], 1);
	textdrawscount++;

	AyudaT[7] =
	TextDrawCreate(4.000000, 283.000000, "- Ayuda Vehiculo");
	TextDrawBackgroundColor(AyudaT[7], 0x000000cc);
	TextDrawFont(AyudaT[7], 1);
	TextDrawLetterSize(AyudaT[7], 0.340000, 1.389999);
	TextDrawColor(AyudaT[7], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[7], 0);
	TextDrawSetProportional(AyudaT[7], 1);
	TextDrawSetShadow(AyudaT[7], 1);
	TextDrawSetSelectable(AyudaT[7], 1);
	textdrawscount++;

	AyudaT[8] =
	TextDrawCreate(4.000000, 303.000000, "- Ayuda Banco");
	TextDrawBackgroundColor(AyudaT[8], 0x000000cc);
	TextDrawFont(AyudaT[8], 1);
	TextDrawLetterSize(AyudaT[8], 0.340000, 1.389999);
	TextDrawColor(AyudaT[8], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[8], 0);
	TextDrawSetProportional(AyudaT[8], 1);
	TextDrawSetShadow(AyudaT[8], 1);
	TextDrawSetSelectable(AyudaT[8], 1);
	textdrawscount++;

	AyudaT[9] =
	TextDrawCreate(4.000000, 323.000000, "- Ayuda Premium");
	TextDrawBackgroundColor(AyudaT[9], 0x000000cc);
	TextDrawFont(AyudaT[9], 1);
	TextDrawLetterSize(AyudaT[9], 0.340000, 1.389999);
	TextDrawColor(AyudaT[9], 0xFFFF00AA);
	TextDrawSetOutline(AyudaT[9], 0);
	TextDrawSetProportional(AyudaT[9], 1);
	TextDrawSetShadow(AyudaT[9], 1);
	TextDrawSetSelectable(AyudaT[9], 1);
	textdrawscount++;

	AyudaT[10] =
	TextDrawCreate(4.000000, 343.000000, "- Ayuda Matrimonio");
	TextDrawBackgroundColor(AyudaT[10], 0x000000cc);
	TextDrawFont(AyudaT[10], 1);
	TextDrawLetterSize(AyudaT[10], 0.340000, 1.389999);
	TextDrawColor(AyudaT[10], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[10], 0);
	TextDrawSetProportional(AyudaT[10], 1);
	TextDrawSetShadow(AyudaT[10], 1);
	TextDrawSetSelectable(AyudaT[10], 1);
	textdrawscount++;

	AyudaT[11] =
	TextDrawCreate(4.000000, 363.000000, "- Ayuda Armas");
	TextDrawBackgroundColor(AyudaT[11], 0x000000cc);
	TextDrawFont(AyudaT[11], 1);
	TextDrawLetterSize(AyudaT[11], 0.340000, 1.389999);
	TextDrawColor(AyudaT[11], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[11], 0);
	TextDrawSetProportional(AyudaT[11], 1);
	TextDrawSetShadow(AyudaT[11], 1);
	TextDrawSetSelectable(AyudaT[11], 1);
	textdrawscount++;

	AyudaT[12] =
	TextDrawCreate(4.000000, 383.000000, "- Ayuda Reglas");
	TextDrawBackgroundColor(AyudaT[12], 0x000000cc);
	TextDrawFont(AyudaT[12], 1);
	TextDrawLetterSize(AyudaT[12], 0.340000, 1.389999);
	TextDrawColor(AyudaT[12], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[12], 0);
	TextDrawSetProportional(AyudaT[12], 1);
	TextDrawSetShadow(AyudaT[12], 1);
	TextDrawSetSelectable(AyudaT[12], 1);
	textdrawscount++;

	AyudaT[13] =
	TextDrawCreate(4.000000, 403.000000, "- Ayuda Familia");
	TextDrawBackgroundColor(AyudaT[13], 0x000000cc);
	TextDrawFont(AyudaT[13], 1);
	TextDrawLetterSize(AyudaT[13], 0.340000, 1.389999);
	TextDrawColor(AyudaT[13], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[13], 0);
	TextDrawSetProportional(AyudaT[13], 1);
	TextDrawSetShadow(AyudaT[13], 1);
	TextDrawSetSelectable(AyudaT[13], 1);
	textdrawscount++;

	AyudaT[14] =
	TextDrawCreate(4.000000, 423.000000, "- Ayuda Trabajo");
	TextDrawBackgroundColor(AyudaT[14], 0x000000cc);
	TextDrawFont(AyudaT[14], 1);
	TextDrawLetterSize(AyudaT[14], 0.340000, 1.389999);
	TextDrawColor(AyudaT[14], COLOR_AYUDAOSC);
	TextDrawSetOutline(AyudaT[14], 0);
	TextDrawSetProportional(AyudaT[14], 1);
	TextDrawSetShadow(AyudaT[14], 1);
	TextDrawSetSelectable(AyudaT[14], 1);
	textdrawscount++;

	XCierreA =
	TextDrawCreate(120.000000, 140.000000, "X");
	TextDrawBackgroundColor(XCierreA, 0x000000cc);
	TextDrawFont(XCierreA, 1);
	TextDrawLetterSize(XCierreA, 0.540000, 1.389999);
	TextDrawColor(XCierreA, COLOR_AYUDAROJO);
	TextDrawSetOutline(XCierreA, 0);
	TextDrawSetProportional(XCierreA, 1);
	TextDrawSetShadow(XCierreA, 1);
	TextDrawSetSelectable(XCierreA, 1);
	textdrawscount++;

/*    AyudaT[15] =
	TextDrawCreate(190.000000, 319.000000, "Ayuda neon");
	TextDrawBackgroundColor(AyudaT[15], 255);
	TextDrawFont(AyudaT[15], 2);
	TextDrawLetterSize(AyudaT[15], 0.500000, 1.699999);
	TextDrawColor(AyudaT[15], -1);
	TextDrawSetOutline(AyudaT[15], 0);
	TextDrawSetProportional(AyudaT[15], 1);
	TextDrawSetShadow(AyudaT[15], 1);
	TextDrawSetSelectable(AyudaT[15], 1);
	textdrawscount++;

	AyudaT[16] =
	TextDrawCreate(374.000000, 113.000000, "Ayuda Garaje");
	TextDrawBackgroundColor(AyudaT[16], 255);
	TextDrawFont(AyudaT[16], 2);
	TextDrawLetterSize(AyudaT[16], 0.500000, 1.699999);
	TextDrawColor(AyudaT[16], -1);
	TextDrawSetOutline(AyudaT[16], 0);
	TextDrawSetProportional(AyudaT[16], 1);
	TextDrawSetShadow(AyudaT[16], 1);
	TextDrawSetSelectable(AyudaT[16], 1);
	textdrawscount++;

	AyudaT[17] =
	TextDrawCreate(374.000000, 142.000000, "Ayuda negocio");
	TextDrawBackgroundColor(AyudaT[17], 255);
	TextDrawFont(AyudaT[17], 2);
	TextDrawLetterSize(AyudaT[17], 0.500000, 1.699999);
	TextDrawColor(AyudaT[17], -1);
	TextDrawSetOutline(AyudaT[17], 0);
	TextDrawSetProportional(AyudaT[17], 1);
	TextDrawSetShadow(AyudaT[17], 1);
	TextDrawSetSelectable(AyudaT[17], 1);
	textdrawscount++;

	AyudaT[18] =
	TextDrawCreate(263.000000, 365.000000, "Salir de la ayuda");
	TextDrawBackgroundColor(AyudaT[18], 255);
	TextDrawFont(AyudaT[18], 3);
	TextDrawLetterSize(AyudaT[18], 0.500000, 1.699999);
	TextDrawColor(AyudaT[18], -1);
	TextDrawSetOutline(AyudaT[18], 0);
	TextDrawSetProportional(AyudaT[18], 1);
	TextDrawSetShadow(AyudaT[18], 1);
	TextDrawSetSelectable(AyudaT[18], 1);
	textdrawscount++; */
	
    //                                                                       Text's
    
    /*DominioP = TextDrawCreate(379.000000, 140.000000, "i");
	TextDrawBackgroundColor(DominioP, 0);
	TextDrawFont(DominioP, 2);
	TextDrawLetterSize(DominioP, 25.800073, 2.600000);
	TextDrawColor(DominioP, 80);
	TextDrawSetOutline(DominioP, 0);
	TextDrawSetProportional(DominioP, 1);
	TextDrawSetShadow(DominioP, 1);
	TextDrawSetSelectable(DominioP, 0);
    
    DominioS = TextDrawCreate(620.000000, 130.000000, "www.titaniumgamers.com");
	TextDrawAlignment(DominioS, 3);
	TextDrawBackgroundColor(DominioS, 0);
	TextDrawFont(DominioS, 2);
	TextDrawLetterSize(DominioS, 0.210000, 0.799999);
	TextDrawColor(DominioS, -186);
	TextDrawSetOutline(DominioS, 0);
	TextDrawSetProportional(DominioS, 1);
	TextDrawSetShadow(DominioS, 1);
	TextDrawSetSelectable(DominioS, 0);*/
	
	TEXTPLACAA = TextDrawCreate(540.000000, 434.000000, "_"); // Se aplica en 3 letras.
	TextDrawLetterSize(TEXTPLACAA, 0.000000, 3.221108);
	TextDrawTextSize(TEXTPLACAA, 650.199951, 0.000000);
	TextDrawAlignment(TEXTPLACAA, 1);
	TextDrawColor(TEXTPLACAA, 0);
	TextDrawUseBox(TEXTPLACAA, true);
	TextDrawBoxColor(TEXTPLACAA, 180);
	TextDrawSetShadow(TEXTPLACAA, 0);
	TextDrawSetOutline(TEXTPLACAA, 0);
	TextDrawFont(TEXTPLACAA, 0);
	textdrawscount++;
	
	TEXTPLACAB = TextDrawCreate(528.000000, 434.000000, "_"); // Se aplica en 4 letras.
	TextDrawLetterSize(TEXTPLACAB, 0.000000, 3.221108);
	TextDrawTextSize(TEXTPLACAB, 650.199951, 0.000000);
	TextDrawAlignment(TEXTPLACAB, 1);
	TextDrawColor(TEXTPLACAB, 0);
	TextDrawUseBox(TEXTPLACAB, true);
	TextDrawBoxColor(TEXTPLACAB, 180);
	TextDrawSetShadow(TEXTPLACAB, 0);
	TextDrawSetOutline(TEXTPLACAB, 0);
	TextDrawFont(TEXTPLACAB, 0);
	textdrawscount++;

	TEXTPLACAC = TextDrawCreate(505.000000, 434.000000, "_"); // Sólo se aplica para bomberos.
	TextDrawLetterSize(TEXTPLACAC, 0.000000, 3.221108);
	TextDrawTextSize(TEXTPLACAC, 650.199951, 0.000000);
	TextDrawAlignment(TEXTPLACAC, 1);
	TextDrawColor(TEXTPLACAC, 0);
	TextDrawUseBox(TEXTPLACAC, true);
	TextDrawBoxColor(TEXTPLACAC, 180);
	TextDrawSetShadow(TEXTPLACAC, 0);
	TextDrawSetOutline(TEXTPLACAC, 0);
	TextDrawFont(TEXTPLACAC, 0);
	textdrawscount++;
	
	PLACAPD =
	TextDrawCreate(530.000000, 434.000000, "LAPD: ~w~EN SERVICIO");
    TextDrawBackgroundColor(PLACAPD, 32);
    TextDrawFont(PLACAPD, 2);
    TextDrawLetterSize(PLACAPD, 0.267598, 1.226665);
    TextDrawColor(PLACAPD, COLOR_PPD);
    TextDrawSetOutline(PLACAPD, 1);
    TextDrawSetProportional(PLACAPD, 1);
    TextDrawSetShadow(PLACAPD, 1);
    textdrawscount++;
    
    PLACAMD =
	TextDrawCreate(530.000000, 434.000000, "LAMD: ~w~EN SERVICIO");
    TextDrawBackgroundColor(PLACAMD, 32);
    TextDrawFont(PLACAMD, 2);
    TextDrawLetterSize(PLACAMD, 0.267598, 1.226665);
    TextDrawColor(PLACAMD, COLOR_PMD);
    TextDrawSetOutline(PLACAMD, 1);
    TextDrawSetProportional(PLACAMD, 1);
    TextDrawSetShadow(PLACAMD, 1);
    textdrawscount++;

    PLACABOM =
	TextDrawCreate(507.000000, 434.000000, "BOMBERO: ~w~EN SERVICIO");
    TextDrawBackgroundColor(PLACABOM, 32);
    TextDrawFont(PLACABOM, 2);
    TextDrawLetterSize(PLACABOM, 0.267598, 1.226665);
    TextDrawColor(PLACABOM, COLOR_PBOM);
    TextDrawSetOutline(PLACABOM, 1);
    TextDrawSetProportional(PLACABOM, 1);
    TextDrawSetShadow(PLACABOM, 1);
    textdrawscount++;

    PLACAEM =
	TextDrawCreate(530.000000, 434.000000, "USMC: ~w~EN SERVICIO");
    TextDrawBackgroundColor(PLACAEM, 32);
    TextDrawFont(PLACAEM, 2);
    TextDrawLetterSize(PLACAEM, 0.267598, 1.226665);
    TextDrawColor(PLACAEM, COLOR_PEM);
    TextDrawSetOutline(PLACAEM, 1);
    TextDrawSetProportional(PLACAEM, 1);
    TextDrawSetShadow(PLACAEM, 1);
    textdrawscount++;

    PLACAAININT =
	TextDrawCreate(507.000000, 434.000000, "AININT: ~w~EN SERVICIO");
    TextDrawBackgroundColor(PLACAAININT, 32);
    TextDrawFont(PLACAAININT, 2);
    TextDrawLetterSize(PLACAAININT, 0.267598, 1.226665);
    TextDrawColor(PLACAAININT, COLOR_PAININT);
    TextDrawSetOutline(PLACAAININT, 1);
    TextDrawSetProportional(PLACAAININT, 1);
    TextDrawSetShadow(PLACAAININT, 1);
    textdrawscount++;

	box =
	TextDrawCreate			(199.000000, 182.000000, "_");
	TextDrawBackgroundColor (box, 255);
	TextDrawFont			(box, 2);
	TextDrawLetterSize		(box, 1.200000, 8.000000);
	TextDrawColor			(box, -1);
	TextDrawSetOutline		(box, 0);
	TextDrawSetProportional	(box, 1);
	TextDrawSetShadow		(box, 1);
	TextDrawUseBox			(box, 1);
	TextDrawBoxColor		(box, 75);
	TextDrawTextSize		(box, 436.000000, 90.000000);
	textdrawscount++;

	cargando =
	TextDrawCreate			(232.000000, 192.000000, "CARGANDO");
	TextDrawBackgroundColor	(cargando, 255);
	TextDrawFont			(cargando, 2);
	TextDrawLetterSize		(cargando, 0.800000, 3.000000);
	TextDrawColor			(cargando, -1);
	TextDrawSetOutline		(cargando, 0);
	TextDrawSetProportional	(cargando, 1);
	TextDrawSetShadow		(cargando, 1);
	textdrawscount++;

	looking =
	TextDrawCreate			(203.000000, 223.000000, "BUSCANDO SU CUENTA, ESPERE POR FAVOR");
	TextDrawBackgroundColor	(looking, 255);
	TextDrawFont			(looking, 2);
	TextDrawLetterSize		(looking, 0.260000, 1.000000);
	TextDrawColor			(looking, -1);
	TextDrawSetOutline		(looking, 0);
	TextDrawSetProportional	(looking, 1);
	TextDrawSetShadow		(looking, 1);
	textdrawscount++;

	streamer =
	TextDrawCreate(210.000000, 214.000000, "CARGANDO OBJETOS ESPERA POR FAVOR");
	TextDrawBackgroundColor	(streamer, 255);
	TextDrawFont			(streamer, 2);
	TextDrawLetterSize		(streamer, 0.260000, 1.300000);
	TextDrawColor			(streamer, -1);
	TextDrawSetOutline		(streamer, 0);
	TextDrawSetProportional	(streamer, 1);
	TextDrawSetShadow		(streamer, 1);
	textdrawscount++;
	
	
	PFAVig_1 = TextDrawCreate(0.000000, 0.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(PFAVig_1, 255);
	TextDrawFont(PFAVig_1, 4);
	TextDrawLetterSize(PFAVig_1, 0.500000, 1.000000);
	TextDrawColor(PFAVig_1, -1);
	TextDrawSetOutline(PFAVig_1, 0);
	TextDrawSetProportional(PFAVig_1, 1);
	TextDrawSetShadow(PFAVig_1, 1);
	TextDrawUseBox(PFAVig_1, 1);
	TextDrawBoxColor(PFAVig_1, 255);
	TextDrawTextSize(PFAVig_1, 316.000000, 193.000000);
	textdrawscount++;

	PFAVig_2 = TextDrawCreate(640.000000, 0.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(PFAVig_2, 255);
	TextDrawFont(PFAVig_2, 4);
	TextDrawLetterSize(PFAVig_2, 0.500000, 1.000000);
	TextDrawColor(PFAVig_2, -1);
	TextDrawSetOutline(PFAVig_2, 0);
	TextDrawSetProportional(PFAVig_2, 1);
	TextDrawSetShadow(PFAVig_2, 1);
	TextDrawUseBox(PFAVig_2, 1);
	TextDrawBoxColor(PFAVig_2, 255);
	TextDrawTextSize(PFAVig_2, -324.000000, 206.000000);
	textdrawscount++;

	PFAVig_3 = TextDrawCreate(640.000000, 449.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(PFAVig_3, 255);
	TextDrawFont(PFAVig_3, 4);
	TextDrawLetterSize(PFAVig_3, 0.500000, 1.000000);
	TextDrawColor(PFAVig_3, -1);
	TextDrawSetOutline(PFAVig_3, 0);
	TextDrawSetProportional(PFAVig_3, 1);
	TextDrawSetShadow(PFAVig_3, 1);
	TextDrawUseBox(PFAVig_3, 1);
	TextDrawBoxColor(PFAVig_3, 255);
	TextDrawTextSize(PFAVig_3, -324.000000, -258.000000);
	textdrawscount++;

	PFAVig_4 = TextDrawCreate(-2.000000, 451.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(PFAVig_4, 255);
	TextDrawFont(PFAVig_4, 4);
	TextDrawLetterSize(PFAVig_4, 0.500000, 1.000000);
	TextDrawColor(PFAVig_4, -1);
	TextDrawSetOutline(PFAVig_4, 0);
	TextDrawSetProportional(PFAVig_4, 1);
	TextDrawSetShadow(PFAVig_4, 1);
	TextDrawUseBox(PFAVig_4, 1);
	TextDrawBoxColor(PFAVig_4, 255);
	TextDrawTextSize(PFAVig_4, 344.000000, -276.000000);
	textdrawscount++;
	

    FechaD = TextDrawCreate(500.000000, 14.000000, "15 de Febrero del 2015");
	TextDrawBackgroundColor(FechaD, 255);
	TextDrawFont(FechaD, 2);
	TextDrawLetterSize(FechaD, 0.190000, 1.000000);
	TextDrawColor(FechaD, -572596481);
	TextDrawSetOutline(FechaD, 1);
	TextDrawSetProportional(FechaD, 1);
	TextDrawSetSelectable(FechaD, 0);

	TiempoD = TextDrawCreate(545.000000, 21.000000, "17:37:35");
	TextDrawBackgroundColor(TiempoD, 255);
	TextDrawFont(TiempoD, 2);
	TextDrawLetterSize(TiempoD, 0.350000, 1.900000);
	TextDrawColor(TiempoD, -572596481);
	TextDrawSetOutline(TiempoD, 1);
	TextDrawSetProportional(TiempoD, 1);
	TextDrawSetSelectable(TiempoD, 0);

	SetTimer("Clock",1000,true);

    for(new i = 0; i<MAX_PLAYERS; i++) //
	{
	Experiencia[i] =
	TextDrawCreate(547.000000, 57.000000, "Lvl 1 Exp 0 / 16"); // Experiencia
	TextDrawBackgroundColor(Experiencia[i], 255);
	TextDrawFont(Experiencia[i], 1);
	TextDrawLetterSize(Experiencia[i], 0.229999, 0.600000);
	TextDrawColor(Experiencia[i], -1);
	TextDrawSetOutline(Experiencia[i], 0);
	TextDrawSetProportional(Experiencia[i], 1);
	TextDrawSetShadow(Experiencia[i], 1);
	textdrawscount++;
    }

//***********************************Autos************************************
//Policía de Los Ángeles Cars
LAPDVehicles[1] = AddStaticVehicleEx(596, 1602.6189, -1683.9745, 1644.8799, 90.0000,0,1,TIME_RESPAWN); // Patrulla 1
LAPDVehicles[2] = AddStaticVehicleEx(596, 1602.6189, -1687.9897, 1644.8799, 90.0000,0,1,TIME_RESPAWN); // Patrulla 2
LAPDVehicles[3] = AddStaticVehicleEx(596, 1602.6189, -1691.9493, 1644.8799, 90.0000,0,1,TIME_RESPAWN); // Patrulla 3
LAPDVehicles[4] = AddStaticVehicleEx(596, 1602.6189, -1696.0796, 1644.8799, 90.0000,0,1,TIME_RESPAWN); // Patrulla 4
LAPDVehicles[5] = AddStaticVehicleEx(596, 1602.6189, -1700.1985, 1644.8799, 90.0000,0,1,TIME_RESPAWN); // Patrulla 5
LAPDVehicles[6] = AddStaticVehicleEx(596, 1602.6189, -1704.2090, 1644.8799, 90.0000,0,1,TIME_RESPAWN); // Patrulla 6
//
LAPDVehicles[7] = AddStaticVehicleEx(599, 1595.3679, -1711.7411, 1644.8799, 0.0000,0,1,TIME_RESPAWN); // Camioneta 1
LAPDVehicles[8] = AddStaticVehicleEx(599, 1591.3414, -1711.7411, 1644.8799, 0.0000,0,1,TIME_RESPAWN); // Camioneta 2
LAPDVehicles[9] = AddStaticVehicleEx(599, 1587.4231, -1711.7411, 1644.8799, 0.0000,0,1,TIME_RESPAWN); // Camioneta 3
LAPDVehicles[10] = AddStaticVehicleEx(599, 1583.4713, -1711.7411, 1644.8799, 0.0000,0,1,TIME_RESPAWN); // Camioneta 4
//
LAPDVehicles[11] = AddStaticVehicleEx(525, 1578.9890, -1711.6368, 1644.8799, 0.0000,1,0,TIME_RESPAWN); // Grúa 1
LAPDVehicles[12] = AddStaticVehicleEx(525, 1574.4247, -1711.6368, 1644.8799, 0.0000,1,0,TIME_RESPAWN); // Grúa 2
LAPDVehicles[13] = AddStaticVehicleEx(525, 1570.3264, -1711.6368, 1644.8799, 0.0000,1,0,TIME_RESPAWN); // Grúa 3
LAPDVehicles[14] = AddStaticVehicleEx(525, 1558.8864, -1711.6368, 1644.8799, 0.0000,1,0,TIME_RESPAWN); // Grúa 4
//
LAPDVehicles[15] = AddStaticVehicleEx(601, 1526.7297, -1644.6289, 1644.8799, 180.0000,0,1,TIME_RESPAWN); // Camion de agua SWAT 1
LAPDVehicles[16] = AddStaticVehicleEx(601, 1530.6188, -1644.6289, 1644.8799, 180.0000,0,1,TIME_RESPAWN); // Camion de agua SWAT 2
//
LAPDVehicles[17] = AddStaticVehicleEx(427, 1545.0419, -1650.9753, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Camion SWAT 1
LAPDVehicles[18] = AddStaticVehicleEx(427, 1545.0419, -1654.9717, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Camion SWAT 2
LAPDVehicles[19] = AddStaticVehicleEx(427, 1545.0419, -1659.0157, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Camion SWAT 3
LAPDVehicles[20] = AddStaticVehicleEx(427, 1545.0419, -1663.0066, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Camion SWAT 4
//
LAPDVehicles[21] = AddStaticVehicleEx(523, 1557.1794, -1691.9670, 1644.8799, 180.0000,1,0,TIME_RESPAWN); // Mary 1
LAPDVehicles[22] = AddStaticVehicleEx(523, 1559.2964, -1691.9670, 1644.8799, 180.0000,1,0,TIME_RESPAWN); // Mary 2
LAPDVehicles[23] = AddStaticVehicleEx(523, 1564.0135, -1691.9670, 1644.8799, 180.0000,1,0,TIME_RESPAWN); // Mary 3
LAPDVehicles[24] = AddStaticVehicleEx(523, 1561.7278, -1691.9670, 1644.8799, 180.0000,1,0,TIME_RESPAWN); // Mary 4
// Charles
LAPDVehicles[25] = AddStaticVehicleEx(415, 1547.0485, -1667.9722, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Cheetah
LAPDVehicles[26] = AddStaticVehicleEx(560, 1547.0485, -1671.9392, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Sultan
LAPDVehicles[27] = AddStaticVehicleEx(579, 1546.0558, -1684.4778, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Huntley
LAPDVehicles[28] = AddStaticVehicleEx(506, 1547.0485, -1680.3524, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Super GT
LAPDVehicles[29] = AddStaticVehicleEx(451, 1546.4702, -1676.1952, 1644.8799, 90.0000,0,0,TIME_RESPAWN); // Turismo
//
LAPDVehicles[30] = 	AddStaticVehicleEx(497,1566.584,-1646.013,28.589679,88.595161,1,0,TIME_RESPAWN); // Maverick policial 2
LAPDVehicles[31] =	AddStaticVehicleEx(497,1566.529,-1700.955,28.5767,90.9838,1,0,TIME_RESPAWN); // Maverick policial 2
//
LAPDVehicles[32] =	AddStaticVehicleEx(528, 1534.6776, -1644.6289, 1644.8799, 180.0000,0,1,TIME_RESPAWN); // Camioneta SWAT 1
LAPDVehicles[33] =	AddStaticVehicleEx(528, 1538.6567, -1644.6289, 1644.8799, 180.0000,0,1,TIME_RESPAWN); // Camioneta SWAT 2

// Lanchas
LAPDVehicles[34] =	AddStaticVehicleEx(430, 727.2705, -1494.7456, 0.7210, 180.0000,1,1,TIME_RESPAWN); // Lancha 1
LAPDVehicles[35] =	AddStaticVehicleEx(430, 727.2705, -1511.6964, 0.7210, 180.0000,1,1,TIME_RESPAWN); // Lancha 2
LAPDVehicles[36] =	AddStaticVehicleEx(430, 727.2705, -1529.2291, 0.7210, 180.0000,1,1,TIME_RESPAWN); // Lancha 3
LAPDVehicles[37] =	AddStaticVehicleEx(430, 727.2705, -1546.7822, 0.7210, 180.0000,1,1,TIME_RESPAWN); // Lancha 4

// Patrullas
LAPDVehicles[38] = AddStaticVehicleEx(596, 720.1401, -1433.1343, 12.7000, 90.0000,0,1,TIME_RESPAWN); // Patrulla 1
LAPDVehicles[39] = AddStaticVehicleEx(596, 733.4361, -1433.1343, 13.2487, 90.0000,0,1,TIME_RESPAWN); // Patrulla 2
LAPDVehicles[40] = AddStaticVehicleEx(596, 726.8254, -1433.1343, 13.2487, 90.0000,0,1,TIME_RESPAWN); // Patrulla 3
LAPDVehicles[41] = AddStaticVehicleEx(596, 739.9816, -1433.1343, 13.2487, 90.0000,0,1,TIME_RESPAWN); // Patrulla 4

// Vehículos de Dillimore
LAPDVehicles[42] = AddStaticVehicleEx(599, 2248.9736, -78.9373, 26.6755, 180.0000,44,1,TIME_RESPAWN); // Rancher
LAPDVehicles[43] = AddStaticVehicleEx(525, 2249.3794, -59.8605, 26.1860, 0.0000,44,1,TIME_RESPAWN); // Grúa
LAPDVehicles[44] = AddStaticVehicleEx(596, 2254.3271, -59.8605, 25.9158, 0.0000,44,1,TIME_RESPAWN); // Unidad 1
LAPDVehicles[45] = AddStaticVehicleEx(596, 2259.4944, -59.8605, 25.9158, 0.0000,44,1,TIME_RESPAWN); // Unidad 2
LAPDVehicles[46] = AddStaticVehicleEx(596, 2264.6836, -59.8605, 25.9158, 0.0000,44,1,TIME_RESPAWN); // Unidad 3
LAPDVehicles[47] = AddStaticVehicleEx(596, 2269.6687, -59.8605, 25.9158, 0.0000,44,1,TIME_RESPAWN); // Unidad 4

// Drones
LAPDVehicles[48] = AddStaticVehicleEx(465, 1540.9933, -1614.0950, 12.7947, -90.0000,0,0,TIME_RESPAWN); // Dron 1
LAPDVehicles[49] = AddStaticVehicleEx(465, 1540.9933, -1606.0663, 12.7947, -90.0000,0,0,TIME_RESPAWN); // Dron 2
LAPDVehicles[50] = AddStaticVehicleEx(465, 1540.9933, -1611.2903, 12.7947, -90.0000,0,0,TIME_RESPAWN); // Dron 3
LAPDVehicles[51] = AddStaticVehicleEx(465, 1540.9933, -1608.6356, 12.7947, -90.0000,0,0,TIME_RESPAWN); // Dron 4

// Sanchez
LAPDVehicles[52] = AddStaticVehicleEx(468, 1582.3068, -1680.7174, 1644.6644, -90.0000, 0,0,TIME_RESPAWN);
Luz_01 = CreateObject(18646, 0.00000, -0.78310, 0.40370,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Luz_01, LAPDVehicles[52], 0.00000, -0.78310, 0.40370,   0.00000, 0.00000, 0.00000);

LAPDVehicles[53] = AddStaticVehicleEx(468, 1582.3068, -1678.7705, 1644.6644, -90.0000, 0,0,TIME_RESPAWN);
Luz_02 = CreateObject(18646, 0.00000, -0.78310, 0.40370,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Luz_02, LAPDVehicles[53], 0.00000, -0.78310, 0.40370,   0.00000, 0.00000, 0.00000);

LAPDVehicles[54] = AddStaticVehicleEx(468, 1582.3068, -1676.7913, 1644.6644, -90.0000, 0,0,TIME_RESPAWN);
Luz_03 = CreateObject(18646, 0.00000, -0.78310, 0.40370,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Luz_03, LAPDVehicles[54], 0.00000, -0.78310, 0.40370,   0.00000, 0.00000, 0.00000);

LAPDVehicles[55] = AddStaticVehicleEx(468, 1582.3068, -1674.8903, 1644.6644, -90.0000, 0,0,TIME_RESPAWN);
Luz_04 = CreateObject(18646, 0.00000, -0.78310, 0.40370,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Luz_04, LAPDVehicles[55], 0.00000, -0.78310, 0.40370,   0.00000, 0.00000, 0.00000);


//Sistema Judicial
AutosJudicial[0] = AddStaticVehicleEx(490, 1465.6554, -1844.7078, 13.7469, 0.0000, 1, 1,TIME_RESPAWN);
AutosJudicial[1] = AddStaticVehicleEx(490, 1460.5151, -1844.7078, 13.7469, 0.0000, 1, 1,TIME_RESPAWN);
AutosJudicial[2] = AddStaticVehicleEx(596, 1455.6639, -1845.0859, 13.3600, 0.0000, 1, 1,TIME_RESPAWN);
AutosJudicial[3] = AddStaticVehicleEx(596, 1450.8026, -1845.0859, 13.3600, 0.0000, 1, 1,TIME_RESPAWN);
AutosJudicial[4] = AddStaticVehicleEx(551, 1445.6221, -1844.6597, 13.3600, 0.0000, 1, 1,TIME_RESPAWN);
AutosJudicial[5] = AddStaticVehicleEx(551, 1440.4377, -1844.6597, 13.3600, 0.0000, 1, 1,TIME_RESPAWN);
AutosJudicial[6] = AddStaticVehicleEx(551, 1435.5254, -1844.6597, 13.3600, 0.0000, 1, 1,TIME_RESPAWN);
AutosJudicial[7] = AddStaticVehicleEx(551, 1430.6472, -1844.6597, 13.3600, 0.0000, 1, 1,TIME_RESPAWN);


// AININT
AININTVehicle[0] = AddStaticVehicleEx(560, 298.1687, -1536.0973, 24.0427, 55.3097, 0, 0, TIME_RESPAWN);
AININTVehicle[1] = AddStaticVehicleEx(560, 295.0175, -1540.6119, 24.0427, 55.3097, 0, 0, TIME_RESPAWN);
AININTVehicle[2] = AddStaticVehicleEx(560, 291.7213, -1545.1892, 24.0427, 55.3097, 0, 0, TIME_RESPAWN);
AININTVehicle[3] = AddStaticVehicleEx(490, 278.7459, -1535.9628, 24.6354, 235.2832, 0, 0, TIME_RESPAWN);
AININTVehicle[4] = AddStaticVehicleEx(490, 281.8420, -1531.4313, 24.6354, 235.2832, 0, 0, TIME_RESPAWN);
AININTVehicle[5] = AddStaticVehicleEx(490, 284.8155, -1527.0642, 24.6354, 235.2832, 0, 0, TIME_RESPAWN);
AININTVehicle[6] = AddStaticVehicleEx(490, 288.1579, -1522.5186, 24.6354, 235.2832, 0, 0, TIME_RESPAWN);
AININTVehicle[7] = AddStaticVehicleEx(490, 291.2764, -1518.0513, 24.6354, 235.2832, 0, 0, TIME_RESPAWN);
AININTVehicle[8] = AddStaticVehicleEx(482, 294.5887, -1513.3588, 24.4465, 235.4470, 0, 0, TIME_RESPAWN);
AININTVehicle[9] = AddStaticVehicleEx(482, 297.7945, -1509.1467, 24.4465, 235.4470, 0, 0, TIME_RESPAWN);
AININTVehicle[10] = AddStaticVehicleEx(528, 301.2933, -1503.9791, 24.5053, 233.6102, 0, 0, TIME_RESPAWN);
AININTVehicle[11] = AddStaticVehicleEx(426, 300.7913, -1490.9297, 24.3020, 234.9526, 0, 0, TIME_RESPAWN);
AININTVehicle[12] = AddStaticVehicleEx(426, 303.9510, -1486.5505, 24.3020, 234.9526, 0, 0, TIME_RESPAWN);
AININTVehicle[13] = AddStaticVehicleEx(426, 307.1890, -1481.9993, 24.3020, 234.9526, 0, 0, TIME_RESPAWN);
AININTVehicle[14] = AddStaticVehicleEx(468, 302.1288, -1533.7076, 24.4556, 53.7945, 0, 0, TIME_RESPAWN);
AININTVehicle[15] = AddStaticVehicleEx(468, 303.3558, -1531.9675, 24.4556, 53.7945, 0, 0, TIME_RESPAWN);
AININTVehicle[16] = AddStaticVehicleEx(468, 304.7064, -1530.1901, 24.4556, 53.7945, 0, 0, TIME_RESPAWN);
AININTVehicle[17] = AddStaticVehicleEx(468, 306.0418, -1528.3197, 24.4556, 53.7945, 0, 0, TIME_RESPAWN);

// USMC
USMCLandVehicles[1] = AddStaticVehicleEx(470, 193.4385, 1920.4230, 17.4750, 180.0000,141,141,60000); //Patriot 1
USMCLandVehicles[2] = AddStaticVehicleEx(470, 202.4423, 1920.4230, 17.4750, 180.0000,141,141,60000); //Patriot 2
USMCLandVehicles[3] = AddStaticVehicleEx(470, 211.4666, 1920.4230, 17.4750, 180.0000,141,141,60000); //Patriot 3
USMCLandVehicles[4] = AddStaticVehicleEx(470, 220.4066, 1920.4230, 17.4750, 180.0000,141,141,600000); //Patriot 4
USMCLandVehicles[5] = AddStaticVehicleEx(470, 194.3430, 1899.0150, 17.4750, 0.0000,141,141,600000); //Patriot 5
USMCLandVehicles[6] = AddStaticVehicleEx(470, 194.3430, 1875.6149, 17.4750, 0.0000,141,141,600000); //Patriot 6
USMCLandVehicles[7] = AddStaticVehicleEx(470, 194.3430, 1891.3068, 17.4750, 0.0000,141,141,600000); //Patriot 7
USMCLandVehicles[8] = AddStaticVehicleEx(470, 194.3990, 1883.2964, 17.4750, 0.0000,141,141,600000); //Patriot 8
USMCLandVehicles[9] = AddStaticVehicleEx(433, 337.2305, 1861.1292, 18.5385, 90.0000,141,141,600000); //Barracks 1
USMCLandVehicles[10] = AddStaticVehicleEx(433, 337.2305, 1841.3623, 18.5385, 90.0000,141,141,600000); //Barracks 2
USMCLandVehicles[11] = AddStaticVehicleEx(433, 337.2305, 1821.0294, 18.5385, 90.0000,141,141,600000); //Barracks 3
USMCLandVehicles[12] = AddStaticVehicleEx(433, 337.2305, 1799.7263, 18.5385, 90.0000,141,141,600000); //Barracks 4
USMCLandVehicles[13] = AddStaticVehicleEx(473, 255.5487, 2936.6843, 0.2517, 0.0000,141,141,600000); //Dinghy 1
USMCLandVehicles[14] = AddStaticVehicleEx(473, 260.7193, 2936.6843, 0.2517, 0.0000,141,141,600000); //Dinghy 2
USMCLandVehicles[15] = AddStaticVehicleEx(548, 357.2558, 2027.9738, 24.4120, 90.0000,141,141,60000); //Cargobob
USMCLandVehicles[16] = AddStaticVehicleEx(432, 274.3430, 1947.6565, 17.4806, -90.0000,141,141,600000); //Rhino 1
USMCLandVehicles[17] = AddStaticVehicleEx(432, 274.3430, 1985.5024, 17.4806, -90.0000,141,141,600000); //Rhino 2
USMCLandVehicles[18] = AddStaticVehicleEx(432, 274.3430, 2024.4121, 17.4806, -90.0000,141,141,600000); //Rhino 3
USMCLandVehicles[19] = AddStaticVehicleEx(468, 187.7077, 1939.2174, 17.2996, 90.0000,141,141,600000); //Sanchez 1
USMCLandVehicles[20] = AddStaticVehicleEx(468, 187.7077, 1932.7026, 17.2996, 90.0000,141,141,600000); //Sanchez 2
USMCLandVehicles[21] = AddStaticVehicleEx(468, 187.7077, 1934.7285, 17.2996, 90.0000,141,141,600000); //Sanchez 3
USMCLandVehicles[22] = AddStaticVehicleEx(468, 187.7077, 1937.0105, 17.2996, 90.0000,141,141,600000); //Sanchez 4
USMCLandVehicles[23] = AddStaticVehicleEx(487, 374.2032, 1986.4481, 18.9390, 90.0000,141,141,600000); //Maverick 1
USMCLandVehicles[24] = AddStaticVehicleEx(487, 374.2032, 1960.3340, 18.9390, 90.0000,141,141,600000); //Maverick 2
USMCLandVehicles[25] = AddStaticVehicleEx(487, 374.2032, 1933.6927, 18.9390, 90.0000,141,141,600000); //Maverick 3
USMCLandVehicles[26] = AddStaticVehicleEx(487, 374.2032, 1907.9070, 18.9390, 90.0000,141,141,600000); //Maverick 4
USMCLandVehicles[27] = AddStaticVehicleEx(416, 176.7594, 2040.5558, 19.7165, 0.0000,141,141,600000); //Ambulancia 1
USMCLandVehicles[28] = AddStaticVehicleEx(416, 172.0073, 2040.5558, 19.7165, 0.0000,141,141,600000); //Ambulancia 2
USMCLandVehicles[29] = AddStaticVehicleEx(416, 162.0983, 2040.5558, 19.7165, 0.0000,141,141,600000); //Ambulancia 3
USMCLandVehicles[30] = AddStaticVehicleEx(416, 157.4866, 2040.5558, 19.7165, 0.0000,141,141,600000); //Ambulancia 4
USMCLandVehicles[31] = AddStaticVehicleEx(431, 297.2710, 1833.1442, 17.7810, 180.0000,141,141,600000); //Bus 1
USMCLandVehicles[32] = AddStaticVehicleEx(431, 297.2710, 1856.3434, 17.7810, 180.0000,141,141,600000); //Bus 2
USMCLandVehicles[33] = AddStaticVehicleEx(431, 297.2710, 1882.2218, 17.7810, 180.0000,141,141,600000); //Bus 3
USMCLandVehicles[34] = AddStaticVehicleEx(431, 297.2710, 1905.0143, 17.7810, 180.0000,141,141,600000); //Bus 4
USMCLandVehicles[35] = AddStaticVehicleEx(490, 212.4485, 1980.4716, 17.7485, 90.0000,141,141,600000); //Camioneta FBI
//--->>>Porta aviones
USMCLandVehicles[34] = AddStaticVehicleEx(563, 208.8462, 4427.6772, 18.1968, 180.0000,141,141,600000); //Blackhawk 1
USMCLandVehicles[35] = AddStaticVehicleEx(563, 186.8299, 4427.6772, 18.1968, 180.0000,141,141,600000); //Blackhawk 2
USMCLandVehicles[36] = AddStaticVehicleEx(563, 164.6040, 4427.6772, 18.1968, 180.0000,141,141,600000); //Blackhawk 3
USMCLandVehicles[37] = AddStaticVehicleEx(592, 15.6538, 4390.8462, 11.7374, 180.0000,141,141,600000); //Andromada
USMCLandVehicles[38] = AddStaticVehicleEx(417, 337.2990, 4385.9419, 9.2536, 180.0000,141,141,600000); //Cargobo 1
USMCLandVehicles[39] = AddStaticVehicleEx(417, 353.4655, 4385.9419, 9.2536, 180.0000,141,141,600000); //Cargobo 2
USMCLandVehicles[40] = AddStaticVehicleEx(425, 351.8051, 4423.0332, 10.8558, 90.0000,141,141,600000); //Hunter
USMCLandVehicles[41] = AddStaticVehicleEx(476, 213.7503, 4386.3965, 10.2263, 180.0000,141,141,600000); //Rustley 1
USMCLandVehicles[42] = AddStaticVehicleEx(476, 229.3733, 4386.3965, 10.2263, 180.0000,141,141,600000); //Rustley 2
USMCLandVehicles[43] = AddStaticVehicleEx(511, 180.5497, 4385.0581, 10.6549, 180.0000,141,141,600000); //Beagle 1
USMCLandVehicles[44] = AddStaticVehicleEx(511, 141.0108, 4385.0581, 10.6549, 180.0000,141,141,600000); //Beagle 2
USMCLandVehicles[45] = AddStaticVehicleEx(513, 262.7351, 4385.8984, 9.7324, 180.0000,141,141,600000); //Stunt
USMCLandVehicles[46] = AddStaticVehicleEx(520, 294.0874, 4428.8965, 18.7101, 180.0000,141,141,600000); //Hydra 1
USMCLandVehicles[47] = AddStaticVehicleEx(520, 308.9524, 4428.8965, 18.7101, 180.0000,141,141,600000); //Hydra 2
USMCLandVehicles[48] = AddStaticVehicleEx(520, 323.9611, 4428.8965, 18.7101, 180.0000,141,141,600000); //Hydra 3
USMCLandVehicles[49] = AddStaticVehicleEx(520, 338.6852, 4428.8965, 18.7101, 180.0000,141,141,600000); //Hydra 4
USMCLandVehicles[50] = AddStaticVehicleEx(553, 57.3733, 4390.1611, 11.1940, 180.0000,141,141,600000); //Nevada 1
USMCLandVehicles[51] = AddStaticVehicleEx(553, 99.6746, 4390.1611, 11.1940, 180.0000,141,141,600000); //Nevada 2
// Departamento del USMC
USMCLandVehicles[51] = AddStaticVehicleEx(431, 1497.2854, -1540.4978, 13.6319, 0.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(431, 1497.2854, -1521.5347, 13.6319, 0.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(416, 1546.4004, -1547.1873, 13.6684, 90.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(416, 1546.4004, -1539.6707, 13.6684, 90.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(433, 1529.5411, -1485.9176, 14.0013, 90.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(470, 1547.2178, -1493.7966, 13.2634, 90.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(470, 1547.2178, -1505.8286, 13.2634, 90.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(470, 1547.2178, -1517.3470, 13.2634, 90.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(470, 1547.2178, -1529.0491, 13.2634, 90.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(433, 1511.1813, -1485.9176, 14.0013, 90.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(487, 1514.3094, -1562.9094, 31.6113, 180.0000,141,141,600000);
USMCLandVehicles[51] = AddStaticVehicleEx(487, 1480.1779, -1562.9094, 31.6113, 180.0000,141,141,600000);


// Los Ángeles Medical Departament (LAMD)
LAMDVehicles[0] = AddStaticVehicleEx(416,1096.09997559,-1329.90002441,13.39999962,0.00000000,1,154,TIME_RESPAWN); // Ambulancia  52
LAMDVehicles[1] = AddStaticVehicleEx(416,1100.09997559,-1330.00000000,13.39999962,0.00000000,1,154,TIME_RESPAWN); // Ambulancia  53
LAMDVehicles[2] = AddStaticVehicleEx(416,1109.09997559,-1330.19995117,13.39999962,0.00000000,1,154,TIME_RESPAWN);// Ambulancia 54
LAMDVehicles[3] = AddStaticVehicleEx(416,1113.09997559,-1330.09997559,13.39999962,0.00000000,1,154,TIME_RESPAWN); // Ambulancia  55
LAMDVehicles[4] = AddStaticVehicleEx(416,1122.09997559,-1329.80004883,13.39999962,0.00000000,1,154,TIME_RESPAWN); // Ambulancia  56
LAMDVehicles[5] = AddStaticVehicleEx(416,1126.30004883,-1329.69995117,13.39999962,0.00000000,1,154,TIME_RESPAWN); // Ambulancia  57
LAMDVehicles[5] = AddStaticVehicleEx(416,1177.6741,-1339.0002,13.9881,-90.0000,1,154,TIME_RESPAWN); // Ambulancia  58
LAMDVehicles[6] = AddStaticVehicleEx(487,1161.3024,-1373.5033,26.7949,-90.0000,1,154,TIME_RESPAWN); // Maverick 59
LAMDVehicles[7] = AddStaticVehicleEx(487,1161.3024,-1358.4344,26.7949,-90.0000,1,154,TIME_RESPAWN); // Maverick 60
// Palomino Creek
LAMDVehicles[8] = AddStaticVehicleEx(416,2554.5042,56.3437,26.7438,180.0000,1,154,TIME_RESPAWN); // Ambulancia  57

// FOX
FOXVehicle[0] = AddStaticVehicleEx(582,741.3083,-1335.1163,13.7538,181.0081,222,222,TIME_RESPAWN); // News Van 116
FOXVehicle[1] = AddStaticVehicleEx(582,747.1328,-1335.2350,13.7546,181.8006,222,222,TIME_RESPAWN); // News Van 117
FOXVehicle[2] = AddStaticVehicleEx(582,752.5702,-1335.5719,13.7531,179.4174,222,222,TIME_RESPAWN); // News Van 118
FOXVehicle[3] = AddStaticVehicleEx(488,743.5662,-1372.6359,25.9022,358.8606,222,222,TIME_RESPAWN); // San News 119

// Mecánicos
MecanicosVehicle[0] = AddStaticVehicleEx(525,1037.5505, -1459.9083, 14.1240, 0.0000,0,2,TIME_RESPAWN); //Tow Truck
MecanicosVehicle[1] = AddStaticVehicleEx(525,1029.3860, -1459.9083, 14.1240, 0.0000,0,2,TIME_RESPAWN); //Tow Truck
MecanicosVehicle[2] = AddStaticVehicleEx(525,1021.0251, -1459.9083, 14.1240, 0.0000,0,2,TIME_RESPAWN); //Tow Truck
MecanicosVehicle[3] = AddStaticVehicleEx(552,1012.6933, -1461.1780, 14.1240, 0.0000,1,2,TIME_RESPAWN); //Unility
MecanicosVehicle[4] = AddStaticVehicleEx(552,1005.3918, -1461.1780, 14.1240, 0.0000,1,2,TIME_RESPAWN);//Utility
MecanicosVehicle[5] = AddStaticVehicleEx(552,998.2897, -1461.1780, 14.1240, 0.0000,1,2,TIME_RESPAWN);  //Utility
MecanicosVehicle[6] = AddStaticVehicleEx(504, 977.9211, -1451.7872, 15.0275, 18.7800,1,2,TIME_RESPAWN);  //Esposición 1
MecanicosVehicle[7] = AddStaticVehicleEx(545, 969.2817, -1451.7229, 15.0275, -18.7800,1,2,TIME_RESPAWN);  //Esposición 2

// Gobierno
GobiernoCar[0] = AddStaticVehicleEx(405, 1261.0319, -2037.7552, 59.2906, -90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[1] = AddStaticVehicleEx(405, 1261.0319, -2033.3308, 59.2906, -90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[4] = AddStaticVehicleEx(409, 1259.5864, -2009.8827, 59.5051, -90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[5] = AddStaticVehicleEx(409, 1259.5864, -2021.0835, 59.5051, -90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[6] = AddStaticVehicleEx(551, 1261.0803, -2024.2332, 59.3323, -90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[7] = AddStaticVehicleEx(409, 1259.5864, -2015.4772, 59.5051, -90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[8] = AddStaticVehicleEx(551, 1261.0803, -2028.7191, 59.3323, -90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[9] = AddStaticVehicleEx(490, 1267.2330, -2037.5669, 59.1994, 90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[10] = AddStaticVehicleEx(490, 1267.2330, -2009.6929, 59.1994, 90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[11] = AddStaticVehicleEx(490, 1267.2330, -2021.1548, 59.1994, 90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[12] = AddStaticVehicleEx(490, 1267.2330, -2015.3927, 59.1994, 90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[13] = AddStaticVehicleEx(490, 1267.2330, -2026.8245, 59.1994, 90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[14] = AddStaticVehicleEx(490, 1267.2330, -2031.9924, 59.1994, 90.0000,-1,1,TIME_RESPAWN);
GobiernoCar[15] = AddStaticVehicleEx(487, 1257.8861, -2075.1956, 68.8254, 0.0000,-1,1,TIME_RESPAWN);
GobiernoCar[16] = AddStaticVehicleEx(487, 1245.7828, -2075.1956, 68.8254, 0.0000,-1,1,TIME_RESPAWN);

// Santana
Santana_Vehicle[0] = AddStaticVehicleEx(487,1291.40002441,-787.00000000,96.69999695,0.00000000,1,1,TIME_RESPAWN);  //Maverick
Santana_Vehicle[1] = AddStaticVehicleEx(579,1242.69995117,-804.50000000,84.19999695,180.00000000,1,1,TIME_RESPAWN); //Huntley
Santana_Vehicle[2] = AddStaticVehicleEx(579,1248.69995117,-804.00000000,84.19999695,180.00000000,1,1,TIME_RESPAWN); //Huntley
Santana_Vehicle[3] = AddStaticVehicleEx(409,1254.30004883,-806.20001221,84.09999847,177.99993896,1,1,TIME_RESPAWN); //Stretch
Santana_Vehicle[4] = AddStaticVehicleEx(428,1249.59997559,-821.00000000,84.40000153,169.99987793,1,1,TIME_RESPAWN); //Securicar
Santana_Vehicle[5] = AddStaticVehicleEx(560,1288.19995117,-830.79998779,82.90000153,0.00000000,1,1,TIME_RESPAWN); //Sultan
Santana_Vehicle[6] = AddStaticVehicleEx(560,1283.50000000,-830.90002441,82.90000153,0.00000000,1,1,TIME_RESPAWN); //Sultan
Santana_Vehicle[7] = AddStaticVehicleEx(560,1278.69995117,-831.00000000,82.90000153,0.00000000,1,1,TIME_RESPAWN); //Sultan

// Mafia Rusa
Rusa_Vehicle[0] = AddStaticVehicleEx(580, -1098.0763, -1049.9688, 129.2099, 0.0000,3,3,TIME_RESPAWN);
Rusa_Vehicle[1] = AddStaticVehicleEx(560, -1129.1134, -1049.8087, 129.2191, 0.0000,3,3,TIME_RESPAWN);
Rusa_Vehicle[2] = AddStaticVehicleEx(560, -1118.7500, -1049.8087, 129.2099, 0.0000,3,3,TIME_RESPAWN);
Rusa_Vehicle[3] = AddStaticVehicleEx(409, -1139.5396, -1048.5856, 129.2099, 0.0000,3,3,TIME_RESPAWN);
Rusa_Vehicle[4] = AddStaticVehicleEx(428, -1157.3367, -1049.0376, 129.2099, 0.0000,3,3,TIME_RESPAWN);
Rusa_Vehicle[5] = AddStaticVehicleEx(428, -1149.9746, -1049.0376, 129.2099, 0.0000,3,3,TIME_RESPAWN);
Rusa_Vehicle[6] = AddStaticVehicleEx(487, -1017.3688, -1044.5438, 130.5427, 90.0000,3,3,TIME_RESPAWN);
Rusa_Vehicle[7] = AddStaticVehicleEx(580, -1108.4327, -1049.9688, 129.2099, 0.0000,3,3,TIME_RESPAWN);
// LCN
LCN_Vehicle[0] = AddStaticVehicleEx(560, 1953.2115, 1784.0792, 12.2880, 180.0000,0,0,TIME_RESPAWN);  //Sultan
LCN_Vehicle[1] = AddStaticVehicleEx(560, 1949.6475, 1784.0792, 12.2880, 180.0000,0,0,TIME_RESPAWN); //Sultan
LCN_Vehicle[2] = AddStaticVehicleEx(560, 1946.0938, 1784.0792, 12.2880, 180.0000,0,0,TIME_RESPAWN); //Sultan
LCN_Vehicle[3] = AddStaticVehicleEx(560, 1942.4465, 1784.0792, 12.2880, 180.0000,0,0,TIME_RESPAWN); //Sultan
LCN_Vehicle[6] = AddStaticVehicleEx(579, 1938.8450, 1784.0792, 12.6917, 180.0000,0,0,TIME_RESPAWN); //Huntley
LCN_Vehicle[7] = AddStaticVehicleEx(579, 1935.1589, 1784.0792, 12.6917, 180.0000,0,0,TIME_RESPAWN); //Huntley
LCN_Vehicle[8] = AddStaticVehicleEx(579, 1931.8157, 1784.0792, 12.6917, 180.0000,0,0,TIME_RESPAWN); //Huntley
LCN_Vehicle[9] = AddStaticVehicleEx(579, 1928.0299, 1784.0792, 12.6917, 180.0000,0,0,TIME_RESPAWN); //Huntley
LCN_Vehicle[10] = AddStaticVehicleEx(428, 1924.4978, 1784.0792, 12.8005, 180.0000,0,0,TIME_RESPAWN); //SecurityCar
LCN_Vehicle[11] = AddStaticVehicleEx(428, 1920.7780, 1784.0792, 12.8005, 180.0000,0,0,TIME_RESPAWN); //SecurityCar
//Yakuzas
Yakuza_Vehicle[0] = AddStaticVehicleEx(560,281.79998779,-1167.69995117,80.69999695,316.00000000,1,1,TIME_RESPAWN);  //Sultan
Yakuza_Vehicle[1] = AddStaticVehicleEx(560,284.50000000,-1170.30004883,80.69999695,316.00000000,1,1,TIME_RESPAWN); //Sultan
Yakuza_Vehicle[2] = AddStaticVehicleEx(560,287.29998779,-1173.40002441,80.69999695,315.99975586,1,1,TIME_RESPAWN); //Sultan
Yakuza_Vehicle[3] = AddStaticVehicleEx(409,288.00000000,-1157.19995117,80.80000305,224.00000000,1,1,TIME_RESPAWN); //Streetch
Yakuza_Vehicle[4] = AddStaticVehicleEx(409,283.89999390,-1160.90002441,80.80000305,223.99475098,1,1,TIME_RESPAWN); //Streetch
Yakuza_Vehicle[5] = AddStaticVehicleEx(487,309.79998779,-1148.00000000,92.40000153,45.99975586,1,1,TIME_RESPAWN); //Maverick
Yakuza_Vehicle[6] = AddStaticVehicleEx(579,292.79998779,-1177.50000000,81.00000000,314.00000000,1,1,TIME_RESPAWN); //Huntley
Yakuza_Vehicle[7] = AddStaticVehicleEx(579,296.70001221,-1181.40002441,81.00000000,314.00000000,1,1,TIME_RESPAWN); //Huntley
Yakuza_Vehicle[8] = AddStaticVehicleEx(579,300.10000610,-1185.30004883,81.00000000,313.99475098,1,1,TIME_RESPAWN); //Huntley
Yakuza_Vehicle[9] = AddStaticVehicleEx(428,305.39999390,-1163.30004883,81.19999695,134.00000000,1,1,TIME_RESPAWN); //Securicar
//ISIS
Alqaeda_Vehicle[0] = AddStaticVehicleEx(579, -812.0720, 2404.1128, 156.5625, -143.3399, 141, 141,TIME_RESPAWN);  //Huntley 1
Alqaeda_Vehicle[1] = AddStaticVehicleEx(579, -797.8818, 2385.1846, 154.2919, -229.9800, 141, 141,TIME_RESPAWN); //Huntley 2
Alqaeda_Vehicle[2] = AddStaticVehicleEx(470, -787.5535, 2414.5571, 157.0912, 138.3600, 141, 141,TIME_RESPAWN); //Patriot 1
Alqaeda_Vehicle[3] = AddStaticVehicleEx(470, -795.9865, 2417.7041, 157.0912, 179.8200, 141, 141,TIME_RESPAWN); //Patriot 2
Alqaeda_Vehicle[4] = AddStaticVehicleEx(487, -774.9821, 2454.4431, 159.4948, 69.0600, 141, 141,TIME_RESPAWN); //Maverick
Alqaeda_Vehicle[5] = AddStaticVehicleEx(468, -807.8470, 2408.3521, 156.0690, -64.2000, 141, 141,TIME_RESPAWN); //Sanchez 1
Alqaeda_Vehicle[6] = AddStaticVehicleEx(468, -808.9468, 2410.2820, 156.0690, -64.2000, 141, 141,TIME_RESPAWN); //Sanchez 2
Alqaeda_Vehicle[7] = AddStaticVehicleEx(476, -672.3224, 2306.2429, 135.4090, 90.0000, 141, 141,TIME_RESPAWN); //Avión
Alqaeda_Vehicle[8] = AddStaticVehicleEx(433, -808.0089, 2344.5557, 149.5768, 189.9000, 141, 141,TIME_RESPAWN); //Barracks 1
//Bomberos
BomberosBAVeh[0] = AddStaticVehicleEx(407, 1251.9255, -1257.1556, 14.6953, 180.0000,3,1,TIME_RESPAWN);
BomberosBAVeh[1] = AddStaticVehicleEx(407, 1260.3900, -1257.1556, 14.6953, 180.0000,3,1,TIME_RESPAWN);
BomberosBAVeh[2] = AddStaticVehicleEx(407, 1269.0662, -1257.1556, 14.6953, 180.0000,3,1,TIME_RESPAWN);
BomberosBAVeh[3] = AddStaticVehicleEx(599, 1229.8209, -1266.6621, 14.1971, -90.0000,3,1,TIME_RESPAWN);
BomberosBAVeh[4] = AddStaticVehicleEx(599, 1229.8209, -1257.8932, 14.1971, -90.0000,3,1,TIME_RESPAWN);
BomberosBAVeh[5] = AddStaticVehicleEx(599, 1229.8209, -1248.5577, 14.1971, -90.0000,3,1,TIME_RESPAWN);
BomberosBAVeh[6] = AddStaticVehicleEx(596, 1244.2831, -1245.8859, 14.1971, 90.0000,3,1,TIME_RESPAWN);
BomberosBAVeh[7] = AddStaticVehicleEx(596, 1244.2831, -1250.4778, 14.1971, 90.0000,3,1,TIME_RESPAWN);
// Motoqueros de Palomino Creek
//Motos
MotorVehicle[1] = AddStaticVehicleEx(463, 2252.5457, 24.1084, 26.0763, 0.0000,0,0,TIME_RESPAWN);
MotorVehicle[2] = AddStaticVehicleEx(463, 2255.7483, 24.1084, 26.0763, 0.0000,0,0,TIME_RESPAWN);
MotorVehicle[3] = AddStaticVehicleEx(463, 2259.0771, 24.1084, 26.0763, 0.0000,0,0,TIME_RESPAWN);
MotorVehicle[4] = AddStaticVehicleEx(463, 2262.6614, 24.1084, 26.0763, 0.0000,0,0,TIME_RESPAWN);
MotorVehicle[5] = AddStaticVehicleEx(463, 2267.0664, 24.1084, 26.0763, 0.0000,0,0,TIME_RESPAWN);
MotorVehicle[6] = AddStaticVehicleEx(463, 2270.3159, 24.1084, 26.0763, 0.0000,0,0,TIME_RESPAWN);
//Camionetas
MotorVehicle[7] = AddStaticVehicleEx(459, 2273.6140, 24.6495, 26.6808, 0.0000,0,0,TIME_RESPAWN);
MotorVehicle[8] = AddStaticVehicleEx(422, 2277.4626, 24.6495, 26.4053, 0.0000,0,0,TIME_RESPAWN);
// Play Music Radio
PlayMusicVehicle[1] = AddStaticVehicleEx(582, 1227.3293, -919.1265, 43.0643, 100.0000,0,167,TIME_RESPAWN);
PlayMusicVehicle[2] = AddStaticVehicleEx(582, 1226.3455, -913.8019, 43.0643, 100.0000,0,167,TIME_RESPAWN);
PlayMusicVehicle[3] = AddStaticVehicleEx(582, 1225.3711, -908.3710, 43.0643, 100.0000,0,167,TIME_RESPAWN);
PlayMusicVehicle[4] = AddStaticVehicleEx(582, 1224.4329, -902.7770, 43.0643, 100.0000,0,167,TIME_RESPAWN);
// Cedar Block Piru
CBP_Vehicle[0] =	AddStaticVehicleEx(585, 2291.4524, -1752.9077, 12.9517, -90.0000,43,43,TIME_RESPAWN);
CBP_Vehicle[1] =	AddStaticVehicleEx(492, 2307.8767, -1752.9655, 13.0477, 90.0000,43,43,TIME_RESPAWN);
CBP_Vehicle[2] =	AddStaticVehicleEx(482, 2296.0588, -1785.5225, 13.5545, 0.0000,43,43,TIME_RESPAWN);
// Boulevard Mafia Crips
BMC_Vehicle[0] = AddStaticVehicleEx(567, 2076.6760, -1628.5967, 13.4382, 180.0000,106,106,TIME_RESPAWN);
BMC_Vehicle[1] = AddStaticVehicleEx(566, 2067.5293, -1636.4464, 13.3006, -90.0000,106,106,TIME_RESPAWN);
BMC_Vehicle[2] = AddStaticVehicleEx(482, 2060.2805, -1636.4464, 13.5912, -90.0000,106,106,TIME_RESPAWN);
// N/S Broadway XIV
Broadway_Vehicle[0] = AddStaticVehicleEx(567, 2637.5608, -1067.6263, 69.3960, 180.0000,0,0,TIME_RESPAWN);
Broadway_Vehicle[1] = AddStaticVehicleEx(412, 2630.0166, -1060.5239, 69.2992, -90.0000,0,0,TIME_RESPAWN);
Broadway_Vehicle[2] = AddStaticVehicleEx(482, 2622.3022, -1060.5239, 69.6280, -90.0000,0,0,TIME_RESPAWN);
// Varrio Longos 13
Longos_Vehicle[1] = AddStaticVehicleEx(412, 2486.7432, -1402.4177, 28.5596, -150.0000, 1, 1,TIME_RESPAWN);
Longos_Vehicle[2] = AddStaticVehicleEx(567, 2490.7483, -1401.6918, 28.5596, -150.0000, 1, 1,TIME_RESPAWN);
Longos_Vehicle[3] = AddStaticVehicleEx(482, 2482.3337, -1413.8984, 28.5596, 0.0000, 1, 1,TIME_RESPAWN);
//Jobs
//Terminal de Buses Los Ángeles
TBuses[0] = AddStaticVehicleEx(437, 1806.7970, -2023.5168, 13.5807, 90.0000,2,2,TIME_RESPAWN); //
TBuses[1] = AddStaticVehicleEx(437, 1806.7970, -2029.3892, 13.5807, 90.0000,2,2,TIME_RESPAWN); //
TBuses[2] = AddStaticVehicleEx(437, 1806.7970, -2035.1930, 13.5807, 90.0000,2,2,TIME_RESPAWN); //
TBuses[3] = AddStaticVehicleEx(437, 1806.7970, -2040.9349, 13.5807, 90.0000,2,2,TIME_RESPAWN); //
TBuses[4] = AddStaticVehicleEx(437, 1806.7970, -2046.7091, 13.5807, 90.0000,2,2,TIME_RESPAWN); //
TBuses[5] = AddStaticVehicleEx(437, 1806.7970, -2052.4348, 13.5807, 90.0000,2,2,TIME_RESPAWN); //
TBuses[6] = AddStaticVehicleEx(437, 1806.7970, -2058.1213, 13.5807, 90.0000,2,2,TIME_RESPAWN); //
TBuses[7] = AddStaticVehicleEx(437, 1806.7970, -2063.8223, 13.5807, 90.0000,2,2,TIME_RESPAWN); //
//Taxistas
TaxiTrans[0] = AddStaticVehicleEx(551, 1779.2823, -1930.8660, 13.1422, -90.0000,1,1,TIME_RESPAWN);
Letrero_Tax_01 = CreateObject(19310, 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Letrero_Tax_01, TaxiTrans[0], 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);

TaxiTrans[1] = AddStaticVehicleEx(551, 1779.2823, -1924.9669, 13.1422, -90.0000,1,1,TIME_RESPAWN);
Letrero_Tax_02 = CreateObject(19310, 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Letrero_Tax_02, TaxiTrans[1], 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);

TaxiTrans[2] = AddStaticVehicleEx(551, 1779.2823, -1918.9126, 13.1422, -90.0000,1,1,TIME_RESPAWN);
Letrero_Tax_03 = CreateObject(19310, 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Letrero_Tax_03, TaxiTrans[2], 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);

TaxiTrans[3] = AddStaticVehicleEx(551, 1779.2823, -1912.7672, 13.1422, -90.0000,1,1,TIME_RESPAWN);
Letrero_Tax_04 = CreateObject(19310, 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Letrero_Tax_04, TaxiTrans[3], 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);

TaxiTrans[4] = AddStaticVehicleEx(551, 1779.2823, -1906.9131, 13.1422, -90.0000,1,1,TIME_RESPAWN);
Letrero_Tax_05 = CreateObject(19310, 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Letrero_Tax_05, TaxiTrans[4], 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);

TaxiTrans[5] = AddStaticVehicleEx(551, 1779.2823, -1900.8844, 13.1422, -90.0000,1,1,TIME_RESPAWN);
Letrero_Tax_06 = CreateObject(19310, 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Letrero_Tax_06, TaxiTrans[5], 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);

TaxiTrans[6] = AddStaticVehicleEx(551, 1779.2823, -1894.9222, 13.1422, -90.0000,1,1,TIME_RESPAWN);
Letrero_Tax_07 = CreateObject(19310, 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Letrero_Tax_07, TaxiTrans[6], 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);

TaxiTrans[7] = AddStaticVehicleEx(551, 1779.2823, -1889.0099, 13.1422, -90.0000,1,1,TIME_RESPAWN);
Letrero_Tax_08 = CreateObject(19310, 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);
AttachObjectToVehicle(Letrero_Tax_08, TaxiTrans[7], 0.00000, -0.48430, 0.98920,   0.00000, 0.00000, 0.00000);


// Repartidores Los Ángeles
TruckerVehicles[0] = AddStaticVehicleEx(414, 2191.0059, -2568.9607, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[1] = AddStaticVehicleEx(414, 2191.0059, -2564.1445, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[2] = AddStaticVehicleEx(414, 2191.0059, -2558.8730, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[3] = AddStaticVehicleEx(414, 2191.0059, -2553.9873, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[4] = AddStaticVehicleEx(414, 2191.0059, -2549.0320, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[5] = AddStaticVehicleEx(414, 2191.0059, -2543.8550, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[6] = AddStaticVehicleEx(414, 2191.0059, -2539.0940, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[7] = AddStaticVehicleEx(414, 2191.0059, -2533.7322, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[8] = AddStaticVehicleEx(414, 2191.0059, -2528.7749, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[9] = AddStaticVehicleEx(414, 2191.0059, -2523.8147, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[10] = AddStaticVehicleEx(414, 2191.0059, -2518.8774, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[11] = AddStaticVehicleEx(414, 2191.0059, -2514.0825, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[12] = AddStaticVehicleEx(414, 2191.0059, -2508.6528, 13.5338, -89.1000,-1,-1,TIME_RESPAWN); //Mule
// Camioneros Palomino Creek
CamionerosPC[0] = AddStaticVehicleEx(578, 2381.0667, -86.6978, 27.1664, 0.0000,109,109,TIME_RESPAWN);
CamionerosPC[1] = AddStaticVehicleEx(578, 2375.1123, -86.6978, 27.1664, 0.0000,109,109,TIME_RESPAWN);
CamionerosPC[2] = AddStaticVehicleEx(578, 2369.1501, -86.6978, 27.1664, 0.0000,109,109,TIME_RESPAWN);
CamionerosPC[3] = AddStaticVehicleEx(578, 2363.1387, -86.6978, 27.1664, 0.0000,109,109,TIME_RESPAWN);

//Heladero
CochesHeladero[10] = AddStaticVehicleEx(423, 2391.0500, -1484.3591, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
CochesHeladero[11] = AddStaticVehicleEx(423, 2391.1855, -1490.7537, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
CochesHeladero[12] = AddStaticVehicleEx(423, 2391.0601, -1497.4470, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
CochesHeladero[13] = AddStaticVehicleEx(423, 2391.2441, -1503.7714, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
CochesHeladero[14] = AddStaticVehicleEx(423, 2391.6133, -1510.3080, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
//Conductor de Tren
TrenVEH[0] = AddStaticVehicleEx(538,1695.9043,-1953.6531,14.8756,200.0,-1,-1, 10); // Tren dirección a San Francisco!
// Vagones para decorar el entorno de los espacios vacios
TrenVEH[1] = AddStaticVehicleEx(590, 2788.9971, 1752.2238, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[2] = AddStaticVehicleEx(590, 2788.9971, 1770.3345, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[3] = AddStaticVehicleEx(590, 2811.1831, 1694.0839, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[4] = AddStaticVehicleEx(590, 2811.1831, 1675.2207, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[5] = AddStaticVehicleEx(590, 2811.1831, 1656.1866, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[6] = AddStaticVehicleEx(590, 2811.1831, 1712.3131, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[7] = AddStaticVehicleEx(590, 2843.1670, 1686.1538, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[8] = AddStaticVehicleEx(590, 2863.5132, 1610.7529, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[9] = AddStaticVehicleEx(590, 2863.5132, 1629.8734, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[10] = AddStaticVehicleEx(590, 2863.5132, 1648.1846, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[11] = AddStaticVehicleEx(590, 2863.5132, 1666.2174, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[12] = AddStaticVehicleEx(590, 2894.5288, 1634.8884, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[13] = AddStaticVehicleEx(590, 2894.5288, 1616.5598, 12.2498, 0.0000,-1,-1, 100);
TrenVEH[14] = AddStaticVehicleEx(590, -1934.0948, 80.7713, 27.2802, 0.0000, -1, -1, 100);
TrenVEH[15] = AddStaticVehicleEx(590, -1934.0948, 98.9879, 27.2802, 0.0000, -1, -1, 100);
TrenVEH[16] = AddStaticVehicleEx(590, -1930.2393, 89.0144, 27.2802, 0.0000, -1, -1, 100);
//Basureros
C_Basurero[0] = AddStaticVehicleEx(408, 2191.0020, -1971.9301, 14.1059, 180.0000, 1, 1, 100);
C_Basurero[1] = AddStaticVehicleEx(408, 2186.1138, -1971.9301, 14.1059, 180.0000, 1, 1, 100);
C_Basurero[2] = AddStaticVehicleEx(408, 2199.1074, -1984.2244, 14.1059, 90.0000, 1, 1, 100);
C_Basurero[3] = AddStaticVehicleEx(408, 2199.1074, -1990.1816, 14.1059, 90.0000, 1, 1, 100);
C_Basurero[4] = AddStaticVehicleEx(408, 2199.1074, -2002.6729, 14.1059, 90.0000, 1, 1, 100);
C_Basurero[5] = AddStaticVehicleEx(408, 2199.1074, -1996.5621, 14.1059, 90.0000, 1, 1, 100);
//Cosechadores
AddStaticVehicleEx(532, -363.1742, -1413.1494, 26.6519, 85.6800, -1, -1, 100);
AddStaticVehicleEx(532, -364.0211, -1424.9830, 26.6519, 85.6800, -1, -1, 100);
AddStaticVehicleEx(532, -364.9721, -1437.1317, 26.6519, 85.6800, -1, -1, 100);
AddStaticVehicleEx(532, -365.9400, -1449.5850, 26.6519, 85.6800, -1, -1, 100);
//Jardinero
koson = CreatePickup(1210, 23, 2043.81250, -1247.01160,23.9810, -1);
cesped = CreatePickup(1274, 23, 2043.81250, -1249.0247,23.9810, -1);
koscar[0] =  AddStaticVehicleEx(572,2054.3662, -1249.2936, 23.4114, 0.0000,86,86, 1); // gaz
koscar[1] =  AddStaticVehicleEx(572,2051.9993, -1249.2936, 23.4114, 0.0000,86,86, 1); // gaz
koscar[2] =  AddStaticVehicleEx(572,2049.3794, -1249.2936, 23.4114, 0.0000,86,86, 1); // gaz
koscar[3] =  AddStaticVehicleEx(572,2047.0131, -1249.2936, 23.4114, 0.0000,86,86, 1); // gaz
//---------------------------> Otros
// Rentas Los Ángeles
RentaVehicle[0] = AddStaticVehicleEx(479, 1895.1353, -1872.1801, 13.3634, 90.0000, 68, 68,TIME_RESPAWN);
RentaVehicle[1] = AddStaticVehicleEx(404, 1895.2015, -1868.1758, 13.3106, 90.0000, 68, 68,TIME_RESPAWN);
RentaVehicle[2] = AddStaticVehicleEx(405, 1889.4323, -1854.0052, 13.4669, 180.0000, 68, 68,TIME_RESPAWN);
RentaVehicle[3] = AddStaticVehicleEx(422, 1895.9021, -1859.4137, 13.4882, 90.0000, 68, 68,TIME_RESPAWN);
RentaVehicle[4] = AddStaticVehicleEx(426, 1885.3815, -1853.9363, 13.4669, 180.0000, 68, 68,TIME_RESPAWN);
RentaVehicle[5] = AddStaticVehicleEx(436, 1877.2495, -1853.7542, 13.4669, 180.0000, 68, 68,TIME_RESPAWN);
RentaVehicle[6] = AddStaticVehicleEx(445, 1881.3173, -1854.0978, 13.4669, 180.0000, 68, 68,TIME_RESPAWN);
RentaVehicle[7] = AddStaticVehicleEx(458, 1895.3435, -1863.9653, 13.3083, 90.0000, 68, 68,TIME_RESPAWN);
// Rentas San Francisco
RentaVehicle[8] = AddStaticVehicleEx(479, -1921.8119, 278.7132, 40.8639, -90.0000, 106, 106,TIME_RESPAWN);
RentaVehicle[9] = AddStaticVehicleEx(404, -1921.8119, 282.4289, 40.8639, -90.0000, 106, 106,TIME_RESPAWN);
RentaVehicle[10] = AddStaticVehicleEx(405, -1921.8119, 286.2718, 40.8639, -90.0000, 106, 106,TIME_RESPAWN);
RentaVehicle[11] = AddStaticVehicleEx(422, -1921.8119, 290.2570, 40.8639, -90.0000, 106, 106,TIME_RESPAWN);
RentaVehicle[12] = AddStaticVehicleEx(426, -1921.8119, 294.2490, 40.8639, -90.0000, 106, 106,TIME_RESPAWN);
RentaVehicle[13] = AddStaticVehicleEx(436, -1912.8523, 278.7132, 40.8639, 90.0000, 106, 106,TIME_RESPAWN);
RentaVehicle[14] = AddStaticVehicleEx(445, -1921.8119, 298.4171, 40.8639, -90.0000, 106, 106,TIME_RESPAWN);
RentaVehicle[15] = AddStaticVehicleEx(458, -1912.8523, 282.4289, 40.8639, 90.0000, 106, 106,TIME_RESPAWN);
// Rentas en el Aeropuerto Internacional
RentaVehicle[16] = AddStaticVehicleEx(445, 1560.4036, -2308.7185, 13.3829, 90.0000, 6, 6,TIME_RESPAWN);
RentaVehicle[17] = AddStaticVehicleEx(445, 1560.4036, -2315.5500, 13.3829, 90.0000, 7, 7,TIME_RESPAWN);
RentaVehicle[18] = AddStaticVehicleEx(445, 1560.4036, -2318.8535, 13.3829, 90.0000, 17, 17,TIME_RESPAWN);
RentaVehicle[19] = AddStaticVehicleEx(445, 1560.4036, -2328.5547, 13.3829, 90.0000, 44, 44,TIME_RESPAWN);
RentaVehicle[20] = AddStaticVehicleEx(445, 1560.4036, -2335.1140, 13.3829, 90.0000, 163, 163,TIME_RESPAWN);
// Rentas en Palomino Creek
RentaVehicle[21] = AddStaticVehicleEx(445, 2447.8782, 118.7480, 26.4631, 180.0000, 135, 135,TIME_RESPAWN);
RentaVehicle[22] = AddStaticVehicleEx(445, 2436.1443, 118.7480, 26.4631, 180.0000, 115, 115,TIME_RESPAWN);
RentaVehicle[23] = AddStaticVehicleEx(445, 2439.9214, 118.7480, 26.4631, 180.0000, 213, 213,TIME_RESPAWN);
RentaVehicle[24] = AddStaticVehicleEx(445, 2443.8828, 118.7480, 26.4631, 180.0000, 128, 128,TIME_RESPAWN);
//Autos de chocones
VortexVehicle[0] = AddStaticVehicleEx(539,396.9688, -2054.3696, 7.4113, 180.0000,0,1,TIME_RESPAWN);
VortexVehicle[1] = AddStaticVehicleEx(539,393.2085, -2054.1755, 7.4113, 180.0000,3,125,TIME_RESPAWN);
VortexVehicle[2] = AddStaticVehicleEx(539,389.4496, -2054.2319, 7.4113, 180.0000,6,3,TIME_RESPAWN);
VortexVehicle[3] = AddStaticVehicleEx(539,385.5569, -2054.3420, 7.4113, 180.0000,144,7,TIME_RESPAWN);
VortexVehicle[4] = AddStaticVehicleEx(539,381.6167, -2054.3047, 7.4113, 180.0000,6,17,TIME_RESPAWN);
//Autos concesionarios
AutosConces[0] = AddStaticVehicleEx(493,2885.7820, -1979.0085, 9.6502, 359.7549,0,3,TIME_RESPAWN);
//*******************MAPEOS DE PUERTAS Y OBJETOS*******************
//********Elevadores********
elevadorns = CreateDynamicObject(19454, 816.23108, -2068.20703, 11.83470,   0.00000, 90.00000, 0.00000);
// Concesionaria Grotti
elevadorcg = CreateDynamicObject(18755, 542.29300, -1296.64026, 18.18355,   0.00000, 0.00000, 90.00000);
//********Portones********
 // Portón de Nathan Steele
porton_ns1 = CreateDynamicObject(980, 836.57581, -1843.10083, 13.98331,   0.00000, 0.00000, 180.00000); // Entrada Principal
porton_ns2 = CreateDynamicObject(980, 836.31250, -2065.30396, 14.56855,   0.00000, 0.00000, 180.00000); // Segunda Entrada
// Portón de Shadder Ferreras
porton_sf1 = CreateDynamicObject(980, 2902.44287, -792.23291, 12.44275,   0.00000, 0.00000, -90.00000); // Entrada Principal
porton_sf2 = CreateDynamicObject(980, 3052.19629, -792.22852, 11.34650,   0.00000, 0.00000, 90.00000); // Segunda Entrada
// Portón de Sweet Speed
porton_ss1 = CreateDynamicObject(975, 1003.75085, -643.76111, 121.69682,   0.00000, 0.00000, 22.14000);
//*******************Celdas*******************
celdagate1 = CreateDynamicObject(19303, 320.83261, 317.07980, 999.43982,   0.00000, 0.00000, 90.00000); //Celda 1 - Dep. Dillimore
celdagate2 = CreateDynamicObject(19303, 1320.11169, -791.13708, 1084.24451,   0.00000, 0.00000, 0.00000); //Celda 2 - Interior SWAT
celdagate3 = CreateDynamicObject(976, 168.70000, 1944.80005, 3866.30005,   0.00000, 0.00000, 0.00000); //Celda 3 - USMC 1
celdagate4 = CreateDynamicObject(976, 195.39999, 1944.80005, 3869.60010,   0.00000, 0.00000, 0.00000); //Celda 3 - USMC 2
//*******************BANCO LS*******************
Bankito = CreateObject(5720, 982.34, -1169.66, 32.82,   0.00, 0.00, 0.00);
SetObjectMaterial(Bankito, 2, 3942, "bistro", "ahoodfence2", 0);
SetObjectMaterial(Bankito, 4, 16016, "des_n", "ranchwall1", 0);
SetObjectMaterial(Bankito, 5, 16005, "des_stownmain2", "des_redslats", 0);
SetObjectMaterial(Bankito, 6, 964, "cj_crate_will", "CJ_FLIGHT_CASE", 0);
SetObjectMaterial(Bankito, 7, 16021, "des_geyser", "shingles1", 0);
SetObjectMaterial(Bankito, 8, 16005, "des_stownmain2", "sanruf", 0);
SetObjectMaterial(Bankito, 9, 6295, "lawland2", "lightglass", 0);
//*******************Mapas de Interes de Unity*******************
CreateDynamicObject(1444, 1711.10828, -1888.84167, 13.36670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1444, 1719.21936, -1888.48071, 13.36670,   0.00000, 0.00000, 0.00000);
//*******************LAPD Prisión*******************
fen1 = CreateDynamicObject(969,1417.90002441,-1554.90002441,4334.70019531,0.00000000,269.74975586,358.50000000); //object(electricgate) (1)
fen2 = CreateDynamicObject(969,1425.90002441,-1555.00000000,4334.70019531,0.00000000,269.74743652,359.49755859); //object(electricgate) (2)
fen3 = CreateDynamicObject(969,1429.50000000,-1554.80004883,4334.70019531,0.00000000,269.74731445,359.49462891); //object(electricgate) (3)
fen4 = CreateDynamicObject(969,1422.19995117,-1567.00000000,4334.60009766,0.00000000,269.74743652,179.99456787); //object(electricgate) (4)
fen5 = CreateDynamicObject(969,1414.80004883,-1566.69995117,4334.60009766,0.00000000,269.74182129,179.99450684); //object(electricgate) (5)
fen6 = CreateDynamicObject(969,1430.19995117,-1566.69995117,4334.70019531,0.00000000,269.74182129,179.99450684); //object(electricgate) (6)
JDoor1 = CreateButton(1418.19995117,-1555.09997559,4340.79980469, 0.0);
JDoor2 = CreateButton(1426.00000000,-1555.09997559,4340.79980469, 0.0);
JDoor3 = CreateButton(1429.80004883,-1554.90002441,4340.79980469, 0.0);
JDoor4 = CreateButton(1425.80004883,-1566.50000000,4340.79980469, 180);
JDoor5 = CreateButton(1433.80004883,-1566.40002441,4340.79980469, 180);
JDoor6 = CreateButton(1418.09997559,-1566.40002441,4340.79980469, 180);
//*******************CIA*******************
cia1 = CreateDynamicObject(1536, 244.81964, 72.43684, 1002.63965,   0.00000, 0.00000, 0.00000);
cia2 = CreateDynamicObject(1536, 247.82359, 72.47114, 1002.63959,   0.00000, 0.00000, 180.00000);
rejacia = CreateDynamicObject(980, 1269.97668, -1838.51514, 15.06336,   0.00000, 0.00000, 180.00000); //cerrada
buttompna = CreateButton(247.64801,72.34955,1004.14624, 0.0);
buttompna2 = CreateButton(247.59158,72.80640,1004.14624, 180);
//*******************MAFIA RUSA*******************
portoru = CreateDynamicObject(2990, -2281.21021, 120.32613, 38.03923,   0.00000, 0.00000, 89.07965);
//*******************United States Marine Corps*******************
usmc1 = CreateDynamicObject(980, 94.38630, 2071.34570, 18.95180,   0.00000, 0.00000, 90.00000); // Cerrada
usmc2 = CreateDynamicObject(980, 1490.58777, -1501.39136, 15.16192,   0.00000, 0.00000, -90.00000); // Central
//*******************GOBIERNO*******************
gobiernogate = CreateDynamicObject(980, 1286.73914, -2056.57129, 60.36075,   0.00000, 0.00000, 90.00000);
//------->Botones y Puertas AININT Nueva HQ - (HQ By. Aaron - Script By. Killian)
//--->1
AININTDoor1BTN = CreateButton(278.92001, -1488.94543, 4996.14844, 180.00000);
AININTDoor1 = CreateDynamicObject(1495, 276.78461, -1488.97546, 4994.61914,   0.00000, 0.00000, 0.00000);
//--->2
AININTDoor2BTN = CreateButton(269.28510, -1502.51404, 4995.94873, 180.00000);
AININTDoor2 = CreateDynamicObject(1495, 269.50909, -1502.52991, 4994.61914,   0.00000, 0.00000, 0.00000);
//--->3
AININTDoor3BTN = CreateButton(222.59450, -1487.10645, 5005.82959, 0.00000);
AININTDoor3 = CreateDynamicObject(1495, 223.07930, -1488.93042, 5004.55371,   0.00000, 0.00000, 90.00000);
//--->4
AININTDoor4BTN = CreateButton(213.71500, -1508.40552, 5000.13184, 180.00000);
AININTDoor4 = CreateDynamicObject(1495, 211.59100, -1508.53979, 4998.76611,   0.00000, 0.00000, 0.00000);
//--->5
AININTDoor5BTN = CreateButton(230.84061, -1489.28564, 5011.59033, -90.00000);
AININTDoor5 = CreateDynamicObject(1495, 230.89220, -1488.88452, 5010.36133,   0.00000, 0.00000, 90.00000);
//*******************LAPD*******************
// Puerta 1
eastlobby1 = CreateDynamicObject(1536,253.14941406,110.59960938,1002.21502686,0.00000000,0.00000000,270.00000000,-1,10,-1,100.0);
eastlobby2 = CreateDynamicObject(1536,253.18457031,107.59960938,1002.21502686,0.00000000,0.00000000,90.00000000,-1,10,-1,100.0);
// Puerta 2
westlobby1 = CreateDynamicObject(1536,239.71582031,116.09179688,1002.21502686,0.00000000,0.00000000,90.00000000,-1,10,-1,100.0);
westlobby2 = CreateDynamicObject(1536,239.67968750,119.09960938,1002.21502686,0.00000000,0.00000000,269.98901367,-1,10,-1,100.0);
// Vestuario
locker1 = CreateDynamicObject(1536,267.29980469,112.56640625,1003.61718750,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0);
locker2 = CreateDynamicObject(1536,264.29980469,112.52929688,1003.61718750,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0);
// Cámaras de Seguridad
cctv1 = CreateDynamicObject(1536,264.44921875,115.79980469,1003.61718750,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0);
cctv2 = CreateDynamicObject(1536,267.46875000,115.83691406,1003.61718750,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0);
// Oficina del Jefe
chief1 = CreateDynamicObject(1536,229.59960938,119.50000000,1009.21875000,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0);
chief2 = CreateDynamicObject(1536,232.59960938,119.53515625,1009.21875000,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0);

eastin = CreateButton(253.44921875,110.59960938,1003.79998779,90.00000000); // Botón 1

westout = CreateButton(239.79492188,116.18457031,1003.87286377,90.00000000); // Botón 2
westin = CreateButton(239.32031250,116.27441406,1003.87286377,270.00000000); // Botón 3 del otro lado igual que el botón 2
eastout = CreateButton(253.00000000,110.59960938,1003.79998779,270.00000000); // Botón del 1 al ingresar, es decir ext
elevator = CreateButton(275.83984375,120.94921875,1005.12280273,90.00000000); // Elevador
cctvin = CreateButton(264.55566406,115.97949219,1005.12280273,179.99450684); // Cámaras adentro
cctvout = CreateButton(264.55566406,115.69531250,1005.12280273,0.00000000); // Cámaras 2 adentro
lockerin = CreateButton(267.21679688,112.40917969,1005.12280273,0.00000000); // Vestuario Ext
lockerout = CreateButton(267.21679688,112.66992188,1005.12280273,179.99450684); // Vestuario Int
chiefout = CreateButton(232.50000000,119.38476562,1010.81384277,0.00000000); // Oficinal del jefe interior
chiefin = CreateButton(229.67089844,119.66992188,1010.81384277,179.99450684); // Oficina del jefe interior 2
roofkey = CreateButton(1565.93652344,-1667.35058594,28.85165977,179.99450684); // Elevador exterior vw 0
garagekey = CreateButton(1567.14550781,-1689.62011719,1645.8541,0.00000000);
pdgate1 = CreateDynamicObject(980, 1547.68433, -1627.64075, 14.98080,   0.00000, 0.00000, 90.00000);
//*******************LSTV*******************
tvp1 = CreateDynamicObject(969,774.11444092,-1384.98632812,12.92022705,0.00000000,0.00000000,0.00000000);
tvp = CreateDynamicObject(976, 781.77209500,-1330.31884800,12.68660500,0.00000000,0.00000000,-180.85939924);
//*******************santana*******************
SantanaReja = CreateDynamicObject(980, 1245.56, -766.85, 94.06,   0.00, 0.00, 0.00);
//*******************Alqaeda*******************
AlqaedaReja = CreateDynamicObject(980, 1023.59998, -371.70001, 75.30000,   0.00000, 0.00000, 181.00000);
//*******************mecanicos*******************
mecareja = CreateDynamicObject(975, 1051.63110, -1439.83557, 13.94245,   0.00000, 0.00000, 83.60400);
//*******************yakuza*******************
yakuzagate = CreateDynamicObject(980, 321.32, -1188.11, 78.08,   0.00, 0.00, 218.45);
//*******************rusos*******************
RejaRusa = CreateDynamicObject(980, -1051.45422, -1313.16553, 130.20287,   0.00000, 0.00000, 5.21200);
//*******************hospital*******************
hospitalgate = CreateDynamicObject(980,1141.40002441,-1293.69995117,15.39999962,0.00000000,0.00000000,0.00000000); //object(airportgate) (1)
//reja lcn
rejalcn =  CreateDynamicObject(980, 2106.68213, 1862.31934, 12.30965,   0.00000, 0.00000, 73.79410);
rejalcn2 = CreateDynamicObject(980, 2107.68262, 1969.38855, 12.19972,   0.00000, 0.00000, 90.00000);
////*******************PEAJE LS-SF*****************************
PeajeLA_SF1 = CreateDynamicObject(968, 58.27050, -1527.54785, 4.86570,   0.00000, -91.22000, -99.42000);
PeajeLA_SF2 = CreateDynamicObject(968, 56.23930, -1536.98804, 4.86570,   0.00000, -269.32001, -98.40001);
PeajeLA_LV1 = CreateDynamicObject(968, 1748.83765, 534.92969, 26.97870,   0.00000, 90.00000, -19.48000);
PeajeLA_LV2 = CreateDynamicObject(968, 1734.72253, 530.06592, 27.33740,   0.00000, -90.00000, -18.00000);
//*******************BANCO Los Ángeles*******************
Pbankazo = CreateDynamicObject(2634, 999.05, -1170.19, 13.30,   0.00, 0.00, 90.00);
//*******************SISTEMA DE ROBO*******************
roboV = CreatePickup(1239,23,2618.5164,-1071.5796,69.7339); //Pos Robo
roboD = CreatePickup(1239,23,1406.8153,-1372.5907,8.1257); //Pos dejar cosas
//*******************LEÑADOR*******************
lena = CreatePickup(1210,23,-407.2330,-1426.3041,26.3147);
LenadorU = CreatePickup(1239,23,-572.4534,-1498.0902,11.0859);
Arbolvivo[0] = CreateObject(726, -528, -1453.8994140625, 9.8999996185303, 0, 0, 0);
Arbolvivo[1] = CreateObject(763, -513.7998046875, -1470.7998046875, 10.800000190735, 0, 0, 0);
Arbolvivo[2] = CreateObject(766, -525.8994140625, -1473.5, 9.8999996185303, 0, 0, 0);
Arbolvivo[3] = CreateObject(727, -514.69921875, -1457.099609375, 10.89999961853, 0, 0, 0);
Talararbol[0] = CreatePickup(1239,2,-527.2280,-1455.4230,10.9610);
Talararbol[1] = CreatePickup(1239,2,-515.0847,-1470.9744,11.6864);
Talararbol[2] = CreatePickup(1239,2,-527.0183,-1472.3345,10.7982);
Talararbol[3] = CreatePickup(1239,2,-515.7106,-1457.4116,11.8509);

print("\t- Puertas y botones cargados correctamente sin errores.");
//*******************FIN MAPEOS*******************

	for(new h = 0; h < sizeof(fINFO); h++)
	{
		if(fINFO[h][FamilyUSafe] > 0)
		{
			fINFO[h][FamilyPickup] = CreatePickup(1239, 23, fINFO[h][FamilySafe][0], fINFO[h][FamilySafe][1], fINFO[h][FamilySafe][2]);
		}
		if(fINFO[h][FamilyEntrance][0] != 0.0 && fINFO[h][FamilyEntrance][1] != 0.0)
		{
		    fINFO[h][FamilyEntrancePickup] = CreatePickup(1318, 23, fINFO[h][FamilyEntrance][0], fINFO[h][FamilyEntrance][1], fINFO[h][FamilyEntrance][2]);
			format(string, sizeof(string), "%s", fINFO[h][FamilyName]);
			fINFO[h][FamilyEntranceText] = CreateDynamic3DTextLabel(string,COLOR_YELLOW,fINFO[h][FamilyEntrance][0], fINFO[h][FamilyEntrance][1], fINFO[h][FamilyEntrance][2]+0.6,4.0);
		}
		LoadGangVehicles(h);
	}
	for(new h = 0; h < sizeof(Points); h++)
	{
		if(Points[h][Type] == 3)
		{
			format(string, sizeof(string), " MARIHUANA DISPONIBLE: %d/9000.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 1;
		}
		else if(Points[h][Type] == 4)
		{
			format(string, sizeof(string), " COCAINA DISPONIBLE: %d/9000.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 2;
		}
		CreatePickup(1239, 23, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]);
	}
	new text_info[128];
	for(new d = 0; d < sizeof(CDSInfo); d++)
	{
		if(CDSInfo[d][cdEntranceX] != 0.0 && CDSInfo[d][cdEntranceY] != 0.0)
		{
			CDSInfo[d][cdPickupID] = CreateDynamicPickup(1239, 1, CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]);
			if(CDSInfo[d][cdOwned])
			{
	            format(text_info, sizeof(text_info),"{2EDFFF}Concesionario Nº {FFFFFF}%d\n{2EDFFF}Nombre: {FFFFFF}%s\n{2EDFFF}Dueño: {FFFFFF}%s", d,CDSInfo[d][cdMessage], CDSInfo[d][cdOwner]);
	            CDSInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_BLUED,CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]+0.75,2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
			else
			{
	            format(text_info, sizeof(text_info),"{2EDFFF}¡Concesionario Nº {FFFFFF}%d {2EDFFF}en venta!\n{2EDFFF}Nombre: {FFFFFF}%s\n{2EDFFF}Precio:{FFFFFF} %d", d,CDSInfo[d][cdMessage], CDSInfo[d][cdPrice]);
	            CDSInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_BLUED,CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]+0.75,2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
		}
		for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	    {
			if (CDSInfo[d][cdVehicleModel][v] != 0)
			{
		        new carcreated = CreateVehicle(CDSInfo[d][cdVehicleModel][v], CDSInfo[d][cdVehicleSpawnX][v], CDSInfo[d][cdVehicleSpawnY][v], CDSInfo[d][cdVehicleSpawnZ][v], CDSInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		        format(text_info, sizeof(text_info), "{FFFFFF}¡Vehículo en venta!\n{FFFFFF}Nombre: {2EDFFF}%s\n{FFFFFF}Precio: {2EDFFF}$%d", GetVehicleName(carcreated), CDSInfo[d][cdVehicleCost][v]);
                CDSInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_MAGENTA,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
                CDSInfo[d][cdVehicleId][v] = carcreated;
			}
		}
	}


	InfoEvento[EventRequest] = 999;
	InfoEvento[EventCreator] = 999;
	InfoEvento[EventStaff][0] = 999;
	InfoEvento[EventStaff][1] = 999;
	InfoEvento[EventStaff][2] = 999;
	InfoEvento[EventStaff][3] = 999;
	InfoEvento[EventStaff][4] = 999;

	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
		gTime = tmphour;
	}
	gWeather = 10;
	ManualVehicleEngineAndLights();
 return 1;
}

doesAccountExist(account_name[]){
	new sz_accStr[MAX_PLAYER_NAME + 12];
	format(sz_accStr, sizeof(sz_accStr), USERFILEOLD, account_name);
	if(fexist(sz_accStr)) {
		new File: f_Handle = fopen(sz_accStr, io_read);
		if(flength(f_Handle) > 0) {
			fclose(f_Handle);
			return 1;
		}
		fclose(f_Handle);
	}
	return 0;
}

function SyncTime()
{
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		WeatherCalling++;
		if(WeatherCalling > 3)
		{
		    WeatherCalling = 0;
		    new rand;
		    rand = random(20);
		    switch(rand)
		    {
          		case 0:{ SetWeather(11); gWeather = 11; }
		        case 8:{ SetWeather(12); gWeather = 12; }
		        case 9:{ SetWeather(5); gWeather = 5; }
		        case 16:{ SetWeather(4); gWeather = 4; }
		        case 19:{ SetWeather(20); gWeather = 20; }
		        default:{ SetWeather(rand); gWeather = rand; }
		    }
		}
		ghour = tmphour;
		if(realtime)
		{
			SetWorldTime(tmphour);
			gTime = tmphour;
		}
	}
}


//*******************Función: SubsiOn*******************
timer SyncUp[60000]()
{
    new hour,minuite,second;
    if(SubsiLeft >= 1)
	{
	    SubsiLeft--;
	}
	else
	{
        SubsiLeft = 60;
	}
	SyncTime();
	SyncMinTime();
	DollahScoreUpdate();
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	if(SubsiLeft == 0) Subsidio();
	foreach(Player, i)
	{
	   	if(Info[i][pBeingSentenced] > 1) Info[i][pBeingSentenced]--;
	   	if(Info[i][pBeingSentenced] == 1)
		{
			TogglePlayerControllable(i, true);
			SetPVarInt(i, "IsFrozen", 0);
			SetPlayerPos(i, 1452.7971,-1757.7694,13.5469);
			SetPlayerFacingAngle(i, 278.701);
			SendClientMessageEx(i, COLOR_WHITE, "Ningún Juez ha asistido al juicio, eres libre de manera legal.");
			Info[i][pBeingSentenced] = 0;
		}
	}
}
function SyncMinTime()
{
	new hour, minute, second;
	gettime(hour, minute, second);
	foreach(Player, i)
	{
	    if(GetPlayerVirtualWorld(i) == 133769)
		{
		    SetPlayerWeather(i, 45);
			SetPlayerTime(i, 0, 0);
		}
		else
		{
			SetPlayerTime(i, hour, minute);
		}
	}
	return 1;
}
stock GetClosestPlayer(p1){
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(Player, x){
		if(x != p1){
			dis2 = GetDistanceBetweenPlayers(x,p1);
			if(dis2 < dis && dis2 != -1.00){
				dis = dis2;
				player = x;
			}
		}
	}
	return player;
}

function Subsidio()
{
	SubsiLeft = 60;
	TotalUptime += 1;
	GiftAllowed = 1;
	SaveStuff();
	SaveServerStats();
	FMemberCounter();
	SubsiOn = 1;
	SetTimer("SubsiOOF", 360000, false);
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
		    if(Info[i][pLevel] >= 1)
			{
			    Info[i][YaCobre] = 0;
                SendClientMessageEx(i, COLOR_YELLOW2, "Notificación:{FFFFFF} Los subsidios fueron entregados, por favor confirme sus datos. (/Subsidio)");
                Info[i][pConnectTime] += 1;
				if(Info[i][pConnectTime] == 5){
					Info[i][pWRestricted] = 0;
					SendClientMessageEx(i, COLOR_GREY, "Cumpliste 5 horas de juego, tu restricción de armas fue retirada.");
					SafeDialogEx(i,CAL_ROL,DIALOG_STYLE_INPUT,"{FFFF00}• Encuesta","{FFFFFF}Felicidades, has jugado 5 horas en la comunidad, por eso, te daremos la opción de calificar la calidad de rol\ndesde tu punto de vista.\n\nCon la calificación, el equipo administrativo evaluará el resultado obteniendo un por ciento para mejorar\nla estadía de cada usuario.\n\nCalifique el servidor del 1 al 10:", "Enviar", "");
				}
				if(Info[i][pAdiccion] > 0){
				    Info[i][pAdiccion] -= 2;
				}
				if(Info[i][pWRestricted] > 0)
				{
				    Info[i][pWRestricted]--;
					if(Info[i][pWRestricted] == 0) SendClientMessageEx(i, COLOR_GREY, "Aún te quedan horas de restricción!");
				}
			}
		}
	}
	return 1;
}

function SubsiOOF()
{
    SubsiOn = 0;
}

    strtok(const string[], &index){
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' ')){
		index++;
	}
	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

function OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
	    new INI:File = INI_Open(UserPath(playerid));
	    INI_SetTag(File,"data");
     	INI_WriteInt(File,"Password",udb_hash(password));
		INI_Close(File);
		TotalRegister++;
		PlayerLogin(playerid);
	}
	return 1;
}

OnPlayerSavedStats(playerid)
{
    if(GetPVarInt(playerid, "TempName") == 1) return 1;
    if(!gPlayerLogged{playerid}) return 1;
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
    if(INI_Exist(playername))
    {
		new PlayerFile[ 13 + MAX_PLAYER_NAME + 1];
	    format( PlayerFile , sizeof PlayerFile, USERFILE, playername);
	    new INI:File = INI_Open(PlayerFile);
	    INI_SetTag(File,"data");
	    INI_WriteInt(File,"TarjetaCredito",Info[playerid][pTarjetaCredito]);
	    INI_WriteInt(File,"Level",Info[playerid][pLevel]);
	    INI_WriteInt(File,"AdminNivelZC",Info[playerid][pAdminZC]);
	    INI_WriteInt(File,"AdminZC",Info[playerid][pLvlAdminZC]);
	    INI_WriteInt(File,"BanAppealer",Info[playerid][pBanAppealer]);
		INI_WriteInt(File,"FactionModerator",Info[playerid][pFactionModerator]);
		INI_WriteInt(File,"ModStaff",Info[playerid][pModStaff]);
		INI_WriteInt(File,"GangModerator",Info[playerid][pGangModerator]);
		INI_WriteInt(File,"Helper",Info[playerid][pHelper]);
		INI_WriteInt(File,"ConnectedTime",Info[playerid][pConnectTime]);
		INI_WriteInt(File,"Registered",Info[playerid][pReg]);
		INI_WriteInt(File,"IntTest",Info[playerid][pInTest]);
		INI_WriteInt(File,"Stats",Info[playerid][pStats_U]);
		INI_WriteInt(File,"Sex",Info[playerid][pSex]);
		INI_WriteInt(File,"Age",Info[playerid][pAge]);
		INI_WriteInt(File,"Origin",Info[playerid][pOrigin]);
		INI_WriteInt(File,"Respect",Info[playerid][pExp]);
		INI_WriteInt(File,"Suciedad",Info[playerid][pSuci]);
		INI_WriteInt(File,"CEmergencias",Info[playerid][pCRet]);
        INI_WriteInt(File,"Money",GetPVarInt(playerid, "Cash"));
        INI_WriteInt(File,"Bank",Info[playerid][pAccount]);
        INI_WriteString(File,"IP", Info[playerid][pIP]);
        INI_WriteInt(File,"Kills",Info[playerid][pKills]);
        INI_WriteInt(File,"Deaths",Info[playerid][pDeaths]);
        INI_WriteInt(File,"BGomas",Info[playerid][pBGomas]);
        INI_WriteInt(File,"Arrested",Info[playerid][pArrested]);
        INI_WriteInt(File,"JailAdmin",Info[playerid][pJailAdmin]);
        INI_WriteInt(File,"LottoNr",Info[playerid][pLottoNr]);
        INI_WriteInt(File,"Job",Info[playerid][pJob]);
        INI_WriteInt(File,"NewMuted",Info[playerid][pNMute]);
        INI_WriteInt(File,"NewMutedTotal",Info[playerid][pNMuteTotal]);
        INI_WriteInt(File,"Warn",Info[playerid][pWarn]);
        INI_WriteInt(File,"WRestricted",Info[playerid][pWRestricted]);
        INI_WriteInt(File,"Jailed",Info[playerid][pJailed]);
        INI_WriteInt(File,"JailTime",Info[playerid][pJailTime]);
        INI_WriteInt(File,"Materials",Info[playerid][pMats]);
        INI_WriteInt(File,"Packages",GetPVarInt(playerid, "Packages"));
        INI_WriteInt(File,"Drugs",Info[playerid][pDrugs]);
        INI_WriteInt(File,"Cosecha",Info[playerid][pCosecha]);
        INI_WriteInt(File,"Crack",Info[playerid][pCrack]);
        INI_WriteInt(File,"Pot",Info[playerid][pPot]);
        INI_WriteInt(File,"Crates",Info[playerid][pCrates]);
        INI_WriteInt(File,"Adic",Info[playerid][pAdiccion]);
        INI_WriteInt(File,"Leader",Info[playerid][pLeader]);
        INI_WriteInt(File,"Member",Info[playerid][pMember]);
        INI_WriteInt(File,"FMember",Info[playerid][pFMember]);
        INI_WriteInt(File,"Division",Info[playerid][pDivision]);
        INI_WriteInt(File,"Rank",Info[playerid][pRank]);
        INI_WriteInt(File,"Char",Info[playerid][pChar]);
		if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0){
		    GetPlayerHealth(playerid,Info[playerid][pHealth]);
		}
		INI_WriteFloat(File,"pHealth",Info[playerid][pHealth]);
		if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0){
		    GetPlayerArmour(playerid,Info[playerid][pArmour]);
		}
        INI_WriteFloat(File,"pArmour",Info[playerid][pArmour]);
        INI_WriteInt(File,"Team",Info[playerid][pTeam]);
        INI_WriteInt(File,"Model",Info[playerid][pModel]);
        INI_WriteInt(File,"PhoneNr",Info[playerid][pPnumber]);
        INI_WriteInt(File,"Sprunk",Info[playerid][pSprunk]);
        INI_WriteInt(File,"Phonebook",Info[playerid][pPhoneBook]);
        INI_WriteInt(File,"House",Info[playerid][pPhousekey]);
        INI_WriteInt(File,"House2",Info[playerid][pPhousekey2]);
        INI_WriteInt(File,"Int", Info[playerid][pInt]);
        INI_WriteFloat(File,"Pos_x",Info[playerid][pPos_x]);
        INI_WriteFloat(File,"Pos_y",Info[playerid][pPos_y]);
        INI_WriteFloat(File,"Pos_z",Info[playerid][pPos_z]);
        INI_WriteFloat(File,"SPos_r",Info[playerid][pPos_r]);
        INI_WriteInt(File,"CarLic",Info[playerid][pCarLic]);
        INI_WriteInt(File,"FlyLic",Info[playerid][pFlyLic]);
        INI_WriteInt(File,"BoatLic",Info[playerid][pBoatLic]);
        INI_WriteInt(File,"GunLic",Info[playerid][pGunLic]);
        INI_WriteInt(File,"Gafas",Info[playerid][pGafas]);
        INI_WriteInt(File,"Tutorial",Info[playerid][pTut]);
        INI_WriteInt(File,"Test",Info[playerid][pTestTut]);
        INI_WriteInt(File,"VWorld",Info[playerid][pVW]);
        INI_WriteInt(File,"Lighter",Info[playerid][pLighter]);
        INI_WriteInt(File,"Cigarettes",Info[playerid][pCigarettes]);
        INI_WriteInt(File,"BanZC",Info[playerid][pBannedZC]);
        INI_WriteInt(File,"DisabledZC",Info[playerid][pDisabledZC]);
        INI_WriteInt(File,"BlockBug",Info[playerid][pBlockBug]);
        INI_WriteInt(File,"DNI",Info[playerid][pDNI]);
        INI_WriteInt(File,"VSkill",Info[playerid][pArmsSkill]);
        INI_WriteInt(File,"TSkill",Info[playerid][pTruckSkill]);
        INI_WriteInt(File,"SmugglerSkill",Info[playerid][pSmugSkill]);
        INI_WriteInt(File,"DrugsSkill",Info[playerid][pDrugsSkill]);
        INI_WriteInt(File,"SIDA",Info[playerid][pSIDA]);
        INI_WriteInt(File,"Cancer" ,Info[playerid][pCancer]);
        INI_WriteInt(File,"Epilepsia",Info[playerid][pEpilepsia]);
        INI_WriteInt(File,"CertificadoMD",Info[playerid][pCertificadoMD]);
        INI_WriteInt(File,"Dengue",Info[playerid][pDengue]);
        INI_WriteInt(File,"FStyle",Info[playerid][pFStyle]);
        INI_WriteInt(File,"Busqueda",Info[playerid][pWantedLevel]);
        INI_WriteInt(File,"AntiSIDA",Info[playerid][pAntiSIDA]);
        INI_WriteInt(File,"AntiCancer",Info[playerid][pAntiCancer]);
        INI_WriteInt(File,"AntiEpilepsia",Info[playerid][pAntiEpilepsia]);
        INI_WriteInt(File,"Rent",Info[playerid][pRenting]);
        INI_WriteInt(File,"prMoney",Info[playerid][p_Pr_Money]);
        INI_WriteInt(File,"Rob",Info[playerid][pRob]);
        INI_WriteInt(File,"Premium",Info[playerid][pVIP]);
        INI_WriteInt(File,"FichasCash",Info[playerid][pPTR]);
        INI_WriteInt(File,"CarPremium",Info[playerid][pCarKey2]);
        INI_WriteInt(File,"BanDuda",Info[playerid][pBanDuda]);
        INI_WriteInt(File,"ReportMuted",Info[playerid][pRMuted]);
        INI_WriteInt(File,"ReportMutedTotal",Info[playerid][pRMutedTotal]);
        INI_WriteInt(File,"ReportMutedTime",Info[playerid][pRMutedTime]);
        INI_WriteInt(File,"Pasaporte",Info[playerid][pPasaporte]);
        INI_WriteInt(File,"RadioP", Info[playerid][pRadio]);
        INI_WriteInt(File,"KHZ",Info[playerid][pRadioFreq]);
        INI_WriteInt(File,"Ipad",Info[playerid][pIpadMusic]);
        INI_WriteInt(File,"GiftTime",Info[playerid][pGiftTime]);
		for( new m = 0; m < 12; m++ )
		{
		    new mStr[24];
		    format(mStr,sizeof(mStr), "Gun%d", m);
		    INI_WriteInt(File,mStr, Info[playerid][pWeapons][m]);
		}
		INI_WriteInt(File,"Acento",Info[playerid][pAccent]);
		INI_WriteInt(File,"PTokens",Info[playerid][pPaintTokens]);
		INI_WriteInt(File,"Undercover",Info[playerid][pUndercover]);
		INI_WriteInt(File,"Head",Info[playerid][pHead]);
		INI_WriteInt(File,"TaxiLicense", Info[playerid][pTaxiLicense]);
		INI_WriteInt(File,"Hospital",Info[playerid][pHospital]);
		INI_WriteInt(File,"CHits",Info[playerid][pCHits]);
		INI_WriteInt(File,"FHits",Info[playerid][pFHits]);
		INI_WriteInt(File,"Spraycan",Info[playerid][pSpraycan]);
		INI_WriteInt(File,"Married",Info[playerid][pMarried]);
		INI_WriteString(File,"MarriedTo",Info[playerid][pMarriedTo]);
		INI_WriteString(File,"ContractBy",Info[playerid][pContractBy]);
		INI_WriteString(File,"ContractDetail",Info[playerid][pContractDetail]);
		INI_WriteInt(File,"pWExists",Info[playerid][pWExists]);
		INI_WriteFloat(File,"pWX",Info[playerid][pWX]);
		INI_WriteFloat(File,"pWY",Info[playerid][pWY]);
		INI_WriteFloat(File,"pWZ",Info[playerid][pWZ]);
		INI_WriteInt(File,"pWVW",Info[playerid][pWVW]);
		INI_WriteInt(File,"pWInt",Info[playerid][pWInt]);
		INI_WriteInt(File,"pWValue",Info[playerid][pWValue]);
		INI_WriteInt(File,"pWSeeds",Info[playerid][pWSeeds]);
		INI_WriteInt(File,"PayEx",Info[playerid][YaCobre]);
		INI_WriteInt(File,"AdMuted",Info[playerid][pADMute]);
		INI_WriteInt(File,"AdMutedTotal",Info[playerid][pADMuteTotal]);
		INI_WriteString(File,"Warrants",Info[playerid][pWarrant]);
		INI_WriteInt(File,"JudgeJailTime",Info[playerid][pJudgeJailTime]);
		INI_WriteInt(File,"JudgeJailType",Info[playerid][pJudgeJailType]);
		INI_WriteInt(File,"BeingSentenced",Info[playerid][pBeingSentenced]);
		INI_WriteInt(File,"ProbationTime",Info[playerid][pProbationTime]);
		INI_WriteInt(File,"RewardsHours",Info[playerid][pRHours]);
		INI_WriteInt(File,"ADTime",Info[playerid][pADTime]);
		INI_WriteInt(File,"Otros",Info[playerid][pOther]);
		INI_WriteInt(File,"GGTokens",Info[playerid][pGTokens]);
		INI_WriteInt(File,"HDExp",Info[playerid][pDobleExp]);
		INI_WriteInt(File,"DPHoras",Info[playerid][pDPHours]);
		INI_WriteInt(File,"DPTiempo",Info[playerid][pDPTime]);
		INI_WriteInt(File,"DPTotal",Info[playerid][pDPTotal]);
		INI_WriteInt(File,"Order",Info[playerid][pOrder]);
		INI_WriteInt(File,"TempVIP",Info[playerid][pTempVIP]);
		INI_WriteInt(File,"VIPInviteDay",Info[playerid][pVIPInviteDay]);
		INI_WriteInt(File,"BuddyInvite",Info[playerid][pBuddyInvited]);
		INI_WriteInt(File,"VTokens",Info[playerid][pVTokens]);
		INI_WriteInt(File,"Job2",Info[playerid][pJob2]);
		INI_WriteInt(File,"TypeSpawn",Info[playerid][pTypeSpawn]);
		INI_WriteInt(File,"ShopTech",Info[playerid][pShopTech]);
		INI_WriteInt(File,"Status",Info[playerid][pEstado]);
		INI_WriteInt(File,"DayVIP",Info[playerid][pVIPDateD]);
		INI_WriteInt(File,"MonthVIP",Info[playerid][pVIPDateM]);
		INI_WriteInt(File,"IDRegalo",Info[playerid][pRegalo]);
		for( new m = 0; m < 11; m++ )
		{
		    new mStr[24];
		    format(mStr,sizeof(mStr), "Mueble%d", m);
		    INI_WriteInt(File,mStr, Info[playerid][pMuebles][m]);
		}
		INI_WriteInt(File,"Screwdrivers", Info[playerid][pScrewdriver]);
		INI_WriteInt(File,"Firstaid", Info[playerid][pFirstaid]);
		INI_WriteInt(File,"CamOculta", Info[playerid][pSurveillance]);
		INI_WriteInt(File,"Negocio",Info[playerid][pPbizzkey]);
		INI_WriteInt(File,"skinn",Info[playerid][pgskin]);
		INI_WriteInt(File,"robita",Info[playerid][probita]);
		INI_WriteInt(File,"DNIFalse",Info[playerid][pDNIFalse]);
 		INI_WriteString( File, "DNIName",Info[playerid][pDNIName]);
 		INI_WriteInt(File,"Boombox",Info[playerid][pBoombox]);
	    for(new v = 0; v < MAX_PLAYERTOYS; v++)
    	{
	    	new string[64];
			format( string,64, "pt%dModelID", v);
			INI_WriteInt(File,string, PlayerToyInfo[playerid][v][ptModelID]);
			format(string, 64, "pt%dBone",v);
			INI_WriteInt(File,string, PlayerToyInfo[playerid][v][ptBone]);
			format(string, 64, "pt%dPosX",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosX]);
			format(string, 64, "pt%dPosY",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosY]);
			format(string, 64, "pt%dPosZ",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosZ]);
			format(string, 64, "pt%dRotX",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotX]);
			format(string, 64, "pt%dRotY",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotY]);
			format(string, 64, "pt%dRotZ",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotZ]);
			format(string, 64, "pt%dSizX",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleX]);
			format(string, 64, "pt%dSizY",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleY]);
			format(string, 64, "pt%dSizZ",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleZ]);
    	}
    	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    	{
    	    new string[64];
        	format(string, 64, "pv%dPosX",v);
        	INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvPosX]);
        	format(string, 64, "pv%dPosY",v);
        	INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvPosY]);
        	format(string, 64, "pv%dPosZ",v);
        	INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvPosZ]);
        	format(string, 64, "pv%dPosAngle",v);
        	INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvPosAngle]);
			format(string, 64, "pv%dVirtualW",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvVW]);
			format(string, 64, "pv%dModelId",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvModelId]);
			format(string, 64, "pv%dLock",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvLock]);
			format(string, 64, "pv%dLocked",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvLocked]);
			format(string, 64, "pv%dPaintJob",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvPaintJob]);
			format(string, 64, "pv%dColor1",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvColor1]);
			format(string, 64, "pv%dColor2",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvColor2]);
			format(string, 64, "pv%dPrice",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvPrice]);
			format(string, 64, "pv%dTicket",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvTicket]);
			format(string, 64, "pv%dWeapon0",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][0]);
			format(string, 64, "pv%dWeapon1",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][1]);
			format(string, 64, "pv%dWeapon2",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][2]);
			format(string, 64, "pv%dWeapon3",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][3]);
			format(string, 64, "pv%dWeapon4",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][4]);
			format(string, 64, "pv%dWeapon5",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][5]);
			format(string, 64, "pv%dWeapon6",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][6]);
			format(string, 64, "pv%dWeapon7",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][7]);
			format(string, 64, "pv%dWepUpgrade",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWepUpgrade]);
			format(string, 64, "pv%dFuel",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvFuel]);
			format(string, 64, "pv%dImpound",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvImpounded]);
			format(string, 64, "pv%dHealth",v);
			INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvHealth]);
			for(new m = 0; m < MAX_MODS; m++)
			{
			    new strings[64];
			    format(strings, 64, "pv%dMod%d", v, m);
			    INI_WriteInt(File,strings,PlayerVehicleInfo[playerid][v][pvMods][m]);
			}
		}
		INI_Close(File);
   	}
   	return 1;
}

function PlayerLogin(playerid)
{
	new string [128];
	TotalLogin++;
	ResetPlayerMoney(playerid);
	CurrentMoney[playerid] = GetPVarInt(playerid, "Cash");
	HideMenuLogin(playerid);
	if(Info[playerid][pLvlAdminZC] > 0)
	{
	    Info[playerid][pLvlAdminZC] = 0;
	    Info[playerid][pAdminZC] = 0;
	    Info[playerid][pBanAppealer] = 0;
	    Info[playerid][pFactionModerator] = 0;
	    Info[playerid][pModStaff] = 0;
	    Info[playerid][pGangModerator] = 0;
	    Info[playerid][pShopTech] = 0;
	    Info[playerid][pHelper] = 0;
	    SendClientMessageEx(playerid, COLOR_AT,"Absolute Titanium RolePlay:{FFFFFF} Restauración de administradores general, no reportar esto.");
	}
	if(Info[playerid][pDisabledZC] == 1){
	    SetPlayerName(playerid, "BannedPlayer");
   	    SendClientMessageEx(playerid, COLOR_AT,  "[Inf.]: {FFFFFF}Informamos que esta cuenta está bloqueada.");
   	    Kick(playerid);
	}
	if(Info[playerid][pBannedZC] >= 2){
   	    SetPlayerName(playerid, "BannedPlayer");
   	    SendClientMessageEx(playerid, COLOR_AT, "Administración:{FFFFFF} Tú estás baneado del servidor, disculpe las molestias.");
   	    Kick(playerid);
	}
	if(Info[playerid][pAdminZC] > 0){
		new tempip[32];
		GetPlayerIp(playerid, tempip, 32);
		if(strcmp(tempip, Info[playerid][pIP], true)){
			format(string, sizeof(string), "{2EDFFF}%s {FFFFFF}ha logueado con IP diferente {FF0000}%s{FFFFFF} - IP original %s.", GetPlayerNameEx(playerid), tempip, Info[playerid][pIP]);
			ABroadCast(COLOR_GENERAL, string, 4);
		}
	}
	if(Info[playerid][pWRestricted] >= 1) ResetPlayerWeaponsEx(playerid);
	GetPlayerIp(playerid, Info[playerid][pIP], 32);
	SetPlayerScore(playerid, Info[playerid][pLevel]);
	if(Info[playerid][pReg] == 0){
		Info[playerid][pLevel] = 0;
		Info[playerid][pHealth] = 100.0;
		Info[playerid][pPos_x] = 1612.3240;
		Info[playerid][pPos_y] = -2330.1670;
		Info[playerid][pPos_z] = 13.5469;
		Info[playerid][pInt] = 0;
		Info[playerid][pTeam] = 3;
		Info[playerid][pChar] = 299;
		Info[playerid][pPnumber] = 0;
		Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		Info[playerid][pAccount] = 0;
		Info[playerid][pPbizzkey] = 9999;
	}
    if(Info[playerid][pPos_x] == 0.0 && Info[playerid][pPos_y]== 0.0&& Info[playerid][pPos_z]== 0.0){
        Info[playerid][pPos_x] = 1715.12;
		Info[playerid][pPos_y] = -1903.17;
		Info[playerid][pPos_z] = 13.56;
    }
    if(Info[playerid][pShopTech] >= 2) Info[playerid][pShopTech] = 0;
    if(Info[playerid][pAdminZC] == 0) { Info[playerid][pGangModerator] = 0; Info[playerid][pShopTech] = 0; Info[playerid][pBanAppealer] = 0; Info[playerid][pFactionModerator] = 0; Info[playerid][pModStaff] = 0; }
	if(Info[playerid][pHospital] == 1){ Info[playerid][pHospital] = 0; SetPVarInt(playerid, "Hospital", 1); }
	if(Info[playerid][pLevel] < 5 || Info[playerid][pAdminZC] > 0 || Info[playerid][pHelper] > 0) gNewbie[playerid] = 0;
	if(Info[playerid][pNMute] == 1) SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
	if(Info[playerid][pTut] == 1) Info[playerid][pReg] = 1;
    new text[128];
	switch(Info[playerid][pAdminZC]) // Mensaje de Bienvenida
	{
		case 1:	SendClientMessage(playerid, COLOR_YELLOW2, "Conectaste al servidor con rango administrativo nivel: 2");
		case 2, 3, 4, 5, 6, 7, 8, 9, 10, 11: SendClientMessage(playerid, COLOR_YELLOW2, def("Conectaste al servidor con rango administrativo nivel: %d", Info[playerid][pAdminZC]));
		default: SendClientMessage(playerid, COLOR_AT, def("Absolute Titanium RolePlay:{FFFFFF} Bienvenido/a %s, recuerda siempre disfrutar al máximo de esta comunidad.", GetPlayerNameEx(playerid)));
	}
	switch(Info[playerid][pHelper]){
		case 1: SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}Absolute Titanium RolePlay:{FFFFFF}Te has conectado como ayudante oficial, recuerda ver tus comandos con /cmdhelper");
		case 2: SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}Absolute Titanium RolePlay:{FFFFFF}Te has conectado como Líder de Ayudantes.");
	}
	SendClientMessageEx(playerid, COLOR_GENERAL, GlobalMOTD);
	CheckVIPExpire(playerid);
	if(Info[playerid][pVIP] >= 1) SendClientMessageEx(playerid, COLOR_VIP, VIPMOTD);
	if(gTeam[playerid] == 0){
		gTeam[playerid] = 3;
	}
	else{
		gTeam[playerid] = Info[playerid][pTeam];
	}
	SetSpawnInfo(playerid, Info[playerid][pTeam], Info[playerid][pChar], Info[playerid][pPos_x], Info[playerid][pPos_y], Info[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
	gPlayerLogged{playerid} = 1;
    SpawnPlayer(playerid);
	new ip[32], tmp2[128];
	GetPlayerIp(playerid, ip, 32);
	if(Info[playerid][pAdminZC] >= 1) SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR, AdminMOTD);
	if(Info[playerid][pHelper] >= 1) SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR, CAMOTD);
	if(Info[playerid][pFMember] < 255){
		format(tmp2, sizeof(tmp2), "Mensaje Familia: %s.", fINFO[Info[playerid][pFMember]][FamilyMOTD]);
		SendClientMessageEx(playerid, COLOR_YELLOW, tmp2);
	}
	if(Info[playerid][pMember] > 0){
		format(tmp2, sizeof(tmp2), "Admin Msj: %s.", FACMOTD);
		SendClientMessageEx(playerid, COLOR_YELLOW, tmp2);
	}
	if(Info[playerid][pFMember] < 255){
		format(tmp2, sizeof(tmp2), "Admin Msj: %s.", FAMMOTD);
		SendClientMessageEx(playerid, COLOR_YELLOW, tmp2);
	}
	if(Info[playerid][pOrder] > 0){
		format(string, sizeof(string), "{2EDFFF}AT-RP:{FFFFFF} %s está esperando por su compra en la tienda.",GetPlayerNameEx(playerid));
		ShopTechBroadCast(COLOR_SHOP,string);
	}
 	SetPlayerFightingStyle (playerid, Info[playerid][pFStyle]);
 	WeedLogin(playerid);
 	SetPlayerToTeamColor(playerid);
	LoadPlayerVehicles(playerid);
	C_OOC[playerid] = 1;
 	new hcheck, hcheck2, name[MAX_PLAYER_NAME];
	hcheck = INVALID_HOUSE_ID;
	hcheck2 = INVALID_HOUSE_ID;
	GetPlayerName(playerid, name, sizeof(name));
	for(new i = 0; i < MAX_HOUSES; i++)
	{
  		if(!strcmp(name, HouseInfo[i][hOwner], false))
		{
   			if(hcheck != INVALID_HOUSE_ID)
			{
   		        hcheck2 = i;
			}
			else
			{
				hcheck = i;
			}
    	}
	}
	if(hcheck != INVALID_HOUSE_ID) Info[playerid][pPhousekey] = hcheck;
	if(hcheck2 != INVALID_HOUSE_ID) Info[playerid][pPhousekey2] = hcheck2;
	if(hcheck == INVALID_HOUSE_ID) return Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
	if(hcheck2 == INVALID_HOUSE_ID) return Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
	return 1;
}

stock ini_GetKey( line[] )
{
	new keyRes[128];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[128];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}


public OnPlayerPressButton(playerid, buttonid)
{
	if(buttonid == JDoor1)
    {
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
        MoveDynamicObject(fen1,1417.90002441,-1554.90002441,4330.50000000,6);
        SetTimer("CloseCell1", 5000, 0);
        //print("JDOOR 1 - Moved");
    }
    if(buttonid == JDoor2)
    {
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
        MoveDynamicObject(fen2,1425.90002441,-1555.00000000,4330.50000000,6);
        SetTimer("CloseCell2", 5000, 0);
        //print("JDOOR 2 - Moved");
    }
    if(buttonid == JDoor3)
    {
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
        MoveDynamicObject(fen3,1429.50000000,-1554.80004883,4330.50000000,6);
        SetTimer("CloseCell3", 5000, 0);
        //print("JDOOR 3 - Moved");
    }
    if(buttonid == JDoor4)
    {
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
        MoveDynamicObject(fen4,1422.19995117,-1567.00000000,4330.50000000,6);
        SetTimer("CloseCell4", 5000, 0);
        //print("JDOOR 4 - Moved");
    }
    if(buttonid == JDoor5) // FIX a 6
    {
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
        MoveDynamicObject(fen6,1430.19995117,-1566.69995117,4330.50000000,6);
        SetTimer("CloseCell5", 5000, 0);
        //print("JDOOR 5 - Moved");
    }
    if(buttonid == JDoor6)
    {
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
        MoveDynamicObject(fen5,1414.80004883,-1566.69995117,4330.50000000,6);
        SetTimer("CloseCell6", 5000, 0);
        //print("JDOOR 6 - Moved");
    }
    if(buttonid == buttompna) // PNA
    {
        if(!IsAPNA(playerid)) return SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
      	MoveDynamicObject(cia1,243.91960, 72.43680, 1002.63959,6);
      	MoveDynamicObject(cia2,248.89999, 72.47110, 1002.63959,6);
        SetTimer("CloseCia1", 3000, 0);
        SetTimer("CloseCia2", 3000, 0);
    }
    if(buttonid == buttompna2) // PNA
    {
        if(!IsAPNA(playerid)) return SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
        MoveDynamicObject(cia2,248.89999, 72.47110, 1002.63959,6);
        MoveDynamicObject(cia1,243.91960, 72.43680, 1002.63959,6);
        SetTimer("CloseCia2", 3000, 0);
        SetTimer("CloseCia1", 3000, 0);
    }

   	if(buttonid == courtbuttons[0])
	{
		if(!OrgGob(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[3])
	{
		if(!OrgGob(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[1])
	{
		if(!OrgGob(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == courtbuttons[2])
	{
		if(!OrgGob(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == AININTDoor1BTN)
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	    MoveDynamicObject(AININTDoor1,275.2846, -1488.9755, 4994.6191,4);
	    SetTimer("CloseAININTD1", 2500, 0);
		}
		else
		{
		    SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No tienes tarjeta de acceso a este lugar.");
		    return 1;
		}
	}
	if(buttonid == AININTDoor2BTN)
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	    MoveDynamicObject(AININTDoor2,271.0691, -1502.5299, 4994.6191,4);
	    SetTimer("CloseAININTD2", 2500, 0);
		}
		else
		{
		    SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No tienes tarjeta de acceso a este lugar.");
		    return 1;
		}
	}
	if(buttonid == AININTDoor3BTN)
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	    MoveDynamicObject(AININTDoor3,223.0793, -1490.4504, 5004.5537,4);
	    SetTimer("CloseAININTD3", 2500, 0);
		}
		else
		{
		    SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No tienes tarjeta de acceso a este lugar.");
		    return 1;
		}
	}
	if(buttonid == AININTDoor4BTN)
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	    MoveDynamicObject(AININTDoor4,210.0710, -1508.5398, 4998.7661,4);
	    SetTimer("CloseAININTD4", 2500, 0);
		}
		else
		{
		    SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No tienes tarjeta de acceso a este lugar.");
		    return 1;
		}
	}
	if(buttonid == AININTDoor5BTN)
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	    MoveDynamicObject(AININTDoor5,230.8922, -1487.3845, 5010.3613,4);
	    SetTimer("CloseAININTD5", 2500, 0);
		}
		else
		{
		    SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No tienes tarjeta de acceso a este lugar.");
		    return 1;
		}
	}
	if(buttonid == elevator)
	{
		if(!Team_LAPD(playerid) && !Team_USMC(playerid))
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		else SafeDialogEx( playerid, ELEVATOR3, DIALOG_STYLE_LIST, "- Elevador!", "Helipuerto\nGarage", "Ir", "Salir");
	}
	if(buttonid == garagekey)
	{
		if(!Team_LAPD(playerid) && !Team_USMC(playerid))
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		else SafeDialogEx( playerid, ELEVATOR2, DIALOG_STYLE_LIST, "- Elevador!", "Helipuerto\nInterior", "Ir", "Salir");
	}
	if(buttonid == roofkey)
	{
		if(!Team_LAPD(playerid) && !Team_USMC(playerid))
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		else SafeDialogEx( playerid, ELEVATOR, DIALOG_STYLE_LIST, "- Elevador!", "Interior\nGarage", "Ok", "Cancelar");
	}
	if(buttonid == cctvin || buttonid == cctvout)
	{
		if(!Team_LAPD(playerid) && !Team_USMC(playerid))
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		MoveDynamicObject(cctv1,263.44921875,115.79980469,1003.61718750,4);
        MoveDynamicObject(cctv2,268.46875000,115.83691406,1003.61718750,4);
		SetTimer("CloseCCTV", 2500, 0);
	}
	if(buttonid == chiefin || buttonid == chiefout)
	{
		if((Info[playerid][pRank] < 6 && Info[playerid][pMember] == 1) || Info[playerid][pMember] != 1)
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		MoveDynamicObject(chief1,228.0,119.50000000,1009.21875000,4);
  MoveDynamicObject(chief2,230.0,119.53515625,1009.21875000,4);
	    SetTimer("CloseChief", 2500, 0);
	}
	if(buttonid == lockerin || buttonid == lockerout)
	{
		if(!Team_LAPD(playerid) && !Team_USMC(playerid))
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		MoveDynamicObject(locker1,268.29980469,112.56640625,1003.61718750,4);
  MoveDynamicObject(locker2,263.29980469,112.52929688,1003.61718750,4);
		SetTimer("CloseLocker", 2500, 0);
	}
	if(buttonid == westout)
	{
		if(!Team_LAPD(playerid) && !Team_USMC(playerid))
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	else if(buttonid == westin)
	{
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	else if(buttonid == eastin)
	{
	    MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
	    MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	else if(buttonid == eastout)
	{
		if(!Team_LAPD(playerid) && !Team_USMC(playerid))
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"{FF0000}Acceso Denegado:{FFFFFF} No tienes autorización de entrar a este lugar.");
			return 1;
		}
 		MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
 		MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	return false;
}


//*******************PaintBall*******************
PaintballMainMenu(playerid)
{
	new string[128];
	format(string,sizeof(string),"• Escoger arena y de juego\n• Comprar fichas");
	SafeDialogEx(playerid,PB_MENU,DIALOG_STYLE_LIST,"{2EDFFF}Paintball Arena - Menu",string,"Ok","Salir");
}

PaintballArenaSelection(playerid)
{
	new string[256];
	format(string,sizeof(string),"Arena 1 (Sin Equipo)\t\t Jugadores: [%d/20]\nArena 2 (Sin Equipo)\t\t Jugadores: [%d/20]\nArena 3 (Con Equipo)\t\t Jugadores: [%d/20]",TotalDM, TotalDM2, TotalTDM);
	SafeDialogEx(playerid,PB_SARENA,DIALOG_STYLE_LIST,"{2EDFFF}Paintball Arena - Elige una Arena",string,"Ok","Cancelar");
}

PaintballTokenBuyMenu(playerid)
{
	new string[150];
	format(string,sizeof(string),"{FFFFFF}¿Cuantas fichas usted quiere comprar?\n\n{FFFFFF}• Precio por cada ficha:{2EDFFF} $%d \n{FFFFFF}• Tus fichas: {2EDFFF}%d", 20, Info[playerid][pPaintTokens]);
	SafeDialogEx(playerid,PB_FICHAS,DIALOG_STYLE_INPUT,"{2EDFFF}Fichas",string,"Comprar","Cancelar");
	return 1;
}

PaintballScoreboard(playerid)
{
	if(GetPVarInt(playerid, "IsInArena") == 0) { return 1; }
	new titlestring[128];
	new string[2048];
 	foreach(Player, p)
  	{
		if(GetPVarInt(p, "ArenaMode") == 1)
		{
			format(titlestring,sizeof(titlestring),"Puntajes - Usuarios On: %d",TotalDM);
			format(string,sizeof(string),"%s(ID: %d) %s - (Puntos: %d) (Muertes: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],Info[p][pDeaths],GetPlayerPing(p));
  		}
		if(GetPVarInt(p, "ArenaMode") == 3)
		{
			format(titlestring,sizeof(titlestring),"Puntajes - Usuarios On: %d",TotalDM2);
			format(string,sizeof(string),"%s(ID: %d) %s - (Puntos: %d) (Muertes: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],Info[p][pDeaths],GetPlayerPing(p));
  		}
		if(GetPVarInt(p, "ArenaMode") == 2)
		{
		    format(titlestring,sizeof(titlestring),"Puntajes - Rojo/s [%d] - Azul/es [%d]",TRedKills,TBlueKills);
		    switch(Info[p][pPaintTeam])
		    {   // 1: Red Team - 2: // Blue Team
		        case 1: format(string,sizeof(string),"{FF0000}%s(ID: %d) (Equipo Rojo) %s - (Puntos: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],GetPlayerPing(p));
		        case 2: format(string,sizeof(string),"{0000FF}%s(ID: %d) (Equipo Azul) %s - (Puntos: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],GetPlayerPing(p));
		    }
		}
	}
	SafeDialogEx(playerid,PBARENASCORES,DIALOG_STYLE_LIST,titlestring,string,"Actualizar","Cerrar");
	return 1;
}

SpawnPaintballArena(playerid)
{
    ResetPlayerWeapons(playerid);
	switch(GetPVarInt(playerid, "ArenaMode")) // Deathmatch
	{
	    case 1:
	    {
			Info[playerid][pVW] = 700; Info[playerid][pInt] = 10;
     		SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
			SetPlayerInterior(playerid, Info[playerid][pInt]);
			new rand = Random(1,5);
			switch (rand)
			{
	    		case 1:
	    		{
	       			SetPlayerPos(playerid, -1130.992431,1057.709594,1346.417602); //Inicio de partida 1
 					SetPlayerFacingAngle(playerid, 271.038604);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    		}
	    		case 2:
				{
		   			SetPlayerPos(playerid, -974.288452,1061.151977,1345.675170); //Inicio de partida 2
 					SetPlayerFacingAngle(playerid, 89.564575);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 3:
				{
		   			SetPlayerPos(playerid, -974.346496,1038.946533,1352.682861); //Inicio de partida 3
 					SetPlayerFacingAngle(playerid, 177.939468);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 4:
				{
		   			SetPlayerPos(playerid, -1132.348754,1080.568359,1353.442016); //Inicio de partida 4
 					SetPlayerFacingAngle(playerid, 357.174713);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
			}
 			SetHP(playerid, 100);
 			SetPlayerArmour(playerid, 50);
 			GivePlayerWeapon(playerid, 29, 60000);
 			return 1;
		}
		case 3: // Deathmatch 2
		{
			Info[playerid][pVW] = 800; Info[playerid][pInt] = 10;
			SetPlayerInterior(playerid, Info[playerid][pInt]);
			SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
			new rand = Random(1,5);
			switch (rand)
			{
	    		case 1:
	    		{
	    	   		SetPlayerPos(playerid, -1130.992431,1057.709594,1346.417602); //Inicio de partida 1
 					SetPlayerFacingAngle(playerid, 271.038604);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    		}
	    		case 2:
				{
			   		SetPlayerPos(playerid, -974.288452,1061.151977,1345.675170); //Inicio de partida 2
 					SetPlayerFacingAngle(playerid, 89.564575);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 3:
				{
			   		SetPlayerPos(playerid,  -974.346496,1038.946533,1352.682861); //Inicio de partida 3
 					SetPlayerFacingAngle(playerid, 177.939468);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 4:
				{
			   		SetPlayerPos(playerid, -1132.348754,1080.568359,1353.442016); //Inicio de partida 4
 					SetPlayerFacingAngle(playerid, 357.174713);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
			}
 			SetHP(playerid, 100);
 			SetPlayerArmour(playerid, 50);
 			GivePlayerWeapon(playerid, 29, 60000);
 			return 1;
		}
		case 2: // Team Deathmatch
		{
	    	Info[playerid][pVW] = 600; Info[playerid][pInt] = 10;
			SetPlayerInterior(playerid, Info[playerid][pInt]);
 			SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
 			SetHP(playerid, 100);
 			SetPlayerArmour(playerid, 50);
 			GivePlayerWeapon(playerid, 29, 60000);
        	switch(Info[playerid][pPaintTeam])
        	{
        	    case 1: //Equipo Rojo
			    {
					SetPlayerPos(playerid, -1130.992431,1057.709594,1346.417602);
					SetPlayerFacingAngle(playerid, 271.038604);
					SetPlayerColor(playerid, PAINTBALL_TEAM_RED);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 2: //Equipo Azul
				{
					SetPlayerPos(playerid, -974.288452,1061.151977,1345.675170);
					SetPlayerFacingAngle(playerid, 89.564575);
			    	SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);
			    	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
			}
		}
	}
	return 1;
}

JoinPaintballArena(playerid, modo)
{
	new string[256];

	new Float:oldX, Float:oldY, Float:oldZ, Float:oldHealth, Float:oldArmor;
	GetPlayerPos(playerid, oldX, oldY, oldZ);
	SetPVarFloat(playerid, "pbOldX", oldX);
	SetPVarFloat(playerid, "pbOldY", oldY);
	SetPVarFloat(playerid, "pbOldZ", oldZ);
	GetPlayerHealth(playerid,oldHealth);
	GetPlayerArmour(playerid,oldArmor);
	SetPVarInt(playerid, "pbOldInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "pbOldVW", GetPlayerVirtualWorld(playerid));
	SetPVarFloat(playerid, "pbOldHealth", oldHealth);
	SetPVarFloat(playerid, "pbOldArmor", oldArmor);
	pTazer[playerid] = 0; // Reinicia el taser.
	switch(modo)
	{
		case 1: // DM
		{
		    if(Info[playerid][pPaintTokens] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[Paintball Arena]:{5ABAFF} Necesitas 3 fichas para entrar a está Arena.");
            if(TotalDM == 20) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[Arena llena]:{FFFFFF}} La arena está muy llena! Escoga otra.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 1);
	        SetPlayerPos(playerid, -974.346496,1038.946533,1352.682861);
 			SetPlayerFacingAngle(playerid, 177.939468);
 			SetHP(playerid, 100);
 			SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 700);
 			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"{FFFF00}¡Atención jugadores!:{FFFFFF} %s se ha unido a la guerra, tengan cuidado.", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(1,COLOR_YELLOW,string);
	        SendClientMessageEx(playerid, COLOR_WHITE, "{660066}[Comandos - PaintBall Arena]:{FFFFFF} /armas - /salirarena - /cequipo - /scores");
			TotalDM++;
		}
		case 2: // CHOOSE TEAM
		{
		    if(Info[playerid][pPaintTokens] < 8) return SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Necesitas 8 fichas para entrar a está Arena");
		    SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{2EDFFF}Seleccione su equipo","{FF0000}Equipo Rojo\n{0000FF}Equipo Azul","Entrar","Salir");
		}
		case 3: // JOIN TEAM
		{
		    if(TotalTDM == 32) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[Arena llena]:{FFFFFF}} La arena está muy llena! Escoga otra.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 2);

			SendClientMessageEx(playerid, COLOR_WHITE, "{660066}[Comandos - PaintBall Arena]:{FFFFFF} /armas - /salirarena - /cequipo - /scores");
			switch(Info[playerid][pPaintTeam])
			{
				case 1: //Equipo Rojo
		    	{
		        	format(string,sizeof(string),"{FFFF00}¡Atención jugadores!:{FFFFFF} %s se ha unido a la guerra para el equipo: {FF0000}Rojo", GetPlayerNameEx(playerid));
	        		SendPaintballArenaMessage(2,COLOR_YELLOW,string);
		        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        	SetPlayerPos(playerid,-1130.992431,1057.709594,1346.417602);
		        	SetPlayerFacingAngle(playerid, 271.038604);
		        	SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 600);
		        	SetPlayerColor(playerid, PAINTBALL_TEAM_RED); SetHP(playerid, 100);
		        	SetPlayerArmour(playerid, 50);
		        	PlayersRed++;
		    	}
		    	case 2: //Equipo AZul
		    	{
		       		format(string,sizeof(string),"{FFFF00}¡Atención jugadores!:{FFFFFF} %s se ha unido a la guerra para el equipo: {000099}Azul", GetPlayerNameEx(playerid));
	        		SendPaintballArenaMessage(2,COLOR_YELLOW,string);
		        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        	SetPlayerPos(playerid,-974.288452,1061.151977,1345.675170);
		        	SetPlayerFacingAngle(playerid, 89.564575);
		        	SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 600);
		        	SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE); SetHP(playerid, 100);
		        	SetPlayerArmour(playerid, 50);
		        	PlayersBlue++;
		    	}
			}
		}
		case 4: // CTF
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Próximamente captura la bandera!");
		}
		case 5: // DM2
		{
		    if(Info[playerid][pPaintTokens] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[Paintball Arena]:{5ABAFF} Necesitas 3 fichas para entrar a está Arena");
            if(TotalDM2 == 20) return SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[Paintball Arena]:{5ABAFF} La Arena 2 está FULL, espera un momento.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 3);
			ResetPlayerWeapons(playerid);
	        SetPlayerPos(playerid, -974.346496,1038.946533,1352.682861);
 			SetPlayerFacingAngle(playerid, 177.939468);
 			SetHP(playerid, 100);
 			SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 800);
 			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"{FFFF00}¡Atención jugadores!:{FFFFFF} %s se ha unido a la guerra, tengan cuidado.", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(1,COLOR_YELLOW,string);
	        SendClientMessageEx(playerid, COLOR_YELLOW, "{00F70C}[Paintball Arena]:{5ABAFF} Te regalamos por tu entrada una MP5, cuando mueras usa /armas para ver las armas disponibles.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "{660066}[Comandos - PaintBall Arena]:{FFFFFF} /armas - /salirarena - /cequipo - /scores");
			TotalDM2++;
		}
	}
	return 1;
}

LeavePaintballArena(playerid)
{
    switch(GetPVarInt(playerid, "ArenaMode"))
	{
        case 1:{
            TotalDM -= 1;
        }
        case 2:{
        	TotalTDM -= 1;
        }
        case 3:{
        	TotalDM2 -= 1;
        }
    }
    switch(Info[playerid][pPaintTeam])
	{
        case 1:{
			PlayersRed -= 1;
		}
		case 2:{
		    PlayersBlue -= 1;
		}
    }
    new string[128];
	format(string,sizeof(string),"{FFFF00}¡Atención jugadores!:{FFFFFF} El jugador {2EDFFF}%s{FFFFFF} ha dejado la arena.", GetPlayerNameEx(playerid));
	SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_YELLOW, string);
	Info[playerid][pKills] = 0;
    Info[playerid][pDeaths] = 0;
	SetPlayerWeapons(playerid);
  	SetPlayerColor(playerid,TEAM_HIT_COLOR);
  	SetPlayerSkin(playerid, Info[playerid][pChar]);
    LoadObjects(playerid);
	SetPVarInt(playerid, "ArenaMode", 0);
	SetPVarInt(playerid, "IsInArena", 0);
	SetPlayerPos(playerid, GetPVarFloat(playerid, "pbOldX"), GetPVarFloat(playerid, "pbOldY"), GetPVarFloat(playerid, "pbOldZ"));
	SetHP(playerid, GetPVarFloat(playerid, "pbOldHealth"));
	SetPlayerArmour(playerid, GetPVarFloat(playerid, "pbOldArmor"));
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pbOldVW"));
	SetPlayerInterior(playerid, GetPVarInt(playerid, "pbOldInt"));
	Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
	Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
    Info[playerid][pPaintTeam] = 0;
}

PaintballDisconnect(playerid)
{
    switch(GetPVarInt(playerid, "ArenaMode"))
    {
        case 1:
        {
            TotalDM -= 1;
        }
        case 2:
        {
        	TotalTDM -= 1;
        }
        case 3:{
        	TotalDM2 -= 1;
        }
    }
    switch(Info[playerid][pPaintTeam])
    {
        case 1:
		{
			PlayersRed -= 1;
		}
		case 2:
		{
		    PlayersBlue -= 1;
		}
    }
	Info[playerid][pKills] = 0;
    Info[playerid][pDeaths] = 0;
  	SetPlayerSkin(playerid, Info[playerid][pChar]);
	SetPlayerPos(playerid, GetPVarFloat(playerid, "pbOldX"), GetPVarFloat(playerid, "pbOldY"), GetPVarFloat(playerid, "pbOldZ"));
	SetHP(playerid, GetPVarFloat(playerid, "pbOldHealth"));
	SetPlayerArmour(playerid, GetPVarFloat(playerid, "pbOldArmor"));
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pbOldVW"));
	SetPlayerInterior(playerid, GetPVarInt(playerid, "pbOldInt"));
	Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
	Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
    Info[playerid][pPaintTeam] = 0;
}

PaintballSwitchTeam(playerid)
{
	new string[128];
	format(string,sizeof(string),"{FF0000}Equipo Rojo [%d/12]\n{0000FF}Equipo Azul [%d/12]",PlayersRed,PlayersBlue);
	SafeDialogEx(playerid,PB_CHOOSE,DIALOG_STYLE_LIST,"{FFFFFF}¿Qué equipo escoge?:",string,"Unirse","Cancelar");
}

// EMS
function KillEMSQueue(playerid)
{
    DeletePVar(playerid, "Injured");
    SetPVarInt(playerid, "FirstSpawn", 1);
    DeletePVar(playerid, "EMSAttempt");
	DeletePVar(playerid, "MedicCall");
	return 1;
}

function SendEMSQueue(playerid,type)
{
	switch(type)
	{
		case 1:
		{
		    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
	  		SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
			SetPVarInt(playerid, "EMSAttempt", -1);
			ClearAnimations(playerid);
  			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);

			if(GetPlayerInterior(playerid) > 0)
			{
			    LoadObjects(playerid);
			}
			GameTextForPlayer(playerid, "~r~ESTAS AGONIZANDO~n~~w~/solicitar medicos", 5000, 3);
			SetHP(playerid, 100);
			SetPlayerArmour(playerid,0);
			SetPVarInt(playerid,"MedicCall",1);
		}
		case 2:
		{
		    SetPVarInt(playerid,"EMSAttempt", 2);
		 	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
			SetHP(playerid, 100);
			SetPlayerArmour(playerid,0);
		}
	}
	return 1;
}
SafeDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[]){
    CurrentDialog[playerid] = dialogid;
	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}
public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,Float:fRotX, Float:fRotY, Float:fRotZ,Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = fOffsetX;
    PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = fOffsetY;
    PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = fOffsetZ;
    PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = fRotX;
    PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = fRotY;
    PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = fRotZ;

    PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = fScaleX;
    if(fScaleX < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 0.1;
 	else if(fScaleX > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1.5;

    PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = fScaleY;
 	if(fScaleY < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 0.1;
 	else if(fScaleY > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1.5;

 	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = fScaleZ;
 	if(fScaleZ < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 0.1;
 	else if(fScaleZ > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1.5;

	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
	PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);
	SendClientMessageEx(playerid, -1, "{CC0066}Inf. Toy's:{FFFFFF} Finalizaste la edición de toy's, para editar otro, realice el mismo proceso.");
	slotselection[playerid] = -1;
	Editing[playerid] = 0;
    return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	new idcar = GetPlayerVehicleID(playerid),string[128];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(!isnull(inputtext))
	{
	    if(strfind(inputtext, "%s", true) != -1)
	    {
			format(string, sizeof(string), "AT-RP: %s (ID %d) es un posible dialog-exploiting, intenta enviar string en blanco mediante diálogos.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast(COLOR_GENERAL, string, 2);
  			format(string, sizeof(string), "%s a intentado insertar un falso string en un diálogo. [Exploit]", GetPlayerNameEx(playerid));
  			Log("logs/- Intentos de Strings.log", string);
  			format(string, sizeof(string), "[Administración]: %s ha sido auto expulsado, razón: Teleport.", GetPlayerNameEx(playerid), playerid);
			ABroadCast(COLOR_GENERAL, string, 0 );
			Kick(playerid);
	        return 1;
		}
	}
    // Sistema de Música
	if(dialogid == D_Musica)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_Musica,DIALOG_STYLE_INPUT,"{2EDFFF}Música Global","Inserte el nombre de la canción y autor:","Listo","Salir");
				ShowPlayerDialog(playerid,D_Musica2,DIALOG_STYLE_INPUT,"{2EDFFF}Música Global","Ingrese la URL de la canción con el .mp3:","Listo","Salir");
				new String[120];
				format(String,sizeof(String),"La canción se va a llamar %s!",inputtext);
				SendClientMessage(playerid,-1,String);
				format(NombreCancion[playerid],30,"%s",inputtext);
    			//gMusic[playerid] = 0; // Se le quita a este admin el Tog del canal de música para que pueda oír la canción que puso.
			}
	}
	if(dialogid == D_Musica2)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_Musica2,DIALOG_STYLE_INPUT,"{2EDFFF}Música Global","Inserte el nombre de la canción y autor:","Listo","Salir");
				new Nombre[MAX_PLAYER_NAME]; GetPlayerName(playerid,Nombre,sizeof(Nombre));
   				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
					if(!gMusic[i])
					{
						format(string,sizeof(string),"====> El administrador %s ha colocado una canción para todos los usuarios, nombre: %s",Nombre,NombreCancion[playerid]);
						SendClientMessage(i, -1, string);
						SendClientMessage(i, -1, "Si la música no te agrada, puedes apagarla con el comando: /Apagarmusica");
						PlayAudioStreamForPlayer(i,inputtext);
					}
					else
					{
						format(string,sizeof(string),"====> El administrador %s ha colocado una canción para todos los usuarios, nombre: %s",Nombre);
						SendClientMessage(i,-1, string);
					}
 				}
			}
	}
	if(dialogid == D_MusicaX)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_MusicaX,DIALOG_STYLE_INPUT,"{99FF00}Play Music Radio","Inserte el nombre de la canción y autor:","Listo","Salir");
				ShowPlayerDialog(playerid,D_MusicaX2,DIALOG_STYLE_INPUT,"{99FF00}Play Music Radio","Ingrese la URL de la canción con el .mp3:","Listo","Salir");
				new String[120];
				format(String,sizeof(String),"La canción se va a llamar %s!",inputtext);
				SendClientMessage(playerid,-1,String);
				format(NombreCancion[playerid],30,"%s",inputtext);
			}
	}
	if(dialogid == D_MusicaX2)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_MusicaX2,DIALOG_STYLE_INPUT,"{99FF00}Play Music Radio","Ingrese la URL de la canción con el .mp3:","Listo","Salir");
				new String[128],Nombre[MAX_PLAYER_NAME]; GetPlayerName(playerid,Nombre,sizeof(Nombre));
				format(String,sizeof(String),"Play Music Radio: {FFFFFF}Estás escuchando en vivo y en directo la canción %s",NombreCancion[playerid]);
				SendClientMessageToAll(COLOR_PLAY_MUSIC,String);
   				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
 					PlayAudioStreamForPlayer(i,inputtext);
 				}
			}
	}
	if(dialogid == MAPINTERES)
     {
                if(GetPVarInt(playerid, "Packages") != 0 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no estar en otra función usando checkpoints.");
			    SetPVarInt(playerid, "FindJob", 1);
			    if(Tren_Route[playerid] == 1 || Tren_Route[playerid] == 2 || Tren_Route[playerid] == 3 || Tren_Route[playerid] == 4 || Tren_Route[playerid] == 5 || Tren_Route[playerid] == 6) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no tener un viaje pendiente como maquinista. Para cancelar el viaje, use: /Cancelarviaje");
	            if(listitem == 0)
				{
					SetPlayerCheckpoint(playerid, 1481.345214, -1743.409545, 13.546875, 2);
					SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación del ayuntamiento, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 1)
				{
				    SetPlayerCheckpoint(playerid, 1330.747680, -984.666137, 33.896629, 2);
				    SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación del banco, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 2)
				{
				    SetPlayerCheckpoint(playerid, 1352.405517, -1757.602294, 13.507812, 2);
				    SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la tienda 24 horas Ayuntamiento, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 3)
				{
				    SetPlayerCheckpoint(playerid, 1315.658081, -900.845581, 39.578125, 2);
				    SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la tienda 24 horas Vinewood, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 4)
				{
				    SetPlayerCheckpoint(playerid, 1829.431640, -1842.416503, 13.578125, 2);
				    SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la tienda 24 horas Unity Station, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 5)
				{
					SetPlayerCheckpoint(playerid, 1192.104248, -1134.150390, 23.890714, 2);
					SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la tienda electrónica, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 6)
				{
					SetPlayerCheckpoint(playerid, 556.708557, -1254.103637, 17.084316, 2);
					SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la consecionaria grotti, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 7)
				{
					SetPlayerCheckpoint(playerid, 2126.750244, -1119.877075, 25.359989, 2);
					SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la concesionaria Jefferson, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 8)
				{
					SetPlayerCheckpoint(playerid, 1284.949584, -1652.395263, 13.546875, 2);
					SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la concesionaria ayuntamiento, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 9)
				{
					SetPlayerCheckpoint(playerid, 1641.115478, -1897.805541, 13.552947, 2);
					SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la concesionaria Unity Station, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 10)
				{
					SetPlayerCheckpoint(playerid, 1883.960327, -1866.562011, 13.569673, 2);
					SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de las rentas de vehículos, dirígete al punto rojo marcado en el mapa.");
				}
				if(listitem == 11)
				{
					SetPlayerCheckpoint(playerid, 2175.137207,-2251.036376,13.303277, 2);
					SendClientMessage(playerid, COLOR_YELLOW2, "Se marcó la ubicación de la destructora de vehículos, dirígete al punto rojo marcado en el mapa.");
				}
     return 1;
	}
// ROCKOLA
	if(dialogid == DIALOG_ROCKOLA)
    {
    	if(!response)
     	{
            SendClientMessage(playerid, -1, "* Has cancelado la selección de emisoras de radio.");
        	return 1;
        }
		switch(listitem)
  		{
    		case 0:
      		{
      		    ShowPlayerDialog(playerid,DIALOG_ROCKOLA1,DIALOG_STYLE_LIST,"Lista de música Jazz","Smooth Jazz\nJazz FM","Sintonizar","Cancelar");
            }
			case 1:
			{
			    ShowPlayerDialog(playerid,DIALOG_ROCKOLA2,DIALOG_STYLE_LIST,"Lista de música Rock","Radio Paradise\n181.FM","Sintonizar","Cancelar");
			}
			case 2:
			{
			    if(Team_Motor(playerid)) return SendClientMessage(playerid, -1, "* Solo motoqueros pueden utilizar esta opción.");
			    ShowPlayerDialog(playerid,DIALOG_ROCKOLA3,DIALOG_STYLE_INPUT, "{817867}Rockola", "Introduzca la URL del MP3 o radio on-line que desee escuchar", "Continuar", "Salir");
			}
			case 3:
			{
                if(GetPVarType(playerid, "BBArea"))
			    {
			        foreach(Player, i)
					{
			            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
			            {
			                StopStream(i);
						}
					}
			        DeletePVar(playerid, "BBStation");
				}
				SendClientMessage(playerid, -1, "* Has apagado la rockola.");
			}
        }
		return 1;
	}
	if(dialogid == DIALOG_ROCKOLA1)// JAZZ
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_ROCKOLA,DIALOG_STYLE_LIST,"{817867}Rockola","Jazz\nRock\nURL Streaming\nApagar","Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99179772", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99179772");
				}
			}
		 	if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=119894", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=119894");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_ROCKOLA2)// ROCK
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_ROCKOLA,DIALOG_STYLE_LIST,"{817867}Rockola","Jazz\nRock\nURL Streaming\nApagar","Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181110", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181110");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181395", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181395");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_ROCKOLA3)// URL
	{
		if(response == 1)
		{
		    if(isnull(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "*No has introducido ninguna URL." );
		        return 1;
		    }
		    if(strlen(inputtext))
		    {
		        if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, inputtext, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", inputtext);
				}
			}
		}
		else
		{
		    return 1;
		}
	}
//BOOMBOX DIALOGS
	if(dialogid == DIALOG_BOOMBOX)
    {
    	if(!response)
     	{
            SendClientMessage(playerid, -1, "* Has cancelado la selección de emisoras de radio.");
        	return 1;
        }
		switch(listitem)
  		{
    		case 0:
      		{
      		    ShowPlayerDialog(playerid,DIALOG_BOOMBOX1,DIALOG_STYLE_LIST,"Lista de música Jazz","Smooth Jazz\nJazz FM","Sintonizar","Cancelar");
            }
            case 1:
            {
                ShowPlayerDialog(playerid,DIALOG_BOOMBOX2,DIALOG_STYLE_LIST,"Lista de música Pop","Power FM\nDEFJAY.COM","Sintonizar","Cancelar");
            }
            case 2:
            {
                ShowPlayerDialog(playerid,DIALOG_BOOMBOX3,DIALOG_STYLE_LIST,"Lista de música Rap","Rap City Radio\nFlow 103 Rap","Sintonizar","Cancelar");
            }
            case 3:
            {
                ShowPlayerDialog(playerid,DIALOG_BOOMBOX4,DIALOG_STYLE_LIST,"Lista de música Hip Hop","Hot 108 Jamz\nBlackBeats.FM","Sintonizar","Cancelar");
			}
			case 4:
			{
			    ShowPlayerDialog(playerid,DIALOG_BOOMBOX5,DIALOG_STYLE_LIST,"Lista de música Rock","Radio Paradise\n181.FM","Sintonizar","Cancelar");
			}
			case 5:
			{
			    ShowPlayerDialog(playerid,DIALOG_BOOMBOX6,DIALOG_STYLE_LIST,"Lista de música Reggaeton","Reggaeton 24 Horas\nReggaeton Stereo","Sintonizar","Cancelar");
			}
			case 6:
			{
			    if(Info[playerid][pLevel] < 0) return SendClientMessage(playerid, -1, "* Debes ser mínimo nivel 3 para usar esta opción.");
			    ShowPlayerDialog(playerid,DIALOG_BOOMBOX7,DIALOG_STYLE_INPUT, "{F0FF00}M{00FFF0}U{FF00DE}S{0CFF00}I{FF0000}C", "Introduzca la URL del MP3 o radio on-line que desee escuchar", "Continuar", "Salir");
			}
			case 7:
			{
                if(GetPVarType(playerid, "BBArea"))
			    {
			        foreach(Player, i)
					{
			            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
			            {
			                StopStream(i);
						}
					}
			        DeletePVar(playerid, "BBStation");
				}
				SendClientMessage(playerid, -1, "* Has apagado la Boombox");
			}
        }
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX1)//JAZZ
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{F0FF00}M{00FFF0}U{FF00DE}S{0CFF00}I{FF0000}C","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar el Equipo","Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99179772", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99179772");
				}
			}
		 	if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=119894", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=119894");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX2)//POP
	{
	    if(!response)
	    {
            ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{F0FF00}M{00FFF0}U{FF00DE}S{0CFF00}I{FF0000}C","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar el Equipo","Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=158237", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=158237");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=81263", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=81263");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX3)//RAP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{F0FF00}M{00FFF0}U{FF00DE}S{0CFF00}I{FF0000}C","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar el Equipo","Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
        			foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181500", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181500");
    			}
   			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=281301", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=281301");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX4)//HIP HOP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{F0FF00}M{00FFF0}U{FF00DE}S{0CFF00}I{FF0000}C","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar el Equipo","Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99188676", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99188676");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=137513", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=137513");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX5)//ROCK
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{F0FF00}M{00FFF0}U{FF00DE}S{0CFF00}I{FF0000}C","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar el Equipo","Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181110", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181110");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181395", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181395");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX6)//REGGAETON
	{
	    if(!response)
	    {
	       ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{F0FF00}M{00FFF0}U{FF00DE}S{0CFF00}I{FF0000}C","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar el Equipo","Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=372869", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=372869");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=98237", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=98237");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX7)//SET URL
	{
		if(response == 1)
		{
		    if(isnull(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "*No has introducido ninguna URL." );
		        return 1;
		    }
		    if(strlen(inputtext))
		    {
		        if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, inputtext, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", inputtext);
				}
			}
		}
		else
		{
		    return 1;
		}
	}
	//***************
	if(dialogid == MPSPAYTICKETS)
	{
	    if(response)
	    {
			new
				szMessage[128];

			if(Info[playerid][pWantedLevel] != 0)
			{
				format(szMessage, sizeof(szMessage), "%s fue localizado en ayuntamiento y es sospechoso nivel: {FFFFFF}%i", GetPlayerNameEx(playerid), Info[playerid][pWantedLevel]);
				SendRadioMessage(1, TEAM_RADIO_COLOR, szMessage);
				SendRadioMessage(2, TEAM_RADIO_COLOR, szMessage);
				return SendClientMessageEx(playerid, COLOR_WHITE, "Secretaria dice: Usted figura en nuestro sistema de buscados, ya vienen por ti.");
			}
			if(PlayerVehicleInfo[playerid][listitem][pvTicket])
			{
				Tax += PlayerVehicleInfo[playerid][listitem][pvTicket];
				format(szMessage, sizeof(szMessage), "Pagaste la multa de $%d por tu %s.", PlayerVehicleInfo[playerid][listitem][pvTicket], VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
			}
			else if(PlayerVehicleInfo[playerid][listitem][pvImpounded])
			{

				new
					iCost = (PlayerVehicleInfo[playerid][listitem][pvPrice] / 40) + PlayerVehicleInfo[playerid][listitem][pvTicket] + (Info[playerid][pLevel] * 2);

				if(GetPlayerCash(playerid) < iCost)
				{
					return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes suficiente dinero para pagar la multa, vé a un cajero o banco.");
				}

				format(szMessage, sizeof(szMessage), "{C993FF}¡Vehículo liberado!:{FFFFFF} Modelo %s por $%i.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400], iCost);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
				SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}Indicación de su vehículo:{FFFFFF} Puede encontrarlo en nuestro deposito ubicado en Unity.");
				GivePlayerCash(playerid, -iCost);
				Tax += iCost;
				PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
				PlayerVehicleInfo[playerid][listitem][pvPosX] = 1655.4379;
				PlayerVehicleInfo[playerid][listitem][pvPosY] = -1829.5668;
				PlayerVehicleInfo[playerid][listitem][pvPosZ] = 13.2677;
				PlayerVehicleInfo[playerid][listitem][pvPosAngle] = 91.6165;
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
				PlayerVehicleInfo[playerid][listitem][pvVW] = 0;
                ++PlayerCars;
				PlayerVehicleInfo[playerid][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
				SetPlayerVirtualWorld(PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvVW]);
    VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = PlayerVehicleInfo[playerid][listitem][pvFuel];
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);
				LoadPlayerVehicleMods(playerid, listitem);
			}
			else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Este coche, o bien no existe, o no es necesario liberar o tiene sus multas pagadas.");
	    }
		return 1;
	}
	else if(dialogid == DIALOG_CDBUY)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
		{
		    TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid,COLOR_GRAD2,"{A2DC35}[INFO]:{FFFFFF} Necesitas estar en el vehículo que desea comprar.");
			return 1;
		}

		new vehicleid = GetPlayerVehicleID(playerid);
		new v = GetCarDealershipVehicleId(vehicleid);
		new d = GetCarDealershipId(vehicleid);
		if(response)
		{
		    if(carsforplayer[playerid] == 15) return SendClientMessageEx(playerid,COLOR_WHITE,"{A2DC35}[INFO]:{FFFFFF} Tienes 15 coches liberados, primero guarda uno para comprar otro.");
            if(CDSInfo[d][cdVehicleSpawn][0] == 0.0 && CDSInfo[d][cdVehicleSpawn][1] == 0.0 && CDSInfo[d][cdVehicleSpawn][2] == 0.0)
            {
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El propietario de este concesionario no ha configurado completamente los puntos de spawn de coches.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            new playervehicleid = GetPlayerFreeVehicleId(playerid);
            new carsamount = VehicleCount(playerid);
            if((Info[playerid][pVIP] == 0) && carsamount >= 4)
			{
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, usuarios normales sólo pueden tener 4 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
			}
            if(Info[playerid][pVIP] == 1 && carsamount >= 5)
            {
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, {FFFF00}BRONCEVIP{FFFFFF} sólo puede tener 5 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pVIP] == 2 && carsamount >= 6)
            {
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, {FFFF00}PLATAVIP{FFFFFF} sólo puede tener 6 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pVIP] == 3 && carsamount >= 7)
            {
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, {FFFF00}GOLDVIP{FFFFFF} sólo puede tener 7 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pVIP] == 4 && carsamount >= 8)
            {
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, {FFFF00}PLATINOVIP{FFFFFF} sólo puede tener 8 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pVIP] == 5 && carsamount >= 10)
            {
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, {FFFF00}MODERADORVIP{FFFFFF} sólo puede tener 10 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
		    if(playervehicleid == -1)
		    {
		        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Este jugador no puede tener más coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
		    }
		    new randcolor1 = Random(0, 126);
		    new randcolor2 = Random(0, 126);
		    TogglePlayerControllable(playerid, 1);
		    new cost;
		    if(Info[playerid][pVIP] < 1)
            {
                cost = CDSInfo[d][cdVehicleCost][v];
	            if(GetPVarInt(playerid, "Cash") < CDSInfo[d][cdVehicleCost][v])
	            {
					SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero suficiente para comprar este coche.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
	            }
                format(string, sizeof(string), "{A2DC35}[CONCE]:{FFFFFF} Gracias por comprar en %s.", CDSInfo[d][cdMessage]);
		        SendClientMessageEx(playerid, COLOR_GRAD1, string);
		        SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-CDSInfo[d][cdVehicleCost][v]);
		        CDSInfo[d][cdTill] += ( CDSInfo[d][cdVehicleCost][v] * 40 ) / ( 100 );
	        }
	        else
	        {
				cost = ( CDSInfo[d][cdVehicleCost][v] * 80 ) / ( 100 );
	            if(GetPVarInt(playerid, "Cash") < cost)
	            {
					SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero suficiente para comprar este coche.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
	            }

                format(string, sizeof(string), "{A2DC35}[CONCE]:{FFFFFF} Gracias por comprar en %s.", CDSInfo[d][cdMessage]);
		        SendClientMessageEx(playerid, COLOR_GRAD1, string);
		        SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash") - cost );
				CDSInfo[d][cdTill] += cost;
     		}
            new car = CreatePlayerVehicle(playerid, playervehicleid, CDSInfo[d][cdVehicleModel][v], CDSInfo[d][cdVehicleSpawn][0], CDSInfo[d][cdVehicleSpawn][1], CDSInfo[d][cdVehicleSpawn][2], CDSInfo[d][cdVehicleSpawn][3], randcolor1, randcolor2, cost);
            SetPlayerPos(playerid, CDSInfo[d][cdVehicleSpawn][0], CDSInfo[d][cdVehicleSpawn][1], CDSInfo[d][cdVehicleSpawn][2]+2);
			SetTimerEx("PutPlayerInVeh", 2000, 0, "dd", playerid, car);
            SavecDealership(d);
		}
		else
		{
            RemovePlayerFromVehicle(playerid);
            new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz+1.2);
            TogglePlayerControllable(playerid, 1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDEDIT)
	{ //Concesionario
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0)
			{
				format(string, sizeof(string),"Por favor, escriba la identificación del modelo del nuevo vehículo.");
		        SafeDialogEx(playerid,DIALOG_CDNEWVEH,DIALOG_STYLE_INPUT,"{00F70C}Advertencia:",string,"Ok","Cancelar");
			}
			else if(listitem == 1) // My Vehicles
			{
				new vehicles;
                for(new i=0; i<MAX_DEALERSHIPVEHICLES; i++)
	            {
					if(CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][i] != 0)
					{
						vehicles++;
		                format(string, sizeof(string), "Vehiculo %d| Nombre: %s | Precio: %d.",i+1,GetVehicleName(CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][i]),CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleCost][i]);
		                SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				if(vehicles)
				{
				    SafeDialogEx(playerid, DIALOG_CDEDITCARS, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " Elija un vehículo para editar:", "Editar", "Atrás");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Este Concesionario no tiene ningún coche.");
				}
			}
			else if(listitem == 2) // Upgrade
			{
				new listitems[] = "1 Vehicle Spawn\n2 Radio\n3 Nombre del Negocio";
			    SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continua.", listitems,"Ok","Cancelar");
			}
			else if(listitem == 3) // Till
			{
				new listitems[] = "1 Retirar\n2 Depositar";
			    SafeDialogEx(playerid,DIALOG_CDTILL,DIALOG_STYLE_LIST,"Elige y continua.", listitems,"Ok","Cancelar");
			}
		}
		else
		{
			SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDTILL)
	{ // Concesionario dialog
	    if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Withdraw
			{
				format(string, sizeof(string), "Tienes $%d en la cuenta de tu caja.\n\n\tCuanto deseas retirar?", CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				SafeDialogEx(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"{00F70C}Retirar", string,"Ok","Cancelar");
			}
			else if(listitem == 1) // Deposit
			{
				format(string, sizeof(string), "Tienes $%d en la cuenta de tu caja.\n\n\tCuanto deseas depositar?", CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				SafeDialogEx(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"{00F70C}Depositar", string,"Ok","Cancelar");
			}
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDWITHDRAW)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if (isnumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill] < money)
	             {
                     format(string, sizeof(string), "No tienes ese dinero en tu caja!\n\nTienes $%d en tu caja.\n\n\tCuanto dinero quieres retirar?", CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				     SafeDialogEx(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"{00F70C}Retirar", string,"Ok","Cancelar");
                     return 1;
	             }
	             CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill] -= money;
	             SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	             format(string, sizeof(string), "Retiraste $%d de tu caja, nuevo balance: $%d", money, CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
	             SendClientMessageEx(playerid, COLOR_GRAD2, string);
	             SavecDealership(GetPVarInt(playerid, "editingcd"));
                 SetPVarInt(playerid, "editingcd", -1);
			}
        }
		else
		{
             SavecDealership(GetPVarInt(playerid, "editingcd"));
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDSELL)
	{
		if(response)
		{
			if(GetPVarInt(playerid, "editingcd") == -1) return 1;
            SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+ (CDSInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2));
			SellCarDealership(GetPVarInt(playerid, "editingcd"));
			PlayerPlayMusic(playerid);
			format(string, sizeof(string), "Concesionario de coches vendido con éxito por %d.", CDSInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
            SetPVarInt(playerid, "editingcd", -1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDDEPOSIT)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if (isnumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(GetPVarInt(playerid, "Cash") < money)
	             {
                     format(string, sizeof(string), "No tienes el dinero especificado!\n\nTienes $%d en tu caja.\n\n\tCuanto dinero quieres depositar?", CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				     SafeDialogEx(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"{00F70C}Depositar", string,"Select","Cancel");
                     return 1;
	             }
	             CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill] += money;
	             SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-money);
	             format(string, sizeof(string), "Depositaste $%d a tu caja, Nuevo Balance: $%d", money, CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
	             SendClientMessageEx(playerid, COLOR_GRAD2, string);
	             SavecDealership(GetPVarInt(playerid, "editingcd"));
                 SetPVarInt(playerid, "editingcd", -1);
			}
		}
		else
		{
             SavecDealership(GetPVarInt(playerid, "editingcd"));
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDNEWVEH)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new modelid, d;
			new Float: x, Float: y, Float: z, Float: a;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
	        if (!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El modelo debe ser números.");
            if (IsPlayerInRangeOfPoint(playerid, CDSInfo[d][cdRadius], CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 100 || modelid > 611) { SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} ID's  No menor de 400 y no mayor de 611."); return 1; }
	             new cdvehicleid = CreateCarDealershipVehicle(d, modelid, x, y, z, a, 1337);
	             if(cdvehicleid == -1)
		         {
		             SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El coche no se puede crear.");
		         }
	             else
	             {
					 PutPlayerInVehicle(playerid, CDSInfo[d][cdVehicleId][cdvehicleid], 0);
                     format(text_info, sizeof(text_info), "{A2DC35}[INFO]:{FFFFFF} Vehículo de Concesionario creado con la ID {5ABAFF}%d.", cdvehicleid-1);
		             SendClientMessageEx(playerid, COLOR_WHITE, text_info);
		             SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Por favor, ponte donde quieres añadir tu nuevo vehículo.");
				     SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Una vez listo, presiona el botón {FF0000}FIRE - DISPARAR {FFFFFF}(CLICK).");
				     SetPVarInt(playerid, "editingcdvehnew", 1);
		             SetPVarInt(playerid, "editingcdveh", cdvehicleid);
	             }
	        }
	        else
	        {
                 SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Estas fuera del radio del Concesionario, por favor vuelve a intentarlo.");
                 TogglePlayerControllable(playerid, true);
	        }
		}
		else
		{
            TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDEDITCARS)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new cdvid;
            if (isnumeric(inputtext))
	        {
	             cdvid = strval(inputtext);
	             if(CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][cdvid-1])
	             {
	                 SetPVarInt(playerid, "editingcdveh", cdvid-1);
	                 new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			         SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
				 }
	        }
		}
		else
		{
		    new listitems[] = "1 Nuevo Coche\n2 Mis Coches\n3 Mejorar\n4 Ganancias";
			SafeDialogEx(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"{00F70C}Elige y Continua", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDUPGRADE)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Vehicle Spawn
			{
		        SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Por favor, ponte donde quieres que este el vehiculo para la venta.");
				SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Una vez listo, presiona el botón {FF0000}FIRE - DISPARAR {FFFFFF}(CLICK).");
				SetPVarInt(playerid, "editingcdvehpos", 2);
			}
            if(listitem == 1) // Radio
			{
				SafeDialogEx(playerid, DIALOG_CDRADIUS, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " Elige el nuevo Radio:", "Editar", "Atrás");
			}
			else if(listitem == 2) // Dealership Name
			{
				SafeDialogEx(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " Elige el nuevo Nombre:", "Editar", "Atrás");
			}
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDEDITONE)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
            if(listitem == 0) // Edit Model
			{
	             SafeDialogEx(playerid, DIALOG_CDEDITMODEL, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " * Elige el nuevo modelo (id):", "Editar", "Atrás");
	        }
	        else if(listitem == 1) // Edit Cost
			{
	             SafeDialogEx(playerid, DIALOG_CDEDITCOST, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:",  " * Elige el nuevo precio del coche:", "Editar", "Atrás");
	        }
	        else if(listitem == 2) // Edit Park
			{
				 PutPlayerInVehicle(playerid, CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")], 0);
	             SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Por favor, ponte donde quieres aparcar el vehículo.");
				 SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Una vez listo, presiona el botón {FF0000}FIRE - DISPARAR {FFFFFF}(CLICK).");
				 SetPVarInt(playerid, "editingcdvehpos", 1);
	        }
	        else if(listitem == 3) // Delete Vehicle
			{
	             format(string, sizeof(string), "¿Seguro que quieres eliminar este %s?\nNota: No recibirás ningún tipo de dinero.",
				 GetVehicleName(CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")]));
		         SafeDialogEx(playerid,DIALOG_CDDELVEH,DIALOG_STYLE_MSGBOX,"{00F70C}Advertencia:",string,"Ok","Cancel");
	        }
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcdveh", -1);
		}
	}
	else if(dialogid == DIALOG_CDRADIUS)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
			new Float:radius = floatstr(inputtext);
			new Float:radiusex = CDSInfo[d][cdRadius];
			new test = floatround(radius), test1 = floatround(radiusex);
            if (CDSInfo[d][cdRadius] > radius)
	        {
				 new cost = ( test - test1 ) * ( test1 * 1000 );
				 if(GetPVarInt(playerid, "Cash") < cost)
				 {
                     format(string, sizeof(string), "!{FFFFFF} No tienes suficiente dinero de esta mejora ($%d).",cost);
                     SendClientMessageEx(playerid, COLOR_ROJO, string);
                     return 1;
				 }
				 format(string, sizeof(string), "{1DF5F7} Concesionario:{FFFFFF} Radio actualizado desde %.1f a %.1f por $%d.",radiusex, radius, cost);
                 SendClientMessageEx(playerid, COLOR_GREY, string);
	             CDSInfo[d][cdRadius] = radius;
        		 format(string, sizeof(string),"{A2DC35}Concesionario (%d) %s\n{2F99B5}Dueño: %s", d, CDSInfo[d][cdMessage], CDSInfo[d][cdOwner]);
	             UpdateDynamic3DTextLabelText(CDSInfo[d][cdTextLabel], COLOR_GENERAL, string);
	             new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario\n4 Precio";
			     SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continúa", listitems,"Ok","Cancelar");
			     SavecDealership(GetPVarInt(playerid, "editingcd"));
	        }
		}
		else
		{
		    new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
			SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continúa", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDNAME)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
            if (!strlen(inputtext))
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Debes escribir un nombre.");
    	        SafeDialogEx(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " Elige el nuevo nombre:", "Editar", "Atrás");
		        return 1;
			}
			new cost = strlen(inputtext) * 50;
			format(string, sizeof(string), "{A2DC35}[INFO]:{FFFFFF} Nombre del Concesionario fue mejorado de %s a %s por $%d.", CDSInfo[d][cdMessage], inputtext, cost);
            SendClientMessageEx(playerid, COLOR_GREY, string);
	        strmid(CDSInfo[d][cdMessage], inputtext, 0, strlen(inputtext), 255);
	        format(string, 128,"{A2DC35}Concesionario (%d) %s\n{2F99B5}Dueño: %s", d, CDSInfo[d][cdMessage], CDSInfo[d][cdOwner]);
	        UpdateDynamic3DTextLabelText(CDSInfo[d][cdTextLabel], COLOR_GENERAL, string);
	        new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
			SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continúa", listitems,"Ok","Cancelar");
			SavecDealership(GetPVarInt(playerid, "editingcd"));
		}
		else
		{
		    new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
			SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continúa", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDEDITPARK)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1 &&  GetPVarInt(playerid, "editingcdvehpos") == 1 || GetPVarInt(playerid, "editingcdvehnew"))
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d, v, text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
			GetVehiclePos(CDSInfo[d][cdVehicleId][v], x, y, z);
	        GetVehicleZAngle(CDSInfo[d][cdVehicleId][v], a);
			if(IsPlayerInRangeOfPoint(playerid, CDSInfo[d][cdRadius], CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		    {
			     CDSInfo[d][cdVehicleSpawnX][v] = x;
                 CDSInfo[d][cdVehicleSpawnY][v] = y;
                 CDSInfo[d][cdVehicleSpawnZ][v] = z;
                 CDSInfo[d][cdVehicleSpawnAngle][v] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
                 SetPVarInt(playerid, "editingcdvehnew", 0);
                 DestroyDynamic3DTextLabel(CDSInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CDSInfo[d][cdVehicleId][v]);
	             new carcreated;
	             carcreated = CreateVehicle(CDSInfo[d][cdVehicleModel][v], CDSInfo[d][cdVehicleSpawnX][v], CDSInfo[d][cdVehicleSpawnY][v], CDSInfo[d][cdVehicleSpawnZ][v], CDSInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info), "{FFFFFF}¡Vehículo en venta!\n{FFFFFF}Nombre: {2EDFFF}%s\n{FFFFFF}Precio: {2EDFFF}$%d", GetVehicleName(carcreated), CDSInfo[d][cdVehicleCost][v]);
                 CDSInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_MAGENTA,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CDSInfo[d][cdVehicleId][v] = carcreated;
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			     SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
			     SavecDealership(d);
			}
			else
			{
                 SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Estás fuera del radio de este Concesionario, por favor vuelve a intentarlo.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d;
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
			d = GetPVarInt(playerid, "editingcd");
			if(IsPlayerInRangeOfPoint(playerid, CDSInfo[d][cdRadius], CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		    {
			     CDSInfo[d][cdVehicleSpawn][0] = x;
                 CDSInfo[d][cdVehicleSpawn][1] = y;
                 CDSInfo[d][cdVehicleSpawn][2] = z;
                 CDSInfo[d][cdVehicleSpawn][3] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
			     SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige para continuar", listitems,"Ok","Cancelar");
			     SavecDealership(d);
			}
			else
			{
                 SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Estás fuera del radio de este Concesionario, por favor vuelve a intentarlo.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 1)
		{
            new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
            new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
		    SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige para continuar", listitems,"Ok","Cancelar");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
	}
    else if(dialogid == DIALOG_CDEDITMODEL)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new modelid, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if (isnumeric(inputtext))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} ID´s: No puede ser menos de 400 o mayor 611 !"); return 1; }
	             CDSInfo[d][cdVehicleModel][v] = modelid;
	             DestroyDynamic3DTextLabel(CDSInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CDSInfo[d][cdVehicleId][v]);
	             new carcreated;
	             carcreated = CreateVehicle(CDSInfo[d][cdVehicleModel][v], CDSInfo[d][cdVehicleSpawnX][v], CDSInfo[d][cdVehicleSpawnY][v], CDSInfo[d][cdVehicleSpawnZ][v], CDSInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info),"%s En Venta | Precio: %d", GetVehicleName(carcreated), CDSInfo[d][cdVehicleCost][v]);
                 CDSInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_MAGENTA,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CDSInfo[d][cdVehicleId][v] = carcreated;
	             new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			     SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
			     SavecDealership(d);
	        }
		}
		else
		{
		    new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDEDITCOST)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new price, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if (isnumeric(inputtext))
	        {
	             price = strval(inputtext);
	             CDSInfo[d][cdVehicleCost][v] = price;
	             format(text_info, sizeof(text_info), "%s En Venta | Precio: %d", GetVehicleName(CDSInfo[d][cdVehicleId][v]), CDSInfo[d][cdVehicleCost][v]);
	             UpdateDynamic3DTextLabelText(CDSInfo[d][cdVehicleLabel][v], COLOR_MAGENTA, text_info);
	             new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			     SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
			     SavecDealership(d);
	        }
		}
		else
		{
		    new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDDELVEH)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			DestroyCarDealershipVehicle(GetPVarInt(playerid, "editingcd"), GetPVarInt(playerid, "editingcdveh"));
			SavecDealership(GetPVarInt(playerid, "editingcd"));
		}
		else
		{
  			new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
		}
	}
 	if (dialogid == ELEVATOR3 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 1564.8, -1666.2, 28.3);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 1568.6676, -1689.9708, 1645.8541);
		 	SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 500);
		}
		else
		{
			SetPlayerPos(playerid, 1568.6676, -1689.9708, 1645.8541);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR2 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 1564.8, -1666.2, 28.3);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 500);
		}
	}
	if (dialogid == ELEVATOR4 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 301.5812,-1490.6759,-45.1302);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 600);
		}
		else
		{
			SetPlayerPos(playerid, 308.8113,-1509.8134,77.7645);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR5 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 316.2381,-1513.3770,24.9219);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 308.8113,-1509.8134,77.7645);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR7 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 301.5812,-1490.6759,-45.1302);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 600);
		}
		else
		{
			SetPlayerPos(playerid, 316.2381,-1513.3770,24.9219);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	else if(dialogid == HQENTRANCE)
	{
	    if(response)
	    {
	        new Float: x, Float: y, Float: z, Float: a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        if(GetPVarInt(playerid, "editingfamhqaction") == 5)
	        {
	            if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
	            DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = x;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = y;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = z;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = a;
            	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] = CreateDynamicPickup(1318, 23, x, y, z);
				format(string, sizeof(string), "%s", fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
            	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, x, y, z+0.6, 4.0);
            	SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} HQ, entrada cambiada.");
            	TogglePlayerControllable(playerid, true);
            	saveFamiliesHQ();
            	return 1;
			}
			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = x;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = y;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = z;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = a;
         	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] = CreateDynamicPickup(1318, 23, x, y, z);
			format(string, sizeof(string), "%s", fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
   			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, x, y, z+0.6, 4.0);
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} HQ entrada guardada, Por favor colocate en el lugar de la salida, y presiona el boton {FF0000}FIRE{FFFFFF}.");
            SetPVarInt(playerid, "editingfamhqaction", 2);
            TogglePlayerControllable(playerid, true);
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 5)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Se ha cancelado el cambio exterior de esta HQ.");
	            SetPVarInt(playerid, "editingfamhqaction", 0);
	        	SetPVarInt(playerid, "editingfamhq", 255);

	        	TogglePlayerControllable(playerid, true);
	            return 1;
	        }
	        SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Ha cancelado la creación de esta HQ.");
	        if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	    }
	}
	else if(dialogid == HQEXIT)
	{
	    if(response)
	    {
	        new Float: x, Float: y, Float: z, Float: a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        if(GetPVarInt(playerid, "editingfamhqaction") == 6)
	        {
	            if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
	            fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = x;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = y;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = z;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = a;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = GetPlayerInterior(playerid);
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyVirtualWorld] = GetPVarInt(playerid, "editingfamhq")+900000;
            	SendClientMessageEx(playerid, COLOR_GRAD2, "HQ Exit changed!.");
            	TogglePlayerControllable(playerid, true);
            	saveFamiliesHQ();
            	return 1;
	        }
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = x;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = y;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = z;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = a;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = GetPlayerInterior(playerid);
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyVirtualWorld] = GetPVarInt(playerid, "editingfamhq")+900000;
            format(string,128,"HQ Salida guardada!\n\n¿Es esto un interior de un mapeado personalizado?");
        	SafeDialogEx(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"{00F70C}Advertencia:",string,"Si","No");
            SetPVarInt(playerid, "editingfamhqaction", 3);
            TogglePlayerControllable(playerid, true);
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 6)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Se ha cancelado el cambio interior de esta HQ.");
	            SetPVarInt(playerid, "editingfamhqaction", 0);
	        	SetPVarInt(playerid, "editingfamhq", 255);
	        	TogglePlayerControllable(playerid, true);
	            return 1;
	        }
	        SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has cancelado la creación de esta HQ.");
	        if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	    }
	}
	else if(dialogid == HQCUSTOMINT)
	{
	    if(response)
	    {
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyCustomMap] = 1;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 255;
	        if(GetPVarInt(playerid, "editingfamhqaction") == 7)
	        {
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has cambiado el interior personalizado para esta HQ.");
   			}
   			else
   			{
   				SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has creado correctamente este HQ.");
   			}
	        SetPVarInt(playerid, "editingfamhq", 255);
	        saveFamiliesHQ();
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 7)
	        {
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has cambiado el interior personalizado para esta HQ.");
   			}
   			else
   			{
   				SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has creado correctamente este HQ.");
   			}
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyCustomMap] = 0;
	        SetPVarInt(playerid, "editingfamhq", 255);
	        saveFamiliesHQ();
	    }
	}
	else if(dialogid == HQDELETE)
	{
	    if(!response)
	    {
	    }
	    else
	    {
	        format(string,128,"{A2DC35}[INFO]:{FFFFFF} Has eliminado correctamente '%s' HQ", fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
	        SendClientMessageEx(playerid, COLOR_GRAD2, string);
	        if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	        saveFamiliesHQ();
	    }
	}
	if((dialogid == BUYTOYSCOP) && response)
	{
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24] = "Nada";

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		SafeDialogEx(playerid, BUYTOYSCOP2, DIALOG_STYLE_LIST, "{CC0066}Selecciona un slot libre", stringg, "Seleccionar", "Cancelar");
	}
	if((dialogid == BUYTOYSCOP2) && response)
	{
	    if(listitem >= 8 && Info[playerid][pVIP] <= 1 || listitem >= 8 && Info[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Debes ser un nivel mayor de {FFFF00}PREMIUMVIP{FFFFFF} para usar este slot.");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ya tienes algo en esa ranura, eliminala con /toys");

		slotselection[playerid] = listitem;

		new stringg[512];
		for(new x;x<sizeof(HoldingObjectsCop);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsCop[x][holdingmodelname], HoldingObjectsCop[x][holdingprice]);
		}
		SafeDialogEx(playerid, BUYTOYSCOP3, DIALOG_STYLE_LIST, "{CC0066}» Selecciona la ranura del Toy", stringg, "Comprar", "Cancelar");
	}
	if((dialogid == BUYTOYSCOP3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjectsCop[listitem][holdingprice])
		{
		    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar eso.");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjectsCop[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsCop[listitem][holdingmodelid];
		    Tax += HoldingObjectsCop[listitem][holdingprice];

   			new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}

			format(string, sizeof(string), "* Has comprado un %s por $%d (Slot: %d)", HoldingObjectsCop[listitem][holdingmodelname], HoldingObjectsCop[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "{CC0066}Inf. Toy's:{FFFFFF} Para configurar un toy, debe ingresar en:{CC0066} /Toys");
		}
	}
	if((dialogid == BUYTOYSGOLD) && response)
	{
 		if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes acceso a este comando.");
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++){
  			new name[24] = "Nada";
			for(new i;i<sizeof(HoldingObjectsAll);i++){
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID]){
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		SafeDialogEx(playerid, BUYTOYSGOLD2, DIALOG_STYLE_LIST, "{CC0066}Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
	}
	if((dialogid == BUYTOYSGOLD2) && response)
	{
        if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes acceso a este comando.");
	    if(listitem >= 8 && Info[playerid][pVIP] <= 1 || listitem >= 8 && Info[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Debes ser un nivel mayor de Premium para usar este slot.");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "{CC0066}Inf. Toy's:{FFFFFF} Ya tienes un toy en la ranura seleccionada, busque otra.");

		slotselection[playerid] = listitem;
		new stringg[1536];
		for(new x;x<sizeof(HoldingObjectsGold);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsGold[x][holdingmodelname], HoldingObjectsGold[x][holdingprice]);
		}
		SafeDialogEx(playerid, BUYTOYSGOLD3, DIALOG_STYLE_LIST, "{CC0066}» Selecciona la ranura del Toy", stringg, "Comprar", "Cancelar");
	}
	if((dialogid == BUYTOYSGOLD3) && response){
	    if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes acceso a este comando.");
		if(GetPlayerCash(playerid) < HoldingObjectsGold[listitem][holdingprice]){
		    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero para esto.");
		}
		else{
			GivePlayerCash(playerid, -HoldingObjectsGold[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsGold[listitem][holdingmodelid];

   			new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140)){
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910){
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935){
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920){
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078){
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890){
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}

			format(string, sizeof(string), "* Compraste un %s por $%d (Slot: %d)", HoldingObjectsGold[listitem][holdingmodelname], HoldingObjectsGold[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "{CC0066}Inf. Toy's:{FFFFFF} Para selección y/o editar tu objeto, debes colocar: {CC0066}/Toys");
		}
	}
	if((dialogid == BUYTOYS) && response)
	{
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24];
	    	format(name, sizeof(name), "Nada");

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		SafeDialogEx(playerid, BUYTOYS2, DIALOG_STYLE_LIST, "{CC0066}Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
	}
	if((dialogid == BUYTOYS) && !response)
	{
	    if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "{CC0066}Inf. Toy's:{FFFFFF} No tienes acceso a esta función. (VIP Oro o Mayor.)");
	    return SafeDialogEx(playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "{CC0066}Tienda de Accesorios VIP", "Bienvenido a la tienda de accesorios VIP! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir un slot.","Ok", "Salir");
	}
	if((dialogid == BUYTOYS2) && response)
	{
	    if(listitem >= 8 && Info[playerid][pVIP] <= 1 || listitem >= 8 && Info[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Debes ser un nivel mayor de Premium para usar este slot.");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "{CC0066}Inf. Toy's:{FFFFFF} Ya tienes algo en esa ranura, eliminala con /toys");
		slotselection[playerid] = listitem;
		new stringg[3730]; //
		for(new x;x<sizeof(HoldingObjects);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s [$%d]\n", stringg, HoldingObjects[x][holdingmodelname], HoldingObjects[x][holdingprice]);
		}
		SafeDialogEx(playerid, BUYTOYS3, DIALOG_STYLE_LIST, "{CC0066}» Selecciona la ranura del Toy", stringg, "Comprar", "Cancelar");
	}
	if((dialogid == BUYTOYS3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjects[listitem][holdingprice]) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes suficiente dinero.");
		else
		{
			GivePlayerCash(playerid, -HoldingObjects[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjects[listitem][holdingmodelid];
		    new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid == 19317)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.079;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = -0.10;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.09;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 30.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			format(string, sizeof(string), "* Compraste un %s por $%d (Slot: %d)", HoldingObjects[listitem][holdingmodelname], HoldingObjects[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "{CC0066}Inf. Toy's:{FFFFFF} Para configurar un toy, debe ingresar en: {CC0066}/Toys");
		}
	}
	if((dialogid == TOYS) && response)
	{
		if(listitem == 0)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			SafeDialogEx(playerid, WEARTOY, DIALOG_STYLE_LIST, "{CC0066}» Selecciona la ranura del Toy", stringg, "Seleccionar", "Cancelar");
	    }
		else if(listitem == 1)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			SafeDialogEx(playerid, EDITTOYS, DIALOG_STYLE_LIST, "{CC0066}» Selecciona la ranura del Toy", stringg, "Seleccionar", "Cancelar");
   		}
		else if(listitem == 2)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			SafeDialogEx(playerid, DELETETOY, DIALOG_STYLE_LIST, "{CC0066}» Selecciona la ranura del Toy", stringg, "Borrar", "Cancelar");
		}
	}
	if((dialogid == EDITTOYS) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        SafeDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Error", "No tiene nada en ese slot!", "OK", "");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "{CC0066}Inf. Toy's:{FFFFFF} Posiciona bien la cámara y usa /headmove para una edición mucho mejor.");
		    slotselection[playerid] = listitem;
		    ShowEditMenu(playerid);
		}
	}
	if((dialogid == EDITTOYS2))
	{
	    if(response)
	    {
	        switch(listitem)
			{
			    case 0: SafeDialogEx(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, "{CC0066}Selecciona una parte!", "Columna\nCabeza\nBrazo Izq Sup\nBrazo Der Sup\nMano Izq\nMano Derecha\nMuslo Izq\nMuslo Der\nPie Izq\nPie Der\nRight calf\nLeft calf\nAnteBrazo Izq\nAnteBrazo Der\nClavicula Izq\nClavicula Der\nCuello\nQuijada", "Select", "Cancel");
			    case 1: SafeDialogEx(playerid, EDITTOYSPX, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un numero para la posición X, de -100 a 100 (Ejm: 55, o 33.4)", "OK", "Cancelar");
			    case 2: SafeDialogEx(playerid, EDITTOYSPY, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un numero para la posición Y, de -100 a 100 (Ejm: 55, o 33.4)", "OK", "Cancelar");
			    case 3: SafeDialogEx(playerid, EDITTOYSPZ, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un numero para la posición Z, de -100 a 100 (Ejm: 55, o 33.4)", "OK", "Cancelar");
			    case 4: SafeDialogEx(playerid, EDITTOYSRX, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un numero para la rotación X,de 0 a 360 (Ejm: 90, o 270.4)", "OK", "Cancelar");
			    case 5: SafeDialogEx(playerid, EDITTOYSRY, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un numero para la rotación Y, de 0 a 360 (Ejm: 90, o 270.4)", "OK", "Cancelar");
			    case 6: SafeDialogEx(playerid, EDITTOYSRZ, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un numero para la rotación Z, de 0 a 360 (Ejm: 1, o 0.93)", "OK", "Cancelar");
			    case 7: SafeDialogEx(playerid, EDITTOYSIZX, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un número para el tamaño X, de 0.1 a 1.5 (Ejm: 1, o 0.93)", "OK", "Cancelar");
			    case 8: SafeDialogEx(playerid, EDITTOYSIZY, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un número para el tamaño Y, de 0.1 a 1.5 (Ejm: 1, o 0.93)", "OK", "Cancelar");
			    case 9: SafeDialogEx(playerid, EDITTOYSIZZ, DIALOG_STYLE_INPUT, "{CC0066}Menu Accesorios: {FFFFFF}Edición", "Escribe un número para el tamaño Z, de 0.1 a 1.5 (Ejm: 1, o 0.93)", "OK", "Cancelar");
				case 10:
				{
					SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);
					EditAttachedObject(playerid, slotselection[playerid]);
					Editing[playerid] =1;
				    return SendClientMessage(playerid, -1, "* Mantén presionado {2EDFFF}ESPACIO{FFFFFF} para cambiar la posición de la cámara.");
				}
			}
		}
		else
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			SafeDialogEx(playerid, EDITTOYS, DIALOG_STYLE_LIST, "{CC0066}» Selecciona la ranura del Toy", stringg, "Seleccionar", "Cancelar");
		}
	}
	if(dialogid == EDITTOYSPX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
     		if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
			offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSIZX)
	{
	    if(response)
	    {
	        if(Info[playerid][pAdminZC] == 6000)
	        {
	        	new Float:offset = floatstr(inputtext);
		        if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = offset;
	        }
	        else
	        {
	        	new Float:offset = floatstr(inputtext);
	        	if(offset < 0.1) offset = 0.1;
				else if(offset > 1.5) offset = 1.5;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = offset;
	        }
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSIZY)
	{
	    if(response)
	    {
	        if(Info[playerid][pAdminZC] == 6000)
	        {
	        	new Float:offset = floatstr(inputtext);
		        if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = offset;
	        }
	        else
	        {
	        	new Float:offset = floatstr(inputtext);
	        	if(offset < 0.1) offset = 0.1;
				else if(offset > 1.5) offset = 1.5;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = offset;
	        }
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSIZZ)
	{
	    if(response)
	    {
	        if(Info[playerid][pAdminZC] == 6000)
	        {
	        	new Float:offset = floatstr(inputtext);
		        if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = offset;
	        }
	        else
	        {
	        	new Float:offset = floatstr(inputtext);
	        	if(offset < 0.1) offset = 0.1;
				else if(offset > 1.5) offset = 1.5;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = offset;
	        }
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSBONE)
	{
	    if(response)
	    {
	        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = listitem+1;
		}
	 	ShowEditMenu(playerid);
	}
	if((dialogid == WEARTOY) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        SafeDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Error", "No tienes ningún objeto en este slot!", "OK", "");
		}
		else
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
			    format(string, sizeof(string), "{CC0066}Inf. Toy's:{FFFFFF} Te quitaste el toy: %s (Ubicación: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			    RemovePlayerAttachedObject(playerid, listitem);
			}
			else
			{
			    SetPlayerAttachedObject(playerid, listitem, PlayerToyInfo[playerid][listitem][ptModelID], PlayerToyInfo[playerid][listitem][ptBone], PlayerToyInfo[playerid][listitem][ptPosX], PlayerToyInfo[playerid][listitem][ptPosY], PlayerToyInfo[playerid][listitem][ptPosZ], PlayerToyInfo[playerid][listitem][ptRotX], PlayerToyInfo[playerid][listitem][ptRotY], PlayerToyInfo[playerid][listitem][ptRotZ], PlayerToyInfo[playerid][listitem][ftscaleX],
				PlayerToyInfo[playerid][listitem][ftscaleY], PlayerToyInfo[playerid][listitem][ftscaleZ]);
			    new name[24];
			    format(name, sizeof(name), "Nada");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(string, sizeof(string), "%s puesto correctamente. (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}

	if((dialogid == DELETETOY) && response)
	{
		PlayerToyInfo[playerid][listitem][ptModelID] = 0;
		PlayerToyInfo[playerid][listitem][ptBone] = 0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleY] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleX] = 0.0;
		if(IsPlayerAttachedObjectSlotUsed(playerid, listitem)) RemovePlayerAttachedObject(playerid, listitem);
		format(string, sizeof(string), "{CC0066}Inf. Toy's:{FFFFFF} Eliminstate un toy de tu ranura:{CC0066} %d", listitem);
	    SafeDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "{CC0066}Toy Eliminado", string, "OK", "");
	}
	if(dialogid == GOOGLE)
	      {
		    if(response == 1)
		    {
		        Bought(playerid, 3);
	    	    if(strfind(inputtext, "mivehiculo", true) != -1)
				{
                    SendClientMessageEx(playerid, COLOR_AT, "____________________________________________________");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Resultados encontrados de:{2EDFFF} www.mivehiculo.com");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}• Se marcó la ubicación en Google Map!");
					SendClientMessageEx(playerid, COLOR_AT, "____________________________________________________");
				    SetPlayerCheckpoint(playerid, 620.408386,-1458.275878,13.429050, 10.0);
				    return 1;
				}
				else if(strfind(inputtext, "ropademoda", true) != -1)
				{
                    SendClientMessageEx(playerid, COLOR_AT, "____________________________________________________");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Resultados encontrados de:{2EDFFF} www.ropademoda.com");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}• Se marcó la ubicación en Google Map!");
					SendClientMessageEx(playerid, COLOR_AT, "____________________________________________________");
			    	SetPlayerCheckpoint(playerid, 460.6988,-1501.1395,31.0564, 10.0);
			    	return 1;
				}
				else if(strfind(inputtext, "Trabajos", true) != -1)
				{
                    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Resultados encontrados de:{2EDFFF} www.trabajos.com");
					SendClientMessageEx(playerid, COLOR_GREEN, "");
				    SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}• Bartender    • Chofer de Autobuses");
			    	SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}• Camionero    • Leñador");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}• Taxista    • Granjero");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}• Vendedor de Chalecos    • Artesano");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}• Heladero    • Jardinero");
		    		SendClientMessageEx(playerid, COLOR_GREEN, "");
		    		SendClientMessageEx(playerid, COLOR_AT, "____________________________________________________");
		    		return 1;
				}
				else if(strfind(inputtext, "banconacional", true) != -1)
				{
                    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Resultados encontrados de:{2EDFFF} www.banconacional.com");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}• Se marcó la ubicación en Google Map!");
					SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
				    SetPlayerCheckpoint(playerid, 1331.909912,-984.517517,33.876629, 10.0);
				    return 1;
				}
				else if(strfind(inputtext, "mirestaurante", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Resultados encontrados de:{2EDFFF} www.mirestaurante.com");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}• Se marcó la ubicación en Google Map!");
					SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
			    	SetPlayerCheckpoint(playerid, 354.492675,-1822.553955,4.803437, 10.0);
                	return 1;
            	}
				else if(strfind(inputtext, "gobierno", true) != -1)
				{
			    	SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Resultados encontrados de:{2EDFFF} www.gobierno.com");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}• Se marcó la ubicación en Google Map!");
					SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
			    	SetPlayerCheckpoint(playerid, 1481.8735,-1742.4076,12.5452, 10.0);
			    	SendClientMessageEx(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
			    	return 1;
				}
				else if(strfind(inputtext, "mirestaurante", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Resultados encontrados de:{2EDFFF} www.mirestaurante.com");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}• Se marcó la ubicación en Google Map!");
					SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}____________________________________________________");
			    	SetPlayerCheckpoint(playerid, 354.492675,-1822.553955,4.803437, 10.0);
                	return 1;
            	}
				else if(strfind(inputtext, "redtube", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
				    SendClientMessageEx(playerid, COLOR_GREEN, "");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}No se puede acceder a este sitio!");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FF0000}ERR_NAME_NOT_RESOLVED:{FFFFFF} No se encontró la dirección DNS del servidor de {FF0000}www.redtube.com");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
                	return 1;
            	}
				else if(strfind(inputtext, "yes", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
				    SendClientMessageEx(playerid, COLOR_GREEN, "");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}No se puede acceder a este sitio!");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FF0000}ERR_NAME_NOT_RESOLVED:{FFFFFF} No se encontró la dirección DNS del servidor de {FF0000}www.yes.xxx");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
                	return 1;
            	}
				else if(strfind(inputtext, "beeg", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
				    SendClientMessageEx(playerid, COLOR_GREEN, "");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}No se puede acceder a este sitio!");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FF0000}ERR_NAME_NOT_RESOLVED:{FFFFFF} No se encontró la dirección DNS del servidor de {FF0000}www.beeg.com");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
                	return 1;
            	}
				else if(strfind(inputtext, "hdonly", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
				    SendClientMessageEx(playerid, COLOR_GREEN, "");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}No se puede acceder a este sitio!");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FF0000}ERR_NAME_NOT_RESOLVED:{FFFFFF} No se encontró la dirección DNS del servidor de {FF0000}www.hdonly.com");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
                	return 1;
            	}
				else if(strfind(inputtext, "petardas", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
				    SendClientMessageEx(playerid, COLOR_GREEN, "");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}No se puede acceder a este sitio!");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FF0000}ERR_NAME_NOT_RESOLVED:{FFFFFF} No se encontró la dirección DNS del servidor de {FF0000}www.petardas.com");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
                	return 1;
            	}
				else if(strfind(inputtext, "rubias19", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
				    SendClientMessageEx(playerid, COLOR_GREEN, "");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}No se puede acceder a este sitio!");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FF0000}ERR_NAME_NOT_RESOLVED:{FFFFFF} No se encontró la dirección DNS del servidor de {FF0000}www.rubias19.com");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
                	return 1;
            	}
				else if(strfind(inputtext, "calientes", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
				    SendClientMessageEx(playerid, COLOR_GREEN, "");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}No se puede acceder a este sitio!");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FF0000}ERR_NAME_NOT_RESOLVED:{FFFFFF} No se encontró la dirección DNS del servidor de {FF0000}www.calientes.com");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
                	return 1;
            	}
				else if(strfind(inputtext, "xxx", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
				    SendClientMessageEx(playerid, COLOR_GREEN, "");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}No se puede acceder a este sitio!");
                    SendClientMessageEx(playerid, COLOR_GREEN, "");
                    SendClientMessageEx(playerid, COLOR_GREEN, "{FF0000}ERR_NAME_NOT_RESOLVED:{FFFFFF} No se encontró la dirección DNS del servidor de {FF0000}www.xxx.com");
					SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}____________________________________________________________________________________________________________");
                	return 1;
            	}
	    	}
		}
		    if(dialogid == BANCO_MENU)
    {
    	if(!response)
            {
                return 1;
            }

		 switch(listitem)
            {

                case 0:
				{
				SafeDialogEx(playerid,BANCO_SACAR, DIALOG_STYLE_INPUT, "{5CBA58}Banco S.A.", "{FFFFFF}Ingrese el monto que retirará:", "Retirar", "Cancelar");
				}
				case 1:
				{
				SafeDialogEx(playerid,BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "{5CBA58}Banco S.A.", "{FFFFFF}Ingrese el monto que depositará:", "Depositar", "Cancelar");
				}
				case 2:
				{
				SafeDialogEx(playerid,BANCO_TRANSFERIR, DIALOG_STYLE_INPUT, "{5CBA58}Banco S.A. - (Paso 1)", "{FFFFFF}Ingrese la ID del usuario:", "Siguiente", "Cancelar");
				}
				case 3:
				{
					new Info_Monto[100];
					format(Info_Monto, sizeof(Info_Monto), "{FFFFFF}Saldo: {5CBA58}$%d", Info[playerid][pAccount]);
			        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{5CBA58}Banco S.A.", Info_Monto, "{FFFFFF}Cerrar", "");
					return 1;
				}
    		}
	}


	if(dialogid == BANCO_TRANSFERIR)
    {
    if(!response)
            {
                SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{5CBA58}• Banco S.A.", "{FFFFFF}- Retirar\n{FFFFFF}- Depositar\n{FFFFFF}- Transferir\n{FFFFFF}- Balance", "Seleccionar", "Cancelar");
                return 1;
            }

        else
        {
        new idjugador = strval(inputtext);
        if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes que tener mínimo 2 Horas de juego para dar dinero.");
		if(playerid == idjugador) return SendClientMessage(playerid, COLOR_ROJO, "!{FFFFFF} No puedes transferirte dinero a ti mismo.");
        if(!IsPlayerConnected(idjugador)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador no conectado.");
        if (GetPVarInt(playerid, "GiveMoneyTimer") > 0)
		{
					format(string, sizeof(string), "Tienes que esperar %d segundos después de transferido dinero.", GetPVarInt(playerid, "GiveMoneyTimer"));
					SendClientMessageEx(playerid,COLOR_WHITE,string);
					return 1;
        }
		SetPVarInt(playerid,"JugadorATransferir",idjugador);
 	    SafeDialogEx(playerid,BANCO_TRANSFERIR2, DIALOG_STYLE_INPUT, "{5CBA58}Banco S.A. - (Paso 2)", "{FFFFFF}Ingrese el moto que transferirá:", "Transferir", "Cancelar");
        }
        return 1;
    }


    if(dialogid == BANCO_TRANSFERIR2)
    {
    if(!response)
            {
                SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{5CBA58}• Banco S.A.", "{FFFFFF}- Retirar\n{FFFFFF}- Depositar\n{FFFFFF}- Transferir\n{FFFFFF}- Balance", "Seleccionar", "Cancelar");
                return 1;
            }

        else
        {
          if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes que tener mínimo 2 Horas de juego para dar dinero.");
          new giveplayerid = GetPVarInt(playerid, "JugadorATransferir");
          new money = strval(inputtext);
          if(money > Info[playerid][pAccount]) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes ese monto.");
          if(money < 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes transferir menos de 0.");

                DeletePVar(playerid,"JugadorATransferir");
          		SetPVarInt(playerid, "GiveMoneyTimer", 60);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PAYTIMER);
      			Info[playerid][pAccount] -= money+10;
                Info[giveplayerid][pAccount] += money-10;
       			format(string, sizeof(string), "* Has hecho una transferencia de $%d a %s", money, GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_GREY, string);
				format(string, sizeof(string), "* Recibiste una transferencia de $%d de %s", money, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GREY, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "¡Atención!: %s hizo una transferencia de $%d a %s, revise bien el monto.", GetPlayerNameEx(playerid), money, GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_YELLOW,string,2);
				format(string, sizeof(string), "- %s hizo una transferencia de ($%d) a %s.", GetPlayerNameEx(playerid), money, GetPlayerNameEx(giveplayerid));
				Log("logs/- Transferencias de Dinero.log", string);

        }
        return 1;
    }

	if(dialogid == BANCO_DEPOSITAR)
    {
    if(!response)
            {
                SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{5CBA58}• Banco S.A.", "{FFFFFF}- Retirar\n{FFFFFF}- Depositar\n{FFFFFF}- Transferir\n{FFFFFF}- Balance", "Seleccionar", "Cancelar");
                return 1;
            }

        else
        {
         new money = strval(inputtext);
         if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} La cantidad tiene que ser números.");
         if (money > GetPlayerCash(playerid) || money < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Cantidad incorrecta");
         if(money < 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes retirar menos de 0.");

         	Bought(playerid,money);
         	Info[playerid][pAccount]+=money-10;
         	format(string, sizeof(string), "Depositaste: {FFFF00}$%d{FFFFFF} - Nuevo Balance: {FFFF00}$%d{FFFFFF} - Comisión: {FFFF00}-$10{FFFFFF}",money,Info[playerid][pAccount]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s hace una transacción bancaria.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "[DEPOSITO BANCO] - %s hizo un depósito de $%d.", GetPlayerNameEx(playerid), money);
			Log("logs/- Banco.log", string);

        }
        return 1;
    }

    if(dialogid == BANCO_SACAR)
    {
    if(!response)
            {
                SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{5CBA58}• Banco S.A.", "{FFFFFF}- Retirar\n{FFFFFF}- Depositar\n{FFFFFF}- Transferir\n{FFFFFF}- Balance", "Seleccionar", "Cancelar");
                return 1;
            }

        else
        {

         new money = strval(inputtext);
         if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} La cantidad tiene que ser números!");
         if(money > Info[playerid][pAccount] || money < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Cantidad incorrecta");
         if(money < 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes retirar menos de 0.");

         	Earn(playerid,money);
         	Info[playerid][pAccount]-= money-0;
         	format(string, sizeof(string), "Retiraste: {FFFF00}$%d{FFFFFF} - Nuevo Balance: {FFFF00}$%d{FFFFFF} - Comisión: {FFFF00}0{FFFFFF}",money,Info[playerid][pAccount]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s hace una transacción bancaria.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "[RETIRO BANCO] - %s hizo un retiro de $%d.", GetPlayerNameEx(playerid), money);
			Log("logs/- Banco.log", string);

        }
        return 1;
    }
     if(dialogid == ACEPTAR_TER)
	{
    if(response)
    {
    SetPlayerJoinCamera(playerid);
    ClearChatbox(playerid);
	TextDrawHideForPlayer(playerid, box);
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	TextDrawHideForPlayer(playerid, cargando);
    TextDrawHideForPlayer(playerid, looking);
    TextDrawHideForPlayer(playerid, box);

	if(INI_Exist(playername))
	{
	    gPlayerAccount[playerid] = 1;
        ShowMainMenuDialog(playerid, 1);
		return 1;
	}
	else
	{
	    if(strfind( playername, "_", true) == -1)
		{
		    SetPlayerName(playerid, "InvalidNick");
			SendClientMessage(playerid, COLOR_GENERAL, "{2EDFFF}AT-RP:{FFFFFF} Para volver a entrar, debes colocarte un nombre y apellido, ejemplo: Sam_Carter");
			Kick(playerid);
		}
		else
		{
			gPlayerAccount[playerid] = 0;
        	ShowMainMenuDialog(playerid, 2);
	    }
	    return 1;
	 }
	}
	if(!response)
	{
     SendClientMessage(playerid, COLOR_ROJO, "[ATENCIÓN]:{FFFFFF} Tu conexión se perdio por no cumplir las normas de: {2EDFFF}Absolute Titanium RolePlay");
	}
 }
	if(dialogid == EQUIPO_CNN)
	{
	    if(response == 1)
	    {
            ResetPlayerWeaponsEx(playerid);
			switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 31); Skin(playerid, 164);
					SetHP(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 41);
					GivePlayerValidWeapon(playerid, 43);
					SetHP(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de Periodista.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
				{
				    Skin(playerid, Info[playerid][pChar]);
			        GivePlayerValidWeapon(playerid, 24);
				    format(string, sizeof(string), "* %s se viste con ropa normal.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
	    }
	}
	if(dialogid == EQUIPO_BOMBEROS)
	{
	    if(response == 1)
	    {
            ResetPlayerWeaponsEx(playerid);
			switch(listitem)
   	        {
		        case 0:
		        {
                    GivePlayerValidWeapon(playerid, 42);
					SetHP(playerid, 100);
					SetPlayerSkin(playerid, 277);
		            format(string, sizeof(string), "* %s coge el equipo de Ayudante.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					if(Info[playerid][pRank] > 2)
				    {
                    GivePlayerValidWeapon(playerid, 42);
					SetHP(playerid, 100);
					SetPlayerSkin(playerid, 278);
		            format(string, sizeof(string), "* %s coge el equipo de Intermedio.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
					else
				    {
    				            SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el rango requerido (3, 4 ó 5).");
    				            return 1;
				            }
			        }
		        case 2:
		        {
					if(Info[playerid][pRank] > 5)
				    {
					GivePlayerValidWeapon(playerid, 42);
					SetHP(playerid, 100);
					SetPlayerSkin(playerid, 279);
		            format(string, sizeof(string), "* %s coge el equipo de Director.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
					else
				    {
    				            SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes el rango requerido (Director).");
    				            return 1;
				            }
			        }
		        case 3:
				{
				    Skin(playerid, Info[playerid][pChar]);
				    SetHP(playerid, 100);
				    SetPlayerToTeamColor(playerid);
				    format(string, sizeof(string), "* %s se viste con ropa normal y deja su placa.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
	    }
	}
	if(dialogid == EQUIPO_MECANICO)
    {
	        if(response == 1)
		    {
	    	    switch(listitem)
	        	{
	            	case 0:
	            	{
		                SetPlayerSkin(playerid, 8);
		                SetHP(playerid, 100);
	    	            format(string, sizeof(string), "* %s se viste con uniforme de Ayudante.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	            	case 1:
		            {
                        SetPlayerSkin(playerid, 16);
                        SetHP(playerid, 100);
	        	        format(string, sizeof(string), "* %s se viste con uniforme de Trucker.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
		            case 2:
		            {
                        SetPlayerSkin(playerid, 50);
                        SetHP(playerid, 100);
	        	        format(string, sizeof(string), "* %s se viste con uniforme de Mecanico.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	            	case 3:
		            {
	    	            SetPlayerSkin(playerid, 185);
	    	            SetHP(playerid, 100);
	            	    format(string, sizeof(string), "* %s se viste con uniforme de Supervisor.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	            	case 4:
		            {
	    	            SetPlayerSkin(playerid, 192);
	    	            SetHP(playerid, 100);
	            	    format(string, sizeof(string), "* %s se viste con uniforme de Mujer.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	    	        case 5:
		            {
		                SetPlayerSkin(playerid, 268);
		                SetHP(playerid, 100);
	        	        format(string, sizeof(string), "* %s se viste con su uniforme de Director.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
		            case 6:
		            {
	    	            SetPlayerSkin(playerid, Info[playerid][pChar]);
	    	            SetHP(playerid, 100);
	        	        format(string, sizeof(string), "* %s se viste con su ropa normal.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	     		}
		    }
		}
	if(dialogid == EQUIPO_SistemaJ)
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 3);
					SetPlayerSkin(playerid, 163);
					SetHP(playerid, 100);
                    SetPlayerArmour(playerid, 100);
                    SetPlayerToTeamColor(playerid);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 29);
					SetHP(playerid, 100);
                    SetPlayerArmour(playerid, 100);
					SetPlayerSkin(playerid, 255);
					SetPlayerToTeamColor(playerid);
		            format(string, sizeof(string), "* %s coge el equipo de chofér.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 29);
					SetHP(playerid, 100);
                    SetPlayerArmour(playerid, 100);
					SetPlayerSkin(playerid, 228);
					SetPlayerToTeamColor(playerid);
		            format(string, sizeof(string), "* %s coge el equipo de director.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 3:
				{
				    SetPlayerSkin(playerid, Info[playerid][pChar]);
				    SetHP(playerid, 100);
				    SetPlayerToTeamColor(playerid);
				    format(string, sizeof(string), "* %s se viste con ropa normal.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
	    }
	}
	if(dialogid == EQUIPO_GOB)
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 31);
					GivePlayerValidWeapon(playerid, 3);
					SetPlayerSkin(playerid, 163);
					SetHP(playerid, 100);
					SetPlayerArmour(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
                case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 31);
					GivePlayerValidWeapon(playerid, 3);
					SetPlayerSkin(playerid, 164);
					SetHP(playerid, 100);
					SetPlayerArmour(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
                case 2:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 31);
					SetPlayerSkin(playerid, 165);
					SetHP(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 31);
					SetPlayerSkin(playerid, 166);
					SetHP(playerid, 100);
					SetPlayerArmour(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
				case 4:
		        {
					SetHP(playerid, 100);
					SetPlayerArmour(playerid, 100);
					SetPlayerSkin(playerid, 255);
		            format(string, sizeof(string), "* %s coge el equipo de chofér.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                }
		        case 5:
		        {
					SetHP(playerid, 100);
					SetPlayerSkin(playerid, 171);
		            format(string, sizeof(string), "* %s coge su equipo de resepcionista.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 6:
		        {
					SetHP(playerid, 100);
					SetPlayerSkin(playerid, 186);
		            format(string, sizeof(string), "* %s el Secretario se coloca su uniforme.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 7:
		        {
					SetHP(playerid, 100);
					SetPlayerArmour(playerid, 100);
					SetPlayerSkin(playerid, 147);
		            format(string, sizeof(string), "* %s el Ministro se coloca su uniforme.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 8:
		        {
					SetHP(playerid, 100);
					SetPlayerArmour(playerid, 200);
					SetPlayerSkin(playerid, 295);
		            format(string, sizeof(string), "* %s el VicePresidente se coloca su uniforme.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 9:
		        {
					SetHP(playerid, 100);
					SetPlayerArmour(playerid, 200);
					SetPlayerSkin(playerid, 187);
		            format(string, sizeof(string), "* %s el Presidente se coloca su uniforme.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 10:
		        {
		            SetPlayerArmour(playerid, 100);
					format(string, sizeof(string), "* %s coge y se coloca un chaleco antibalas en su cuerpo.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 11:
				{
				    SetPlayerSkin(playerid, Info[playerid][pChar]);
				    format(string, sizeof(string), "* %s se viste con su ropa normal.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
	    }
	} // Servicios
	if(dialogid == SOLICITAR_SERVICIOS){
	    if(response == 1){
	        switch (listitem){
	            case 0:
				{
				    if(Medics < 1)
		            {
			            SendClientMessageEx(playerid, COLOR_WHITE, "En este momento no se encuentran médicos disponibles, intenta más tarde.");
			            return 1;
		            }
		            format(string, sizeof(string), "** %s necesita un médico - usa /aceptar medico para aceptar la llamada.", GetPlayerNameEx(playerid));
		            SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Llamaste a un médico espera a una llamada.");
		            MedicCall = playerid;
		            Info[playerid][pServiceTime] = 30;
				}
		        case 1:
				{
				    if(Mechanics < 1)
		            {
			            SendClientMessageEx(playerid, COLOR_GREY, "En este momento no se encuentran mecánicos en servicio, intenta más tarde.");
		            	return 1;
		            }
		                format(string, sizeof(string), "** %s necesita un mecánico - usa /aceptar mecanico para aceptar la llamada.", GetPlayerNameEx(playerid));
		                SendFamilyMessage(6, TEAM_AZTECAS_COLOR, string);
		                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has solicitado un mecanico, espera por una respuesta.");
		                MechanicCall = playerid;
		                Info[playerid][pServiceTime] = 30;
				}
		        case 2:
				{
				    if(TaxiDrivers < 1)
		            {
			            SendClientMessageEx(playerid, COLOR_WHITE, "* En este momento no se encuentran disponibles taxistas, intenta más tarde.");
			            return 1;
		            }
	                if(TransportDuty[playerid] > 0)
		            {
			            SendClientMessageEx(playerid, COLOR_WHITE, "Ya llamaste un taxi.");
		                return 1;
	                }
                    format(string, sizeof(string), "** %s necesita un taxista en su posición - usa /aceptar taxi para aceptar la llamada.", GetPlayerNameEx(playerid));
		            MessageTaxiDriver(9, TEAM_AZTECAS_COLOR, string);
		            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has solicitado un taxista, espera por una respuesta.");
		            TaxiCall = playerid;
		            Info[playerid][pServiceTime] = 30;
				}
		    }
	    }
	}
	if(dialogid == DEJAR_VAGABUNDO){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
	                if(GetPlayerMoney(playerid) < 27) return SendClientMessageEx(playerid, COLOR_BLANCO, "Atención: No tienes $27 para dejarle al vagabundo!");
					format(string, sizeof(string), "* %s toma algo de dinero de su bolsillo y se lo deja al vagabundo.", GetPlayerNameEx(playerid));
	                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
	                GivePlayerCash(playerid, -27);
	                SendClientMessageEx(playerid, COLOR_FADE1, "Vagabundo dice: Gracias por el dinero, esto será de gran ayuda.");
				}
		        case 1:
				{
				    format(string, sizeof(string), "* %s coge algo de comida y se la da al vagabundo.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				    SendClientMessageEx(playerid, COLOR_FADE1, "Vagabundo dice: Gracias, en verdad me has parado el hambre, dios te bendiga.");
				}
		        case 2:
				{
				    format(string, sizeof(string), "* %s toma algo de ropa y se la deja al Vagabundo.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				    SendClientMessageEx(playerid, COLOR_FADE1, "Vagabundo dice: Gracias por la ropa, ahora no tendre frio por las noches.");
				}
		        case 3:
				{
				    format(string, sizeof(string), "* %s toma un paquete de galletas y se la deja al vagabundo.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				    SendClientMessageEx(playerid, COLOR_FADE1, "Vagabundo dice: Que ricas deben estar, gracias, dios te bendiga.");
				}
		        case 4:
				{
				    format(string, sizeof(string), "%s dice: Hey vagabundo, porque no diablos te buscas un trabajo y deja de pedir cosas, idiota.", sendername);
				    ProxDetector(50.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				    ApplyAnimation(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0,0);
				    SendClientMessageEx(playerid, COLOR_FADE1, "Vagabundo dice: Es algo complicado conseguir trabajo en estas zonas, pero lo voy a tener en cuenta.");
				}
		        case 5:
				{
				    format(string, sizeof(string), "%s dice: Mire señor, en la iglesia de Little México dan ropa y te pueden ayudar, dios te bendiga y suerte.", sendername);
				    ProxDetector(50.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				    ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0 ,0,0);
				    SendClientMessageEx(playerid, COLOR_FADE1, "Vagabundo dice: Gracias, en unas horas voy a ir a ver si me pueden ayudar en mi caso, a ti también dios te bendiga.");
				}
		    }
	    }
	}// A partir de ahora inician texdraw's adicionales!
	if(dialogid == ACTUALIZACIONES_ATRP){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
	                new actualizacionsv[2000]; // El primero son las nuevas actualizaciones para informar de la actualidad al usuario.
	                strcat(actualizacionsv, "{FFFFFF}- Nuevos vehículos modernos añadidos para el trabajo de taxistas\n");
	                strcat(actualizacionsv, "{FFFFFF}- Mejoras en el trabajo de vendedor de chalecos\n");
	                strcat(actualizacionsv, "{FFFFFF}- Creación de arma molotov habilitada con materiales y gasolina\n");
	                strcat(actualizacionsv, "{FFFFFF}- Skins retirados en las ventas de ropa y nuevo diseño\n");
	                strcat(actualizacionsv, "{FFFFFF}- Nuevo accesorio de bolso y cambios en los /toys\n");
	                strcat(actualizacionsv, "{FFFFFF}- Aumentos en las pagas para el departamento de policía\n");
	                strcat(actualizacionsv, "{FFFFFF}- Mejoras en documento de identidad falsa para mayor rol\n");
	                strcat(actualizacionsv, "{FFFFFF}- Trabajo de fabricador de armas agregado con nuevas listas\n");
	                strcat(actualizacionsv, "{FFFFFF}- Al devolver el vehículo rentado, se te paga $800 con /dveh\n");
                    strcat(actualizacionsv, "{FFFFFF}- Sistema /estadoveh para aclarar el entorno de un vehículo\n\n\n");
                    strcat(actualizacionsv, "{FF0000}• Errores: 3 (Solucionados)");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{446E8C}• {FFFFFF}Actualización (16/08/2020)", actualizacionsv, "{FFFFFF}Cerrar", "");
				}
				case 1:
				{
					new actualizacionsv[5000];
					strcat(actualizacionsv, "{FFFFFF}- SAEM es ahora USMC. Añadido de rangos y cambio de divisiones\n");
					strcat(actualizacionsv, "{FFFFFF}- Visión noctura, visión térmica y C4 dejan de ser Armas Prohibidas\n");
					strcat(actualizacionsv, "{FFFFFF}- Nueva HQ-Interior para AININT. Reformado su equipo. Añadido de textdraw\n");
					strcat(actualizacionsv, "{FFFFFF}- Ampliamiento en comandos para el Staff. Modificación de algunos existentes\n");
					strcat(actualizacionsv, "{FFFFFF}- Reparado un comando que causaba el cierre del servidor\n");
					strcat(actualizacionsv, "{FFFFFF}- Añadido textdraw para facciones legales on-duty\n");
					strcat(actualizacionsv, "{FFFFFF}- Ahora para sacar licencias es necesario tener el certificado médico\n");
					strcat(actualizacionsv, "{FFFFFF}- Para obtener la licencia de taxista, se necesita la licencia de conducir\n");
					strcat(actualizacionsv, "{FFFFFF}- Aumento de rangos (realistas) en LAMD - Añadido de comando\n");
					strcat(actualizacionsv, "{FFFFFF}- Se implementan nuevos texturizados originales\n");
					strcat(actualizacionsv, "{FF0000}• Errores: 1 (Solucionados)");
					ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{446E8C}• {FFFFFF}Actualización (22/08/2020)", actualizacionsv, "{FFFFFF}Cerrar", "");
				}
				case 2:
				{
					new actualizacionsv[5000];
					strcat(actualizacionsv, "{FFFFFF}- Nuevo sistema de drones para Policías. Nuevos rangos y /lapd - /pcpd\n");
					strcat(actualizacionsv, "{FFFFFF}- Remodelado en mensajes de errores y mensajes en general\n");
					strcat(actualizacionsv, "{FFFFFF}- \n");
					strcat(actualizacionsv, "{FFFFFF}- \n");
					strcat(actualizacionsv, "{FFFFFF}- \n");
					strcat(actualizacionsv, "{FFFFFF}- \n");
					strcat(actualizacionsv, "{FFFFFF}- \n");
					strcat(actualizacionsv, "{FFFFFF}- \n");
					strcat(actualizacionsv, "{FFFFFF}- \n");
					strcat(actualizacionsv, "{FFFFFF}- \n");
					strcat(actualizacionsv, "{FF0000}• Errores: 1 (Solucionados)");
					ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{446E8C}• {FFFFFF}Actualización (22/08/2020)", actualizacionsv, "{FFFFFF}Cerrar", "");
				}
		    }
	    }
	}
	// Reglas de AT-RP
	if(dialogid == VER_REGLAS){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
	                new iString[1000];
	                strcat(iString, "{FFFFFF}1: Prohibido usar el /Duda para solicitar a un moderador/administrador (/Soporte)\n");
	                strcat(iString, "{FFFFFF}2: No usar cualquier bug para beneficios propios\n");
                    strcat(iString, "{FFFFFF}3: No pedir beneficios a la administración\n");
                    strcat(iString, "{FFFFFF}4: Utilizar cada canal como corresponde ya sea IC u OOC\n");
                    strcat(iString, "{FFFFFF}5: En casos de recibir DM de otro usuario, reportarlo y no responder dicho DM\n");
                    strcat(iString, "{FFFFFF}6: Respetar las demás reglas\n");
                    strcat(iString, "{FFFFFF}7: Respetar las decisiones de cada persona, menos cancelar un rol. (Solicitar Staff)\n");
                    strcat(iString, "{FFFFFF}8: Prohibido en su totaldiad pasar Skype\n");
                    strcat(iString, "{FFFFFF}9: Esperar con moderación las respuestas solicitadas\n");
                    strcat(iString, "{FFFFFF}10: Solicitar cada rol de robo al banco u otro grande en /foro\n");
                    strcat(iString, "{FFFFFF}11: Los Líderes Generales [LG] deben cumplir 1 semana para cambiar de facción \n");
                    strcat(iString, "{FFFFFF}12: No trollear a los usuarios, moderadores y administradores\n");
                    strcat(iString, "{FFFFFF}13: Hot Key Board [HKB] tiene un límite de 2 lineas por cada macro\n");
                    strcat(iString, "{FFFFFF}14: Respetar los tiempos de sanciones: /Sanciones");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF0000}Reglas Generales", iString, "De Acuerdo", "");
				}
				case 1:
				{
	                SafeDialogEx(playerid,TIPRE,DIALOG_STYLE_MSGBOX,"{FF0000}Reglas para Reportar","{FFFFFF}\n- Reporta lo que necesitas, no a quien necesitas.\n- Sé especifico y claro, reporta exactamente lo que necesitas.\n- No hacer falsos reportes [Advertencia].\n- No llames e insultes a miembros de la administración.\n- Reporta sólo asuntos, In Game [IG].","De Acuerdo", "");
				}
				case 2:
				{
	                SafeDialogEx(playerid,TIPRE,DIALOG_STYLE_MSGBOX,"{FF0000}Reglas para Anuncios","{FFFFFF}\n- Respetar la sección que selecciono.\n- Prohibido el uso de información OOC por /Ads.\n- Cuidar el contenido del anuncio.\n- No hacer SPAM vía /anuncio o puede ocacionar su Baneo Permanente.\n- Publicar cada 5 minutos.","De Acuerdo", "");
				}
				case 3:
				{
	                SafeDialogEx(playerid,TIPRE,DIALOG_STYLE_MSGBOX,"{FF0000}Reglas para Dudas","{FFFFFF}\n- Preguntar sólo sobre la GameMode y/o conceptos.\n- Explicar bien su duda de forma detallada.\n- No insultar a la administración.\n- Esperar como corresponde el tiempo de respuestas.\n- Cuidar las palabras dichas en su dudas.","De Acuerdo", "");
				}
				case 4:
				{
	                SafeDialogEx(playerid,TIPRE,DIALOG_STYLE_MSGBOX,"{FF0000}Reglas para Secuestros","{FFFFFF}\n- El usuario que sera secuestrado debe ser mayor de nivel 3.\n- Si se roba el dinero, se toma tan sólo la mitad.\n- Tener una razón válida para secuestrar a dicho usuario.\n- Solicitar a un mod/admin que supervise el rol de entorno y más.","De Acuerdo", "");
				}
				case 5:
				{
	                SafeDialogEx(playerid,TIPRE,DIALOG_STYLE_MSGBOX,"{FF0000}Reglas para Player Kill","{FFFFFF}\n- Tener más de 5 miembros de facción/familia y/o personas.\n- Tomar ScreensShoot. [SS]\n- Debe ser specteado por un miembro de la administración.\n- Tener una razón válida sobre el Player Kill hacía esta persona.","De Acuerdo", "");
				}
		    }
	    }
	}
	if(dialogid == INFO_VIP){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
	                new infovip1[1000];
                    strcat(infovip1, "{FF00B4}• Información:\n");
                    strcat(infovip1, "{FFFFFF}Compra beneficios por separado a un excelente precio y activación inmediata");
                    strcat(infovip1, "{FFFFFF}por el CEO, obteniendo mayor seguridad al momento de comprar este paquete.");
                    strcat(infovip1, "\n\n");
                    strcat(infovip1, "{FF00B4}• Beneficios:\n");
                    strcat(infovip1, "{FFFFFF}Vehículo VIP: $30 (ARS) - $2 (USD)\n");
                    strcat(infovip1, "{FFFFFF}Modificación de Casa: $30 (ARS) - $2 (USD)\n");
                    strcat(infovip1, "{FFFFFF}$5.000.000: $160 (ARS) - $9 (USD)\n");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF00B4}VIP P-S", infovip1, "Cerrar", "");
				}
				case 1:{
	                new infovip1[1000];
                    strcat(infovip1, "{FF00B4}• Beneficios:\n");
                    strcat(infovip1, "{FFFFFF}$100.000 - Pack de armas - Doble experiencia por 10 horas - 1 vehículo de gama baja - Fichas VIP");
                    strcat(infovip1, "\n\n");
                    strcat(infovip1, "{FF00B4}• Costo:\n");
                    strcat(infovip1, "{FFFFFF}ARS $60 - USD $3");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF00B4}VIP Nivel 1 - Bronce", infovip1, "Cerrar", "");
				}
				case 2:{
			    	new infovip2[1000];
                    strcat(infovip2, "{FF00B4}• Beneficios:\n");
                    strcat(infovip2, "{FFFFFF}$500.000 - Pack de armas - Doble experiencia por 20 horas - 1 vehículo de gama media - Fichas VIP\n");
                    strcat(infovip2, "{FFFFFF}Accesos a lugares premiums");
                    strcat(infovip2, "\n\n");
                    strcat(infovip2, "{FF00B4}• Costo:\n");
                    strcat(infovip2, "{FFFFFF}ARS $90 - USD $5");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF00B4}VIP Nivel 2 - Plata", infovip2, "Cerrar", "");
				}
				case 3:{
			    	new infovip3[1000];
					strcat(infovip3, "{FF00B4}• Beneficios:\n");
                    strcat(infovip3, "{FFFFFF}$800.000 - Pack de armas - Doble experiencia por 30 horas - 2 vehículos de gama media - Fichas VIP\n");
                    strcat(infovip3, "{FFFFFF}Accesos a lugares premiums - Casa a elección de gama media - Cambio de interiores en casas");
                    strcat(infovip3, "\n\n");
                    strcat(infovip3, "{FF00B4}• Costo:\n");
                    strcat(infovip3, "{FFFFFF}ARS $130 - USD $7");
					ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF00B4}VIP Nivel 3 - Oro", infovip3, "Cerrar", "");
				}
				case 4:{
			    	new infovip4[1000];
					strcat(infovip4, "{FF00B4}• Beneficios:\n");
                    strcat(infovip4, "{FFFFFF}$1.000.000 - Pack de armas - Doble experiencia por 40 horas - 2 vehículos de gama alta - Fichas VIP\n");
                    strcat(infovip4, "{FFFFFF}Accesos a lugares premiums - Casa a elección de gama alta - Cambio de interiores en casas\n");
                    strcat(infovip4, "{FFFFFF}Creación de familia con HQ");
                    strcat(infovip4, "\n\n");
                    strcat(infovip4, "{FF00B4}• Costo:\n");
                    strcat(infovip4, "{FFFFFF}ARS $160 - USD $9");
					ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF00B4}VIP Nivel 4 - Platino", infovip4, "Cerrar", "");
				}
				case 5:{
			    	new infovip5[1000];
					strcat(infovip5, "{FF00B4}• Beneficios:\n");
                    strcat(infovip5, "{FFFFFF}$5.000.000 - Pack de armas - Doble experiencia por 50 horas - 5 vehículos de gama alta - Fichas VIP\n");
                    strcat(infovip5, "{FFFFFF}Accesos a lugares premiums - Casa a elección de gama alta - Cambio de interiores en casas\n");
                    strcat(infovip5, "{FFFFFF}Creación de familia con HQ y vehículos");
                    strcat(infovip5, "\n\n");
                    strcat(infovip5, "{FF00B4}• Costo:\n");
                    strcat(infovip5, "{FFFFFF}ARS $210 - USD $13");
					ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF00B4}VIP Nivel 5 - Moderador", infovip5, "Cerrar", "");
				}
		    }
	    }
	}
	if(dialogid == REDES_SOCIALES){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
	                new web[1000];
                    strcat(web, "{FFFFFF}- En nuestro sitio web vas a encontrar publicicaciones,");
                    strcat(web, "{FFFFFF}noticias, vídeos, imágenes, etc.\n\n");
                    strcat(web, "{BEFFB3}Sitio Web: {FFFFFF}www.titaniumgamers.com");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{72FF59}Sitio Web", web, "Cerrar", "");
				}
				case 1:{
			    	new foro[1000];
                    strcat(foro, "{FFFFFF}- En foro hay varias secciones en donde vas a publicar tus");
                    strcat(foro, "{FFFFFF} propios temas, imágenes, vídeos, etc.\n\n");
                    strcat(foro, "{BEFFB3}Foro: {FFFFFF}www.titaniumgamers.es");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{72FF59}Foro", foro, "Cerrar", "");
				}
				case 2:{
			    	new pagfacebook[1000];
					strcat(pagfacebook, "{FFFFFF}- Es importante enterarte de las nuevas actualizaciones y el estado");
                    strcat(pagfacebook, "{FFFFFF} del servidor, en facebook hay más contenidos\n");
                    strcat(pagfacebook, "{FFFFFF}  interesantes para ver.\n\n");
                    strcat(pagfacebook, "{BEFFB3}Página de Facebook: {FFFFFF}https://www.facebook.com/titaniumrp");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{72FF59}Página de Facebook", pagfacebook, "Cerrar", "");
				}
				case 3:{
			    	new paginstagram[1000];
					strcat(paginstagram, "{FFFFFF}- Las imágenes con usuarios y de roles son un bonito recuerdo, por eso");
                    strcat(paginstagram, "{FFFFFF} te invitamos a segyurnos en nuestro Instagram\n\n");
                    strcat(paginstagram, "{BEFFB3}Página de Facebook: {FFFFFF}https://www.instagram.com/titaniumrp");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{72FF59}Página de Instagram", paginstagram, "Cerrar", "");
				}
				case 4:{
			    	new gpdiscord[1000];
					strcat(gpdiscord, "{FFFFFF}- Comunicarte con los demás usuarios está bueno, por eso te invitamos a unirte");
                    strcat(gpdiscord, "{FFFFFF} al Discord e iniciar una conversación con nosotros!\n\n");
                    strcat(gpdiscord, "{BEFFB3}Discord Oficial: {FFFFFF}https://discord.gg/u9Ep7z9");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{72FF59}Discord Oficial", gpdiscord, "Cerrar", "");
				}
				case 5:{
			    	new ipts3[1000];
					strcat(ipts3, "{FFFFFF}- ts3.titaniumgamers.com");
                    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{72FF59}TeamSpeak 3", ipts3, "Cerrar", "");
				}
		    }
	    }
	}
	if(dialogid == TELEPORTS_FACCIONES){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
					SetPosEx(playerid, 1553.1155,-1675.7045,16.1953,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Policía de Los Ángeles");
				}
				case 1:{
					SetPosEx(playerid, 2270.0962,-81.4959,26.5392,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Policía de Palomino Creek");
				}
				case 2:{
					SetPosEx(playerid, 330.59,-1518.60,35.87,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Agencia InterNacional de Investigación y NarcoTráfico");
				}
				case 3:{
    				SetPosEx(playerid, 1185.36,-1324.42,13.57,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Los Ángeles Medical Department");
				}
				case 4:{
    				SetPosEx(playerid, 763.42,-1360.69,13.52,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} FOX");
				}
				case 5:{
					SetPosEx(playerid, 228.211196,2007.390502,17.642749,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} USMC");
				}
				case 6:{
					SetPosEx(playerid, 1019.73712,-1445.02563,13.75172,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Mecánicos");
				}
				case 7:{
					SetPosEx(playerid, 1169.3433,-2036.0635,70.0865,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Gobierno");
				}
				case 8:{
					SetPosEx(playerid, 2351.9958,-661.6710,128.2702,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Agencia Hitman");
				}
				case 9:{
					SetPosEx(playerid, 1498.43,-1583.81,13.55,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Sistema Judicial");
				}
				case 10:{
					SetPosEx(playerid, 2302.70923,-1785.64893,13.66090,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Cedar Block Piru");
				}
				case 11:{
					SetPosEx(playerid, 2633.60083,-1069.19824,69.78138,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} N/S Broadway XIV");
				}
				case 12:{
					SetPosEx(playerid, 2489.91138,-1407.27100,28.96670,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Varrio Longos 13");
				}
				case 13:{
					SetPosEx(playerid, 2039.7750,1923.1982,12.4897,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} La Cosa Nostra");
				}
				case 14:{
					SetPosEx(playerid, 2071.03101,-1628.76025,13.54266,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Boulevard Mafia Crips");
				}
				case 15:{
					SetPosEx(playerid, -1126.8335,-995.9662,129.4528,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Mafia Rusa");
				}
				case 16:{
					SetPosEx(playerid, 298.60,-1155.93,80.91,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Mafia Yakuza");
				}
				case 17:{
					SetPosEx(playerid, 1280.26,-819.14,84.14,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Mafia Santana");
				}
				case 18:{
					SetPosEx(playerid,1219.311035,-1814.627441,16.593750,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} CIA");
				}
				case 19:{
					SetPosEx(playerid, -795.24432,2403.96118,156.68001,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Islamic State of Iraq and Syria");
				}
				case 20:{
					SetPosEx(playerid, 1261.040527,-1265.892456,13.703999,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Bomberos");
				}
				case 21:{
					SetPosEx(playerid, 2241.61597, 32.92410, 26.67435,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Motoqueros");
				}
				case 22:{
					SetPosEx(playerid, 1222.0082,-921.1169,43.4394,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás en la facción:{00FFFF} Play Music Radio");
				}
		    }
	    }
	}
	if(dialogid == TELEPORTS_JOBS){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
					SetPosEx(playerid, 1836.8391,-1682.6100,13.3312,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Bartender");
				}
				case 1:{
					SetPosEx(playerid, 1314.190795,-1159.115112,23.628125,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Vendedor de Móviles");
				}
				case 2:{
    				SetPosEx(playerid, 1764.77759,-2040.65979,13.43401,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Chofer de Autobuses");
				}
				case 3:{
    				SetPosEx(playerid, 2104.8408,-1810.0991,13.5547,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Pizzero");
				}
				case 4:{
					SetPosEx(playerid,  2354.81323, -83.08443, 26.70512,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Camionero");
				}
				case 5:{
					SetPosEx(playerid, 2210.134033,-2527.976562,13.546879,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Repartidor");
				}
				case 6:{
					SetPosEx(playerid, 2172.60107, -1903.82959, 13.64440,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Fabricante de Armas");
				}
				case 7:{
					SetPosEx(playerid, 1752.7062,-1894.1708,13.5574,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Taxista");
				}
				case 8:{
					SetPosEx(playerid, -382.2627,-1426.3954,26.1396,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Granjero");
				}
				case 9:{
					SetPosEx(playerid, 2355.1594,-1169.2037,28.0057,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Traficante de Drogas");
				}
				case 10:{
					SetPosEx(playerid, 1423.9009,-1355.9692,13.2810,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Vendedor de Chalecos");
				}
				case 11:{
					SetPosEx(playerid, 659.3577,-634.6320,16.3359,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Artesano");
				}
				case 12:{
					SetPosEx(playerid, 2043.81250, -1247.01160,23.9810,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Jardinero");
				}
				case 13:{
					SetPosEx(playerid, -572.9537,-1498.6639,13.0859,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Leñador");
				}
				case 14:{
					SetPosEx(playerid, 2071.03101,-1628.76025,13.54266,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Heladero");
				}
				case 15:{
					SetPosEx(playerid, 1685.059814, -1944.715698, 13.546875,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Conductor de Trenes");
				}
				case 16:{
					SetPosEx(playerid, 2195.75684,-1973.02844,13.51525,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en el trabajo:{00FFFF} Basurero{00FFFF}");
				}
		    }
	    }
	}
	if(dialogid == TELEPORTS_ZONAS){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
					SetPosEx(playerid, 1092.34839,1087.35571,2720.67920,0,0,0);
					SetPlayerFacingAngle(playerid, -90.0000);
					LoadObjects(playerid);
					SetCameraBehindPlayer(playerid);
					SetPlayerInterior(playerid,20);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Fuiste a la zona:{2EDFFF} Escuela RolePlay");
				}
				case 1:{
					SetPosEx(playerid, -11338.48535,9282.86035,2.51994,0,0,0);
					LoadObjects(playerid);
					SetCameraBehindPlayer(playerid);
					SetPlayerInterior(playerid,15);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Fuiste a la zona:{2EDFFF} Sanciones");
				}
				case 2:{
					SetPosEx(playerid, -12243.18164, 9332.72070, 2.52100,0,0,0);
					LoadObjects(playerid);
					SetCameraBehindPlayer(playerid);
					SetPlayerInterior(playerid,50);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Fuiste a la zona:{2EDFFF} Depósitos de Casas");
				}
		    }
	    }
	}
	if(dialogid == CAMARAS_TV){
	    if(response == 1){
	        switch (listitem){
	            case 0:{  //----> Cámara 1 (Entretenimiento)
                    if ((Tv) && Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_GRAD2, "No hay ninguna transmisión en entretenimiento.");
	                SistemaCam[playerid] = 1;
	                SetPlayerCameraPos(playerid, 780.74170, -1338.36829, 1087.31787);
	                SetPlayerCameraLookAt(playerid, 780.74170, -1329.62500, 1087.31787);
	                SetPlayerInterior(playerid,1);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
				}
				case 1:{  //----> Cámara 2 (Entrevistas)
					if ((Tv) && Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_GRAD2, "No hay ninguna transmisión en entrevistas.");
	                SetPlayerPos(playerid,1231.692138, -1362.565185, 13.270414);
	                SetPlayerFacingAngle(playerid, 93.807983);
	                SetPlayerCameraPos(playerid, 1307.57910, -1400.23022, 18.43840);
	                SetPlayerCameraLookAt(playerid, 1227.09509, -1400.52319, 12.14065);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
				}
				case 2:{  //----> Cámara 3 (Noticias)
					if ((Tv) && Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_GRAD2, "No hay ninguna transmisión en noticias.");
	                SetPlayerPos(playerid,1328.360107, -1647.991577, 16.568979);
	                SetPlayerFacingAngle(playerid, 357.333557);
	                SetPlayerCameraPos(playerid, 1317.89026, -1683.59253, 19.46060);
	                SetPlayerCameraLookAt(playerid, 1312.48474, -1652.96777, 12.37803);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
				}
				case 3:{ //----> Cámara 4 (Música)
					if ((Tv) && Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_GRAD2, "No hay ninguna transmisión en música.");
	                SetPlayerPos(playerid,1296.761962, -901.645507, 41.982810);
	                SetPlayerFacingAngle(playerid, 92.381980);
	                SetPlayerCameraPos(playerid, 1352.18884, -922.74268, 49.58255);
	                SetPlayerCameraLookAt(playerid, 1295.96130, -927.56299, 39.09905);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
				}
		    }
	    }
	}
	if(dialogid == CAMARAS_LAPD){
	    if(response == 1){
	        switch (listitem){
	            case 0:{ //----> Plaza Central (Cámara 1)
	                SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,1498.942504, -1757.245483, 13.546875);
	                SetPlayerFacingAngle(playerid, 87.236061);
	                SetPlayerCameraPos(playerid, 1542.91260, -1714.43665, 26.87680);
	                SetPlayerCameraLookAt(playerid, 1469.68127, -1732.24036, 12.37620);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 1:{ //----> Pasadena (Cámara 2)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,1231.692138, -1362.565185, 13.270414);
	                SetPlayerFacingAngle(playerid, 93.807983);
	                SetPlayerCameraPos(playerid, 1307.57910, -1400.23022, 18.43840);
	                SetPlayerCameraLookAt(playerid, 1227.09509, -1400.52319, 12.14065);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 2:{ //----> Lawrence (Cámara 3)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,1328.360107, -1647.991577, 16.568979);
	                SetPlayerFacingAngle(playerid, 357.333557);
	                SetPlayerCameraPos(playerid, 1317.89026, -1683.59253, 19.46060);
	                SetPlayerCameraLookAt(playerid, 1312.48474, -1652.96777, 12.37803);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 3:{ //----> Broadway (Cámara 4)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,1296.761962, -901.645507, 41.982810);
	                SetPlayerFacingAngle(playerid, 92.381980);
	                SetPlayerCameraPos(playerid, 1352.18884, -922.74268, 49.58255);
	                SetPlayerCameraLookAt(playerid, 1295.96130, -927.56299, 39.09905);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 4:{ //----> Western (Cámara 5)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,693.443725, -1303.516967, 13.593418);
	                SetPlayerFacingAngle(playerid, 180.386657);
	                SetPlayerCameraPos(playerid, 623.13220, -1291.81873, 30.30730);
	                SetPlayerCameraLookAt(playerid,  632.51294, -1373.19238, 12.48195);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 5:{ //----> Playa - R425 - Oeste (Cámara 6)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,485.480133, -1740.554931, 11.075124);
	                SetPlayerFacingAngle(playerid, 81.824485);
	                SetPlayerCameraPos(playerid, 600.91290, -1732.82788, 22.28580);
	                SetPlayerCameraLookAt(playerid,  496.53909, -1711.32703, 10.77080);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 6:{ //----> Playa - R425 - Este (Cámara 7)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,658.050537, -1718.618164, 12.948042);
	                SetPlayerFacingAngle(playerid, 254.417556);
	                SetPlayerCameraPos(playerid,  601.67944, -1732.98328, 22.28580);
	                SetPlayerCameraLookAt(playerid,  665.03131, -1753.58362, 12.42720);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 7:{ //----> Peaje LA/SF - Oeste (Cámara 8)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,131.544662, -1497.726806, 21.156404);
	                SetPlayerFacingAngle(playerid, 77.406288);
	                SetPlayerCameraPos(playerid,  69.89570, -1521.51611, 9.74580);
	                SetPlayerCameraLookAt(playerid,  35.28057, -1521.68872, 4.24901);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 8:{ //----> Peaje LA/SF - Este (Cámara 9)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,131.544662, -1497.726806, 21.156404);
	                SetPlayerFacingAngle(playerid, 237.890655);
	                SetPlayerCameraPos(playerid,  35.87944, -1542.65369, 9.74580);
	                SetPlayerCameraLookAt(playerid,  68.07545, -1541.61816, 4.02312);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 9:{ //----> Belmont (Cámara 10)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,357.325195, -1208.719360, 55.863590);
	                SetPlayerFacingAngle(playerid, 289.347564);
	                SetPlayerCameraPos(playerid,  365.31259, -1272.59351, 61.40590);
	                SetPlayerCameraLookAt(playerid,  397.84094, -1233.04163, 50.71461);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 10:{ //----> Ganton (Cámara 11)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid, 2313.343261, -1773.181884, 15.606880);
	                SetPlayerFacingAngle(playerid,  268.504577);
	                SetPlayerCameraPos(playerid,  2234.79102, -1732.71143, 18.45990);
	                SetPlayerCameraLookAt(playerid,  2314.82031, -1732.29102, 12.37600);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
				case 11:{ //----> El Corona (Cámara 12)
					SistemaCam[playerid] = 1;
	                SetPlayerPos(playerid,1946.192504, -2033.928588, 15.129303);
	                SetPlayerFacingAngle(playerid, 94.948028);
	                SetPlayerCameraPos(playerid,  1972.14294, -2051.56226, 22.63800);
	                SetPlayerCameraLookAt(playerid,  1922.57935, -2052.48242, 12.37635);
	                SetPlayerInterior(playerid,0);
	                SetPVarInt(playerid, "IsFrozen", 1);
	                TextDrawHideForPlayer(playerid, FechaD);
	                TextDrawHideForPlayer(playerid, TiempoD);
	                TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	                TextDrawShowForPlayer(playerid, PFAVig_1);
	                TextDrawShowForPlayer(playerid, PFAVig_2);
	                TextDrawShowForPlayer(playerid, PFAVig_3);
	                TextDrawShowForPlayer(playerid, PFAVig_4);
	                GameTextForPlayer(playerid, "~p~/SALIRCAMARA", 10000, 1);
				}
		    }
	    }
	}
	if(dialogid == DRONES_PD){ // Drones
	    if(response == 1){
	        switch (listitem){
	            case 0:{
	                DronesCam[playerid] = 1;
					PutPlayerInVehicle(playerid, 48, 0);
					SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "• Conectaste el dron 1, ahora tienes visión y control de este mismo. {FFFFFF}(Para apagarlo, use: /Apagardron)");
					ShowPlayerNameTagForPlayer(playerid, playerid, 0);
					return 1;
				}
				case 1:{
					DronesCam[playerid] = 1;
					PutPlayerInVehicle(playerid, 50, 0);
					SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "• Conectaste el dron 2, ahora tienes visión y control de este mismo. {FFFFFF}(Para apagarlo, use: /Apagardron)");
					ShowPlayerNameTagForPlayer(playerid, playerid, 0);
					return 1;
				}
				case 2:{
					DronesCam[playerid] = 1;
					PutPlayerInVehicle(playerid, 51, 0);
					SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "• Conectaste el dron 3, ahora tienes visión y control de este mismo. {FFFFFF}(Para apagarlo, use: /Apagardron)");
					ShowPlayerNameTagForPlayer(playerid, playerid, 0);
					return 1;
				}
				case 3:{
					DronesCam[playerid] = 1;
					PutPlayerInVehicle(playerid, 49, 0);
					SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "• Conectaste el dron 4, ahora tienes visión y control de este mismo. {FFFFFF}(Para apagarlo, use: /Apagardron)");
					ShowPlayerNameTagForPlayer(playerid, playerid, 0);
					return 1;
				}
		    }
	    }
	}
	if(dialogid == PETITION_DIALOG)
	{
	    if(response == 1)
	    {
	        format(string, sizeof(string), "* %s acepta una petición.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(Petition_ID[playerid] == 2)
	        {
	            GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "* Pagaste una multa de $%d al oficial %s.", TicketMoney[playerid], giveplayer);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s te ha pagado la multa de $%d.", sendername, TicketMoney[playerid]);
				SendClientMessageEx(TicketOffer[playerid], COLOR_WHITE, string);
				GivePlayerCash(playerid, - TicketMoney[playerid]);
				GivePlayerCash(TicketOffer[playerid], TicketMoney[playerid]);
				Tax += TicketMoney[playerid];
				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				Facturing[playerid] = 0;
				Petition_ID[playerid] = 0;
	        }
	    }
	    else
	    {
	        format(string, sizeof(string), "* %s rechaza una petición.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        if(Petition_ID[playerid] == 2)
	        {
				SendClientMessageEx(playerid, COLOR_WHITE, "* Multa rechazada.");
				format(string, sizeof(string), "* %s te rechazó la multa.", sendername);
				SendClientMessageEx(TicketOffer[playerid], COLOR_RED2, string);
				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				Facturing[playerid] = 0;
				Petition_ID[playerid] = 0;
	        }
	    }
	}
	else if(dialogid == DIALOG_CDGLOCKBUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetGangVehicleCount(Info[playerid][pFMember]) != 0)
				{
				    if(GetPlayerCash(playerid) < 1000)
					{
						SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes 1.000 para hacer esto.");
						return 1;
					}
					SetPVarInt(playerid, "lockmenu", 1);
                    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
          if(FVINFO[Info[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehiculo %d | Modelo: %s.",i+1,GetVehicleName(FVINFO[Info[playerid][pFMember]][i][fvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
 				     }
				    }
				    SafeDialogEx(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "{2EDFFF}24 Horas - Seguros","Selecciona el vehiculo donde instalarás el seguro:", "Ok", "Cancelar");

				}
  		else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes coches, ¿donde podemos instalar este elemento?.");
					return 1;
				}
			}
			if(listitem == 1)
			{
				if(GetGangVehicleCount(Info[playerid][pFMember]) != 0)
				{
					if(GetPlayerCash(playerid) < 5000)
					{
						SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF}No tienes 5000 para hacer esto");
						return 1;
					}
					SetPVarInt(playerid, "lockmenu", 2);
				    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
          if(FVINFO[Info[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehiculo %d | Modelo: %s.",i+1,GetVehicleName(FVINFO[Info[playerid][pFMember]][i][fvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
          }
				    }
				    SafeDialogEx(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "{00F70C}24-7","Selecciona el vehiculo donde instalarás el seguro:", "Ok", "Cancelar");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes coches, ¿donde podemos instalar este elemento?.");
					return 1;
				}
			}
		}
	}
	if(dialogid == DIALOG_CDGLOCKMENU)
	{
		if(response)
		{
		if(GetPVarInt(playerid, "lockmenu") == 1)
		{
            new fvid;
            if (isnumeric(inputtext))
	        {
				fvid = strval(inputtext)-1;
			    if(FVINFO[Info[playerid][pFMember]][fvid][fvId] == INVALID_VEHICLE_ID)
			    {
				    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes un vehículo en esta ranura.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    if(FVINFO[Info[playerid][pFMember]][fvid][fvLock] == 1)
			    {
				    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ya tienes instalado el mismo seguro en este vehículo.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    SendClientMessageEx(playerid, COLOR_AT, "(Inf. CMD's):{FFFFFF} Coloque /seguro para bloquear/desbloquear tu vehículo.");
			    SendClientMessageEx(playerid, COLOR_GRAD4, string);
			    FVINFO[Info[playerid][pFMember]][fvid][fvLock] = 1;
			    SetPVarInt(playerid, "lockmenu", 0);
				if(Info[playerid][pVIP] == 0)
				{
				   	return GivePlayerCash(playerid, -4500);
				}
				else
				{
   					GivePlayerCash(playerid, -4500);
				}
		    }
		}
		else if(GetPVarInt(playerid, "lockmenu") == 2)
		{
		    new fvid;
            if (isnumeric(inputtext))
	        {
                fvid = strval(inputtext)-1;
			    if(FVINFO[Info[playerid][pFMember]][fvid][fvId] == 0)
			    {
				    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes un vehículo en esta ranura.");
				    SetPVarInt(playerid, "lockmenu", 0);
	                return 1;
			    }
			    if(FVINFO[Info[playerid][pFMember]][fvid][fvLock] == 3)
		  	    {
				    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ya tienes instalado ese seguro en el coche.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "{A2DC35}[24 Horas]:{FFFFFF} Has adquirido un seguro industrial!");
			    SendClientMessageEx(playerid, COLOR_GRAD4, string);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "{FF8000}[INDICACION]:{FFFFFF} Ahora puedes usar /fseguro para bloquear el coche.");
			    FVINFO[Info[playerid][pFMember]][fvid][fvLock] = 3;
			    SetPVarInt(playerid, "lockmenu", 0);
				if(Info[playerid][pVIP] == 0)
				{
				   	return GivePlayerCash(playerid, -2000);
				}
				else
				{
   					GivePlayerCash(playerid, -2500);
				}
		    }
		}
		}
	}
	if(dialogid == NGMENU)
	{
 		if(response) switch(listitem)
		{
			case 0: // NG Duty
			{
				if(OnDuty[playerid]==0)
				{
					format(string, sizeof(string), "* Soldado %s toma una placa y una pistola de su casillero.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerSkin(playerid, 287);
					Info[playerid][pModel] = 287;
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 31);
					OnDuty[playerid] = 1;
				}
				else if(OnDuty[playerid]==1)
				{
					format(string, sizeof(string), "* Soldado %s deja su placa y armas en el casillero.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(playerid);
					SetPlayerArmour(playerid, 0.0);
					SetPlayerSkin(playerid, Info[playerid][pChar]);
					OnDuty[playerid] = 0;
				}
			}
			case 1: // NG Uniforms
			{
			    SafeDialogEx(playerid, NGMENUSKIN, DIALOG_STYLE_LIST, "{817867}Vestimenta", "Coronel\nOficial 1 (OFF)\nOfcial 2 (OFF)\nRanger\nOff Duty Hombre\nOff Duty Mujer\n\
				Seguridad Negro\nSeguridad Blanco\nMédico\nTraje Táctico", "Ok", "Cancelar");
			}
			case 2: // NG Weapons
			{
				SafeDialogEx(playerid, NGMENUWEP, DIALOG_STYLE_LIST, "{817867}Armamentos","Deagle\nShotgun\nMP5\nM4\nRifle\nSniper Rifle\nLanza Misiles\n\
				SDPistol\nGrenada\nTear Gas\nNitestick\nSpray\nCámara\nParacaidas", "Equipar", "Cancelar");
			}
			case 3: // NG Undercover
			{
				SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "{817867}Encubierto","Escoge un skin (por ID).", "Ok", "Cancelar");
			}
    		case 4: // NG Heal
			{
				SetPlayerArmour(playerid, 100);
    		}
			case 5: SetHP(playerid, 100);
			case 6: SafeDialogEx( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "{817867}Accesorios", "Bienvenido a la taquilla de accesorios de USMC","Continuar", "Cancelar" );
			case 7: GivePlayerValidWeapon(playerid, 46);
		}
	}
	if(dialogid == NGMENUSKIN)
	{
 		if(response)
		{
			if(listitem == 0) // LAPD Uniforms
			{
			    if(Info[playerid][pRank] == 6)
			    {
					SetPlayerSkin(playerid, 295);
					Info[playerid][pModel] = 295;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres rango 6.");
				}
			}
			if(listitem == 1) //LAPD Uniforms
			{
				SetPlayerSkin(playerid, 240);
				Info[playerid][pModel] = 240;
			}
			if(listitem == 2) // LAPD Uniforms
			{
				SetPlayerSkin(playerid, 186);
				Info[playerid][pModel] = 240;
			}
			if(listitem == 3) //LAPD Uniforms
			{
				SetPlayerSkin(playerid, 287);
				Info[playerid][pModel] = 287;
			}
			if(listitem == 4) //LAPD Uniforms
			{
				SetPlayerSkin(playerid, 179);
				Info[playerid][pModel] = 179;
			}
			if(listitem == 5) // LAPD Uniforms
			{
				SetPlayerSkin(playerid, 191);
				Info[playerid][pModel] = 191;
			}
			if(listitem == 6) // LAPD Uniforms
			{
				SetPlayerSkin(playerid, 163);
				Info[playerid][pModel] = 163;
			}
			if(listitem == 7) //LAPD Uniforms
			{
				SetPlayerSkin(playerid, 164);
				Info[playerid][pModel] = 164;
			}
			if(listitem == 8) //LAPD Uniforms
			{
				SetPlayerSkin(playerid, 276);
				Info[playerid][pModel] = 16;
			}
			if(listitem == 9) //LAPD Uniforms
			{
				SetPlayerSkin(playerid, 285);
				Info[playerid][pModel] = 285;
			}
		}
	}
	if(dialogid == NGMENUWEP)
	{
 		if(response)
		{
 			if(listitem == 0) return GivePlayerValidWeapon(playerid, 24);
			if(listitem == 1) return GivePlayerValidWeapon(playerid, 25);
			if(listitem == 2) return GivePlayerValidWeapon(playerid, 29);
			if(listitem == 3) return GivePlayerValidWeapon(playerid, 31);
			if(listitem == 4) return GivePlayerValidWeapon(playerid, 33);
			if(listitem == 5) return GivePlayerValidWeapon(playerid, 34);
			if(listitem == 6) return GivePlayerValidWeapon(playerid, 36);
			if(listitem == 7) return GivePlayerValidWeapon(playerid, 23);
			if(listitem == 8) return GivePlayerValidWeapon(playerid, 16);
			if(listitem == 9) return GivePlayerValidWeapon(playerid, 17);
			if(listitem == 10) return GivePlayerValidWeapon(playerid, 3);
			if(listitem == 11) return GivePlayerValidWeapon(playerid, 41);
			if(listitem == 12) return GivePlayerValidWeapon(playerid, 43);
			if(listitem == 13) return GivePlayerValidWeapon(playerid, 46);
		}
	}
	switch(dialogid){
  		case DIALOG_CREATEGUN:{
			if(!response)
				return 1;
		    switch(listitem){
				case 0:{
					if(Info[playerid][pMats] >= 150){
						GivePlayerValidWeapon(playerid, 8);
				        Info[playerid][pMats] -= 150;
				        SendClientMessage(playerid, COLOR_WHITE, "Creaste una katana. Usa /venderarma [playerid] para dar el arma.");
				        format(string, sizeof(string), "* %s crea una katana con sus materiales.", GetPlayerNameEx(playerid));
				        ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
                        Info[playerid][pSuci] += 28;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
							case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear armas más poderes.",Info[playerid][pArmsSkill]/50);
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
				    }
					else return SendClientMessage(playerid, COLOR_ROJO, "{FF0000}Error:{FFFFFF} No tienes suficientes materiales.");
				}
				case 1: {
					if(Info[playerid][pMats] >= 90) {
						GivePlayerValidWeapon(playerid, 15);
						Info[playerid][pMats] -= 90;
						SendClientMessage(playerid, COLOR_WHITE,"Creaste una Caña. Usa /venderarma [playerid] para dar el arma.");
				        format(string, sizeof(string), "* %s crea una caña con sus materiales.", GetPlayerNameEx(playerid));
				        ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pSuci] += 26;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
							case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_ROJO, "{FF0000}Error:{FFFFFF} No tienes suficientes materiales.");
				}
				case 2: {
					if(Info[playerid][pMats] >= 90) {
						GivePlayerValidWeapon(playerid, 7);
						Info[playerid][pMats] -= 90;
						SendClientMessage(playerid, COLOR_WHITE,"Creaste un palo de Billar. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea un palo de billar con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pSuci] += 22;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_ROJO, "{FF0000}Error:{FFFFFF} No tienes suficientes materiales.");
				}
				case 3: {
					if(Info[playerid][pMats] >= 90) {
						GivePlayerValidWeapon(playerid, 5);
						Info[playerid][pMats] -= 90;
						SendClientMessage(playerid, COLOR_WHITE,"Creaste un bate. Usa /venderarma [playerid] para dar el arma.");
 						format(string, sizeof(string), "* %s crea un bate con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pSuci] += 29;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 4: {
					if(Info[playerid][pMats] >= 90) {
						GivePlayerValidWeapon(playerid, 6);
						Info[playerid][pMats] -= 90;
						SendClientMessage(playerid, COLOR_WHITE,"Creaste una Pala. Usa /venderarma [playerid] para dar el arma.");
 						format(string, sizeof(string), "* %s crea una Pala con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pSuci] += 30;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 5: {
					if(Info[playerid][pMats] >= 300) {
						GivePlayerValidWeapon(playerid, 22);
						Info[playerid][pMats] -= 300;
						SendClientMessage(playerid, COLOR_WHITE,"Creastes una pistola 9mm. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una pistola 9mm con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pSuci] += 67;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 6: {
					if(Info[playerid][pMats] >= 400) {
						GivePlayerValidWeapon(playerid, 23);
						Info[playerid][pMats] -= 400;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una pistola con silenciador. Usa /Venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una pistola con silenciador con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pSuci] += 63;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
									case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 7: {
					if(Info[playerid][pMats] >= 450) {
						GivePlayerValidWeapon(playerid, 25);
						Info[playerid][pMats] -= 450;
						SendClientMessage(playerid, COLOR_WHITE,"Creastes una shotgun. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string),"* %s crea una shotgun con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pSuci] += 71;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
				}
				case 8: {
					if(Info[playerid][pMats] >= 800) {
						GivePlayerValidWeapon(playerid, 24);
						Info[playerid][pMats] -= 800;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una Desert Eagle. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una Desert Eagle con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pSuci] += 47;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
									case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 9: {
					if( Info[playerid][pMats] >= 1200){
						GivePlayerValidWeapon(playerid, 29);
						Info[playerid][pMats] -= 1200;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una MP5. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una MP5 con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pSuci] += 74;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
									case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 10: {
					if(Info[playerid][pMats] >= 2000) {
						GivePlayerValidWeapon(playerid, 30);
						Info[playerid][pMats] -= 2000;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una AK-47. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una AK-47 con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
                        Info[playerid][pSuci] += 94;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 11:{
					if(Info[playerid][pMats] >= 2000){
						GivePlayerValidWeapon(playerid, 31);
						Info[playerid][pMats] -= 2000;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una M4A1. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una M4A1 con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pSuci] += 97;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 12: {
					if(Info[playerid][pMats] >= 4000) {
						GivePlayerValidWeapon(playerid, 34);
						Info[playerid][pMats] -= 4000;
						SendClientMessage(playerid, COLOR_WHITE,"Creastes un sniper rifle. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea un sniper rifle con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pSuci] += 76;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 13: {
					if(Info[playerid][pMats] >= 3000) {
						GivePlayerValidWeapon(playerid, 32);
						Info[playerid][pMats] -= 3000;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una TC9. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una SPAS12 con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pSuci] += 63;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FF0000}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
			}
		}
		// Casillero VIP
		case DIALOG_VIPLOCKER:{
			if(response){
				if(listitem == 0){
 					new Float:health;
 					GetPlayerHealth(playerid, health);
					new hpint = floatround( health, floatround_round );
		    		if( hpint >= 100 ) return SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Ya tienes la vida muy llena.");
			    	SetHP(playerid, 100);
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FF33CC}(VIP):{FFFFFF} Usaste el Botiquín HP, ahora tienes 100 de vida.");
				}
				if(listitem == 1){
					new Float:armour;
					GetPlayerArmour(playerid, armour);
					if(armour >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "{FF33CC}[INFO]:{FFFFFF} Ya tienes la armadura muy llena.");
					if(Info[playerid][pVIP] == 1){
						if(GetPlayerCash(playerid) < 15000) return SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $15000!");
						GivePlayerCash(playerid, -15000);
						SetPlayerArmour(playerid, 100);
						SendClientMessageEx(playerid, COLOR_YELLOW, "{FF33CC}(VIP):{FFFFFF} Pagaste $15000 por una armadura.");
					}
					else if(Info[playerid][pVIP] == 2){
						if(GetPlayerCash(playerid) < 10000) return SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $10000!");
						GivePlayerCash(playerid, -10000);
						SetPlayerArmour(playerid, 100);
						SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} Pagaste $10000 por una armadura.");
					}
					if(Info[playerid][pVIP] >= 3) SetPlayerArmour(playerid, 100);
				}
				if(listitem == 2){
					if(Info[playerid][pVIP] >= 1) return SafeDialogEx(playerid, DIALOG_VIPWEAPONS, DIALOG_STYLE_LIST, "{FF33CC}Armas VIP", "Desert Eagle (3)\nM4 (4)\nAK-47 (4)\nShotgun (2)\nMP5 (3)\nSniper (5)\nPistola SD (2)\nGolf Club (1)\nBat (1)\nDildo (1)\nSword (1)", "Ok", "Cancelar");
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No puedes acceder a los lockers de armas.");
				}
				if(listitem == 3){
            		if(Info[playerid][pVIP] >= 2) return SafeDialogEx( playerid, DIALOG_VIPCLOTHES, DIALOG_STYLE_INPUT, "{FF33CC}Selector de Skin","Por favor ingresa una Skin ID!\n\nNote: Los cambios de Skin son Gratis.", "Cambiarse", "Cancelar" );
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} Debes ser VIP Plata o mayor para acceder a los lockers de Ropa.");
				}
				if(listitem == 4){
  					if(Info[playerid][pVIP] >= 2) return SafeDialogEx(playerid, DIALOG_VIPJOB, DIALOG_STYLE_LIST, "{FF33CC}VIP - Trabajos", "Bartender\nVendedor de moviles\nChofer de Autobuses\nPizzero\nCamionero\nRepartidor\nFabricante de Armas\nTaxista\nGranjero\nTraficante de drogas\nVendedor de chalecos\nArtesano", "Ok", "Cancelar");
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} Debes ser VIP Plata o mayor para acceder a los trabajos.");
				}
				if(listitem == 5) SafeDialogEx(playerid, DIALOG_VIPCOLOR, DIALOG_STYLE_LIST, "{FF33CC}VIP Color", "On\nOff", "Ok", "Cancelar");
			}
		}
		case DIALOG_VIPJOB:
		{
	    	if(!response) return 1;
	    	switch(listitem){
            	case 0: SetPVarInt(playerid, "jobSelection", 1);
            	case 1: SetPVarInt(playerid, "jobSelection", 2);
            	case 2: SetPVarInt(playerid, "jobSelection", 3);
            	case 3: SetPVarInt(playerid, "jobSelection", 4);
            	case 4: SetPVarInt(playerid, "jobSelection", 5);
            	case 5: SetPVarInt(playerid, "jobSelection", 6);
            	case 6: SetPVarInt(playerid, "jobSelection", 7);
            	case 7: SetPVarInt(playerid, "jobSelection", 8);
            	case 8: SetPVarInt(playerid, "jobSelection", 9);
            	case 9: SetPVarInt(playerid, "jobSelection", 10);
            	case 10: SetPVarInt(playerid, "jobSelection", 11);
            	case 11: SetPVarInt(playerid, "jobSelection", 12);
        	}
        	SafeDialogEx(playerid, DIALOG_VIPJOB2, DIALOG_STYLE_LIST, "{00F70C}VIP Trabajos", "Job slot 1\nJob slot 2", "Ok", "Cancelar");
    	}
		case DIALOG_VIPJOB2:{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					Info[playerid][pJob] = GetPVarInt(playerid, "jobSelection");
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} Cambiaste tu primer trabajo.");
				}
				case 1:
				{
					Info[playerid][pJob2] = GetPVarInt(playerid, "jobSelection");
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} Cambiaste tu segundo trabajo.");
				}
			}
		}
		case DIALOG_VIPCOLOR:{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0: SetPlayerColor(playerid, COLOR_VIP) && SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} Activaste el color VIP en tu nombre.");
	        	case 1: SetPlayerToTeamColor(playerid) && SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} Desactivaste el color VIP en tu nombre.");
	    	}
		}
		case DIALOG_VIPWEAPONS:{
	    	if(!response) return 1;
	    	if(Info[playerid][pVIP] < 3 && Info[playerid][pVTokens] == 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes fichas VIP no puedes canjear por armas o no eres VIP Oro.");
	    	if(Info[playerid][pConnectTime] < 5 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF} Actualmente tienes restricción de armas.");
	    	switch( listitem ){
	        	case 0:{
    				if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 3) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 3;
						format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tus fichas por un Deagle, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 24);
	        	}
	        	case 1:{
 					if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 4) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 4;
 						format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tus fichas por un M4, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 31);
	        	}
	        	case 2:{
 					if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 4) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 4;
						format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tus fichas por un AK-47, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 30);
	        	}
	        	case 3:{
 					if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 2) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 2;
						format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tus fichas por un Shotgun, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 25);
	        	}
	        	case 4:{
 					if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 3) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 3;
						format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tus fichas por un MP5, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
    					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
	        	}
	        	case 5:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 4){
							Info[playerid][pVTokens] -= 5;
							format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tus fichas por un Sniper Rifle, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 34);
	        	}
	        	case 6:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 1){
							Info[playerid][pVTokens] -= 2;
							format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tus fichas por una Pistola SD, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 23);
	        	}
	        	case 7:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 0){
							Info[playerid][pVTokens] -= 1;
							format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tu ficha por un palo de golf, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
					}
   	 				GivePlayerValidWeapon(playerid, 2);
	        	}
	        	case 8:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 0){
							Info[playerid][pVTokens] -= 1;
							format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tu ficha por un bat de béisbol, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 5);
	        	}
	        	case 9:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 0){
							Info[playerid][pVTokens] -= 1;
							format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tu ficha por un dildo, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 10);
	        	}
	        	case 10:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 0){
							Info[playerid][pVTokens] -= 1;
							format(string, sizeof(string), "{FFFF00}(VIP):{FFFFFF} Cambiaste tu ficha por una sword, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 8);
	        	}
	    	}
		}
		case DIALOG_VIPCLOTHES: //vip clothes corner
		{
			new skinid = strval(inputtext);
			if(!response) { }
			else{
				if(!IsValidSkin(skinid))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Ese skin no está disponible, skins: IDs son de 1 a 299 !");
    				SafeDialogEx( playerid, DIALOG_VIPCLOTHES, DIALOG_STYLE_INPUT, "VIP: Skin","Por favor ingresa una Skin ID!\n\nNota: Los cambios de skin son Libres.", "Cambiar", "Cancelar" );
				}
				else{
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: Te cambiaste tu skin en los lockers VIP.");
					Info[playerid][pChar] = skinid;
					SetPlayerSkin(playerid, skinid);
				}
  			}
			return 1;
		}
		case DIALOG_ADMAIN: if(response) switch(listitem)
		{
			case 0:
			{
				if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás prohibido de hacer anuncios.");
				if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes un teléfono.");
				if(iAdverTimer >= 1)
				{
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
                    new szerror[128];
					format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
					return SendClientMessageEx(playerid, COLOR_GREY, szerror);
				}
				else SafeDialogEx(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "{2EDFFF}Anuncios - Compra y Venta","{FFFFFF}Publique lo que usted vende o compra de forma correspondiente.\n\n{2EDFFF}Inf. Importante:{FFFFFF} Sólo hay un máximo de 128 letras.\n{2EDFFF}Nota:{FFFFFF} El anuncio se hará por medio de FOX.", "Enviar", "Atrás");
			}
			case 1:
			{
				if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás prohibido de hacer anuncios.");
				if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes un teléfono.");
				if(iAdverTimer >= 1)
				{
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
                    new szerror[128];
					format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
					return SendClientMessageEx(playerid, COLOR_GREY, szerror);
				}
				else SafeDialogEx(playerid, DIALOG_ADPLACEP2, DIALOG_STYLE_INPUT, "{2EDFFF}Anuncios - Clasificados","{FFFFFF}Publique lo que usted clasifica de forma correspondiente.\n\n{2EDFFF}Inf. Importante:{FFFFFF} Sólo hay un máximo de 128 letras.\n{2EDFFF}Nota:{FFFFFF} El anuncio se hará por medio de FOX.", "Enviar", "Atrás");
			}
			case 2:
			{
				if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás prohibido de hacer anuncios.");
				if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes un teléfono.");
				if(iAdverTimer >= 1)
				{
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
                    new szerror[128];
					format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
					return SendClientMessageEx(playerid, COLOR_GREY, szerror);
				}
				else SafeDialogEx(playerid, DIALOG_ADPLACEP3, DIALOG_STYLE_INPUT, "{2EDFFF}Anuncios - Busco/Ofrezco Empleo","{FFFFFF}Publique sólo si busca u ofrece empleo de forma correspondiente.\n\n{2EDFFF}Inf. Importante:{FFFFFF} Sólo hay un máximo de 128 letras.\n{2EDFFF}Nota:{FFFFFF} El anuncio se hará por medio de FOX.", "Enviar", "Atrás");
			}
			case 3:
			{
				if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás prohibido de hacer anuncios.");
				if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes un teléfono.");
				if(iAdverTimer >= 1)
				{
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
                    new szerror[128];
					format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
					return SendClientMessageEx(playerid, COLOR_GREY, szerror);
				}
				else SafeDialogEx(playerid, DIALOG_ADPLACEP4, DIALOG_STYLE_INPUT, "{2EDFFF}Anuncios - Anónimo","{FFFFFF}Publique contenidos de la noticia de forma correspondiente.\n\n{2EDFFF}Inf. Importante:{FFFFFF} Sólo hay un máximo de 128 letras.\n{2EDFFF}Nota:{FFFFFF} El anuncio se hará por medio de FOX.", "Enviar", "Atrás");
			}
		}
		case DIALOG_ADPLACE:{
			if(response){
				new
					iLength = strlen(inputtext);
				if(Info[playerid][pAdverID] != -1) return SendClientMessageEx(playerid, COLOR_GREY, "Ya hiciste un anuncio, primero borra el anterior.");
				if(isnull(inputtext)){
				    SafeDialogEx(playerid, DIALOG_ADPLACE, DIALOG_STYLE_INPUT, "{00F70C}Anuncios - Hacer Anuncio", "Ingresa el anuncio que dejarás, recuerda que los anuncios son exclusivamente para compra y venta\n\n{2EDFFF}Inf. Importante:{FFFFFF} Sólo hay un máximo de 128 letras.\n{2EDFFF}Nota:{FFFFFF} El anuncio se hará por medio de FOX.", "Enviar", "Atrás");
				    return SendClientMessageEx(playerid, COLOR_GREY, "No ingresaste nada.");
				}
				if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio\nPoner un Anuncio Rápido", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iLength *= 5;
				if(GetPlayerCash(playerid) < iLength) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes suficiente dinero para pagar el anuncio.");
				GivePlayerCash(playerid, -iLength);
				SendAD(playerid, inputtext, Info[playerid][pPnumber]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones tu anuncio saldrá en la lista.");
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio\nPoner un Anuncio Rápido", "Seleccionar", "Cancelar");
		}
  		case DIALOG_ADPLACEP:{
			if(response){
				if(GetPlayerCash(playerid) < 100){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "{2EDFFF}[ATENCIÓN]: {FFFFFF}Debes tener {00F70C}${FFFFFF}100 para poder pagar la publicidad de forma global.");
				}
				else if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iAdverTimer = 60;
				GivePlayerCash(playerid, -200);
				new
					szMessage[255];
                new st[128];
				format(szMessage, sizeof(szMessage), "• Compra/Venta: %s - Número Tlf/Cel: %i", inputtext, Info[playerid][pPnumber]);
				OOCNews(COLOR_PUBLICIDAD,szMessage);
				format(st,200,"! {FFFFFF}Anunciante %s con la ID %d.",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_ROJO,st);
				return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
		}
		case DIALOG_SO:
		{
		    if(response)
		    {
   			switch(listitem)
	        {
	            case 0:
	            {
	                    format(string, sizeof(string), "! {FFFFFF} El usuario %s solicita a un {B87DFF}moderador{FFFFFF} a su posición. (/Asoporte %d)", GetPlayerNameEx(playerid), playerid);
	                    ABroadCast(COLOR_LILA_CLARO, string, 2);
	                    PlayerSol[playerid] = 1;
	                    SendClientMessageEx(playerid, COLOR_LILA_CLARO, "Inf. Soporte:{FFFFFF} Tu solicitud para obtener soporte fue enviada con éxito, espere por favor. . .");
	                    JustReported[playerid] = 60;
				}
				case 1:
				{
	                    format(string, sizeof(string), "! {FFFFFF} El usuario %s solicita a un {B87DFF}vendedor vip{FFFFFF} a su posición. (/Asoporte %d)", GetPlayerNameEx(playerid), playerid);
	                    ABroadCast(COLOR_LILA_CLARO, string, 10);
	                    PlayerSol[playerid] = 1;
	                    SendClientMessageEx(playerid, COLOR_LILA_CLARO, "Inf. Soporte:{FFFFFF} Tu solicitud para obtener soporte fue enviada con éxito, espere por favor. . .");
	                    JustReported[playerid] = 60;
				}
			}
		}
	}
		case DIALOG_ADPLACEP2:{
			if(response){
				if(GetPlayerCash(playerid) < 100){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero para hacer este anuncio.");
				}
				else if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iAdverTimer = 60;
				GivePlayerCash(playerid, -200  );
				new
					szMessage[255];
                new st[128];
				format(szMessage, sizeof(szMessage), "• Clasificados: %s - Número Tlf/Cel: %i", inputtext, Info[playerid][pPnumber]);
				OOCNews(COLOR_PUBLICIDAD,szMessage);
                format(st,200,"! {FFFFFF}Anunciante %s con la ID %d.",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_ROJO,st);
				return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
		}
		case DIALOG_ADPLACEP3:{
			if(response){
				if(GetPlayerCash(playerid) < 50){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero para hacer este anuncio.");
				}
				else if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iAdverTimer = 60;
				GivePlayerCash(playerid, -50);
				new
					szMessage[255];
				new st[128];
				format(szMessage, sizeof(szMessage), "• Empleos: %s - Número Tlf/Cel: %i", inputtext, Info[playerid][pPnumber]);
				OOCNews(COLOR_PUBLICIDAD,szMessage);
				format(st,200,"! {FFFFFF}Anunciante %s con la ID %d.",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_ROJO,st);
				return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
		}
		case DIALOG_ADPLACEP4:{
			if(response){
				if(GetPlayerCash(playerid) < 500){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero para hacer este anuncio.");
				}
				else if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iAdverTimer = 60;
				GivePlayerCash(playerid, -500);
				new
					szMessage[255];
				new st[128];
				format(szMessage, sizeof(szMessage), "• Deep Web: %s (Tlf/Cel: %i - Inf. Protegida)", inputtext, Info[playerid][pPnumber]);
				OOCNews(COLOR_ROJO,szMessage);
                format(st,200,"! {FFFFFF}Anunciante %s con la ID %d.",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_ROJO,st);
				return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
		}

	    case DOORLOCK:
		{
			if(response == 1)
			{
			    new i = GetPVarInt(playerid, "Door");
			    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "No ingresaste nada." );
			    if(strlen(inputtext) > 24) return SendClientMessageEx(playerid, COLOR_GREY, "La contraseña no es más de 24 letras o números.");
			    if(strcmp(inputtext, DDoorsInfo[i][dPass], true) == 0){
			        if(DDoorsInfo[i][dLocked] == 0){
						DDoorsInfo[i][dLocked] = 1;
						SendClientMessageEx(playerid, COLOR_WHITE, "Contraseña Aceptada, puerta bloqueada.");
			        }
			        else{
			            DDoorsInfo[i][dLocked] = 0;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Contraseña Aceptada, puerta desbloqueada.");
			        }
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "¡Contraseña Incorrecta!");
			}
		}
		case ADMUTE:
		{
		    if(response == 1)
		    {
		        switch(listitem)
		        {
		            case 0: // Jailtime
					{
					    if(Info[playerid][pADMuteTotal] < 4)
					    {
						    Info[playerid][pADMute] = 0;
					        ResetPlayerWeaponsEx(playerid);
							if(Info[playerid][pJailed] != 0)
							{
							    Info[playerid][pJailTime] += Info[playerid][pADMuteTotal]*15*60;
							}
							else
							{
							    GameTextForPlayer(playerid, "~w~Bienvenido a ~n~~r~Fort DeMorgan", 5000, 3);
								Info[playerid][pJailed] = 1; PhoneOnline[playerid] = 1;
								Info[playerid][pJailTime] = Info[playerid][pADMuteTotal]*15*60;
								SetPlayerFacingAngle(playerid, 0);
								TogglePlayerControllable(playerid, 1);
								new rand = random(sizeof(OOCJail));
								LoadObjects(playerid);
								SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
								SetPlayerVirtualWorld(playerid, 1000);
								SetPlayerInterior(playerid,0);
								SetPlayerSkin(playerid, 50);
								SetPlayerToTeamColor(playerid);
							}
					    }
					    else if(Info[playerid][pADMuteTotal] >= 4 || Info[playerid][pADMuteTotal] < 7)
					    {
						    Info[playerid][pADMute] = 0;
							ResetPlayerWeaponsEx(playerid);
							if(Info[playerid][pJailed] != 0)
							{
							    Info[playerid][pJailTime] += Info[playerid][pADMuteTotal]*15*60;
							}
							else
							{
							    GameTextForPlayer(playerid, "~w~Bienvenido a ~n~~r~Fort DeMorgan", 5000, 3);
								new rand = random(sizeof(OOCJail));
								LoadObjects(playerid);
								SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
								SetPlayerVirtualWorld(playerid, 1000);
								SetPlayerInterior(playerid,0);
								SetPlayerSkin(playerid, 50);
								Info[playerid][pJailed] = 1;
								Info[playerid][pJailTime] = Info[playerid][pADMuteTotal]*15*60;
								PhoneOnline[playerid] = 1;
								SetPlayerToTeamColor(playerid);
								SetPlayerWantedLevel(playerid, 0);
								ClearAnimations(playerid);
								SetPlayerSkin(playerid, 50);
							}
					    }
						format(string,sizeof(string),"[AdmWarning]: %s estará en prisión %d Minutos, gracias a la oportunidad de AD Unmuted.",GetPlayerNameEx(playerid),Info[playerid][pADMuteTotal]*15);
						ABroadCast(COLOR_GENERAL,string,2);
	            	}
	            	case 1: // Fine
	            	{
	            	    new playername[MAX_PLAYER_NAME];
	            	    GetPlayerName(playerid, playername, sizeof(playername));

		                new allmoney;
	 					if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
						{
	 						allmoney = HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+Info[playerid][pAccount];
	   					}
	   					else
	    				{
	   						allmoney = GetPlayerCash(playerid)+Info[playerid][pAccount];
	    				}
	                    Info[playerid][pADMute] = 0;
					    new fine = 10*allmoney/100;
		                format(string,sizeof(string),"[AdmWarning]: %s pagó $%d por la oportunidad de AD Unmuted.",GetPlayerNameEx(playerid),fine);
		                GivePlayerCash(playerid,-fine);
						ABroadCast(COLOR_GENERAL,string,2);
		            }
		        }
		    }
		    else
		    {
		        format(string,sizeof(string),"[AdmWarning]: %s canceló su oportunidad de ser desmuteado del comando /ad.",GetPlayerNameEx(playerid));
				ABroadCast(COLOR_GENERAL,string,2);
		    }
		}
		case DUTYMENU:
		{
 			if(response)
			{
				if(listitem == 0) // LAPD Duty
				{
					if(OnDuty[playerid] == 0)
					{
						format(string, sizeof(string), "Oficial %s se coloca el uniforme, toma el kevlar, el armamento y enciende la radio.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerSkin(playerid, 280);
						Info[playerid][pModel] = 280;
	    				SetPlayerArmour(playerid, 100.0);
	    				SetHP(playerid, 100.0);
	    				GivePlayerValidWeapon(playerid, 0);
	    				GivePlayerValidWeapon(playerid, 3);
						GivePlayerValidWeapon(playerid, 24);
						TextDrawShowForPlayer(playerid, TEXTPLACAA);
      		            TextDrawShowForPlayer(playerid, PLACAPD);
      		            RadioOn[playerid] = 1;
						OnDuty[playerid] = 1;
					}
					else if(OnDuty[playerid] == 1)
					{
						format(string, sizeof(string), "Oficial %s guarda en el casillero su uniforme y el kevlar. Apaga la radio.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerArmour(playerid, 0.0);
						SetPlayerSkin(playerid, Info[playerid][pChar]);
						TextDrawHideForPlayer(playerid, PLACAPD);
        	        	TextDrawHideForPlayer(playerid, TEXTPLACAA);
        	        	RadioOn[playerid] = 0;
						OnDuty[playerid] = 0;
					}
				}
				if(listitem == 1) // LAPD Weapons
				{
					SafeDialogEx(playerid, DUTYMENU2, DIALOG_STYLE_LIST, "L.A.P.D.","Porra\nNavaja Tactica\nColt M1911 .45\nDesert Eagle .50AE\nEscopeta 12GA.\nSubfusil MP5\nFusil M4\nC4 + Detonador\n\n\nKevlar y Vida\nComplementos de Uniforme", "Okay", "Cancelar");
				}
				if(listitem == 2) // LAPD Uniforms
				{
					SafeDialogEx(playerid, DUTYMENU3, DIALOG_STYLE_LIST, "L.A.P.D.","Cadete\nOficial 1 - Masculino\nOficial 2 - Masculino\nOficial 3 - Masculino\nOficial 4 - Masculino\nOficial 5 - Masculino\nOficial 6: MARY - Masculino\nOficial 1 - Femenino\nOficial 2 - Femenino", "Ponerse", "Cancelar");
				}
				if(listitem == 3) // LAPD Pelotón D-1
				{
				    if(Info[playerid][pDivision] == 14)
				    {
						SetPlayerSkin(playerid, 285);
						Info[playerid][pModel] = 285;
						ResetPlayerWeaponsEx(playerid);
						GivePlayerValidWeapon(playerid, 1);
						GivePlayerValidWeapon(playerid, 4);
						GivePlayerValidWeapon(playerid, 16);
						GivePlayerValidWeapon(playerid, 24);
						GivePlayerValidWeapon(playerid, 31);
						GivePlayerValidWeapon(playerid, 44);
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF}No formas parte del Pelotón D.");
					}
				}
				if(listitem == 4) // LAPD Pelotón D-2
				{
				    if(Info[playerid][pDivision] == 14)
				    {
						SetPlayerSkin(playerid, 285);
						Info[playerid][pModel] = 285;
						ResetPlayerWeaponsEx(playerid);
						GivePlayerValidWeapon(playerid, 1);
						GivePlayerValidWeapon(playerid, 4);
						GivePlayerValidWeapon(playerid, 16);
						GivePlayerValidWeapon(playerid, 24);
						GivePlayerValidWeapon(playerid, 34);
						GivePlayerValidWeapon(playerid, 45);
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF}No formas parte del Pelotón D.");
					}
				}
				if(listitem == 5) // LAPD ASD
				{
				    if(Info[playerid][pDivision] == 20)
				    {
						SetPlayerSkin(playerid, 305);
						Info[playerid][pModel] = 305;
						ResetPlayerWeaponsEx(playerid);
						GivePlayerValidWeapon(playerid, 24);
						GivePlayerValidWeapon(playerid, 34);
						GivePlayerValidWeapon(playerid, 45);
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF}No formas parte de la Air Support Division.");
					}
				}
				if(listitem == 6) // LAPD Undercover Uniform
				{
					SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Encubierto","Elige un Skin (por ID).", "Okay", "Cancelar");
				}
			}
		}
	 	case DUTYMENU2:
		{
 			if(response)
			{
		    	if(Tax > 0) switch(listitem) {
					case 0: // LAPD Porra
					{
						if(Info[playerid][pRank] >= 2)
						{
							GivePlayerValidWeapon(playerid, 3);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro Cadete en adelante para tomar Porra.");
						}
					}
					case 1: // LAPD Navaja Táctica
					{
      					if(Info[playerid][pRank] >= 2)
						{
							GivePlayerValidWeapon(playerid, 4);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro Cadete en adelante para tomar Navaja Táctica.");
						}
					}
					case 2: // LAPD Colt .45
					{
      					if(Info[playerid][pRank] >= 2)
						{
							GivePlayerValidWeapon(playerid, 22);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro Cadete en adelante para tomar Pistola .45 - Colt M1911.");
						}
					}
					case 3: // LAPD Desert Eagle .50
					{
						if(Info[playerid][pRank] >= 2)
						{
							GivePlayerValidWeapon(playerid, 24);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro Cadete en adelante para tomar Pistola .50AE - Desert Eagle.");
						}
					}
					case 4: // LAPD Escopeta
					{
						if(Info[playerid][pRank] >= 3)
						{
							GivePlayerValidWeapon(playerid, 25);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser Police Officer I en adelante para tomar Fusil M4.");
						}
					}
					case 5: // LAPD Subfusil MP5
					{
						if(Info[playerid][pRank] >= 5)
						{
							GivePlayerValidWeapon(playerid, 29);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser Police Officer III en adelante para tomar Subfusil MP5.");
						}
					}
					case 6: // LAPD Fusil M4
					{
						if(Info[playerid][pDivision] == 14 || Info[playerid][pRank] >= 12)
						{
							GivePlayerValidWeapon(playerid, 31);
							Tax -= 800;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro del Pelotón D o Sargento II en adelante para tomar Fusil M4.");
						}
					}
					case 7: // LAPD C4+Detonador
					{
						if(Info[playerid][pRank] >= 19)
						{
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 40);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser Subjefe I o superior para tomar C4 + Detonador.");
						}
					}
					case 8: // LAPD Kevlar + Vida
					{
						SetPlayerArmour(playerid, 100.0);
						SetHP(playerid, 100);
						Tax -= 2000;
					}
					case 9: SafeDialogEx( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessorios", "Bienvenido al casillero de accesorios del L.A.P.D.","Continuar", "Cancelar" );
				}
				else return SendClientMessageEx(playerid,COLOR_WHITE,"El gobierno no tiene fondos para facilitar armas.");
			}
		}
		case DUTYMENU3:
		{
 			if(response)
			{
				if(listitem == 0) // LAPD Cadete
				{
					SetPlayerSkin(playerid, 71);
					Info[playerid][pModel] = 71;
				}
				if(listitem == 1) //LAPD Masculino 1
				{
					SetPlayerSkin(playerid, 280);
					Info[playerid][pModel] = 280;
				}
				if(listitem == 2) // LAPD Masculino 2
				{
					SetPlayerSkin(playerid, 281);
					Info[playerid][pModel] = 281;
                }
				if(listitem == 3) // LAPD Masculino 3
				{
					SetPlayerSkin(playerid, 267);
					Info[playerid][pModel] = 267;
				}
				if(listitem == 4) //LAPD Masculino 4
				{
					SetPlayerSkin(playerid, 266);
					Info[playerid][pModel] = 266;
				}
				if(listitem == 5) //LAPD Masculino 5
				{
					SetPlayerSkin(playerid, 265);
					Info[playerid][pModel] = 265;
				}
				if(listitem == 6) // LAPD Masculino 6 - MARY
				{
					SetPlayerSkin(playerid, 284);
					Info[playerid][pModel] = 284;
				}
				if(listitem == 7) // LAPD Femenino 1
				{
					SetPlayerSkin(playerid, 306);
					Info[playerid][pModel] = 306;
				}
				if(listitem == 8) // LAPD Femenino 2
				{
					SetPlayerSkin(playerid, 307);
					Info[playerid][pModel] = 307;
				}
			}
		}
		case PCDUTYMENU:
		{
 			if(response)
			{
				if(listitem == 0) // PCPD Duty
				{
					if(OnDuty[playerid] == 0)
					{
						format(string, sizeof(string), "Sheriff %s se coloca el uniforme, toma el kevlar, el armamento y enciende la radio.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerSkin(playerid, 280);
						Info[playerid][pModel] = 280;
	    				SetPlayerArmour(playerid, 100.0);
	    				SetHP(playerid, 100.0);
	    				GivePlayerValidWeapon(playerid, 0);
	    				GivePlayerValidWeapon(playerid, 3);
						GivePlayerValidWeapon(playerid, 24);
						TextDrawShowForPlayer(playerid, TEXTPLACAA);
      		            TextDrawShowForPlayer(playerid, PLACAPD);
      		            RadioOn[playerid] = 1;
						OnDuty[playerid] = 1;
					}
					else if(OnDuty[playerid] == 1)
					{
						format(string, sizeof(string), "Sheriff %s guarda en el casillero su uniforme y el kevlar. Apaga la radio.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerArmour(playerid, 0.0);
						SetPlayerSkin(playerid, Info[playerid][pChar]);
						TextDrawHideForPlayer(playerid, PLACAPD);
        	        	TextDrawHideForPlayer(playerid, TEXTPLACAA);
        	        	RadioOn[playerid] = 0;
						OnDuty[playerid] = 0;
					}
				}
				if(listitem == 1) // PCPD Weapons
				{
					SafeDialogEx(playerid, PCDUTYMENU2, DIALOG_STYLE_LIST, "P.C.P.D.","Porra\nNavaja Tactica\nColt M1911 .45\nDesert Eagle .50AE\nEscopeta 12GA.\nSubfusil MP5\nFusil M4\nC4 + Detonador\n\n\nKevlar y Vida\nComplementos de Uniforme", "Okay", "Cancelar");
				}
				if(listitem == 2) // PCPD Uniforms
				{
					SafeDialogEx(playerid, PCDUTYMENU3, DIALOG_STYLE_LIST, "P.C.P.D.","Cadete\nSheriff 1 - Masculino\nSheriff 2 - Masculino\nSheriff 3 - Masculino\nSheriff 4 - Masculino\nSheriff 5 - Masculino\nSheriff 1 - Femenino", "Ponerse", "Cancelar");
				}
				if(listitem == 3) // PCPD ASD
				{
				    if(Info[playerid][pDivision] == 20)
				    {
						SetPlayerSkin(playerid, 305);
						Info[playerid][pModel] = 305;
						ResetPlayerWeaponsEx(playerid);
						GivePlayerValidWeapon(playerid, 24);
						GivePlayerValidWeapon(playerid, 34);
						GivePlayerValidWeapon(playerid, 45);
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF}No formas parte de la Air Support Division.");
					}
				}
				if(listitem == 4) // PCPD Undercover Uniform
				{
					SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Encubierto","Elige un Skin (por ID).", "Okay", "Cancelar");
				}
			}
		}
	 	case PCDUTYMENU2:
		{
 			if(response)
			{
		    	if(Tax > 0) switch(listitem) {
					case 0: // PCPD Porra
					{
						if(Info[playerid][pRank] >= 2)
						{
							GivePlayerValidWeapon(playerid, 3);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro Cadete en adelante para tomar Porra.");
						}
					}
					case 1: // PCPD Navaja Táctica
					{
      					if(Info[playerid][pRank] >= 2)
						{
							GivePlayerValidWeapon(playerid, 4);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro Cadete en adelante para tomar Navaja Táctica.");
						}
					}
					case 2: // PCPD Colt .45
					{
      					if(Info[playerid][pRank] >= 2)
						{
							GivePlayerValidWeapon(playerid, 22);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro Cadete en adelante para tomar Pistola .45 - Colt M1911.");
						}
					}
					case 3: // PCPD Desert Eagle .50
					{
						if(Info[playerid][pRank] >= 2)
						{
							GivePlayerValidWeapon(playerid, 24);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro Cadete en adelante para tomar Pistola .50AE - Desert Eagle.");
						}
					}
					case 4: // PCPD Escopeta
					{
						if(Info[playerid][pRank] >= 3)
						{
							GivePlayerValidWeapon(playerid, 25);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser Police Officer I en adelante para tomar Fusil M4.");
						}
					}
					case 5: // PCPD Subfusil MP5
					{
						if(Info[playerid][pRank] >= 5)
						{
							GivePlayerValidWeapon(playerid, 29);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser Police Officer III en adelante para tomar Subfusil MP5.");
						}
					}
					case 6: // PCPD Fusil M4
					{
						if(Info[playerid][pDivision] == 14 || Info[playerid][pRank] >= 12)
						{
							GivePlayerValidWeapon(playerid, 31);
							Tax -= 800;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser miembro del Pelotón D o Sargento II en adelante para tomar Fusil M4.");
						}
					}
					case 7: // PCPD C4+Detonador
					{
						if(Info[playerid][pRank] >= 19)
						{
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 39);
							GivePlayerValidWeapon(playerid, 40);
							Tax -= 4000;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes ser Subjefe I o superior para tomar C4 + Detonador.");
						}
					}
					case 8: // PCPD Kevlar + Vida
					{
						SetPlayerArmour(playerid, 100.0);
						SetHP(playerid, 100);
						Tax -= 2000;
					}
					case 9: SafeDialogEx( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessorios", "Bienvenido al casillero de accesorios del P.C.P.D.","Continuar", "Cancelar" );
				}
				else return SendClientMessageEx(playerid,COLOR_WHITE,"El gobierno no tiene fondos para facilitar armas.");
			}
		}
		case PCDUTYMENU3:
		{
 			if(response)
			{
				if(listitem == 0) // PCPD Cadete
				{
					SetPlayerSkin(playerid, 71);
					Info[playerid][pModel] = 71;
				}
				if(listitem == 1) //PCPD Masculino 1
				{
					SetPlayerSkin(playerid, 282);
					Info[playerid][pModel] = 282;
				}
				if(listitem == 2) // PCPD Masculino 2
				{
					SetPlayerSkin(playerid, 311);
					Info[playerid][pModel] = 311;
                }
				if(listitem == 3) // PCPD Masculino 3
				{
					SetPlayerSkin(playerid, 310);
					Info[playerid][pModel] = 310;
				}
				if(listitem == 4) //PCPD Masculino 4
				{
					SetPlayerSkin(playerid, 288);
					Info[playerid][pModel] = 288;
				}
				if(listitem == 5) //PCPD Masculino 5
				{
					SetPlayerSkin(playerid, 283);
					Info[playerid][pModel] = 283;
				}
				if(listitem == 6) // PCPD Femenino 1
				{
					SetPlayerSkin(playerid, 309);
					Info[playerid][pModel] = 309;
				}
			}
		}
		case FDUTYMENU:
		{
 			if(response)
			{
				if(listitem == 0) // AININT Duty
				{
					if(OnDuty[playerid] == 0)
					{
						format(string, sizeof(string), "* Agente %s coge una placa y una pistola de su casillero.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerArmour(playerid, 100.0);
						SetHP(playerid, 100.0);
						TextDrawShowForPlayer(playerid, TEXTPLACAC);
			    		TextDrawShowForPlayer(playerid, PLACAAININT);
			    		SendClientMessageEx(playerid, TEAM_AININT_COLOR, "* AININT:{FFFFFF} Has entrado en servicio.");
						GivePlayerValidWeapon(playerid, 24);
						GivePlayerValidWeapon(playerid, 43);
						OnDuty[playerid] = 1;
					}
					else if(OnDuty[playerid] == 1)
					{
						format(string, sizeof(string), "* Agente %s deja su placa y su arma en su casillero.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerSkin(playerid, Info[playerid][pChar]);
						SetPlayerArmour(playerid, 0.0);
						SetHP(playerid, 100.0);
						SetPlayerToTeamColor(playerid);
        				TextDrawHideForPlayer(playerid, PLACAAININT);
        				TextDrawHideForPlayer(playerid, TEXTPLACAC);
			   		    SendClientMessageEx(playerid, TEAM_AININT_COLOR, "* AININT:{FFFFFF} Has salido del servicio.");
						OnDuty[playerid] = 0;
					}
				}
			}
			if(listitem == 1) // Armas AININT
			{
				SafeDialogEx(playerid, FDUTYMENU2, DIALOG_STYLE_LIST, "{2EDFFF}Equipamiento AININT","Gas Pimienta\nPorra\n9mm\n9mm Silenciada\nDesert Eagle\nEscopeta\nUZI\nMP5\nM4\nSniper\nGranada de Humo\nCámara\nVisión Nocturna\nVisión Térmica\nRPG\nChaleco AntiBalas\nBotiquín\nAccesorios", "Okey", "Cancelar");
			}
			if(listitem == 2) // Traje BOPE
			{
                if(Info[playerid][pDivision] == 4)
				{
    				SetPlayerSkin(playerid, 285);
	    			Info[playerid][pModel] = 285;
				}
				else
				{
    				SendClientMessageEx(playerid, TEAM_AININT_COLOR, "* AININT:{FFFFFF} ¡No perteneces al Batallón!.");
    				return 1;
				}
			}
			if(listitem == 3) // Uniformes AININT
			{
				SafeDialogEx(playerid, FDUTYMENU3, DIALOG_STYLE_LIST, "{2EDFFF}Uniformes","Agente FBI\nAgente CIA\nAgente CIA 2\nAgente 1\nAgente 2\nAgente 3\nAgente 4\nAgente Femenino\nAgente Femenino 2\nAgente Femenino 3", "Poner", "Cancelar");
			}
			if(listitem == 4) // Skins encubierto AININT
			{
				SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "{2EDFFF}Encubierto","Elige un skin (por ID).", "Ok", "Cancelar");
			}
		}
		case FDUTYMENU2:
		{
 			if(response)
			{
		    	if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"El gobierno no tiene fondos para facilitar armas.");
		    	if(Info[playerid][pConnectTime] < 5 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No puedes obtener armas debido a tu restricción de 5 horas.");
					else switch(listitem) {
					case 0: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 41);
						Tax -= 10000;
					}
					case 1: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 3);
						Tax -= 10000;
					}
					case 2: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 22);
						Tax -= 10000;
					}
					case 3: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 23);
						Tax -= 10000;
					}
					case 4: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 24);
						Tax -= 10000;
					}
					case 5: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 25);
						Tax -= 10000;
					}
					case 6: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 28);
						Tax -= 10000;
					}
					case 7: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 29);
						Tax -= 10000;
					}
					case 8: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 31);
						Tax -= 10000;
					}
					case 9: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 34);
						Tax -= 10000;
					}
					case 10: // Armas AININT
					{
      					GivePlayerValidWeapon(playerid, 17);//1
						GivePlayerValidWeapon(playerid, 17);//2
						GivePlayerValidWeapon(playerid, 17);//3
						GivePlayerValidWeapon(playerid, 17);//4
						GivePlayerValidWeapon(playerid, 17);//5
						GivePlayerValidWeapon(playerid, 17);//6
						Tax -= 10000;
					}
					case 11: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 43);
						Tax -= 10000;
					}
					case 12: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 44);
						Tax -= 10000;
					}
					case 13: // Armas AININT
					{
						GivePlayerValidWeapon(playerid, 45);
						Tax -= 10000;
					}
					case 14: // Armas AININT
					{
				 	if(Info[playerid][pLeader] == 2)
					{
    					GivePlayerValidWeapon(playerid, 35);//1
						GivePlayerValidWeapon(playerid, 35);//2
						GivePlayerValidWeapon(playerid, 35);//3
					}
					else
					{
    				SendClientMessageEx(playerid, TEAM_AININT_COLOR, "* AININT:{FFFFFF} ¡Debes ser líder para tomar esta arma!.");
    				return 1;
					}
						Tax -= 20;
					}
					case 15: // Armas AININT
					{
						SetPlayerArmour(playerid, 100);
						Tax -= 10000;
					}
					case 16: SetHP(playerid, 100);
					default: SafeDialogEx( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "{FFFFFF}Accesorios", "Bienvenido al casillero de accesorios del AININT.","Continuar", "Cancelar" );
				}
			}
		}
		case FDUTYMENU3:
		{
 			if(response)
			{
				if(listitem == 0) // Uniformes AININT
				{
					SetPlayerSkin(playerid, 286);
					Info[playerid][pModel] = 286;
				}
				if(listitem == 1) //Uniformes AININT
				{
					SetPlayerSkin(playerid, 164);
					Info[playerid][pModel] = 164;
				}
				if(listitem == 2) //Uniformes AININT
				{
					SetPlayerSkin(playerid, 163);
					Info[playerid][pModel] = 163;
				}
				if(listitem == 3) //Uniformes AININT
				{
					SetPlayerSkin(playerid, 166);
					Info[playerid][pModel] = 166;
				}
				if(listitem == 4) // Uniformes AININT
				{
					SetPlayerSkin(playerid, 165);
					Info[playerid][pModel] = 165;
				}
				if(listitem == 5) // Uniformes AININT
				{
					SetPlayerSkin(playerid, 294);
					Info[playerid][pModel] = 294;
				}
				if(listitem == 6) // Uniformes AININT
				{
					SetPlayerSkin(playerid, 120);
					Info[playerid][pModel] = 120;
				}
				if(listitem == 7) //Uniformes AININT
				{
					SetPlayerSkin(playerid, 141);
					Info[playerid][pModel] = 141;
				}
				if(listitem == 8) //Uniformes AININT
				{
					SetPlayerSkin(playerid, 150);
					Info[playerid][pModel] = 150;
				}
				if(listitem == 9) //Uniformes AININT
				{
					SetPlayerSkin(playerid, 76);
					Info[playerid][pModel] = 76;
				}
			}
		}
		case FDUTYMENU4:
		{
 			if(response)
			{
	 	        new skinid = strval(inputtext);
 		        if(!IsValidSkin(skinid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes de escoger una id de skin entre 1 y 299.");
				if(!IsPublicSkin(skinid)) return SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "{2EDFFF}Encubierto","Skin inválido. Escoge otro.", "Seleccionar", "Cancelar");
				Info[playerid][pChar] = skinid;
				Info[playerid][pModel] = skinid;
				SetPlayerSkin(playerid, Info[playerid][pChar]);
	    }
	}
		case DIALOG_LOADTRUCK: // TRUCKER JOB LOAD TRUCK
		{
 			if(response)
			{
				if(listitem == 0) // Legal goods
				{
			    	SafeDialogEx(playerid, DIALOG_LOADTRUCKL, DIALOG_STYLE_LIST, "{2EDFFF}¿Qué quieres transportar?","{FFFFFF}Comida y Bebida\n{FFFFFF}Ropa\n{FFFFFF}Materiales\n{FFFFFF}Objetos del 24 Horas", "Ok", "Cancelar");
				}
				if(listitem == 1) // Illegal goods
				{
					new level = Info[playerid][pTruckSkill];
					if(level >= 0 && level <= 50)
					{
            			SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{2EDFFF}¿Qué quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 1 Bonus: Arma)\n{FF0606}Drogas  	{FFFFFF}(Nivel 1 Bonus: 1gr de cada Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 1 Bonus: 15 materiales)", "Ok", "Cancelar");
					}
					else if(level >= 51 && level <= 100)
					{
		    			SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{2EDFFF}¿Qué quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 2 Bonus: Arma)\n{FF0606}Drogas 			{FFFFFF}(Nivel 2 Bonus: 2gr de Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 2 Bonus: 25 materiales)", "Ok", "Cancelar");
					}
					else if(level >= 101 && level <= 200)
					{
		    			SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{2EDFFF}¿Qué quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 3 Bonus: Arma)\n{FF0606}Drogas 			{FFFFFF}(Nivel 3 Bonus: 3gr de cada Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 3 Bonus: 35 materiales)", "Ok", "Cancelar");
					}
					else if(level >= 201 && level <= 400)
					{
            			SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{2EDFFF}¿Qué quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 4 Bonus: Arma)\n{FF0606}Drogas 			{FFFFFF}(Nivel 4 Bonus: 4gr de cada Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 4 Bonus: 50 materiales)", "Ok", "Cancelar");
					}
					else if(level >= 401)
					{
 		 				SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{2EDFFF}¿Qué quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 5 Bonus: Arma)\n{FF0606}Drogas 			{FFFFFF}(Nivel 5 Bonus: 5gr de cada Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 5 Bonus: 100 materiales)", "Ok", "Cancelar");
					}
				}
			}
			else
			{
		    	DeletePVar(playerid, "IsFrozen");
				TogglePlayerControllable(playerid, 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Cancelaste la carga del camión, usa /llenarcamion para intentarlo de nuevo.");
			}
		}
		case DIALOG_LOADTRUCKL: // TRUCKER JOB LEGAL GOODS
		{
 			if(response)
			{
				if(listitem == 0) // Food & beverages
				{
					new route = Random(1, 4);
    				if(route == 1)
					{
    					SetPVarInt(playerid, "TruckDeliver", 1);
    				}
    				if(route == 2)
					{
    					SetPVarInt(playerid, "TruckDeliver", 2);
    				}
    				if(route == 3)
					{
    					SetPVarInt(playerid, "TruckDeliver", 3);
    				}
    				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con comida y bebidas.");
				}
				if(listitem == 1) // Clothing
				{
					new route = Random(1, 4);
    				if(route == 1)
					{
    					SetPVarInt(playerid, "TruckDeliver", 4);
    				}
    				if(route == 2)
					{
    					SetPVarInt(playerid, "TruckDeliver", 5);
    				}
    				if(route == 3)
					{
    					SetPVarInt(playerid, "TruckDeliver", 6);
    				}
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con ropa y calzado.");
				}
				if(listitem == 2) // Materials
				{
					SetPVarInt(playerid, "TruckDeliver", 7);
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con materiales.");
				}
				if(listitem == 3) // 24 Horas Items
				{
					new route = Random(1, 4);
    				if(route == 1)
					{
    					SetPVarInt(playerid, "TruckDeliver", 8);
    				}
    				if(route == 2)
					{
    					SetPVarInt(playerid, "TruckDeliver", 9);
    				}
    				if(route == 3)
					{
    					SetPVarInt(playerid, "TruckDeliver", 10);
    				}
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con artículos del 24 Horas.");
				}
  				LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadTruckBar[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
				SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
			}
			else
			{
		    	DeletePVar(playerid, "IsFrozen");
				TogglePlayerControllable(playerid, 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has cancelado la carga de los camiones, usa /llenarcamion para intentarlo de nuevo.");
			}
		}
		case DIALOG_LOADTRUCKI: // TRUCKER JOB ILLEGAL GOODS
		{
 			if(response)
			{
		    	new level = Info[playerid][pTruckSkill];
				if(listitem == 0) // Weapons
				{
					if(level >= 0 && level <= 50)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 11); // Bonus: 9mm
					}
					else if(level >= 51 && level <= 100)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 12); // Bonus: MP5
					}
					else if(level >= 101 && level <= 200)
					{
                		SetPVarInt(playerid, "TruckDeliver", 13); // Bonus: Deagle
					}
					else if(level >= 201 && level <= 400)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 14); // Bonus: AK-47
					}
					else if(level >= 401)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 15); // Bonus: Ak-47 or M4
					}
    				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con armas.");
				}
				if(listitem == 1) // Drugs
				{
					if(level >= 0 && level <= 50)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 16); // Bonus: 10 pot, 5 crack
					}
					else if(level >= 51 && level <= 100)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 17); // Bonus: 20 pot, 10 crack
					}
					else if(level >= 101 && level <= 200)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 18); // Bonus: 30 pot, 15 crack
					}
					else if(level >= 201 && level <= 400)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 19); // Bonus: 40 pot, 20 crack
					}
					else if(level >= 401)
					{
                   		SetPVarInt(playerid, "TruckDeliver", 20); // Bonus: 50 pot, 25 crack
					}
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con drogas.");
				}
				if(listitem == 2) // Illegal materials
				{
					if(level >= 0 && level <= 50)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 21); // Bonus: 100 materials
					}
					else if(level >= 51 && level <= 100)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 22); // Bonus: 300 materials
					}
					else if(level >= 101 && level <= 200)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 23); // Bonus: 750 materials
					}
					else if(level >= 201 && level <= 400)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 24); // Bonus: 1500 materials
					}
					else if(level >= 401)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 25); // Bonus: 2500 materials
					}
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espera un momento mientras el camión está siendo cargado con mercancía ilegal.");
				}
  				LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadTruckBar[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
				SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
			}
			else
			{
		    	DeletePVar(playerid, "IsFrozen");
				TogglePlayerControllable(playerid, 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has cancelado la carga de los camiones, usa /llenarcamion para intentarlo de nuevo.");
			}
		}
		case DIALOG_HITMAN:
		{
 	    	if(response == 1)
 	    	{
 	        	switch(listitem)
 	        	{
 	            	case 0:
 	            	{
                        if(GetPlayerCash(playerid) < 1500)
						{
		    				return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero suficiente!");
						}
 	                	GivePlayerValidWeapon(playerid, 4);
 	                	GivePlayerValidWeapon(playerid, 23);
 	                	GivePlayerCash(playerid, -1500);
 	            	}
  	            	case 1:
 	            	{
                        if(GetPlayerCash(playerid) < 250)
						{
		    				return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero suficiente!");
						}
               	    	GivePlayerValidWeapon(playerid, 34);
               	    	GivePlayerCash(playerid, -250);
 	            	}
  	            	case 2:
  	            	{
                    	SafeDialogEx(playerid, DIALOG_HIT, DIALOG_STYLE_INPUT, "{00F70C}Disfraz", "{78F700}Escribe el ID del que desees\n{FFFFFF}Skin's libres para Hitman's.\nTIP <1 - 299>\n", "Ok", "Salir");
  	            	}
				}
			}
		}
	    case DIALOG_HIT:
 	  	{
 	    	if(response == 1)
 	    	{
 	        	if(strval(inputtext) < 1 || strval(inputtext) > 299) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes de escoger una id de skin entre 1 y 299.");
				Info[playerid][pChar] = strval(inputtext);
                SetPlayerSkin(playerid, Info[playerid][pChar]);
		    	return 1;
	    	}
		}
		case CPASS:
		{
		    if( strlen( inputtext ) > 12 )
		    {
		        SendClientMessageEx( playerid, COLOR_ROJO, "!{FFFFFF} No puedes cambiar una password a más de 12 carácteres." );
		    }
		    else
		    {
		        if( strlen( inputtext ) >= 1 )
		        {
		            if(!response) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No has cambiado tu contraseña." ); }
		            else
		            {
			            new String[ 84 ];
	    				new INI:File = INI_Open(UserPath(playerid));
	    				INI_SetTag(File,"data");
     					INI_WriteInt(File,"Password",udb_hash(inputtext));
						INI_Close(File);
						format( String, sizeof( String ), "%s (IP: %s) a cambiado su contraseña.", GetPlayerNameEx(playerid), Info[playerid][pIP]);
						Log("logs/- Contraseñas Cambiadas (Usuarios).log", String);
			            format( String, sizeof( String ), "Contraseña cambiada a: %s", inputtext );
			            SendClientMessageEx( playerid, COLOR_GREY, String );
		            }
		        }
		        else SendClientMessageEx( playerid, COLOR_WHITE, "No has cambiado tu contraseña." );
			}
		}
	case MENU_CASA:
	{
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
					SafeDialogEx(playerid, MENU_CASA2, DIALOG_STYLE_LIST, "Dinero de la casa", "* Retirar dinero\n* Guardar dinero", "Aceptar", "Cancelar");
				}
				case 1:
				{
					SafeDialogEx(playerid, MENU_CASA3, DIALOG_STYLE_LIST, "Editar muebles", "* Acomodar muebles\n* Colocar un nuevo mueble\n* Eliminar mueble\n* Esconder mueble", "Aceptar", "Cancelar");
				}

			}
		}
		else
		{

		}
	}
	case MENU_CASA3:
	{
	    new stringf[350];
    	new house = Info[playerid][pPhousekey];
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
				if(house != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[house][hInteriorX], HouseInfo[house][hInteriorY], HouseInfo[house][hInteriorZ]))
		 			{
						format(stringf, sizeof(stringf), "* Mueble 1 [MUEBLE ID: %d]\n* Mueble 2 [MUEBLE ID: %d]\n* Mueble 3 [MUEBLE ID: %d]\n* Mueble 4 [MUEBLE ID: %d]\n* Mueble 5 [MUEBLE ID: %d]\
						\n* Mueble 6 [MUEBLE ID: %d]\n* Mueble 7 [MUEBLE ID: %d]\n* Mueble 8 [MUEBLE ID: %d]\n* Mueble 9 [MUEBLE ID: %d]\n* Mueble 10 [MUEBLE ID: %d]\
						", HouseInfo[house][hMuebles][0],HouseInfo[house][hMuebles][1],HouseInfo[house][hMuebles][2],HouseInfo[house][hMuebles][3],HouseInfo[house][hMuebles][4],
						HouseInfo[house][hMuebles][5], HouseInfo[house][hMuebles][6], HouseInfo[house][hMuebles][7], HouseInfo[house][hMuebles][8], HouseInfo[house][hMuebles][9], HouseInfo[house][hMuebles][10]);
						SafeDialogEx(playerid, COLOCAR_M2, DIALOG_STYLE_LIST, "{85AB6B}Guardar mueble", stringf, "Confirmar", "Salir");
					}
				}
				case 1:
				{
				    new mueble0 = Info[playerid][pMuebles][0], mueble1 = Info[playerid][pMuebles][1], mueble2 = Info[playerid][pMuebles][2], mueble3 = Info[playerid][pMuebles][3];
				    new mueble4 = Info[playerid][pMuebles][4], mueble5 = Info[playerid][pMuebles][5], mueble6 = Info[playerid][pMuebles][6], mueble7 = Info[playerid][pMuebles][7];
				    new mueble8 = Info[playerid][pMuebles][8], mueble9 = Info[playerid][pMuebles][9], mueble10 = Info[playerid][pMuebles][10];
					format(stringf, sizeof(stringf), "* Mueble 1 [MUEBLE ID: %d]\n* Mueble 2 [MUEBLE ID: %d]\n* Mueble 3 [MUEBLE ID: %d]\n* Mueble 4 [MUEBLE ID: %d]\
					\n* Mueble 5 [MUEBLE ID: %d]\n* Mueble 6 [MUEBLE ID: %d]\n* Mueble 7 [MUEBLE ID: %d]\
					\n* Mueble 8 [MUEBLE ID: %d]\n* Mueble 9 [MUEBLE ID: %d]\n* Mueble 10 [MUEBLE ID: %d]", mueble0, mueble1, mueble2, mueble3, mueble4, mueble5, mueble6, mueble7, mueble8, mueble9, mueble10);
					SafeDialogEx(playerid, COLOCAR_M, DIALOG_STYLE_LIST, "{85AB6B}Colocar mueble", stringf, "Confirmar", "Salir");
				}
				case 2:
				{
                	if(house != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[house][hInteriorX], HouseInfo[house][hInteriorY], HouseInfo[house][hInteriorZ]))
		 			{
						format(stringf, sizeof(stringf), "* Mueble 1 [MUEBLE ID: %d]\n* Mueble 2 [MUEBLE ID: %d]\n* Mueble 3 [MUEBLE ID: %d]\n* Mueble 4 [MUEBLE ID: %d]\n* Mueble 5 [MUEBLE ID: %d]\
						\n* Mueble 6 [MUEBLE ID: %d]\n* Mueble 7 [MUEBLE ID: %d]\n* Mueble 8 [MUEBLE ID: %d]\n* Mueble 9 [MUEBLE ID: %d]\n* Mueble 10 [MUEBLE ID: %d]\
						", HouseInfo[house][hMuebles][0],HouseInfo[house][hMuebles][1],HouseInfo[house][hMuebles][2],HouseInfo[house][hMuebles][3],HouseInfo[house][hMuebles][4],
						HouseInfo[house][hMuebles][5], HouseInfo[house][hMuebles][6], HouseInfo[house][hMuebles][7], HouseInfo[house][hMuebles][8], HouseInfo[house][hMuebles][9], HouseInfo[house][hMuebles][10]);
						SafeDialogEx(playerid, COLOCAR_M3, DIALOG_STYLE_LIST, "{85AB6B}Guardar mueble", stringf, "Confirmar", "Salir");
					}
				}
				case 3:
				{
					if(house != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[house][hInteriorX], HouseInfo[house][hInteriorY], HouseInfo[house][hInteriorZ]))
		 			{
						format(stringf, sizeof(stringf), "* Mueble 1 [MUEBLE ID: %d]\n* Mueble 2 [MUEBLE ID: %d]\n* Mueble 3 [MUEBLE ID: %d]\n* Mueble 4 [MUEBLE ID: %d]\n* Mueble 5 [MUEBLE ID: %d]\
						\n* Mueble 6 [MUEBLE ID: %d]\n* Mueble 7 [MUEBLE ID: %d]\n* Mueble 8 [MUEBLE ID: %d]\n* Mueble 9 [MUEBLE ID: %d]\n* Mueble 10 [MUEBLE ID: %d]\
						", HouseInfo[house][hMuebles][0],HouseInfo[house][hMuebles][1],HouseInfo[house][hMuebles][2],HouseInfo[house][hMuebles][3],HouseInfo[house][hMuebles][4],
						HouseInfo[house][hMuebles][5], HouseInfo[house][hMuebles][6], HouseInfo[house][hMuebles][7], HouseInfo[house][hMuebles][8], HouseInfo[house][hMuebles][9], HouseInfo[house][hMuebles][10]);
						SafeDialogEx(playerid, COLOCAR_M1, DIALOG_STYLE_LIST, "{85AB6B}Guardar mueble", stringf, "Confirmar", "Salir");
					}

				}

			}
		}
		else
		{

		}
	}
	case MENU_CASA2:
	{
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
					SafeDialogEx(playerid, MENU_CASA6, DIALOG_STYLE_INPUT, "Retirar", "Escribe la cantidad a retirar", "Aceptar", "Cancelar");
				}
				case 1:
				{
					SafeDialogEx(playerid, MENU_CASA7, DIALOG_STYLE_INPUT, "Guardar", "Escribe la cantidad a guardar", "Aceptar", "Cancelar");
				}
			}
		}
		else
		{

		}
	}
	case MENU_CASA7:
	{
		if(response)
		{
			new Dinero_asd = strval(inputtext);
  			if(IsNumeric(inputtext))
    		{
				if(Dinero_asd > GetPlayerMoney(playerid) || Dinero_asd < 1) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes todo ese dinero para depositarlo.");
				GivePlayerCash(playerid,-Dinero_asd);
				HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] += Dinero_asd;
				format(string, sizeof(string), " Has depositado $%d en la caja fuerte de la casa ahora hay: $%d ", Dinero_asd, HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]);
	 			SendClientMessageEx(playerid, COLOR_GREY, string);
				return 1;
			}
			else
			{
				SafeDialogEx(playerid, MENU_CASA7, DIALOG_STYLE_INPUT, "Guardar", "Escribe la cantidad a guardar", "Aceptar", "Cancelar");
				SendClientMessageEx(playerid, COLOR_GREY, "Sólo se pueden escribir números.");
			}
		}
		return 1;
	}
	case MENU_CASA6:
	{
		if(response)
		{
			new Dinero_asd = strval(inputtext);
  			if(IsNumeric(inputtext))
    		{
				if(Dinero_asd > HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] || Dinero_asd < 1)return SendClientMessage(playerid, COLOR_GREY, "El local no configura con esta cantidad.");
				GivePlayerCash(playerid,Dinero_asd); // +
				HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] -= Dinero_asd;
				format(string, sizeof(string), "Has sacado %d$ de tu casa.",strval(inputtext));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SafeDialogEx(playerid, MENU_CASA6, DIALOG_STYLE_INPUT, "Retirar", "Escribe la cantidad a retirar", "Aceptar", "Cancelar");
				SendClientMessageEx(playerid, COLOR_GREY, "Sólo se pueden escribir números.");
			}
		}
		return 1;
	}
	case COLOCAR_M:
	{
	    new Float:X,Float:Y,Float:Z, Float:fAngle;

	    if(response == 1)
	    {
	        if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
			{
	    	GetPlayerPos(playerid, X,Y,Z);
			GetPlayerFacingAngle(playerid, fAngle);

        	switch(listitem)
			{
				case 0:
				{
	 		 			if(Info[playerid][pMuebles][0] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][0];
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 1;

						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][0], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 1:
				{
	 		 			if(Info[playerid][pMuebles][1] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][1];
				        ObjetoUsar[playerid] = 1;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][1], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 2:
				{

	 		 			if(Info[playerid][pMuebles][2] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][2];
				        ObjetoUsar[playerid] = 2;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][2], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 3:
				{
	 		 			if(Info[playerid][pMuebles][3] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][3];
				        ObjetoUsar[playerid] = 3;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][3], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 4:
				{
	 		 			if(Info[playerid][pMuebles][4] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][4];
				        ObjetoUsar[playerid] = 4;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][4], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 5:
				{
	 		 			if(Info[playerid][pMuebles][5] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][5];
				        ObjetoUsar[playerid] = 5;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][5], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 6:
				{
	 		 			if(Info[playerid][pMuebles][6] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][6];
				        ObjetoUsar[playerid] = 6;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][6], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				case 7:
				{
	 		 			if(Info[playerid][pMuebles][7] != -1)
				        {
				        	IDObjetoUsar[playerid] = Info[playerid][pMuebles][7];
				        	ObjetoUsar[playerid] = 7;
				        	ObjetoUsarEnCasa[playerid] = 1;
							GetPlayerPos(playerid, X,Y,Z);
							GetPlayerFacingAngle(playerid, fAngle);
							Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][7], X,Y,Z, 0,0,fAngle,100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				case 8:
				{
	 		 			if(Info[playerid][pMuebles][8] != -1)
				        {
				        	IDObjetoUsar[playerid] = Info[playerid][pMuebles][8];
				        	ObjetoUsar[playerid] = 8;
				        	ObjetoUsarEnCasa[playerid] = 1;
							GetPlayerPos(playerid, X,Y,Z);
							GetPlayerFacingAngle(playerid, fAngle);
							Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][8], X,Y,Z, 0,0,fAngle,100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				case 9:
				{
	 		 			if(Info[playerid][pMuebles][9] != -1)
				        {
				        	IDObjetoUsar[playerid] = Info[playerid][pMuebles][9];
				        	ObjetoUsar[playerid] = 9;
				        	ObjetoUsarEnCasa[playerid] = 1;
							GetPlayerPos(playerid, X,Y,Z);
							GetPlayerFacingAngle(playerid, fAngle);
							Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][9], X,Y,Z, 0,0,fAngle,100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				case 10:
				{
	 		 			if(Info[playerid][pMuebles][10] != -1)
				        {
				        	IDObjetoUsar[playerid] = Info[playerid][pMuebles][10];
				        	ObjetoUsar[playerid] = 10;
				        	ObjetoUsarEnCasa[playerid] = 1;
							GetPlayerPos(playerid, X,Y,Z);
							GetPlayerFacingAngle(playerid, fAngle);
							Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][10], X,Y,Z, 0,0,fAngle,100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				}
            }
		}
		else
		{

		}
	}
	case COLOCAR_M1:
	{
       	new house = Info[playerid][pPhousekey];

	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][0] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 0);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 1:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][1] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 1);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 2:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][2] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 2);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 3:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][3] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 3);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 4:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][4] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 4);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 5:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][5] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 5);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 6:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][6] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 6);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			 	case 7:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][7] > 0)
	    				{
	    					GuardarmuebleUser(playerid, house, 7);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 8:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][8] > 0)
	    				{
	    					GuardarmuebleUser(playerid, house, 8);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			 	case 9:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][9] > 0)
	    				{
	    					GuardarmuebleUser(playerid, house, 9);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			 	case 10:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][10] > 0)
	    				{
	    					GuardarmuebleUser(playerid, house, 10);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			}
		}
		else
		{

		}
	}
	case COLOCAR_M2:
	{
//	    new Float:fAngle;
       	new house = Info[playerid][pPhousekey];
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][0] > 0)
	    				{
				        	IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][0];
				        	DestroyDynamicObject(HouseInfo[house][hMuebleId][0]);
				        	ObjetoUsar[playerid] = 0;
				        	ObjetoUsarEnCasa[playerid] = 1;
                        	HouseInfo[house][hMuebles][0] = -1;
							Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][0],HouseInfo[house][hMueblesPOSY][0],HouseInfo[house][hMueblesPOSZ][0], HouseInfo[house][hMueblesPOSRx][0],HouseInfo[house][hMueblesPOSRy][0],HouseInfo[house][hMueblesPOSRz][0],100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							SendClientMessageEx(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
							SendClientMessageEx(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
							SendClientMessageEx(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					}
				   		else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			}
					else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 1:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][1] > 0)
	    				{


				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][1];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][1]);
				        ObjetoUsar[playerid] = 1;
				        ObjetoUsarEnCasa[playerid] = 1;
                        HouseInfo[house][hMuebles][1] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][1],HouseInfo[house][hMueblesPOSY][1],HouseInfo[house][hMueblesPOSZ][1], HouseInfo[house][hMueblesPOSRx][1],HouseInfo[house][hMueblesPOSRy][1],HouseInfo[house][hMueblesPOSRz][1],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 2:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][2] > 0)
	    				{


				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][2];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][2]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 2;
                        HouseInfo[house][hMuebles][2] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][2],HouseInfo[house][hMueblesPOSY][2],HouseInfo[house][hMueblesPOSZ][2], HouseInfo[house][hMueblesPOSRx][2],HouseInfo[house][hMueblesPOSRy][2],HouseInfo[house][hMueblesPOSRz][2],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 3:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][3] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][3];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][3]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 3;
                        HouseInfo[house][hMuebles][3] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][3],HouseInfo[house][hMueblesPOSY][3],HouseInfo[house][hMueblesPOSZ][3], HouseInfo[house][hMueblesPOSRx][3],HouseInfo[house][hMueblesPOSRy][3],HouseInfo[house][hMueblesPOSRz][3],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 4:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][4] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][4];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][4]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 4;
                        HouseInfo[house][hMuebles][4] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][4],HouseInfo[house][hMueblesPOSY][4],HouseInfo[house][hMueblesPOSZ][4], HouseInfo[house][hMueblesPOSRx][4],HouseInfo[house][hMueblesPOSRy][4],HouseInfo[house][hMueblesPOSRz][4],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 5:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][5] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][5];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][5]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 5;
                        HouseInfo[house][hMuebles][5] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][5],HouseInfo[house][hMueblesPOSY][5],HouseInfo[house][hMueblesPOSZ][5], HouseInfo[house][hMueblesPOSRx][5],HouseInfo[house][hMueblesPOSRy][5],HouseInfo[house][hMueblesPOSRz][5],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 6:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][6] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][6];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][6]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 6;
                        HouseInfo[house][hMuebles][6] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][6],HouseInfo[house][hMueblesPOSY][6],HouseInfo[house][hMueblesPOSZ][6], HouseInfo[house][hMueblesPOSRx][6],HouseInfo[house][hMueblesPOSRy][6],HouseInfo[house][hMueblesPOSRz][6],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			 	case 7:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][7] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][7];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][7]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 7;
                        HouseInfo[house][hMuebles][7] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][7],HouseInfo[house][hMueblesPOSY][7],HouseInfo[house][hMueblesPOSZ][7], HouseInfo[house][hMueblesPOSRx][7],HouseInfo[house][hMueblesPOSRy][7],HouseInfo[house][hMueblesPOSRz][7],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 8:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][8] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][8];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][8]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 8;
                        HouseInfo[house][hMuebles][8] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][8],HouseInfo[house][hMueblesPOSY][8],HouseInfo[house][hMueblesPOSZ][8], HouseInfo[house][hMueblesPOSRx][8],HouseInfo[house][hMueblesPOSRy][8],HouseInfo[house][hMueblesPOSRz][8],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 9:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][9] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][9];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][9]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 9;
                        HouseInfo[house][hMuebles][9] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][9],HouseInfo[house][hMueblesPOSY][9],HouseInfo[house][hMueblesPOSZ][9], HouseInfo[house][hMueblesPOSRx][9],HouseInfo[house][hMueblesPOSRy][9],HouseInfo[house][hMueblesPOSRz][9],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 10:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][10] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][10];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][10]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 10;
                        HouseInfo[house][hMuebles][10] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][10],HouseInfo[house][hMueblesPOSY][10],HouseInfo[house][hMueblesPOSZ][10], HouseInfo[house][hMueblesPOSRx][10],HouseInfo[house][hMueblesPOSRy][10],HouseInfo[house][hMueblesPOSRz][10],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			}
		}
		else
		{

		}
	}

	case COLOCAR_M3:
	{
       	new house = Info[playerid][pPhousekey];
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
	                if(Info[playerid][pPhousekey] != -1  || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][0] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][0]);
				        HouseInfo[house][hMuebles][0] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 1:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][1] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][1]);
				        HouseInfo[house][hMuebles][1] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 2:
				{
	                if(Info[playerid][pPhousekey] != -1  || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][2] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][2]);
				        HouseInfo[house][hMuebles][2] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 3:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][3] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][3]);
				        HouseInfo[house][hMuebles][3] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 4:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][4] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][4]);
				        HouseInfo[house][hMuebles][4] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 5:
				{
	                if(Info[playerid][pPhousekey] != -1  || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][5] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][5]);
				        HouseInfo[house][hMuebles][5] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 6:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][6] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][6]);
				        HouseInfo[house][hMuebles][6] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 7:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1  && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][7] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][7]);
				        HouseInfo[house][hMuebles][7] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 8:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1  && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][8] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][8]);
				        HouseInfo[house][hMuebles][8] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 9:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][9] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][9]);
				        HouseInfo[house][hMuebles][9] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 10:
				{
	                if(Info[playerid][pPhousekey] != -1  || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][10] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][10]);
				        HouseInfo[house][hMuebles][10] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			}
		}
		else
		{

		}
	}
		//***********************************AYUDA POR DIALOG*********************************
		/*case MENUAYUDA:
		{
	 		if(response)
			{
			    switch(listitem)
			    {
			        case 0:
					{
						ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00CCCCAyuda - Geeneral", "{2EDFFF}[PJ]\n{FFFFFF}/cuenta /subirnivel /cambiarclave /tiendacash /tirar /mostrar /ayudatrabajo /limpiarmapa so\n{2EDFFF}[CMD'S]\n{FFFFFF}/pagar /subsidio /id /cfumar /cropa /comprarlicencia /animaciones /ven /google\n/ap /cp /garaje /cpgarage /togduda /buscartrabajo /tognews /togfam /togphone /darcheque\n/eject /fumarcocaina /fumarmarihuana /llenar /moneda /dar /contrato  /duda /re", "Cerrar", "");
					}
                    case 1:
		{
		if(IsAPolice(playerid))
		    {
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{2EDFFF}n Andreas Police Departament", "/radio /r /d /m /sau /esposar /desesposar /ta(off) /ap /radargun /limpiarcamion /vmaletero /ram \n/quitar /multar /detener /bk /bkc /rllamada /derechos /bar(2)(3) /qb /placa /embargar /tgunmaletero /(q)(p)spikes \n/limpiar /sospechosos /PFAdiv /verllaves /registroveh /dejarmulta /lapd /arrestar /destruirplanta /deposito /cono /bengala", "Cerrar", "");

		    }
		    else if(Team_CBP(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{2EDFFF}Prefectura", "{FFFF00}Coomandos disponibles para la faccion Prefectura:\n{2EDFFF}/equipo /robar /miembros /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_Broadway(playerid))
			{
   				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{2EDFFF}N/S Broadway XIV", "{FFFF00}Comandos disponibles para la faccion N/S Broadway XIV:\n{{2EDFFF}/equipo /robar /miembros /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Yakuza(playerid))
			{
				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Yakuza", "{FFFF00}Comandos disponibles para la faccion Yakuza:\n{{2EDFFF}/equipo /robar /miembros /f /garaje /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Santana(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Santana", "{FFFF00}Comandos disponibles para la faccion Santana:\n{FFFFFF}/equipo /robar /miembros /f /garaje /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_BomberosBA(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Bomberos LS", "{FFFF00}Comandos disponibles para la faccion Bomberos:\n{FFFFFF} /d /m /r(adio) /equipo /gob /qfuego /buscarfuego /placa\n\n{FFFF00}Informacion:\n{FFFFFF}*Estar siempre duty y con el skin de facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Alqaeda(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Alqaaeda", "{FFFF00}Comandos disponibles para la faccion Alqaeda:\n{FFFFFF}/equipo /miembros /f /garaje\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Rusa(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Rusa", "{FFFF00}Comandos disponibles para la faccion Rusos:\n{FFFFFF}/equipo /robar /miembros /f /garaje /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_BMC(playerid))
			{
		       	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Boulevard Mafia Crips", "{FFFF00}Comandos disponibles para la Boulevard Mafia Crips:\n{FFFFFF}/equipo /robar /miembros /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n{FFFFFF}*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_Longos(playerid))
			{
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Varrio Longos 13", "{FFFF00}Comandos disponibles para la faccion Varrio Longos 13:\n{FFFFFF}/equipo /robar /miembros /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n{FFFFFF}*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_LCN(playerid))
			{
				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Italiana LCN", "{FFFF00}Comandos disponibles para la faccion LCN:\n{FFFFFF}/equipo /robar /miembros /f /garaje /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
		    else if(Team_LAMD(playerid))
			{
       			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}LAMD", "{FFFF00}Comandos disponibles para la faccion LAMD:\n{FFFFFF}/equipo /gob /sacarsangre /pcinfo /garaje  /placa (/r)adio (/d)epartaments\n/subirpt /dejarpt /curar /irpt", "Cerrar", ""); //añadir /certificar
			}
			else if(Team_Mecanicos(playerid))
			{
          		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mecánicos", "{FFFF00}Comandos disponibles para la faccion Mecánicos:\n{FFFFFF}/miembros /menu  /nitro /hyd \n/venderspray /remolcar /reparar /recargar /f\n/garaje /equipo", "Cerrar", "");
			}
			else if(Hitman(playerid))
			{
			    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Agencia Hitman", "{FFFF00}Comandos disponibles para la faccion Hitman:\n{FFFFFF}/miembros /buscar /acontrato /amascara\n/darhit /hrangos /borrarhit /equipo /hits", "Cerrar", "");
			}
			else if(Team_USMC(playerid))
			{
			    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}USMC", "{FFFF00}Comandos disponibles para la faccion USMC:\n{FFFFFF}/misil /usmc (/r)adio /d /m (/ta)zer /tgunmaletero  /usmcdiv /sau /derechos /deposito\n/revisar /bar /placa /qb /esposar /gob /limpiarcamion /vmaletero /(q)(p)spikes /detener /prision\nDiv Médicos: /dejarpt - /subirpt", "Cerrar", "");
			}
			else if(Team_LSTV(playerid))
			{
			    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}LSTV", "{FFFF00}Comandos disponibles para la faccion LSSTV:\n{FFFFFF}/miembros /nr (Noticias) - /entrevista /f /garaje\n /equipo /activarlinea /panum", "Cerrar", "");
			}
			else if(Gobierno(playerid))
			{
			  	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Gobierno", "{FFFF00}Comandos disponibles para la faccion Gobierno:\n{FFFFFF}/miembros /equipo /gob /impuesto\n/dejarfondos /gobdiv /garaje /d /(r)adio", "Cerrar", "");
			}
			else if(Team_Judicial(playerid))
			{
       			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Sistema Judicial", "{FFFF00}Comandos disponibles para la faccion Judicial:\n{FFFFFF}/miembros (/r)adio /d /orden /qorden\n/multajudicial /scarcel /sprision /buscados /juicio\n/librarcargos /recompensar /verjuicios /revertir /presentar /arrestojudicial", "Cerrar", "");
			}
			else if(Team_AININT(playerid))
			{
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}AININT", "{FFFF00}Comandos disponibles para la faccion AININT:\n{FFFFFF}/miembros (/r)adio /d (/m)egaphone /sau /encontrarveh\n/esposar /desesposar /ta(off) /vmaletero /AININT /arrestar /revisar /placa\n/deposito /quitar /multar /detener /derechos /encontrar /gob\n/limpiar /sospechosos /AININTdiv /tgunmaletero /ram  ", "Cerrar", "");
			}
			else if(Team_CIA(playerid))
			{
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}CIA", "{FFFF00}Comandos disponibles para la faccion CIA:\n{FFFFFF}/d (/r)adio /ciadiv /sau /sospechosos /m\n/quitar /gob /derechos /deposito /verllaves /vcoche\n/dejarmulta /limpiarcamion /ta(off) /vmaletero /bar(2)(3) /bengala\n/cono /qb /(q)(p)spikes /ram /esposar /desesposar\n/arrestar /cia  /arrestar /limpiar", "Cerrar", "");
			}
		}
		case 2:
		{
 			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}", "{FFFF00}Comandos IC:\n{FFFFFF}(/g)ritar /c (/r)adio\n\n{FFFF00}Comandos OOC:\n{FFFFFF}/b (/w)hisper (/f)accion", "Cerrar", "");
		}
		case 3:
		{
            ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Lider", "{FFFF00}Facciones Legales:\n{FFFFFF}/contratar /despedir /darrango /gob\n\n{FFFF00}Facciones Ilegales\n{FFFFFF}/contratar /despedir /darrango /robarbanco", "Cerrar", "");
		}
		case 4:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}", "{FFFFFF}/llamar /sms /altavoz", "Cerrar", "");
		}
		case 5:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Casa", "{FFFFFF}/comprarcasa /rentar /desrentar /timbre /vendercasa(2)\n /ponerrenta /preciorenta /sarma /garma /cdepositar\n/cretirar /cmejorar /cajaestado /cseguro /vendermicasa(2)", "Cerrar", "");
		}
		case 6:
		{
		   ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Cooche", "{FFFFFF}/estacionar /v (nombre) /gps /qmod /seguro\n/velocimetro /gunlocker /vendermicoche /borrarcoche /llenar\n /smaletero /gmaletero /darllave /quitarllave", "Cerrar", "");
		}
		case 7:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Banco", "{FFFFFF}/depositar /sacar /transferir\n /balance /atm /tarjeta", "Cerrar", "");
		}
		case 8:
		{
		    if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres {FFFF00}VIP{FFFFFF}.");
            if(Info[playerid][pVIP] >= 1)
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Premium", "{FFFFFF}f /viplocker /venderfichasvip /togvip\n/automensaje /ayudafichas /togphone /vip\n/spawncasa /skinpremium /repararpremium", "Cerrar", "");
			}
		}
		case 9:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Matrimonio", "{FFFFFF}/testigo /proponer /divorcio", "Cerrar", "");
		}
		case 10:
		{
      		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - armas", "{FFFFFF}/tarma /rarma /tarma\n /aceptar (arma) /cancelar (arma)", "Cerrar", "");
		}
		case 11:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Negocio", "{FFFFFF}/coomprarnegocio /vendernegocio /sganancias /infonegocio\n/extorcion /qextorcion /recaudar", "Cerrar", "");
		}
		case 12:
		{
		    if (Info[playerid][pFMember] != 255)
		    {
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Familias", "{FFFFFF}/festado /familias /fdepositar /fretirar /cfdepositar\n/fropa /fsarma /fgarma\n\n{FFFF00}Comandos Lider:\n{FFFFFF}/ajustar /famrango /anombrerango /fseguro /festacionar\n/famllaves /fcomprarseguro(En 24 Horas)", "Cerrar", "");
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de una familia o banda.");
		}
		case 13:
		{
		    switch(Info[playerid][pJob])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bartender", "{FFFFFF}/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de moviles", "{FFFFFF}/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chofer del viajes", "{FFFFFF}/precioviaaje", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Piizzero ", "{FFFFFF}/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Camionero", "{FFFFFF}/vendercocaina /vendermarihuana /comprarcocaina /comprarmarihuana\n/plantar /revisarplanta /sacarplanta", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Repartidor", "{FFFFFF}/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de armas", "{FFFFFF}/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Taxista", "{FFFFFF}/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Granjero", "{FFFFFF}/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de droga", "{FFFFFF}/paquete /habilidad /tirar paquetes(d)\n/limpiarmapa", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de Chalecos", "{FFFFFF}/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Artesano", "{FFFFFF}/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Jardinero", "{FFFFFF}/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Heladero", "{FFFFFF}/hduty /venderhelado", "Cerrar", "");
		        default: SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un trabajo!");
		    }
		    switch(Info[playerid][pJob2])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bartender", "{FFFFFF}/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de moviles", "{FFFFFF}/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chofer del viajes", "{FFFFFF}/precioviaaje", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Piizzero ", "{FFFFFF}/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Camionero", "{FFFFFF}/vendercocaina /vendermarihuana /comprarcocaina /comprarmarihuana\n/plantar /revisarplanta /sacarplanta", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Repartidor", "{FFFFFF}/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de armas", "{FFFFFF}/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Taxista", "{FFFFFF}/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Granjero", "{FFFFFF}/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de droga", "{FFFFFF}/paquete /habilidad /tirar paquetes(d)\n/limpiarmapa", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de Chalecosd", "{FFFFFF}/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Artesano", "{FFFFFF}/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Jardinero", "{FFFFFF}/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Heladero", "{FFFFFF}/hduty /venderhelado", "Cerrar", "");
		    }
		}
}
}
}*/
//******************************DIALOG MERCADO NEGRO******************************

		case MENUMC:
		{
	 		if(response)
			{
			    switch(listitem)
			    {
			        case 0:
					{
					    if(CheckMoney(playerid, 50)){
							Bought(playerid, 50);
							SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Arma comprada!:{9C8D70} Puño Americano");
							GivePlayerValidWeapon(playerid, 1);
							return 1;
						}
					}
					case 1:{
					    if(CheckMoney(playerid, 90)){
							Bought(playerid, 90);
							SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Equipo comprado!:{9C8D70} Mascara");
							Info[playerid][pMask] = 1;
							return 1;
						}
					}
					case 2:{
					    if(CheckMoney(playerid, 140)){
							Ganzuas[playerid] = 1;
							Bought(playerid, 140);
							SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Herramientas compradas!:{9C8D70} Ganzuas");
							return 1;
						}
					}
					case 3:{
					    if(CheckMoney(playerid, 200)){
					        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Equipo comprado!:{9C8D70} Equipo de secuestro");
							Rope[playerid] = 1;
							Bought(playerid, 200);
							return 1;
						}
					}
				}
			}
		}
		case JOBFINDMENU:
		{
	 		if(response)
			{
			    if(GetPVarInt(playerid, "Packages") != 0 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no estar en otra función usando checkpoints.");
			    SetPVarInt(playerid, "FindJob", 1);
			    if(Tren_Route[playerid] == 1 || Tren_Route[playerid] == 2 || Tren_Route[playerid] == 3 || Tren_Route[playerid] == 4 || Tren_Route[playerid] == 5 || Tren_Route[playerid] == 6) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no tener un viaje pendiente como maquinista. Para cancelar el viaje, use: /Cancelarviaje");
				if(listitem == 0)
				{
				   SetPlayerCheckpoint(playerid, 1836.8391,-1682.6100,13.3312, 2); //bartender
				   SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Bartender");
				}
				if(listitem == 1)
				{
				   SetPlayerCheckpoint(playerid, 2104.8408,-1810.0991,13.5547, 2); // Pizzero
		           SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Pizzero");
				}
				if(listitem == 2)
				{
				    SetPlayerCheckpoint(playerid, 2210.134033,-2527.976562,13.546879, 2); // camionero
				    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Repartidor");
				}
				if(listitem == 3)
				{
				    SetPlayerCheckpoint(playerid, 1314.190795,-1159.115112,23.628125, 2); // moviles
				    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Vendedor de Moviles");
				}
				if(listitem == 4)
				{
				    SetPlayerCheckpoint(playerid, 1752.7062,-1894.1708,13.5574, 2); //taxista
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Taxistas");
				}
				if(listitem == 5)
				{
				    SetPlayerCheckpoint(playerid, 2043.81250, -1247.01160,23.9810, 2); //jardinero
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Jardineros");
				}
				if(listitem == 6)
				{
				    SetPlayerCheckpoint(playerid, -572.9537,-1498.6639,11.0859, 2); //leñador
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Leñadores");
				}
				if(listitem == 7)
				{
				   SetPlayerCheckpoint(playerid, 2172.60107, -1903.82959, 13.64440, 2); //fabricante de armas
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Fabricante de Armas");
				}
				if(listitem == 8)
				{
				    SetPlayerCheckpoint(playerid, 2354.81323, -83.08443, 26.70512, 2); //vendedor drogas
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Camioneros");
				}
				if(listitem == 9)
				{
    				SetPlayerCheckpoint(playerid, 2355.1594,-1169.2037,28.0057, 2); //traficante drogas
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Traficantes de Drogas");
				}
				if(listitem == 10)
				{
    				SetPlayerCheckpoint(playerid, 1764.77759,-2040.65979,13.43401, 2); //Chofer de Autobuses
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Chofer de Autobuses");
				}
				if(listitem == 11)
				{
    				SetPlayerCheckpoint(playerid, -382.2627,-1426.3954,26.1396, 2); //granjero
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Granjeros");
				}
				if(listitem == 12)
				{
    				SetPlayerCheckpoint(playerid, 1423.9009,-1355.9692,13.2810, 2); //vendedor de chalecos
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Vendedor de Chalecos");
				}
				if(listitem == 13)
				{
    				SetPlayerCheckpoint(playerid, 659.3577,-634.6320,16.3359, 2); //artesano
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Artesanos");
				}
				if(listitem == 14)
				{
    				SetPlayerCheckpoint(playerid, 2420.0740, -1509.0592, 24.0213, 2); //Heladero
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Heladeros");
				}
				if(listitem == 15)
				{
    				SetPlayerCheckpoint(playerid, 1685.059814, -1944.715698, 13.546875, 2); //Conductor de Trenes
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Conductor de Trenes");
				}
				if(listitem == 16)
				{
    				SetPlayerCheckpoint(playerid, 2195.75684, -1973.02844, 13.51525, 2); //Basureros
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Se marcó la ubicación del trabajo: {2EDFFF}Basureros");
				}
			}
		}
		case DIALOG_LICENSE_BUY:
		{
	 		if(response){
				switch (listitem){
					case 0:
					{
					if(Info[playerid][pCertificadoMD] == 1)
						{
				    	if(Info[playerid][pCarLic] == 0){
				        	if(GetPlayerCash(playerid) < 1250){
				            	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar esta licencia de conducción.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-1250);
							Tax += 2000;
							Info[playerid][pCarLic] = 1;
							SendClientMessageEx(playerid, COLOR_AT, "Licencia Otorgada:{FFFFFF} Has adquirido con éxito una licencia de conducción.");
						}
						else SendClientMessageEx(playerid, COLOR_AT, "Trámites:{FFFFFF} La base de datos indica que ya tienes licencia de conducción.");
					}
					else SendClientMessageEx(playerid, COLOR_TRAMITANTE, "Trámites:{FFFFFF} ¡Necesitas adquirir el Certificado Médico en el hospital!");
				}
					case 1:
					{
					if(Info[playerid][pCertificadoMD] == 1)
						{
				    	if(Info[playerid][pBoatLic] == 0)
							{
				        	if(GetPlayerCash(playerid) < 2490){
				            	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar esta licencia de navegación.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-2490);
							Tax += 3000;
							Info[playerid][pBoatLic] = 1;
							SendClientMessageEx(playerid, COLOR_AT, "Licencia Otorgada:{FFFFFF} Has adquirido con éxito una licencia de navegación.");
						}
						else SendClientMessageEx(playerid, COLOR_AT, "Trámites:{FFFFFF} La base de datos indica que ya tienes licencia de navegación.");
					}
					else SendClientMessageEx(playerid, COLOR_TRAMITANTE, "Trámites:{FFFFFF} ¡Necesitas adquirir el Certificado Médico en el hospital!");
				}
					case 2:
					{
					if(Info[playerid][pCertificadoMD] == 1)
						{
				    	if(Info[playerid][pFlyLic] == 0)
							{
				    	    	if(GetPlayerCash(playerid) < 4720){
				            		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar esta licencia de aviación.");
				            		return 1;
				        		}
								GivePlayerCash(playerid,-4720);
								Tax += 5000;
								Info[playerid][pFlyLic] = 1;
      							SendClientMessageEx(playerid, COLOR_AT, "Licencia Otorgada:{FFFFFF} Has adquirido con éxito una licencia de aviación.");
						}
						else SendClientMessageEx(playerid, COLOR_AT, "Trámites:{FFFFFF} La base de datos indica que ya tienes licencia de aviación.");
					}
					else SendClientMessageEx(playerid, COLOR_TRAMITANTE, "Trámites:{FFFFFF} ¡Necesitas adquirir el Certificado Médico en el hospital!");
				}
					case 3:
					{
					if(Info[playerid][pCarLic] == 1)
						{
				    	if(Info[playerid][pTaxiLicense] == 0){
				        	if(GetPlayerCash(playerid) < 900){
				            	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar esta licencia de taxista.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-900);
							Tax += 10000;
							Info[playerid][pTaxiLicense] = 1;
							SendClientMessageEx(playerid, COLOR_AT, "Licencia Otorgada:{FFFFFF} Has adquirido con éxito una licencia de taxista.");
						}
						else SendClientMessageEx(playerid, COLOR_AT, "Trámites:{FFFFFF} La base de datos indica que ya tienes licencia de taxista.");
					}
					else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} ¡Necesitas licencia de conducción para obtener la licencia de taxista!");
				}
					case 4:
					{
					if(Info[playerid][pCertificadoMD] == 1)
						{
				    	if(Info[playerid][pGunLic] == 0){
			    	    	if(GetPlayerCash(playerid) < 7480){
			    	        	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar la tenencia de armas.");
			    	        	return 1;
			    	    	}
							GivePlayerCash(playerid,-7480);
							Tax += 10000;
							Info[playerid][pGunLic] = 1;
							SendClientMessageEx(playerid, COLOR_AT, "Licencia Otorgada:{FFFFFF} Has adquirido con éxito la tenencia de armas.");
						}
						else SendClientMessageEx(playerid, COLOR_AT, "Trámites:{FFFFFF} La base de datos indica que ya tienes tenencia de armas.");
					}
					else SendClientMessageEx(playerid, COLOR_TRAMITANTE, "Trámites:{FFFFFF} ¡Necesitas adquirir el Certificado Médico en el hospital!");
				}
			}
		}
	}
     	case GASMENU:
		{
			if(response == 1)
 			{
				switch(listitem)
  				{
					case 0:
       				{
				        if(CheckMoney(playerid,200))
			        	{
			        	bgas[playerid] = 1;
			        	SendClientMessageEx(playerid, COLOR_TIENDA, "Gasolinera:{FFFFFF} Para utilizar un bidón de gasolina, debes colocar /bgas");
			        	GivePlayerCash(playerid, -200);
			        	CheckBizz(playerid, 50);
			        	UpdateBizz();
			        	}
			        	return 1;
					}
					case 1:
					{
					    if(CheckMoney(playerid,30))
			        	{
                    	new Float:Health;
					 	GetPlayerHealth(playerid, Health);
		        	    if(Health < 101)	{	SetHP(playerid, Health+20); 	}
         				format(string, sizeof(string), "* %s come unas bolsa de patatas", GetPlayerNameEx(playerid));
		            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	GivePlayerCash(playerid, -30);
		            	Info[playerid][pSuci] += 9;
		            	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
		            	CheckBizz(playerid, 15);
		            	UpdateBizz();
		            	}
		            	return 1;
		            }
		            case 2:
	            	{
	            	    if(CheckMoney(playerid,20))
			        	{
		                new Float:Health;
		                GetPlayerHealth(playerid, Health);
	    	            if(Health < 101)	{	SetHP(playerid, Health+2); 	}
	        	        format(string, sizeof(string), "* %s se bebe un refresco.", GetPlayerNameEx(playerid));
	            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	GivePlayerCash(playerid, -20);
	                	CheckBizz(playerid, 10);
	                	UpdateBizz();
		                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		                }
		                return 1;
	        	    }
		        	case 3:
			        {
			            if(CheckMoney(playerid,40))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pCigarettes] = 20;
				            SendClientMessageEx(playerid, COLOR_TIENDA, "Gasolinera:{FFFFFF} Coloque /cfumar para comenzar a fumar, para dejar de fumar, coloque /dfumar");
				            GivePlayerCash(playerid, -40);
				            CheckBizz(playerid, 20);
				            UpdateBizz();
						}
						return 1;
			        }
		        	case 4:
			        {
						if(CheckMoney(playerid,20))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pLighter] = 1;
				            SendClientMessageEx(playerid, COLOR_TIENDA, "Gasolinera:{FFFFFF} Ahora tienes un encendedor para los cigarros, coloque /cfumar");
				            GivePlayerCash(playerid, -20);
				            CheckBizz(playerid, 10);
				            UpdateBizz();
						}
						return 1;
                    }
				}
			}
		}
		case TIENDA_ELEC:
		{
			if(response == 1)
			{
				switch(listitem)
			    {
			    case 0:
			        {
			        	if(CheckMoney(playerid,1500))
			        	{
			        	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			                new randphone = 100000 + random(899999);
							Info[playerid][pPnumber] = randphone;
							format(string, sizeof(string), "Electrónica:{FFFFFF} El número %d es ahora de tu celular.",Info[playerid][pPnumber]);
				            SendClientMessageEx(playerid, COLOR_TIENDA, string);
				            Tax += 250;
				            if(Info[playerid][pVIP] == 0)
							{
							    CheckBizz(playerid, 1500);
							    UpdateBizz();
							    return Bought(playerid, 1500);
							}
							else
							{
							    Bought(playerid, 525);
							    SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 525, a ti te costó 200.");
							}
				            return 1;
						}
			        }
	         	case 1:
			        {
			            if(CheckMoney(playerid,1300))
			            {
			                if(Info[playerid][pLevel] > 5)
			                {
			                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			                    Info[playerid][pPhoneBook] = 1;
				            	SendClientMessageEx(playerid, COLOR_TIENDA, "Electrónica:{FFFFFF} Compraste un libro con cada número registrado (/Numero ID)");
	 			            	Tax += 10;
				            	if(Info[playerid][pVIP] == 0)
								{
								    	CheckBizz(playerid, 1300);
								    	UpdateBizz();
							    	return Bought(playerid, 1300);
								}
								else
								{
							    	Bought(playerid, 650);
							    	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 1300, a ti te costó la mitad.");
								}
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_TIENDA, "Electrónica:{FFFFFF} Sólo usuarios mayores a nivel 3 pueden comprar un PhoneBook");
						}
			        }
				case 2:
			        {
			            if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[ATENCION]:{FFFFFF} No puedes comprar esto las 2 primeras horas de juego");
			            if(CheckMoney(playerid,900))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            GivePlayerValidWeapon(playerid, 43);
				            SendClientMessageEx(playerid, COLOR_TIENDA, "Electrónica:{FFFFFF} Ahora tienes una cámara.");
				            Tax += 160;
				            if(Info[playerid][pVIP] == 0)
							{
							    CheckBizz(playerid, 900);
							    UpdateBizz();
							   	return Bought(playerid, 900);
							}
							else
							{
							   	Bought(playerid, 450);
							   	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 900, a ti te costó la mitad.");
							}
				            return 1;
						}
			        }
				case 3:
					{
						if(CheckMoney(playerid,1100))
						{
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pRadio] = 1;
				            SendClientMessageEx(playerid, COLOR_TIENDA, "Electrónica:{FFFFFF} Use /frecuencia para ajustar una, /togpr para apagar tu radio y /pr para hablar.)");
				            Tax += 800;
				            if(Info[playerid][pVIP] == 0)
							{
							    CheckBizz(playerid, 1100);
							    UpdateBizz();
							   	return Bought(playerid, 1100);
							}
							else
							{
							   	Bought(playerid, 550);
							   	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 1100, a ti te costó la mitad.");
							}
						}
					}
				case 4:
			        {
						if(CheckMoney(playerid,1700))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Tax += 850;
							SendClientMessageEx(playerid, COLOR_TIENDA, "Electrónica: Use /ipod para comenzar a escuchar música.");
							Info[playerid][pIpadMusic] = 1;
				            if(Info[playerid][pVIP] == 0)
							{
							    CheckBizz(playerid, 1700);
							    UpdateBizz();
							   	return Bought(playerid, 1700);
							}
							else
							{
							   	Bought(playerid, 850);
							   	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 850, a ti te costó la mitad.");
							}
				            return 1;
						}
			        }
				case 5:
			        {
						if(CheckMoney(playerid, 3000))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Tax += 750;
							SendClientMessageEx(playerid, COLOR_TIENDA, "Electrónica:{FFFFFF} Para colocar el equipo en el suelo, debes colocar /equipo");
							Info[playerid][pBoombox] = 1;
							Bought(playerid, 3000);
			   	            Till(1, 750);
							Till(7, 750);
							Till(8, 750);
				            return 1;
						}
			        }
				}
			}
		}
		case CURSO_EMERGENCIA:
		{
			if(response == 1)
			{
				switch(listitem)
			    {
			    case 0:
			        {
			        	if(CheckMoney(playerid,19550))
			        	{
			        	    SendClientMessageEx(playerid, TEAM_MED_COLOR, "Felicidades, ahora podrás utilizar /retener con cualquier persona, recuerda no abusar de este mismo.");
						    Info[playerid][pCRet] += 1;
						    Bought(playerid, 19550);
				            return 1;
						}
			        }
	         	case 1:
			        {
			            {
			                if(OrgGob(playerid))
			                {
						    	SendClientMessageEx(playerid, TEAM_MED_COLOR, "Felicidades, ahora podrás utilizar /retener con cualquier persona, recuerda no abusar de este mismo.");
						    	Info[playerid][pCRet] += 1;
				            	return 1;
							}
							else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No formas parte de alguna organización del gobierno.");
						}
			        }
				}
			}
		}
		case TALLER_R:
		{
			if(response == 1)
			{
				switch(listitem)
			    {
			    case 0:
			        {
			        	if(CheckMoney(playerid,5000))
			        	{
			        	    new reparacion[128];
        				    new Float: soPos[3];
						    PlayerPlaySoundEx(1133, soPos[0], soPos[1], soPos[2]);
        				    SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    					    RepairVehicle(GetPlayerVehicleID(playerid));
				    		format(reparacion, sizeof(reparacion), "* El mecánico comienza a reparar el vehículo de %s.", GetPlayerNameEx(playerid));
				    		ProxDetector(30.0, playerid, reparacion, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    		SendClientMessageEx(playerid, COLOR_YELLOW2, "! {FFFFFF}Espere unos minutos, al finalizar la reparación del vehículo será descongelado.");
				    		TogglePlayerControllable(playerid, 0);
				    		SetTimerEx("UnfreezePlayer", 10000, false, "d", playerid);
						    Bought(playerid, 5000);
				            return 1;
						}
			        }
	         	case 1:
			        {
			        	if(CheckMoney(playerid,2000))
			            {
			                if(OrgGob_T(playerid))
			                {
						    	new reparacion[128];
        				    	new Float: soPos[3];
						    	PlayerPlaySoundEx(1133, soPos[0], soPos[1], soPos[2]);
        				    	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    					    	RepairVehicle(GetPlayerVehicleID(playerid));
				    			format(reparacion, sizeof(reparacion), "* El mecánico comienza a reparar el vehículo de %s.", GetPlayerNameEx(playerid));
				    			ProxDetector(30.0, playerid, reparacion, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    			SendClientMessageEx(playerid, COLOR_YELLOW2, "! {FFFFFF}Espere unos minutos, al finalizar la reparación del vehículo será descongelado.");
				    			TogglePlayerControllable(playerid, 0);
				    			SetTimerEx("UnfreezePlayer", 10000, false, "d", playerid);
						    	Bought(playerid, 2000);
				            	return 1;
							}
							else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No formas parte de alguna organización del gobierno.");
						}
			        }
				}
			}
		}
		case STOREMENU:
		{
			if(response == 1)
			{
				switch(listitem)
			    {
		         	case 0:
			        {
			            if(CheckMoney(playerid,10))
			            {
				            SafeDialogEx(playerid, LOTTO_BUY, DIALOG_STYLE_INPUT, "{C3FF23}Lotería Nacional","Coloque el número, entre 1 y 100 (Recomendado)","Comprar","Cancelar");
	                    	Tax += 10;
							return 1;
						}
			        }
		            case 1:
			        {
			            if(CheckMoney(playerid,100))
						{
				    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pSpraycan] += 2;

				            Tax += 100;
				            SendClientMessageEx(playerid, COLOR_TIENDA, "24 Horas:{FFFFFF} Para pintarlo, utilice /colorcoche para pintarlo normal, y /pintarcoche para vinilos.");
				            if(Info[playerid][pVIP] == 0)
							{
							    CheckBizz(playerid, 50);
							    UpdateBizz();
							   	return Bought(playerid, 100);
							}
							else
							{
							   	Bought(playerid, 50);
							   	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 100, a ti te costó 50.");
							}
							return 1;
						}
			        }
		         	case 2:
			        {
			            if(CheckMoney(playerid,40))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pCigarettes] = 20;
				            SendClientMessageEx(playerid, COLOR_TIENDA, "24 Horas:{FFFFFF} Coloque /cfumar para comenzar a fumar, para dejar de fumar, coloque /dfumar");
				            Tax += 40;
				            if(Info[playerid][pVIP] == 0)
							{
							    CheckBizz(playerid, 20);
							    UpdateBizz();
							   	return Bought(playerid, 40);
							}
							else
							{
							   	Bought(playerid, 20);
							   	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 40, a ti te costó 20.");
							}
				            return 1;
						}
			        }
		         	case 3:
			        {
						if(CheckMoney(playerid,20))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pLighter] = 1;
				            SendClientMessageEx(playerid, COLOR_TIENDA, "24 Horas:{FFFFFF} Ahora tienes un encendedor para los cigarros, coloque /cfumar");
				            Tax += 20;
				            if(Info[playerid][pVIP] == 0)
							{
							    CheckBizz(playerid, 10);
							    UpdateBizz();
							   	return Bought(playerid, 20);
							}
							else
							{
							   	Bought(playerid, 3);
							   	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 20, a ti te costó 3.");
							}
				            return 1;
						}
			        }
					case 4:
			        {
						if(CheckMoney(playerid,7))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Tax += 7;
							SendClientMessageEx(playerid, COLOR_TIENDA, "24 Horas:{FFFFFF} Compraste un ramo de flores.");
							GivePlayerValidWeapon(playerid, 14);
				            if(Info[playerid][pVIP] == 0)
							{
							    CheckBizz(playerid, 4);
							    UpdateBizz();
							   	return Bought(playerid, 7);
							}
							else
							{
							   	Bought(playerid, 1);
							   	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 7, a ti te costó 1.");
							}
				            return 1;
						}
					}
					case 5:
			        {
						if(CheckMoney(playerid,8))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Info[playerid][pSprunk]++;
							SendClientMessageEx(playerid, COLOR_TIENDA, "24 Horas:{FFFFFF} Compraste una bebida.");
				            Tax += 8;
				            if(Info[playerid][pVIP] == 0)
							{
							   	return Bought(playerid, 8);
							}
							else
							{
							   	Bought(playerid, 4);
							   	SendClientMessageEx(playerid, COLOR_ROSADO, "• VIP:{FFFFFF} ¡Descuento por ser VIP!, El precio normal es 8, a ti te costó {00F70C}4{FFFFFF}.");
							}
						}
			        }
					case 6:
			        {
          					if(CheckMoney(playerid,500))
          					{
								SetPVarInt(playerid, "lockmenu", 1);
      							for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                			{
					    			if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					    			{
		                		    	format(string, sizeof(string), "Coche Nº %d - Modelo: %s",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                		    	SendClientMessageEx(playerid, COLOR_TIENDA, string);
							     	}
					    		}
					    		SafeDialogEx(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "{C3FF23}24 Horas - Seguros","Selecciona el vehiculo en el cual instalarás el seguro:", "Ok", "Cancelar");
							}
					}
					case 7:
					{
				   			if(CheckMoney(playerid,2000))
					        {
								SetPVarInt(playerid, "lockmenu", 2);
				    			for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                			{
					     			if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     			{
		                     			format(string, sizeof(string), "Coche Nº %d - Modelo: %s",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     			SendClientMessageEx(playerid, COLOR_TIENDA, string);
					     			}
				    			}
								SafeDialogEx(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "{C3FF23}24 Horas - Seguros","Selecciona el vehiculo en el cual instalarás el seguro:", "Ok", "Cancelar");
							}
					}
				}
			}
		}
		case TRAFICDRUGS:
		{
		    if(GetPVarInt(playerid, "ChoosingDrugs") == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás traficando drogas!");
 		    if(response)
	 	    {
				new mypoint = -1;
				for (new i=0; i<MAX_POINTS; i++)
				{
					if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
					{
						mypoint = i;
					}
				}
				if (mypoint == -1)
				{
					SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en el punto especificado!");
					return 1;
				}
				if(Info[playerid][pCrates])
				{
					SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} No se puede sostener más paquetes de drogas!");
					SetPVarInt(playerid, "ChoosingDrugs", 0);
					return 1;
				}
				if(GetPlayerCash(playerid) > 150)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $150 por un poco de paquetes de marihuana.");
					GivePlayerCash(playerid, -150);
					Info[playerid][pCrates] = 1;
					SetPVarInt(playerid, "CrateDeliver", 1);
					SetPVarInt(playerid, "ChoosingDrugs", 0);
					SetPVarInt(playerid, "tpDrugRunTimer", 45);
					SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
					SendClientMessageEx(playerid, COLOR_FADE1,"Jefe dice: Ya tienes el paquete, ahora ve a este lugar para tu paga. {BDA5D9}-Dijo mientras le pasa otro papel-");
					SetPlayerCheckpoint(playerid, 2165.8655,-1675.2634,15.0859, 2);
					for(new i = 0; i < sizeof(fINFO); i++)
					{
						if(strcmp(Points[mypoint][Owner], fINFO[i][FamilyName], true) == 0)
						{
							fINFO[i][FamilyBank] += 500;
						}
					}
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE," No tienes $100!");
					SetPVarInt(playerid, "ChoosingDrugs", 0);
   					return 1;
				}
			}
			else
			{
				new mypoint = -1;
				for (new i=0; i<MAX_POINTS; i++)
				{
					if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
					{
						mypoint = i;
					}
				}
				if (mypoint == -1)
				{
					SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en el punto especificado!");
					return 1;
				}
				if(Info[playerid][pCrates])
				{
					SendClientMessageEx(playerid, COLOR_AT, "[JOB]:{FFFFFF} No se puede sostener más paquetes de drogas!");
					SetPVarInt(playerid, "ChoosingDrugs", 0);
					return 1;
				}
				if(GetPlayerCash(playerid) > 100)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $100 por un poco de paquetes de cocaína.");
					GivePlayerCash(playerid, -100);
					Info[playerid][pCrates] = 1;
					SetPVarInt(playerid, "CrateDeliver", 2);
					SetPVarInt(playerid, "ChoosingDrugs", 0);
					SetPVarInt(playerid, "tpDrugRunTimer", 45);
					SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
					SetPlayerCheckpoint(playerid, 2348.6213,-1168.0778,27.8631, 2);
					SendClientMessageEx(playerid, COLOR_WHITE,"{FF8000}[INDICACION]:{FFFFFF} Ahora déjalo en en lugar indicado para tu paga. (Vé al checkpoint)");
					for(new i = 0; i < sizeof(fINFO); i++)
					{
						if(strcmp(Points[mypoint][Owner], fINFO[i][FamilyName], true) == 0)
						{
							fINFO[i][FamilyBank] += 500;
						}
					}
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE,"* No tienes $100!");
					SetPVarInt(playerid, "ChoosingDrugs", 0);
   					return 1;
				}
			}
		}
		case GIVEKEYS:
		{
		    if(response)
		    {
				if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID)
				{
		            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No se puede dar las llaves de un vehículo que no existe o que está embargado.");
		            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		            return 1;
				}
		        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != INVALID_PLAYER_ID)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Usted ya ha dado a alguien las llaves de este coche.");
		            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		            return 1;
		        }
		        if(Info[GiveKeysTo[playerid]][pVehicleKeysFrom] != INVALID_PLAYER_ID)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Ese jugador ya tiene las llaves de un coche distinto.");
		            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		            return 1;
		        }
				PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = GiveKeysTo[playerid];
				Info[GiveKeysTo[playerid]][pVehicleKeys] = listitem;
				Info[GiveKeysTo[playerid]][pVehicleKeysFrom] = playerid;
				format(string, sizeof(string), "{5ABAFF}%s{FFFFFF} te ha dado las llaves de su %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
				SendClientMessageEx(GiveKeysTo[playerid], COLOR_WHITE, string);
				format(string, sizeof(string), "Has dado a {5ABAFF}%s{FFFFFF} las llaves de tu %s.", GetPlayerNameEx(GiveKeysTo[playerid]), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		    }
		}
		case REMOVEKEYS:
		{
		    if(response)
		    {
		        if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
		            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No se puede quitar las llaves de un vehículo que no existe o que estánembargados.");
		            return 1;
				}
		        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId])
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Este jugador no tiene las llaves de este coche.");
		            return 1;
		        }
		        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] == INVALID_PLAYER_ID)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Usted no ha dado a nadie las llaves de este coche.");
		            return 1;
		        }
				Info[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
				Info[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
				format(string, sizeof(string), "{5ABAFF}%s{FFFFFF} ha tomado las llaves de su {5ABAFF}%s{FFFFFF}.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
				SendClientMessageEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId], COLOR_WHITE, string);
				format(string, sizeof(string), "Tomaste las llaves de tu {5ABAFF}%s{FFFFFF} de {5ABAFF}%s{FFFFFF}.", GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]),GetPlayerNameEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		    }
		}
		case TRACKCAR:
		{
		    if(response == 1)
		    {
				for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
				{
				    if(listitem == i)
				    {
				        new Float: carPos[3];
				        if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
				        {
				        	GetVehiclePos(PlayerVehicleInfo[playerid][i][pvId], carPos[0], carPos[1], carPos[2]);
				        	if(GetPVarInt(playerid, "Packages") == 0 || TaxiAccepted[playerid] == 999 || EMSAccepted[playerid] == 999 || MedicAccepted[playerid] == 999 || MechanicCallTime[playerid] == 0)
							{
						    	SetPVarInt(playerid, "TrackCar", 1);
					    		new zone[MAX_ZONE_NAME];
				                GetPlayer3DZone(playerid, zone, sizeof(zone));
					    		format(string, sizeof(string), "Tu vehículo fue localizado en %s, por favor ve al punto marcado en tu gps.", zone);
					    		SendClientMessageEx(playerid, COLOR_WHITE, string);
					    		SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
								PlayerPlaySound(playerid, 1138, 0,0,0);
							}
							else return SendClientMessageEx(playerid, COLOR_WHITE, "Primero ve al checkpoint que se te asignó, debes de estar en una llamada o algo.");
						}
						else if(PlayerVehicleInfo[playerid][i][pvImpounded]) SendClientMessageEx(playerid, COLOR_WHITE, "No se puede rastrear un vehículo confiscado. Si desea recuperarlo, tiene que pagar la multa.");
						else SendClientMessageEx(playerid, COLOR_WHITE, "No se puede rastrear un vehículo que no existe o no está spawneado.");
				    }
				}
		    }
		}
		case SELLCAR:
		{
		    if(response == 1)
		    {
				for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
				{
				    if(listitem == i)
				    {
				        if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
				        {
				            if(PlayerVehicleInfo[playerid][i][pvPrice] < 1) PlayerVehicleInfo[playerid][i][pvPrice] = 34000;
                            for(new m = 0; m < MAX_MODS; m++)
							{
                                PlayerVehicleInfo[playerid][i][pvMods][m] = 0;
                            }
                            carsforplayer[playerid]--;
				            DestroyVehicle(PlayerVehicleInfo[playerid][i][pvId]);
                            PlayerVehicleInfo[playerid][i][pvId] = 0;
                            PlayerVehicleInfo[playerid][i][pvModelId] = 0;
                            PlayerVehicleInfo[playerid][i][pvPosX] = 0.0;
                            PlayerVehicleInfo[playerid][i][pvPosY] = 0.0;
                            PlayerVehicleInfo[playerid][i][pvPosZ] = 0.0;
                            PlayerVehicleInfo[playerid][i][pvPosAngle] = 0.0;
                            PlayerVehicleInfo[playerid][i][pvLock] = 0;
                            PlayerVehicleInfo[playerid][i][pvLocked] = 0;
                            PlayerVehicleInfo[playerid][i][pvPaintJob] = -1;
                            PlayerVehicleInfo[playerid][i][pvColor1] = 0;
							PlayerVehicleInfo[playerid][i][pvImpounded] = 0;
                            PlayerVehicleInfo[playerid][i][pvColor2] = 0;
                            strmid(PlayerVehicleInfo[playerid][i][pvAllowPlayer], "Nadie", 0, strlen("Nadie"), 255);
                            PlayerVehicleInfo[playerid][i][pvAllowedPlayerId] = INVALID_PLAYER_ID;
                            PlayerVehicleInfo[playerid][i][pvPark] = 0;
                            PlayerVehicleInfo[playerid][i][pvHealth] = 1000.0;
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
                            format(string, sizeof(string), "{2EDFFF}Destructora: {FFFFFF}Has vendido tu vehículo por {33AA33}$10.000{FFFFFF}, gracias por su venta!", PlayerVehicleInfo[playerid][i][pvPrice] / 2);
                            SendClientMessageEx(playerid, COLOR_AT, string);
                            GivePlayerCash(playerid, 10000);
							PlayerCars--;
						}
						else if(PlayerVehicleInfo[playerid][i][pvImpounded]) SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No se puede vender un vehículo confiscado, retirelo y vuelva!");
						else SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No puedes vender éste vehículo porque no existe o no esta liberado!");
				    }
				}
		    }
		}
		case GTRACKCAR:
		{
		    if(response == 1)
		    {
		        for(new i = 0; i < MAX_GANG_VEHICLES; i++)
		        {
		            if(listitem == i)
		            {
		                new Float: carPos[3];
						new Family = Info[playerid][pFMember];
						if(FVINFO[Family][i][fvId] != INVALID_VEHICLE_ID)
						{
		                	GetVehiclePos(FVINFO[Family][i][fvId], carPos[0], carPos[1], carPos[2]);
		                	if(Tren_Route[playerid] == 1 || Tren_Route[playerid] == 2 || Tren_Route[playerid] == 3 || Tren_Route[playerid] == 4 || Tren_Route[playerid] == 5 || Tren_Route[playerid] == 6) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no tener un viaje pendiente como maquinista. Para cancelar el viaje, use: /Cancelarviaje");
		                	if(GetPVarInt(playerid, "Packages") != 0 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1)
							{
								return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor asegurate de que no estás en otro tipo de función, usando un checkpoint.");
							}
							else
							{
						    	SetPVarInt(playerid, "TrackCar", 1);
					    		new zone[MAX_ZONE_NAME];
					    		format(string, sizeof(string), "El vehículo se encuentra en %s. (Vé al checkpoint)", zone);
					    		SendClientMessageEx(playerid, COLOR_YELLOW, string);
					    		SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
					    		PlayerPlaySound(playerid, 1138, 0,0,0);
							}
						}
						else SendClientMessageEx(playerid, COLOR_WHITE, "No se puede rastrear un vehículo en un espacio vacío.");
	            	}
	        	}
	    	}
		}
 		case UNMODCARMENU: if(response)
		{
			new count = GetPVarInt(playerid, "modCount");
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) for (new i = 0; i < count; i++) if(listitem == i){
				format(string, sizeof(string), "partList%i", i);
				new partID = GetPVarInt(playerid, string);
				if (partID == 999){
					for(new f = 0 ; f < MAX_MODS; f++){
						RemoveVehicleComponent(PlayerVehicleInfo[playerid][d][pvId], GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
						PlayerVehicleInfo[playerid][d][pvMods][f] = 0;
					}
					return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Todas las modificaciones se han eliminado de tu vehículo.");
				}
				RemoveVehicleComponent(GetPlayerVehicleID(playerid), partID);
				PlayerVehicleInfo[playerid][d][pvMods][GetVehicleComponentType(partID)] = 0;
				return SendClientMessageEx(playerid, COLOR_WHITE, "La modificación que has seleccionado ha sido eliminado.");
			}
		}
		case GOTOPLAYERCAR:{
		    if(response == 1){
		        for(new i = 0; i < MAX_PLAYERVEHICLES; i++){
		            if(listitem == i){
						new Float: carPos[3], id = GetPVarInt(playerid, "playeraffectedcarTP");
						if(PlayerVehicleInfo[id][i][pvId] > INVALID_PLAYER_VEHICLE_ID){
							GetVehiclePos(PlayerVehicleInfo[id][i][pvId], carPos[0], carPos[1], carPos[2]);
							SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(PlayerVehicleInfo[id][i][pvId]));
							SetPlayerInterior(playerid,0);
							SetPlayerPos(playerid, carPos[0], carPos[1], carPos[2]);
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "No te puede teletransportar a un espacio vacío o embargado.");
					}
				}
		    }
		}
		case PB_MENU:
		{
			if(response == 1)
			{
			    switch(listitem)
			    {
			        // Elegir Arena
			        case 0: PaintballArenaSelection(playerid);
			        // Comprar Paintball Fichas
			        case 1: PaintballTokenBuyMenu(playerid);
			        case 2:
			        {
			            if(Info[playerid][pAdminZC] >= 10)
			            {
			            	//PaintballAdminMenu(playerid);
						}
						else
						{
						    PaintballMainMenu(playerid);
						    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes acceso al panel.");
						    return 1;
						}
			        }
			    }
			}
		}
		case SUBSI:
		{
		   	if(response == 1)
		   	{
		   		if(strfind(inputtext, SubsiCodes[IDCode[playerid]], true) != -1)
				{
					if(IsPlayerConnected(playerid))
					{
						if(MoneyMessage[playerid]==1)
						{
					    	if( Info[playerid][pJailed] < 1 && !OrgGob(playerid))
					    	{
					    	    format(string,sizeof(string),"No pudiste pagar la deuda de {FF0000}$%d{FFFFFF}. Ahora la policía te está buscando.",GetPlayerCash(playerid));
								SendClientMessageEx(playerid, COLOR_WHITE, string);
								if(Info[playerid][pWantedLevel] < 6) Info[playerid][pWantedLevel] += 1;
								SetPlayerWantedLevel(playerid, Info[playerid][pWantedLevel]);
							}
						}
					    if(SubsiOn == 0)
						{
						    TogglePlayerControllable(playerid, 1);
						    IDCode[playerid] = -1;
							return SendClientMessageEx(playerid, COLOR_WHITE, "Pasaron 3 minutos ya se enviaron los cheques a cada ciudadano, espera a otra hora de pago.");
						}
						if(Info[playerid][pLevel] > 0)
		    			{
							if(Info[playerid][pRenting] != INVALID_HOUSE_ID)
							{
								if(HouseInfo[Info[playerid][pRenting]][hRentFee] > Info[playerid][pAccount])
								{
									Info[playerid][pRenting] = INVALID_HOUSE_ID;
									SendClientMessageEx(playerid, COLOR_WHITE, "Fuiste desalojado de la casa que rentabas.");
								}
								else
								{
									HouseInfo[Info[playerid][pRenting]][hSafeMoney] += HouseInfo[Info[playerid][pRenting]][hRentFee];
									Info[playerid][pAccount] -= HouseInfo[Info[playerid][pRenting]][hRentFee];
								}
							}
							Info[playerid][pRob] = 0;
							if(Info[playerid][pVIP] >= 4) Info[playerid][pVTokens]+= 2;
							Info[playerid][YaCobre] = 1;
							IDCode[playerid] = -1;
				    		if(Info[playerid][pDobleExp] == 0)
							{
                                Info[playerid][pExp] += 1;
							}
				    		else
							{
								Info[playerid][pExp] += 2;
								Info[playerid][pDobleExp]--;
								format(string, sizeof(string), "* Ganaste 2 puntos de respeto por tener horas de doble experiencia, te quedan %d horas más.", Info[playerid][pDobleExp]);
								SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							}
                        GameTextForPlayer(playerid, "+1 EXP", 5000, 1);
                        Info[playerid][pAccount] += 700;
                        SendClientMessageEx(playerid, COLOR_YELLOW2, "! {FFFFFF}Se depositó $700 en tu cuenta bancaria.");
                        Pagas_Facciones(playerid);
						}
					}
				}
				else
				{
				    new text[256], rand;
					rand = random(22);
					format(string, sizeof(string), "{FFFFFF}La clave que colocó está mal escrita, por favor lea bien para confirmar la paga\n\nNombre y Apellido: %s\nEdad: %d\nMonto: $700\nCódigo:{FF0000} %s",GetPlayerNameEx(playerid), Info[playerid][pAge], SubsiCodes[rand]);
					ShowPlayerDialog(playerid, SUBSI, DIALOG_STYLE_INPUT,"{00F70C}Error, intenta otra vez:",text,"Enviar","Salir");
                    IDCode[playerid] = rand;
				}
			}
		}
		case PB_FICHAS:
		{
		    if(response == 1)
		    {
		        if(isnull(inputtext)) return PaintballTokenBuyMenu(playerid);
		        if(strval(inputtext) <= 0) return PaintballTokenBuyMenu(playerid);
		        if(strval(inputtext) > 1000)
		        {
		            PaintballTokenBuyMenu(playerid);
		            SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}Error al realizar la compra!:{FFFFFF} No puedes realizar una compra de {00F70C}1.000{FFFFFF} fichas.");
		            return 1;
		        }
		        if(GetPlayerCash(playerid) < 20*strval(inputtext))
		        {
					PaintballTokenBuyMenu(playerid);
		        	format(string,sizeof(string), "{FF0000}Error al realizar la compra!:{FFFFFF} No puedes pagar {FF0000}%d{FFFFFF} ficha/s.",strval(inputtext),strval(inputtext)*5000);
		        	SendClientMessageEx(playerid, COLOR_WHITE, string);
		        	return 1;
				}
		        GivePlayerCash(playerid, -20*strval(inputtext));
				Info[playerid][pPaintTokens] += strval(inputtext);
				format(string,sizeof(string), "{2EDFFF}¡Fichas compradas!:{FFFFFF} Compraste {2EDFFF}%d{FFFFFF} ficha/s por un costo de {33AA33}$%d",strval(inputtext),strval(inputtext)*20);
				SendClientMessageEx(playerid, COLOR_AT, string);
		    }
		    else PaintballMainMenu(playerid);
		}
		case PBARENASCORES:
		{
		    if(response == 1) return PaintballScoreboard(playerid);
		}
		case PB_SARENA:
		{
		    if(response == 1)
		    {
		        switch(listitem)
		        {
	       	    	case 0: JoinPaintballArena(playerid, 1);//Join DM
	       	    	case 1: JoinPaintballArena(playerid, 5);//Join DM2
	       	    	case 2: JoinPaintballArena(playerid, 2);// Join Choose Team
	       	    	case 3: JoinPaintballArena(playerid, 4); // SendClientMessageEx Coming soon
	       	    }
	       	}
		    else PaintballMainMenu(playerid);
		}
		case PB_CHOOSE:
		{
		    if(response == 1)
		    {
		        switch(listitem)
		        {
		        	case 0: // Red
	 				{
	 				    if(Info[playerid][pPaintTeam] == 1)
	 				    {
	 				        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Ya eres del equipo rojo!");
	 				        PaintballSwitchTeam(playerid);
	 				        return 1;
	 				    }
	 				    if(PlayersRed == 12)
	 				    {
							SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Equipo rojo está full, por favor elige otro equipo.");
	 				        PaintballSwitchTeam(playerid);
	 				        return 1;
	 				    }
	 				    if(PlayersRed > PlayersBlue)
	 				    {
	 				        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} No puedes unirte a equipos ahora, si llegas a entrar estarían disparejos.");
	 				        return 1;
	 				    }
	 				    PlayersBlue--;
	 				    PlayersRed++;
	 				    Info[playerid][pPaintTeam] = 1;
	 				    SetHP(playerid, 0);
		        	}
		        	case 1: // Blue
		        	{
		        	    if(Info[playerid][pPaintTeam] == 2)
	 				    {
	 				        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Ya eres del equipo azul!");
	 				        PaintballSwitchTeam(playerid);
	 				        return 1;
	 				    }
	 				    if(PlayersBlue == 12)
	 				    {
							SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Equipo azul está full, por favor elige otro equipo.");
	 				        PaintballSwitchTeam(playerid);
	 				        return 1;
	 				    }
	 				    if(PlayersBlue > PlayersRed)
	 				    {
	 				        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} No puedes unirte a equipos ahora, si llegas a entrar estarían disparejos.");
	 				        return 1;
	 				    }
	 				    PlayersRed--;
	 				    PlayersBlue++;
	 				    Info[playerid][pPaintTeam] = 2;
	 				    SetHP(playerid, 0);
		        	}
				}
		    }
		}
		case PBJOINTEAM:
		{
	   		if(response == 1)
	    	{
	        	switch(listitem)
	        	{
	        		case 0: // Red
 					{
 					    if(PlayersRed == 12)
 					    {
							SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} El equipo rojo está FULL, por favor elige otro equipo.");
 					        SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C} Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{FFFFFF}Equipo Azul","Entrar","Salir");
 					        return 1;
 					    }
 					    if(PlayersRed > PlayersBlue)
 					    {
 					        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Los equipos estarían disparejos, por favor elige otro equipo.");
 					        SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{FFFFFF}Equipo Azul","Entrar","Salir");
 					        return 1;
 					    }
 					    Info[playerid][pPaintTeam] = 1;
 					    TotalTDM++;
						JoinPaintballArena(playerid, 3);
	        		}
	        		case 1: // Blue
	        		{
 					    if(PlayersBlue == 12)
 					    {
							SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} El equipo azul está FULL, por favor elige otro equipo.");
 					        SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{FFFFFF}Equipo Azul","Entrar","Salir");
 					        return 1;
 					    }
 					    if(PlayersBlue > PlayersRed)
 					    {
 					        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Los equipos estarían disparejos, por favor elige otro equipo.");
 					        SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{FFFFFF}Equipo Azul","Entrar","Salir");
 					        return 1;
 					    }
 					    Info[playerid][pPaintTeam] = 2;
 					    TotalTDM++;
						JoinPaintballArena(playerid, 3);
		        	}
				}
		    }
		    else
		    {
		        PaintballArenaSelection(playerid);
		    }
		}
		case PB_ARMAS:
		{
  			if(GetPVarInt(playerid, "ArenaMode") == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{5ABAFF}PAINTBALL:{FFFFFF} Lo sentimos, no estás dentro de la arena.");
		    if(Info[playerid][pPaintTokens] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{5ABAFF}PAINTBALL:{FFFFFF} Lo sentimos, no tienes suficientes fichas para canjear.");
 			if(response)
			{
				if(listitem == 0) //
				{
 					GivePlayerWeapon(playerid, 22, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 1) //deagle
				{
 					GivePlayerWeapon(playerid, 24, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 2) //MP5
				{
 					GivePlayerWeapon(playerid, 29, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 3) //AK-47
				{
 					GivePlayerWeapon(playerid, 30, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 4) //M4
				{
				    if(Info[playerid][pPaintTokens] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{5ABAFF}PAINTBALL:{FFFFFF} Necesitas 2 fichas para esta arma.");
 					GivePlayerWeapon(playerid, 31, 60000);
 					return Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 5) //shotgun
				{
 					GivePlayerWeapon(playerid, 25, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 6) //rifle
				{
				    if(Info[playerid][pPaintTokens] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{5ABAFF}PAINTBALL:{FFFFFF} Necesitas 2 fichas para esta arma.");
 					GivePlayerWeapon(playerid, 33, 60000);
 					return Info[playerid][pPaintTokens] -= 2;
 				}
				if(listitem == 7) //armor
				{
					new Float:health;
					GetPlayerHealth(playerid, health);
					if (health < 50)
					{
					 	return SendClientMessageEx(playerid,COLOR_WHITE,"{5ABAFF}PAINTBALL:{FFFFFF} No puedes comprar chaleco con menos de 35 de vida!");
					}
 					SetPlayerArmour(playerid, 100);
 					return Info[playerid][pPaintTokens] -= 1;
				}
			}
		}
		case DIALOG_CDLOCKMENU:
		{
			if(response)
			{
				if(GetPVarInt(playerid, "lockmenu") == 1)
				{
	            	new pvid;
	            	if (isnumeric(inputtext))
		        	{
						pvid = strval(inputtext)-1;
				    	if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
				    	{
					    	SendClientMessageEx(playerid, COLOR_GRAD4, "{FF0000}[ERROR]:{FFFFFF} No tienes un vehiculo en este slot.");
					    	SetPVarInt(playerid, "lockmenu", 0);
					    	return 1;
				    	}
				    	if(PlayerVehicleInfo[playerid][pvid][pvLock] == 1)
				    	{
						    SendClientMessageEx(playerid, COLOR_GRAD4, "{FF0000}[ERROR]:{FFFFFF} Esto ya está instalado ene ste vehiculo.");
						    SetPVarInt(playerid, "lockmenu", 0);
						    return 1;
				    	}
				    	SendClientMessageEx(playerid, COLOR_TIENDA, "24 Horas:{FFFFFF} Coloque /seguro para bloquear/desbloquear el vehículo");
				    	PlayerVehicleInfo[playerid][pvid][pvLock] = 1;
				    	SetPVarInt(playerid, "lockmenu", 0);
				        if(Info[playerid][pVIP] == 0)
						{
						   	return GivePlayerCash(playerid, -2000);
						}
						else
						{
						   	GivePlayerCash(playerid, -2000);
						}
			    	}
				}
				else if(GetPVarInt(playerid, "lockmenu") == 2)
				{
		   			new pvid;
            		if (isnumeric(inputtext))
	        		{
                		pvid = strval(inputtext)-1;
			    		if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
			    		{
				    		SendClientMessageEx(playerid, COLOR_GRAD4, "{FF0000}[ERROR]:{FFFFFF} No tienes un vehiculo en este slot.");
				    		SetPVarInt(playerid, "lockmenu", 0);
	                		return 1;
			    		}
			    		if(PlayerVehicleInfo[playerid][pvid][pvLock] == 3)
		  	    		{
				    		SendClientMessageEx(playerid, COLOR_GRAD4, "{FF0000}[ERROR]:{FFFFFF} Esto ya está instalado en este vehiculo.");
				    		SetPVarInt(playerid, "lockmenu", 0);
				    		return 1;
			    		}
			    		SendClientMessageEx(playerid, COLOR_TIENDA, "24 Horas:{FFFFFF} Coloque /seguro para bloquear/desbloquear el vehículo");
			    		PlayerVehicleInfo[playerid][pvid][pvLock] = 3;
			    		SetPVarInt(playerid, "lockmenu", 0);
				        if(Info[playerid][pVIP] == 0)
						{
						   	return GivePlayerCash(playerid, -4500);
						}
						else
						{
						   	GivePlayerCash(playerid, -4500);
						}
					}
				}
			}
		}
 	case Tienda_OOC:
	{
	if(response == 1)
	{
	switch(listitem)
	{
	case 0:
	{
	if(Info[playerid][pPTR] > 99)
	{
	GivePlayerCash(playerid, 100000);
	SendClientMessageEx(playerid, -1, "Cambiaste 100 puntos de rol por: {FF00B4}$100.000");
	Info[playerid][pPTR] -= 100;
	} else SendClientMessageEx(playerid, COLOR_ROJO , "! {FFFFFF}Para obtener $100.000 necesitas 100 puntos de rol, más información en: {B9C9CF}/Puntosrol");
	return 1;
	}
	case 1:
	{
	if(Info[playerid][pPTR] > 49)
	{
	GivePlayerCash(playerid, 199);
	SendClientMessageEx(playerid, -1, "Cambiaste 200 puntos de rol por: {FF00B4}$200.000");
	Info[playerid][pPTR] -= 200;
	} else SendClientMessageEx(playerid, COLOR_ROJO , "! {FFFFFF}Para obtener $100.000 necesitas 200 puntos de rol, más información en: {B9C9CF}/Puntosrol");
	return 1;
	}
	case 2:
	{
	if(Info[playerid][pPTR] > 299)
	{
	GivePlayerCash(playerid, 300000);
	SendClientMessageEx(playerid, -1, "Cambiaste 300 puntos de rol por: {FF00B4}$300.000");
	Info[playerid][pPTR] -= 300;
	} else SendClientMessageEx(playerid, COLOR_ROJO , "! {FFFFFF}Para obtener $100.000 necesitas 300 puntos de rol, más información en: {B9C9CF}/Puntosrol");
	return 1;
	}
	case 3:
	{
	if(Info[playerid][pPTR] > 399)
	{
	GivePlayerCash(playerid, 400000);
	SendClientMessageEx(playerid, -1, "Cambiaste 400 puntos de rol por: {FF00B4}$400.000");
	Info[playerid][pPTR] -= 400;
	} else SendClientMessageEx(playerid, COLOR_ROJO , "! {FFFFFF}Para obtener $100.000 necesitas 400 puntos de rol, más información en: {B9C9CF}/Puntosrol");
	return 1;
	}
	case 4:
	{
	if(Info[playerid][pPTR] > 499)
	{
	GivePlayerCash(playerid, 500000);
	SendClientMessageEx(playerid, -1, "Cambiaste 500 puntos de rol por: {FF00B4}$500.000");
	Info[playerid][pPTR] -= 500;
	} else SendClientMessageEx(playerid, COLOR_ROJO , "! {FFFFFF}Para obtener $500.000 necesitas 100 puntos de rol, más información en: {B9C9CF}/Puntosrol");
	return 1;
	}
	}
	}
	return 1;
	}
		case EQUIPO_DOC:
		{
		    if(response == 1)
		    {
		        switch (listitem)
		        {
		            case 0:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 308);
								Medics += 1;
								format(string, sizeof(string), "* %s toma su uniforme de médica y su radio.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 1:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 276);
								Medics += 1;
								format(string, sizeof(string), "* %s toma su uniforme de médico y su radio.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 2:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 141);
								Medics += 1;
								format(string, sizeof(string), "* %s se pone su uniforme de directora.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 3:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 70);
								Medics += 1;
								format(string, sizeof(string), "* %s se pone su uniforme de director.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 4:
					{
								if(OnDuty[playerid] == 1) {	SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Estás en labor, termina tu turno."); return 1;    }
								SetPlayerSkin(playerid, Info[playerid][pChar]);
								Medics -= 1;
								format(string, sizeof(string), "* %s deja su equipo en su casillero.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
		}
		case EQUIPO_HITMAN:
		{
		    if(response == 1)
		    {
		        switch (listitem)
		        {
		            case 0:
					{
								GivePlayerValidWeapon(playerid, 23);
								format(string, sizeof(string), "* %s toma una 9mm con silenciador del armario.", GetPlayerNameEx(playerid));
   				 				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 1:
					{
								GivePlayerValidWeapon(playerid, 4);
								format(string, sizeof(string), "* %s toma un cuchillo del armario.", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 2:
					{
								Info[playerid][pMask] = 1;
								format(string, sizeof(string), "* %s toma una máscara del armario.", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					}
					case 3:
					{
								GivePlayerValidWeapon(playerid, 34);
								format(string, sizeof(string), "* %s estira su diestra y este, toma un rifle franco tirador.", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					}
					case 4:
					{
				    GivePlayerValidWeapon(playerid, 29);
				    format(string, sizeof(string), "* %s toma una MP5 del armario.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		    }
	    }
	}
	case EQUIPO_RUSA:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s toma el cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
                    GivePlayerCash(playerid, -3000);
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s toma una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
		        {
                    GivePlayerCash(playerid, -4500);
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s toma una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		    }
	    }
	}
	case EQUIPO_LCN:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s toma un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
                    GivePlayerCash(playerid, -3000);
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s toma una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
		        {
                    GivePlayerCash(playerid, -4500);
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s toma una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		    }
	    }
	}
	case EQUIPO_YAKUZA:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s toma un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
                    GivePlayerCash(playerid, -3000);
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s toma una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
		        {
                    GivePlayerCash(playerid, -4500);
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s toma una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		    }
	    }
	}
	case EQUIPO_ALQAEDA:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 29);
		            format(string, sizeof(string), "* %s Coge una MP5 del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 30);
		            format(string, sizeof(string), "* %s Coge una AK-47 del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 24);
					format(string, sizeof(string), "* %s Coge una Desert Eagle del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
				case 3:
				{
				    SetPlayerArmour(playerid, 100.0);
				    format(string, sizeof(string), "* %s Coge un chaleco del armario y se lo pone.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
	    }
	}
	case EQUIPO_SANTANA:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s toma un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
                    GivePlayerCash(playerid, -3000);
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s toma una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
		        {
                    GivePlayerCash(playerid, -4500);
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s toma una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		    }
	    }
	}
	case EQUIPO_MOTOQUEROS:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s toma un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 5);
		            format(string, sizeof(string), "* %s toma un bat del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 22);
					format(string, sizeof(string), "* %s toma una 9mm del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 25);
					format(string, sizeof(string), "* %s toma una escopeta del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 4:
		        {
					SetPlayerSkin(playerid, 247);
		            format(string, sizeof(string), "* %s coge su vestimenta de motoquero.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 5:
		        {
					SetPlayerSkin(playerid, 248);
		            format(string, sizeof(string), "* %s coge su vestimenta de motoquero.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		    }
	    }
	}
		case LOTTO_BUY:
		{
			if(response == 1)
			{
			    new lenght = strlen(inputtext);
			    if(lenght > 0 && lenght < 4)
			    {
					Info[playerid][pLottoNr] = strval(inputtext);
					SendClientMessageEx(playerid, COLOR_TIENDA, "24 Horas: Compraste un número, suerte.");
					Bought(playerid, 5);
					CheckBizz(playerid, 5);
					UpdateBizz();
				}
			}
		}
		case FSTYLE_DIALOG:
		{
	    	if(response == 1)
	    	{
	        	switch(listitem)
	        	{
	            	case 0:
	            	{
			    	    if(CheckMoney(playerid, 1500))
			    	    {
							Bought(playerid, 1500);
							Info[playerid][pFStyle] = 7;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
							SendClientMessageEx(playerid, COLOR_WHITE, "Aprendiste: Knee Head");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
					case 1:
		            {
				        if(CheckMoney(playerid, 1000))
				        {
							Bought(playerid, 1000);
							Info[playerid][pFStyle] = 6;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
							SendClientMessageEx(playerid, COLOR_WHITE, "Aprendiste: Kung Fu");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
					case 2:
		            {
				        if(CheckMoney(playerid, 800))
				        {
							Bought(playerid, 800);
							Info[playerid][pFStyle] = 5;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
							SendClientMessageEx(playerid, COLOR_WHITE, "Aprendiste: Boxeo");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
					case 3:
		            {
				        if(CheckMoney(playerid, 800))
				        {
							Bought(playerid, 800);
							Info[playerid][pFStyle] = 4;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
							SendClientMessageEx(playerid, COLOR_WHITE, "Aprendiste: Pelea Callejera");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
					case 4:
		            {
				        if(CheckMoney(playerid, 800))
				        {
							Bought(playerid, 800);
							Info[playerid][pFStyle] = 3;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
							SendClientMessageEx(playerid, COLOR_WHITE, "Aprendiste: Pelea con Codos");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
				}
			}
		}
		case MMENU_REPARACION:
		{
			if(response == 1)
		    {
		        new Float:cx, Float:cy, Float:cz;
	         	GetVehiclePos(idcar, cx, cy, cz);
	         	PlayerPlaySound(playerid, 1133, cx, cy, cz);
		        switch(listitem)
		        {
		            case 0:
					{
						format(string, sizeof(string), "* %s arregla el motor del vehículo.", sendername);
	      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			  			SetVehicleHealth(idcar, 1000.0);
						return 1;
					}
					case 1:
					{
						format(string, sizeof(string), "* %s coloca carrocería nueva al vehiculo.", sendername);
	      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			  			RepairVehicle(idcar);
						return 1;
					}
				}
			}
		}
 	case MECANICO_MENU:
		{
			if(response == 1)
		    {
		        switch(listitem)
		        {
					case 0:// Reparar
					{
					        if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica!");
		    				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
							SafeDialogEx(playerid, MMENU_REPARACION, DIALOG_STYLE_LIST, "{FFFFFF}Reparaciones", "- Reparar Motor\n- Reparar chasis completo", "Reparar", "Cancelar");
							return 1;
					}
					case 1: // Gasolina
					{
					    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller!");
					    if(IsPlayerInAnyVehicle(playerid))
					    {
							format(string, sizeof(string), "* %s llena el tanque del vehículo.", sendername);
			      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					  		VehicleFuel[idcar] = 200;
					  		return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
					}
					case 2: // Tunnig

					{
    	                if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller!");
		    			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
						SafeDialogEx(playerid, MMENUTUNING_G, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona", "- Piezas Tunning\n- Llantas", "Seleccionar", "Cancelar");
						return 1;
					}
				}
			}
		}
	    case MMENUTUNING_G:{
			if(response == 1){
		        switch(listitem){
		            case 0: SafeDialogEx(playerid, TUNING_WAA, DIALOG_STYLE_LIST, "{FFFFFF}Piezas Tunning", "Chasis X-Flow\nChasis Alien", "Aceptar", "Atrás");
		            case 1: SafeDialogEx(playerid, TUNING_MENU_RUEDAS, DIALOG_STYLE_LIST, "{FFFFFF}Llantas deportivas", "OffRoad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces", "Tunear", "Cancelar");
				}
			}
		}
		case TUNING_WAA:
		{
			if(response == 1)
	    	{
	    	    switch(listitem)
	    	    {
	    	        // XFLOW TUNING Important Note: Using an invalid componentid crashes the game.
	    	        case 0:
	    	        {
	    	            SendClientMessageEx(playerid, COLOR_GRAD2, "CASE0");
						switch(GetVehicleModel(idcar))
				        {
				            case 560:
				            {
		                        AddVehicleComponent(idcar, 1030);
		                        AddVehicleComponent(idcar, 1033);
		                        AddVehicleComponent(idcar, 1140);
		                        AddVehicleComponent(idcar, 1170);
		                        AddVehicleComponent(idcar, 1029);
		                        AddVehicleComponent(idcar, 1139);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
				            }
				            case 562:
				            {
		                        AddVehicleComponent(idcar, 1039);
		                        AddVehicleComponent(idcar, 1035);
		                        AddVehicleComponent(idcar, 1148);
		                        AddVehicleComponent(idcar, 1172);
		                        AddVehicleComponent(idcar, 1037);
		                        AddVehicleComponent(idcar, 1146);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.!");
				            }
				            case 565:
				            {
		                        AddVehicleComponent(idcar, 1048);
		                        AddVehicleComponent(idcar, 1053);
		                        AddVehicleComponent(idcar, 1050);
		                        AddVehicleComponent(idcar, 1151);
		                        AddVehicleComponent(idcar, 1152);
		                        AddVehicleComponent(idcar, 1045);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
				            }
			            	case 559:
			            	{
	                        	AddVehicleComponent(idcar,1070);
	                        	AddVehicleComponent(idcar,1068);
	                        	AddVehicleComponent(idcar,1158);
	                        	AddVehicleComponent(idcar,1161);
	                        	AddVehicleComponent(idcar,1173);
	                        	AddVehicleComponent(idcar,1066);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
			            	}
			            	case 561:
			            	{
	                        	AddVehicleComponent(idcar,1057);
	                        	AddVehicleComponent(idcar,1061);
	                        	AddVehicleComponent(idcar,1060);
	                        	AddVehicleComponent(idcar,1156);
	                        	AddVehicleComponent(idcar,1157);
	                    	    AddVehicleComponent(idcar,1059);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
			            	}
			            	case 558:
			           	 	{
	                    	    AddVehicleComponent(idcar, 1093);
	                    	    AddVehicleComponent(idcar,1091);
	                	        AddVehicleComponent(idcar,1163);
	            	            AddVehicleComponent(idcar, 1167);
	            	            AddVehicleComponent(idcar, 1165);
	            	            AddVehicleComponent(idcar, 1089);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
			    	        }
			    	        default: SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Este coche no permite este tipo de tunning.");
			    	    }
			    	    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
						{
							UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
						}
	            	}
	            	// ALIEN TUNING Important Note: Using an invalid componentid crashes the game.
					case 1:
	            	{
	                	SendClientMessageEx(playerid, COLOR_GRAD2, "CASE0");
						switch(GetVehicleModel(idcar))
			        	{
			        	    case 560:
			        	    {
	                	        AddVehicleComponent(idcar, 1026);
	                	        AddVehicleComponent(idcar, 1032);
	                	        AddVehicleComponent(idcar, 1138);
	                	        AddVehicleComponent(idcar, 1141);
	                	        AddVehicleComponent(idcar,1169);
	                	        AddVehicleComponent(idcar, 1028);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
			    	        }
			    	        case 562:
			    	        {
	        	                AddVehicleComponent(idcar,1036);
	        	                AddVehicleComponent(idcar,1038);
	        	                AddVehicleComponent(idcar,1149);
	        	                AddVehicleComponent(idcar,1171);
	        	                AddVehicleComponent(idcar,1034);
	        	                AddVehicleComponent(idcar,1147);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
				            case 565:
				            {
	        	                AddVehicleComponent(idcar, 1047);
	        	                AddVehicleComponent(idcar, 1054);
	        	                AddVehicleComponent(idcar, 1049);
	        	                AddVehicleComponent(idcar, 1150);
	        	                AddVehicleComponent(idcar, 1153);
	        	                AddVehicleComponent(idcar, 1046);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
				            case 559:
				            {
	        	                AddVehicleComponent(idcar, 1069);
	        	                AddVehicleComponent(idcar, 1067);
	        	                AddVehicleComponent(idcar, 1162);
	        	                AddVehicleComponent(idcar, 1159);
	        	                AddVehicleComponent(idcar, 1160);
	        	                AddVehicleComponent(idcar, 1065);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
				            case 561:
				            {
		                        AddVehicleComponent(idcar, 1056);
		                        AddVehicleComponent(idcar, 1055);
		                        AddVehicleComponent(idcar, 1058);
		                        AddVehicleComponent(idcar, 1154);
		                        AddVehicleComponent(idcar, 1153);
		                        AddVehicleComponent(idcar, 1064);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
				            case 558:
				            {
		                        AddVehicleComponent(idcar,1094);
		                        AddVehicleComponent(idcar,1088);
		                        AddVehicleComponent(idcar, 1164);
		                        AddVehicleComponent(idcar,1168);
		                        AddVehicleComponent(idcar,1166);
		                        AddVehicleComponent(idcar,1092);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
			    	        default: SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Este coche no permite este tipo de tunning.");
				        }
			    	    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
						{
							UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
						}
		            }
		        }
			}
		}
		case TUNING_MENU_RUEDAS:
		{
			if(response == 1)
		    {
		        new Float:cx, Float:cy, Float:cz;
	         	GetVehiclePos(idcar, cx, cy, cz);
	         	PlayerPlaySound(playerid, 1133, cx, cy, cz);
		        switch(listitem)
		        {
		            case 0: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas OffRoad instaladas."); AddVehicleComponent(idcar, 1025); return 1; }
		            case 1: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Shadow instaladas."); AddVehicleComponent(idcar, 1073);  return 1; }
		            case 2: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Mega instaladas."); AddVehicleComponent(idcar, 1074); return 1; }
		            case 3: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Rimshine instaladas. "); AddVehicleComponent(idcar, 1075);  return 1; }
		            case 4: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Wires instaladas."); AddVehicleComponent(idcar, 1076);  return 1; }
		            case 5: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Classic instaladas."); AddVehicleComponent(idcar, 1077);  return 1; }
		            case 6: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Twist instaladas."); AddVehicleComponent(idcar, 1078);  return 1; }
		            case 7: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Cutter instaladas."); AddVehicleComponent(idcar, 1079);  return 1; }
		            case 8: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Switch instaladas."); AddVehicleComponent(idcar, 1080);  return 1; }
		            case 9: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Grove instaladas."); AddVehicleComponent(idcar, 1081);  return 1; }
		            case 10: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Import instaladas."); AddVehicleComponent(idcar, 1082);  return 1; }
		            case 11: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Dollar instaladas."); AddVehicleComponent(idcar, 1083);  return 1; }
	    	        case 12: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Trance instaladas."); AddVehicleComponent(idcar, 1084);  return 1; }
		            case 13: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1085);  return 1; }
		            case 14: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1096);  return 1; }
		            case 15: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1097);  return 1; }
		            case 16: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1098);  return 1; }
				}
			    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
				{
					UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
				}
			}
		}
		case REQF_ACCEPT:
		{
	    	if(response == 1)
	    	{
	    	    format(string, sizeof(string), "Felicitaciones, usted aceptó un contrato de:{FFFFFF} %s",ReqF_Name[playerid]);
	    	    SendClientMessageEx(playerid, COLOR_YELLOW, string);
	    	    Info[playerid][pMember]= ReqF_Faction[playerid];
	    	    Info[playerid][pRank] = 1;
	    	    Info[playerid][pDivision] = 1;
	    	    format(string, sizeof(string), "* %s toma una lapicera y firma el contrato.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    	    ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
	    	}
	    	else
			{
        	    SendClientMessageEx(playerid, COLOR_GRAD2, "Rechazaste un contrato para ingresar a:{FFFFFF} %s");
        	    format(string, sizeof(string), "* %s no acepta el contrato que le han ofrecido.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
			}
		}
		case ENTER_LSTV:
		{
	    	if(response == 1)
	    	{
	        	switch(listitem)
	        	{
	        	    case 0:
	        	    {
	        	        SetPosEx(playerid, -2719.7854,519.2936,48.3752,0,0,0);//-1965.2617,779.8456,107.1754
	        	        GameTextForPlayer(playerid, "~g~~h~SA News", 5000, 1);
	        	    }
	        	    case 1:
	        	    {
	        	        SetPosEx(playerid, 243.2710,302.7583,999.1343+1,0,0,0);
	        	        GameTextForPlayer(playerid, "~g~~h~SA News", 5000, 1);
	        	    }
	    	    }
		    }
		}
	    case REBUG:
	    {
	        if(response == 1)
            {
				SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}AT-RP:{FFFFFF} Gracias por avisar a la administración, será arreglado lo más ante posible.");
				format(string, sizeof(string), "[¡] ATENCIÓN [!] %s reportó un BUG: %s", GetPlayerNameEx(playerid), inputtext);
				ABroadCast(COLOR_RED,string,4);
  				Log("logs/- Bugs Reportados.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "No dudes en reportar un bug si lo encuentras");
			}
		}
	    case SUG:
	    {
	        if(response == 1)
            {
				SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[¡] Sugerencia enviada:{FFFFFF} Gracias por enviar tu sugerencia, se verá para implementarlo.");
				format(string, sizeof(string), "[Sugerencias]: %s envió una sugerencia: %s", GetPlayerNameEx(playerid), inputtext);
				ABroadCast(COLOR_LIGHTBLUE,string,4);
  				Log("logs/- Sugerencias.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "No dudes en enviar una sugerencia!");
			}
		}
	    case SOLICITUD_GARAGE:
	    {
	        if(response == 1)
            {
				SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[¡] Notificación:{FFFFFF} Si algún Encargado de Ventas está conectado, ya viene en minutos!");
				format(string, sizeof(string), "[<!>] %s solicita Garage(s): %s", GetPlayerNameEx(playerid), inputtext);
				ABroadCast(COLOR_GRIS,string,4);
  				Log("logs/- Pedidos de Garajes.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "- No dudes solicitar tu garaje si ves a algún Encargado de Ventas!");
			}
		}
	    case CAL_ROL:
	    {
	        if(response == 1)
            {
				SendClientMessageEx(playerid, COLOR_AMARILLO, "! {FFFFFF}Tu calificación fue enviada, gracias por ayudarnos.");
				format(string, sizeof(string), "%s calificó al servidor con un: %s", GetPlayerNameEx(playerid), inputtext);
				ABroadCast(COLOR_AMARILLO,string,4);
  				Log("logs/- Calificaciones.log", string);
			}
		}
		case REG_SEX:
		{
			if(response == 1)
			{
   				Info[playerid][pSex] = 1;
		        Skin(playerid, NOOB_SKIN);
		        Info[playerid][pChar] = NOOB_SKIN;
				format(string, sizeof(string), "{F0F0F0}• ¿Edad?:", GetPlayerNameEx(playerid)); // Masculino
		        SafeDialogEx(playerid, REG_ROL, DIALOG_STYLE_INPUT, "{C3FF23}Paso Nº 2",string, "Sig.", "Atrás");
		    }
			else
			{
				Info[playerid][pSex] = 2;
				Skin(playerid, 93);
				Info[playerid][pChar] = 93;
				format(string, sizeof(string), "{F0F0F0}• ¿Edad?:", GetPlayerNameEx(playerid)); // Femenino
		        SafeDialogEx(playerid, REG_ROL, DIALOG_STYLE_INPUT, "{C3FF23}Paso Nº 2",string, "Sig.", "Atrás");
			}
		}
		case REG_PASA:
		{
			if(response == 1)
			{
   				Info[playerid][pSex] = 1;
		        Skin(playerid, NOOB_SKIN);
		        Info[playerid][pChar] = NOOB_SKIN;
				format(string, sizeof(string), "{F0F0F0}• ¿Edad?:", GetPlayerNameEx(playerid)); // Masculino
		        SafeDialogEx(playerid, REG_ROL, DIALOG_STYLE_INPUT, "{C3FF23}Paso Nº 2",string, "Sig.", "Atrás");
		    }
			else
			{
				Info[playerid][pSex] = 2;
				Skin(playerid, 93);
				Info[playerid][pChar] = 93;
				format(string, sizeof(string), "{F0F0F0}• ¿Edad?:", GetPlayerNameEx(playerid)); // Femenino
		        SafeDialogEx(playerid, REG_ROL, DIALOG_STYLE_INPUT, "{C3FF23}Paso Nº 2",string, "Sig.", "Atrás");
			}
		}
		case REG_ROL:
		{
		    if(response == 1)
		    {
		         if(strval(inputtext) < 18 || strval(inputtext) > 90) return SafeDialogEx(playerid, REG_ROL, DIALOG_STYLE_INPUT, "{C3FF23}Paso Nº 2", "{F0F0F0}• ¿Qué edad tiene del 18 al 99?:", "Sig.", "Atrás");
		         {
		         	Info[playerid][pAge] = strval(inputtext);
		         	format(string, sizeof(string), "{FFFFFF}• ¿Vienes a la ciudad o al pueblo?:", GetPlayerNameEx(playerid),strval(inputtext));
					SafeDialogEx(playerid,REG_ROLSELECC,DIALOG_STYLE_MSGBOX, "{C3FF23}Paso Nº 3", string, "Ciudad", "Pueblo");
		         }
		    }
		    else
		    {
		    	new sex[]= "{FFFFFF}Al parecer te equivocaste en el sexo, puedes elegir de nuevo:\n";
				SafeDialogEx(playerid,REG_SEX,DIALOG_STYLE_MSGBOX, "{C3FF23}Paso Nº 1", sex, "Hombre", "Mujer");
			}
		}
		case REG_ROLSELECC:
		{
		    if(response == 1)
		    {
		        Info[playerid][pOrigin] = 1;
		        SetPlayerVirtualWorld(playerid, 10);
		        SendClientMessageEx(playerid, COLOR_YELLOW2, "* El tren está llegando a la ciudad, mientras, tu cuenta es guardada en la base de datos.");
      			SetTimerEx("Reg_ShowDNI", 3000, false, "i", playerid);
				GameTextForPlayer(playerid, "~W~Guardando Cuenta...", 3000, 3);
				SetTimerEx("RegMsn", 8000, false, "i", playerid);
				SetPosEx(playerid, 1756.956420, -1942.293701, 12.640587, 0, 0, 0);
                SetPlayerFacingAngle(playerid, 190.077087);
                SetPlayerCameraPos(playerid, 1752.58655, -1946.26526, 15.17263);
                SetPlayerCameraLookAt(playerid, 1707.88684, -1946.26526, 15.17260);
			}
			else
			{
		        Info[playerid][pOrigin] = 2;
		        SetPlayerVirtualWorld(playerid, 10);
   				SendClientMessageEx(playerid, COLOR_YELLOW2, "* El autobus está cruzando por el pueblo, ahí te dejará de pasada mientras tu cuenta es guardada en la base de datos.");
      			SetTimerEx("Reg_ShowDNI", 3000, false, "i", playerid);
				GameTextForPlayer(playerid, "~W~Guardando Cuenta...", 3000, 3);
				SetTimerEx("RegMsn", 8000, false, "i", playerid);
				SetPosEx(playerid, 2522.931884, 41.747295, 26.335937, 0, 0, 0);
                SetPlayerFacingAngle(playerid, 90.033660);
                SetPlayerCameraPos(playerid, 2506.57666, 38.24023, 26.37430);
                SetPlayerCameraLookAt(playerid, 2476.35181, 47.92300, 26.37430);
			}
		}
		case RENT_VEH:
		{
		    if(response == 1)
		    {
		        new lights,alarm,doors,bonnet,boot,objective;
		    	new newcar = GetPlayerVehicleID(playerid);
				if(GetPlayerCash(playerid) < 1000)
				{
				  	SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para rentar un vehículo!");
					RemovePlayerFromVehicle(playerid);
     				SetVehicleToRespawn(newcar);
			    	new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
		    		TogglePlayerControllable(playerid,1);
		    	}
		    	else
		    	{
				    TogglePlayerControllable(playerid, 1);
                    SetVehicleParamsEx(newcar,1,lights,alarm,doors,bonnet,boot,objective);
		    		new VehRentado[1500];
		    		new hour, minuite, second;
				    new day, month, year;
				    gettime(hour, minuite, second);
				    getdate(day, month, year);
				    new RentaZona[MAX_ZONE_NAME];
				    GetPlayer3DZone(playerid, RentaZona, sizeof(RentaZona));
                    format(VehRentado, sizeof(VehRentado), "\t{FFFFFF}Información (Ad.) - Rentas de Vehículo\n{FCFF03}__________________________________________________\n\n{FCFF03}•{FFFFFF} Se te cobró: $1.000 (Hora)\n{FCFF03}•{FFFFFF} Tiempo de renta: 1 (Hora)\n{FCFF03}•{FFFFFF} Localización en la que rentó: %s\n{FCFF03}•{FFFFFF} Horario en el que rentó: %d:%d:%d\n{FCFF03}•{FFFFFF} Fecha en la que rentó: %d/%d/%d", RentaZona, hour, minuite, second, year, month, day);
					ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{FCFF03}• {FFFFFF}Rentas", VehRentado, "{FFFFFF}Cerrar", "");
					SendClientMessageEx(playerid,COLOR_GREY,"Si no utilizas más el vehículo, utiliza /dveh y se te pagará $800 por no dejar nuestros vehículos tirados.");
		    		Bought(playerid, 1000);
		    		RentTime[playerid] = 3600;
		    		IsaRent[playerid] = 1; HireKey[playerid] = newcar;
		    	}
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
		    	TogglePlayerControllable(playerid,1);
		    }
		}
	    case IPAD:
        {
		    if(response)
		    {
		    	new Float:X, Float:Y, Float:Z, Float:Distance = 1.0;
		        GetPlayerPos(playerid, X, Y, Z);
		        Ipadon[playerid] = 1;
		    	if(listitem == 0)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=119715", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Drum and Bass HD - {FF8000}Género: Drum and Bass");
				}
		    	if(listitem == 1)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=372869", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Reggaeton 24 Horas - {FF8000}Género: Reggeaton");
				}
		    	if(listitem == 2)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1698972", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF} Metal Time - {FF8000}Género: Rock & Metal");
				}
		    	if(listitem == 3)
		    	{
		    		StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=96567", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}FM - Rock Classic - {FF8000}Género: Rock");
				}
		    	if(listitem == 4)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=197109", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}La Mega FM - {FF8000}Género: Reggaeton");
				}
		    	if(listitem == 5)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181500", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Rap Gansta - {FF8000}Género: Rap");
				}
		    	if(listitem == 6)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=2560862", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Bachata Radio - {FF8000}Género: Bachata");
				}
		    	if(listitem == 7)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=228614", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Radio Mambo - {FF8000}Género: Salsa");
				}
		    	if(listitem == 8)
		    	{
		    		StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=85652", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Slap Back Radio - {FF8000}Género: Rap & Otros.");
				}
				if(listitem == 9)
		    	{
		    		StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=198255", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Maxima FM - {FF8000}Género: Public radio.");
				}
				if(listitem == 10)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
					SendClientMessageEx(playerid, COLOR_WHITE, "Apaste tu IpodMusic");
					Ipadon[playerid] = 0;
				}
			}
			else
			{
			    format(string, sizeof(string), "* %s guarda su Ipod.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
	    case DIALOG_SHOPFISH:
		{
		    if(response)
		    {
		    	if(listitem == 0)
		    	{
		    	    if(Carnada[playerid] > 20) return SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}PESCA:{FFFFFF} Ya has comprado 20 carnadas para pescar, gastalas.");
		    	    if(CheckMoney(playerid,15))
		    	    {
		    	        GivePlayerCash(playerid, -15);
		    	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[PESCA]:{FFFFFF} Compraste una lata de carnadas. (20)");
		    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    	        Carnada[playerid] += 20;
		    	    }
		    	}
		    	if(listitem == 1)
		    	{
		    	    if(Lineas[playerid] > 20 ) return SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[PESCA]:{FFFFFF} Ya has comprado 20 lineas para pescar, gastalas.");
		    	    if(CheckMoney(playerid,30))
		    	    {
		    	        GivePlayerCash(playerid, -30);
		    	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[PESCA]:{FFFFFF} Compraste 10 lineas para la caña de pesca.");
		    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    	        Lineas[playerid] += 10;
		    	    }
		    	}
		    }
		}
		case DIALOG_AMMU:
		{
		    if(response)
		    {
		        if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_FADE1, "{A2DC35}[INFO]:{FFFFFF} Tienes restricción de armas las 2 primeras horas de juego");
		        if(Info[playerid][pGunLic] == 0) return SendClientMessageEx(playerid, COLOR_FADE1, "Vendedor dice: Es imposible venderte armas, no tienes licencia para portarlas");
		    	if(listitem == 0)
		    	{
		    	    if(CheckMoney(playerid,25))
		    	    {
		    	        Bought(playerid, 25);
                		GivePlayerValidWeapon(playerid, 1);
                	}
		    	}
		    	if(listitem == 1)
		    	{
		    	    if(CheckMoney(playerid,50))
		    	    {
		    	        Bought(playerid, 50);
                		GivePlayerValidWeapon(playerid, 5);
                	}
		    	}
		    	if(listitem == 2)
		    	{
		    	    if(CheckMoney(playerid,5000))
		    	    {
		    	        Bought(playerid, 5000);
                		GivePlayerValidWeapon(playerid, 24);
                	}
		    	}
		    	if(listitem == 3)
		    	{
		    	    if(CheckMoney(playerid,25000))
		    	    {
		    	        Bought(playerid, 25000);
                		GivePlayerValidWeapon(playerid, 29);
                	}
		    	}
		    }
		}
		case DRINKLISTDIALOG:
		{
	    	if(response)
	    	{
				switch(listitem)
				{
			    	case 0:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Cerveza");
			    	    SetPVarInt(playerid, "DrinkPrice", 45);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_BEER);
			    	}
			    	case 1:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Vodka");
			    	    SetPVarInt(playerid, "DrinkPrice", 60);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    	}
			    	case 2:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Whiskey");
			    	    SetPVarInt(playerid, "DrinkPrice", 100);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    	}
			    	case 3:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Agua");
			    	    SetPVarInt(playerid, "DrinkPrice", 20);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    	}
			    	case 4:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Coca Cola");
			    	    SetPVarInt(playerid, "DrinkPrice", 50);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    	}
				}
				if(GetPlayerCash(playerid) >= GetPVarInt(playerid, "DrinkPrice"))
				{
				    new drinkname[32];
					GetPVarString(playerid, "DrinkName", drinkname, sizeof(drinkname));
				    new drinkprice = GetPVarInt(playerid, "DrinkPrice");
					new dspecialaction = GetPVarInt(playerid, "DrinkSpecialAction");
				    format(string, sizeof(string), "Has pedido al bartender una bebida (%s) por $%d.  ¿Quieres dejarle una propina?", drinkname, drinkprice);
				    SafeDialogEx(playerid, DRINKDIALOG, DIALOG_STYLE_MSGBOX, "Comprar Bebida", string, "Si", "No");
				    format(string, sizeof(string), "* %s le da a %s una %s.", GetPlayerNameEx(DrinkOffer[playerid]), GetPlayerNameEx(playerid), drinkname);
					ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "* Le diste a %s una %s. Ganaste $%d.", GetPlayerNameEx(playerid), drinkname, drinkprice );
					SendClientMessageEx(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
					GivePlayerCash(DrinkOffer[playerid], drinkprice);
					GivePlayerCash(playerid, -drinkprice);
					SetPlayerSpecialAction(playerid, dspecialaction);
					SetPVarInt(playerid, "DrinkCooledDown", 1);

				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* No tienes dinero para comprar está bebida!");
				}
		    }
		    else
		    {
		        DrinkOffer[playerid] = INVALID_PLAYER_ID;
		    }
		}
	 	case DRINKDIALOG:
		{
		    if(response)
		    {
				SafeDialogEx(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "{00F70C}Propina", "¿Cuánto le gustaría dejar de propina al Bartender por su servicio?", "OK", "Cancelar");
			}
			else
			{
			    DrinkOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		case TIPDIALOG:
		{
		    if(response)
		    {
				if(GetPlayerCash(playerid) >= strval(inputtext))
				{
				    if(strval(inputtext) < 0 || strval(inputtext) > 10000)
				    {
				    	return SafeDialogEx(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "{00F70C}Propina", "ERROR Sólo de: 0 - $10,000\n¿Cuánto le gustaría dejar de propina al Bartender por su servicio?", "OK", "Cancel");
				    }
				    format(string, sizeof(string), "** %s le dá a %s algo de propina por el servicio.", GetPlayerNameEx(playerid), GetPlayerNameEx(DrinkOffer[playerid]));
					ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "* %s te a dado $%d de propina por tu servicio.", GetPlayerNameEx(playerid), strval(inputtext));
					SendClientMessageEx(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
					GivePlayerCash(DrinkOffer[playerid], strval(inputtext));
					GivePlayerCash(playerid, -strval(inputtext));
					DrinkOffer[playerid] = INVALID_PLAYER_ID;
				}
			}
			else
			{
			    DrinkOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		case DIALOG_REG_TUT:
		{
		    if(response == 1)
		    {
          		ClearChatbox(playerid);
          		Test(playerid);
			}
		}
		case TEST_0:
		{
	    	if(response)
	    	{
	    	    new test1[500];
	    	    strcat(test1,"1)... Defenderme, ya que tengo derecho y también realizar el reporte correspondiente\n2)... Notificar a todos por /duda u otro canal OOC global\n");
	            strcat(test1,"3)... Charlar con el para que me deje de pegar, y si no entiende, solicito soporte\n4)... Ignorarlo, ya que no me interesa las personas tóxicas\n");
	            strcat(test1,"5)... Realizar un reporte, esperar respuestas y no responder a sus ataques");
	    		switch(listitem)
				{
	        		case 0:
	        		{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, "{C3FF23}2/10: Si un usuario me está atacando sin razón, tengo que...",test1, "Seleccionar", "");
					}
					case 1:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, "{C3FF23}2/10: Si un usuario me está atacando sin razón, tengo que...",test1, "Seleccionar", "");
					}
					case 2:
					{
                    	ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, "{C3FF23}2/10: Si un usuario me está atacando sin razón, tengo que...",test1, "Seleccionar", "");
					}
					case 3:
					{
                        TutError[playerid] +=1;
                    	ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, "{C3FF23}2/10: Si un usuario me está atacando sin razón, tengo que...",test1, "Seleccionar", "");
					}
					case 4:
					{
						TutError[playerid] +=1;
			            ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, "{C3FF23}2/10: Si un usuario me está atacando sin razón, tengo que...",test1, "Seleccionar", "");
					}
				}
			}
			else
			{
	 			new test0[500];
				strcat(test0,"{FFFFFF}1)... Preguntarle en donde queda alguna concesionaria o algún negocio\n2)... Ahorrarme el trabajo de reportar a un usuario, y decirle por /b\n");
	            strcat(test0,"3)... Seguir mi camino, ya que debo llamarlo con /soporte y esperar\n4)... Hablarle de todos los problemas que encontré en el servidor\n");
	            strcat(test0,"5)... Darle una invitación para que rolee un rato, o quizás más tarde");
                ShowPlayerDialog(playerid, TEST_0, DIALOG_STYLE_LIST, "{C3FF23}1/10: Si me cruzo a un administrador en servicio, debo...",test0, "Seleccionar", "");
			}
		}
        case TEST_1:
		{
	    	if(response)
	    	{
	    	    new test2[500];
	    	    strcat(test2,"{FFFFFF}1)... Taparme la cara con un rol previo y terminar este mismo hasta que muera por completo\n2)... Ver porque razón lo mataré, realizar el rol correspondiente y tomar imágenes ({00F70C}Correcta{FFFFFF})\n");
	            strcat(test2,"3)... Un equipamiento completo para poder realizar el plan\n4)... Solicitar a un administrador para supervisar el rol completo\n");
	            strcat(test2,"5)... Adjuntar toda la información necesaria de la persona para proceder su asesinato");
	    		switch(listitem)
				{
	        		case 0:
	        		{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, "{C3FF23}3/10: Si mato a un miembro de mi misma facción, necesito...",test2, "Seleccionar", "");
					}
					case 1:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, "{C3FF23}3/10: Si mato a un miembro de mi misma facción, necesito...",test2, "Seleccionar", "");
					}
					case 2:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, "{C3FF23}3/10: Si mato a un miembro de mi misma facción, necesito...",test2, "Seleccionar", "");
					}
					case 3:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, "{C3FF23}3/10: Si mato a un miembro de mi misma facción, necesito...",test2, "Seleccionar", "");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, "{C3FF23}3/10: Si mato a un miembro de mi misma facción, necesito...",test2, "Seleccionar", "");
					}
				}
			}
			else
			{
			    new test1[500];
	    	    strcat(test1,"1)... Defenderme, ya que tengo derecho y también realizar el reporte correspondiente\n2)... Notificar a todos por /duda u otro canal OOC global\n");
	            strcat(test1,"3)... Charlar con el para que me deje de pegar, y si no entiende, solicito soporte\n4)... Ignorarlo, ya que no me interesa las personas tóxicas\n");
	            strcat(test1,"5)... Realizar un reporte, esperar respuestas y no responder a sus ataques");
				return ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, "{C3FF23}2/10: Si un usuario me está atacando sin razón, tengo que...",test1, "Seleccionar", "");
			}
		}
        case TEST_2:
		{
	    	if(response)
	    	{
	     		new test3[500];
	    	    strcat(test3,"{FFFFFF}1)... El canal /b con algún usuari, ayuadnte o administrador, solo si no están en rol\n2)... El comando /re con mi duda, ya que esta le debe llegar al equipo administrativo\n");
	            strcat(test3,"3)... /Soporte para llamar a un administrador y cuando esté, se la doy con detalles\n4)... El canal /duda o leer la sección de /ayuda, ahí tendré mayor información ({00F70C}Correcta{FFFFFF})\n");
	            strcat(test3,"5)... Cualquier canal OOC, siempre y cuando no interrumpa a otros usuarios");
	    		switch(listitem)
				{
	        		case 0:
	        		{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, "{C3FF23}4/10: Si tengo dudas sobre las funciones del gamemode, debo utilizar...",test3, "Seleccionar", "");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, "{C3FF23}4/10: Si tengo dudas sobre las funciones del gamemode, debo utilizar...",test3, "Seleccionar", "");
					}
					case 2:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, "{C3FF23}4/10: Si tengo dudas sobre las funciones del gamemode, debo utilizar...",test3, "Seleccionar", "");
					}
					case 3:
					{
                        TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, "{C3FF23}4/10: Si tengo dudas sobre las funciones del gamemode, debo utilizar...",test3, "Seleccionar", "");
					}
					case 4:
					{
					    TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, "{C3FF23}4/10: Si tengo dudas sobre las funciones del gamemode, debo utilizar...",test3, "Seleccionar", "");
					}
				}
			}
			else
			{
			    new test2[500];
	    	    strcat(test2,"{FFFFFF}1)... Taparme la cara con un rol previo y terminar este mismo hasta que muera por completo\n2)... Ver porque razón lo mataré, realizar el rol correspondiente y tomar imágenes ({00F70C}Correcta{FFFFFF})\n");
	            strcat(test2,"3)... Un equipamiento completo para poder realizar el plan\n4)... Solicitar a un administrador para supervisar el rol completo\n");
	            strcat(test2,"5)... Adjuntar toda la información necesaria de la persona para proceder su asesinato");
				return ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, "{C3FF23}3/10: Si mato a un miembro de mi misma facción, necesito...",test2, "Seleccionar", "");
			}
		}
        case TEST_3:
		{
	    	if(response)
	    	{
	    	    new test4[500];
	    	    strcat(test4,"{FFFFFF}1)... No rolear el entorno, ya sea las personas que no se ven, vehículos, ambiente, horario, etc\n2)... Realizar acciones que en la vida real serían imposibles de hacer\n");
	            strcat(test4,"3)... Forzar las acciones de otra persona sin que esta no la haya echo\n4)... Insultar a las personas por canales OOC\n");
	            strcat(test4,"5)... Tomar decisiones el cual no valora la vida del personaje");
	    		switch(listitem)
				{
	        		case 0:
	        		{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, "{C3FF23}5/10: El concepto power gaming significa...",test4, "Seleccionar", "");
					}
					case 1:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, "{C3FF23}5/10: El concepto power gaming significa...",test4, "Seleccionar", "");
					}
					case 2:
					{
                        TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, "{C3FF23}5/10: El concepto power gaming significa...",test4, "Seleccionar", "");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, "{C3FF23}5/10: El concepto power gaming significa...",test4, "Seleccionar", "");
					}
					case 4:
					{
				    	TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, "{C3FF23}5/10: El concepto power gaming significa...",test4, "Seleccionar", "");
					}
				}
			}
			else
			{
			    new test3[500];
	    	    strcat(test3,"{FFFFFF}1)... El canal /b con algún usuario, ayudante o administrador, solo si no están en rol\n2)... El comando /re con mi duda, ya que esta le debe llegar al equipo administrativo\n");
	            strcat(test3,"3)... /Soporte para llamar a un administrador y cuando esté, se la doy con detalles\n4)... El canal /duda o leer la sección de /ayuda, ahí tendré mayor información ({00F70C}Correcta{FFFFFF})\n");
	            strcat(test3,"5)... Cualquier canal OOC, siempre y cuando no interrumpa a otros usuarios");
				return ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, "{C3FF23}4/10: Si tengo dudas sobre las funciones del gamemode, debo utilizar...",test3, "Seleccionar", "");
			}
		}
        case TEST_4:
		{
	    	if(response)
	    	{
	     		new test5[500];
	    	    strcat(test5,"{FFFFFF}1)... Comienzo a disminuir la velocidad, luego, esperar las indicaciones que me darán estos mismos\n2)... Veo como se forman, y luego si puedo me largo de lugar por una razón válida\n");
	            strcat(test5,"3)... Roleo todos mis papeles y pido las razones del porque me detuvieron\n4)... Puedo tomar cualquier decisión, siempre y cuando no comenta ninguna infracción RolePlay ({00F70C}Correcta{FFFFFF})\n");
	            strcat(test5,"5)... Intento de llamar a mis amigos para que me ayuden a escapar");
	    		switch(listitem)
				{
	        		case 0:
	        		{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, "{C3FF23}6/10: Si conduzco y la policía me detiene...",test5, "Seleccionar", "");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, "{C3FF23}6/10: Si conduzco y la policía me detiene...",test5, "Seleccionar", "");
					}
					case 2:
					{
					    TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, "{C3FF23}6/10: Si conduzco y la policía me detiene...",test5, "Seleccionar", "");
					}
					case 3:
					{
				    	TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, "{C3FF23}6/10: Si conduzco y la policía me detiene...",test5, "Seleccionar", "");
					}
					case 4:
					{
				    	TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, "{C3FF23}6/10: Si conduzco y la policía me detiene...",test5, "Seleccionar", "");
					}

				}
			}
			else
			{
			    new test4[500];
	    	    strcat(test4,"{FFFFFF}1)... No rolear el entorno, ya sea las personas que no se ven, vehículos, ambiente, horario, etc\n2)... Realizar acciones que en la vida real serían imposibles de hacer\n");
	            strcat(test4,"3)... Forzar las acciones de otra persona sin que esta no la haya echo\n4)... Insultar a las personas por canales OOC\n");
	            strcat(test4,"5)... Tomar decisiones el cual no valora la vida del personaje");
				return ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, "{C3FF23}5/10: El concepto power gaming significa...",test4, "Seleccionar", "");
			}
		}
        case TEST_5:
		{
	    	if(response)
	    	{
	    	    new test6[500];
	    	    strcat(test6,"{FFFFFF}1)... Los mato a los 5 de un tiro en la frente, siempre y cuando respete el rol realizado\n2)... Realizo un reporte como corresponde, ya que no son los dueños del lugar\n");
	            strcat(test6,"3)... Sigo mi camino, y si me quieren robar o algo, sigo rol como corresponde ({00F70C}Correcta{FFFFFF})\n4)... Me preparo, ya me van a robar entre los 5, y yo puedo defenderme\n");
	            strcat(test6,"5)... Llamo a la policía informando la situación, con fines de que vengan a detenerlos a los 5");
	    		switch(listitem)
				{
	        		case 0:
	        		{
	        		    TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, "{C3FF23}7/10: Si entro a un barrio bajo y hay 5 sujetos armados...",test6, "Seleccionar", "");
					}
					case 1:
					{
						TutError[playerid] +=1;
                        ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, "{C3FF23}7/10: Si entro a un barrio bajo y hay 5 sujetos armados...",test6, "Seleccionar", "");
					}
					case 2:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, "{C3FF23}7/10: Si entro a un barrio bajo y hay 5 sujetos armados...",test6, "Seleccionar", "");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, "{C3FF23}7/10: Si entro a un barrio bajo y hay 5 sujetos armados...",test6, "Seleccionar", "");
					}
					case 4:
					{
				    	TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, "{C3FF23}7/10: Si entro a un barrio bajo y hay 5 sujetos armados...",test6, "Seleccionar", "");
					}
				}
			}
			else
			{
			    new test5[500];
	    	    strcat(test5,"{FFFFFF}1)... Comienzo a disminuir la velocidad, luego, esperar las indicaciones que me darán estos mismos\n2)... Veo como se forman, y luego si puedo me largo de lugar por una razón válida\n");
	            strcat(test5,"3)... Roleo todos mis papeles y pido las razones del porque me detuvieron\n4)... Puedo tomar cualquier decisión, siempre y cuando no comenta ninguna infracción RolePlay ({00F70C}Correcta{FFFFFF})\n");
	            strcat(test5,"5)... Intento de llamar a mis amigos para que me ayuden a escapar");
				return ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, "{C3FF23}6/10: Si conduzco y la policía me detiene...",test5, "Seleccionar", "");
			}
		}
        case TEST_6:
		{
	    	if(response)
	    	{
	    	    new test7[500];
	    	    strcat(test7,"{FFFFFF}1)... Debo tomar imágenes y enviarle a la página oficial, ya que lo verá el CEO\n2)... Intento de no meterme, ya que ellos saben sus errores y no me interesa\n");
	            strcat(test7,"3)... Me pongo en contacto con el fundador por mensajes privados\n4)... Publico las imágenes en el grupo para que los usuarios opinen del caso\n");
	            strcat(test7,"5)... Saco las evidencias necesarias y realizo el reporte en foro ({00F70C}Correcta{FFFFFF})");
	    		switch(listitem)
				{
	        		case 0:
	        		{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, "{C3FF23}8/10: Si veo a un moderador/administrador abusando...",test7, "Seleccionar", "");
					}
					case 1:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, "{C3FF23}8/10: Si veo a un moderador/administrador abusando...",test7, "Seleccionar", "");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, "{C3FF23}8/10: Si veo a un moderador/administrador abusando...",test7, "Seleccionar", "");
					}
					case 3:
					{
				  		TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, "{C3FF23}8/10: Si veo a un moderador/administrador abusando...",test7, "Seleccionar", "");
					}
					case 4:
					{
				    	TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, "{C3FF23}8/10: Si veo a un moderador/administrador abusando...",test7, "Seleccionar", "");
					}
				}
			}
			else
			{
   				new test6[500];
	    	    strcat(test6,"{FFFFFF}1)... Los mato a los 5 de un tiro en la frente, siempre y cuando respete el rol realizado\n2)... Realizo un reporte como corresponde, ya que no son los dueños del lugar\n");
	            strcat(test6,"3)... Sigo mi camino, y si me quieren robar o algo, sigo rol como corresponde ({00F70C}Correcta{FFFFFF})\n4)... Me preparo, ya me van a robar entre los 5, y yo puedo defenderme\n");
	            strcat(test6,"5)... Llamo a la policía informando la situación, con fines de que vengan a detenerlos a los 5");
				return ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, "{C3FF23}7/10: Si entro a un barrio bajo y hay 5 sujetos armados...",test6, "Seleccionar", "");
			}
		}
        case TEST_7:
		{
	    	if(response)
	    	{
	    	    new test8[500];
	    	    strcat(test8,"{FFFFFF}1)... Realizar saltos con la bicicleta a metros muy altos sin que mi personaje lo interprete\n2)... Matar a más de 5 personas seguidas, lo cual hace referencia al DM en masa\n");
	            strcat(test8,"3)... Cuando el PJ está cansado y comienzas a saltar para llegar más rápido a un lugar\n4)... Abusar de un comando dañado que beneficiarse y no notificar al equipo de desarrollo\n");
	            strcat(test8,"5)... Matar o golpear a un usuario que recién spawnea, además, también hace referencia al DM");
	    		switch(listitem)
				{
	        		case 0:
	        		{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, "{C3FF23}9/10: El concepto BB abreviado, significa...",test8, "Seleccionar", "");
					}
					case 1:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, "{C3FF23}9/10: El concepto BB abreviado, significa...",test8, "Seleccionar", "");
					}
					case 2:
					{
					    TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, "{C3FF23}9/10: El concepto BB abreviado, significa...",test8, "Seleccionar", "");
					}
					case 3:
					{
				    	TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, "{C3FF23}9/10: El concepto BB abreviado, significa...",test8, "Seleccionar", "");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, "{C3FF23}9/10: El concepto BB abreviado, significa...",test8, "Seleccionar", "");
					}
				}
			}
			else
			{
			    new test7[500];
	    	    strcat(test7,"{FFFFFF}1)... Debo tomar imágenes y enviarle a la página oficial, ya que lo verá el CEO\n2)... Intento de no meterme, ya que ellos saben sus errores y no me interesa\n");
	            strcat(test7,"3)... Me pongo en contacto con el fundador por mensajes privados\n4)... Publico las imágenes en el grupo para que los usuarios opinen del caso\n");
	            strcat(test7,"5)... Saco las evidencias necesarias y realizo el reporte en foro ({00F70C}Correcta{FFFFFF})");
				return ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, "{C3FF23}8/10: Si veo a un moderador/administrador abusando...",test7, "Seleccionar", "");
			}
		}
        case TEST_8:
		{
	    	if(response)
	    	{
	    	    new test9[500];
	    	    strcat(test9,"{FFFFFF}1)... Ponerme en contacto con el equipo administrativo para recibir mis estadísticas iniciales\n2)... Dialogar con algún usuario para conocer más sobre la comunidad e intentar hacer amigos\n");
	            strcat(test9,"3)... Registrarme en el foro para poder jugar en el servidor y ver contenidos\n4)... Comenzar a crear la vida de mi personaje, si necesito información utilizo /ayuda o /duda ({00F70C}Correcta{FFFFFF})\n");
	            strcat(test9,"5)... Reportar algún problema en el tutorial, ya sea la ortografía u otro error encontrado");
	    		switch(listitem)
				{
	        		case 0:
	        		{
						ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, "{C3FF23}10/10: Una vez al pasar la prueba, debo...",test9, "Seleccionar", "");
					}
					case 1:
					{
						TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, "{C3FF23}10/10: Una vez al pasar la prueba, debo...",test9, "Seleccionar", "");
					}
					case 2:
					{
				    	TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, "{C3FF23}10/10: Una vez al pasar la prueba, debo...",test9, "Seleccionar", "");
					}
					case 3:
					{
					    TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, "{C3FF23}10/10: Una vez al pasar la prueba, debo...",test9, "Seleccionar", "");
					}
					case 4:
					{
				  		TutError[playerid] +=1;
						ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, "{C3FF23}10/10: Una vez al pasar la prueba, debo...",test9, "Seleccionar", "");
					}
				}
			}
			else
			{
			    new test8[500];
	    	    strcat(test8,"{FFFFFF}1)... Realizar saltos con la bicicleta a metros muy altos sin que mi personaje lo interprete\n2)... Matar a más de 5 personas seguidas, lo cual hace referencia al DM en masa\n");
	            strcat(test8,"3)... Cuando el PJ está cansado y comienzas a saltar para llegar más rápido a un lugar\n4)... Abusar de un comando dañado que beneficiarse y no notificar al equipo de desarrollo\n");
	            strcat(test8,"5)... Matar o golpear a un usuario que recién spawnea, además, también hace referencia al DM");
				return ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, "{C3FF23}9/10: El concepto BB abreviado, significa...",test8, "Seleccionar", "");
			}
		}
        case TEST_9:
		{
	        if(response)
			{
	    		switch(listitem)
				{
	        	case 0:
	        	{
                    TutError[playerid] +=1;
	        		if(TutError[playerid] >= 2)
					{
	    	 		    TutError[playerid] = 0;
	    	 		    new rt[] = "{FFFFFF}No has podido pasar nuestra prueba para ingresar a la comunidad, tendrás más posibilidades de\nrepetir esta misma las veces que quieras, pero ten en cuenta leer bien las respuestas que\ndarás, ya que al fallar una sola se rechaza automáticamente.\n\n{FF0000}¿Qué opción seleccionará?:";
	                    ShowPlayerDialog(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,"{FF0000}• FALLASTE", rt,"Repetir","Rechazar");
	                    Info[playerid][pInTest] += 1;
	                    OnPlayerSavedStats(playerid);
					   	return 1;
					}
					else
					{
                        Info[playerid][pReg] = 1;
						Tutorial_Outside(playerid);
					}
				}
				case 1:
				{
				    TutError[playerid] +=1;
	        		if(TutError[playerid] >= 2)
					{
	    	 		    TutError[playerid] = 0;
	    	 		    new rt[] = "{FFFFFF}No has podido pasar nuestra prueba para ingresar a la comunidad, tendrás más posibilidades de\nrepetir esta misma las veces que quieras, pero ten en cuenta leer bien las respuestas que\ndarás, ya que al fallar una sola se rechaza automáticamente.\n\n{FF0000}¿Qué opción seleccionará?:";
	                    ShowPlayerDialog(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,"{FF0000}• FALLASTE", rt,"Repetir","Rechazar");
	                    Info[playerid][pInTest] += 1;
	                    OnPlayerSavedStats(playerid);
					   	return 1;
					}
					else
					{
                        Info[playerid][pReg] = 1;
	                    Tutorial_Outside(playerid);
					}
				}
				case 2:
				{
                    TutError[playerid] +=1;
	        		if(TutError[playerid] >= 2)
					{
	    	 		    TutError[playerid] = 0;
	    	 		    new rt[] = "{FFFFFF}No has podido pasar nuestra prueba para ingresar a la comunidad, tendrás más posibilidades de\nrepetir esta misma las veces que quieras, pero ten en cuenta leer bien las respuestas que\ndarás, ya que al fallar una sola se rechaza automáticamente.\n\n{FF0000}¿Qué opción seleccionará?:";
	                    ShowPlayerDialog(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,"{FF0000}• FALLASTE", rt,"Repetir","Rechazar");
	                    Info[playerid][pInTest] += 1;
	                    OnPlayerSavedStats(playerid);
					   	return 1;
					}
					else
					{
                        Info[playerid][pReg] = 1;
	                    Tutorial_Outside(playerid);
					}
				}
				case 3:
				{
	        		if(TutError[playerid] >= 2)
					{
	    	 		    TutError[playerid] = 0;
	    	 		    new rt[] = "{FFFFFF}No has podido pasar nuestra prueba para ingresar a la comunidad, tendrás más posibilidades de\nrepetir esta misma las veces que quieras, pero ten en cuenta leer bien las respuestas que\ndarás, ya que al fallar una sola se rechaza automáticamente.\n\n{FF0000}¿Qué opción seleccionará?:";
	                    ShowPlayerDialog(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,"{FF0000}• FALLASTE", rt,"Repetir","Rechazar");
	                    OnPlayerSavedStats(playerid);
					   	return 1;
					}
					else
					{
                        Info[playerid][pReg] = 1;
	                    Tutorial_Outside(playerid);
					}
				}
				case 4:
				{
	        		if(TutError[playerid] >= 2)
					{
	    	 		    new rt[] = "{FFFFFF}No has podido pasar nuestra prueba para ingresar a la comunidad, tendrás más posibilidades de\nrepetir esta misma las veces que quieras, pero ten en cuenta leer bien las respuestas que\ndarás, ya que al fallar una sola se rechaza automáticamente.\n\n{FF0000}¿Qué opción seleccionará?:";
	                    ShowPlayerDialog(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,"{FF0000}• FALLASTE", rt,"Repetir","Rechazar");
	                    Info[playerid][pInTest] += 1;
	                    OnPlayerSavedStats(playerid);
					   	return 1;
					}
					else
					{
                        Info[playerid][pReg] = 1;
	                    Tutorial_Outside(playerid);
					}
				}
				}

			}
			else
			{
				new test9[500];
  				strcat(test9,"{FFFFFF}1)... Ponerme en contacto con el equipo administrativo para recibir mis stats\n2)... Dialogar con algún usuario para conocer mejor a ellos y a la comunidad\n");
	            strcat(test9,"3)... Registrarme en el foro para poder jugar en el servidor y ver contenidos\n4)... Comenzar a crear la vida de mi personaje, si necesito información utilizo /ayuda o /duda ({00F70C}Correcta{FFFFFF})\n");
	            strcat(test9,"5)... Reportar algún problema en el tutorial, ya sea la ortografía u otro");
      			return ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, "{C3FF23}10/10: Una vez al pasar la prueba, debo...",test9, "Seleccionar", "");
			}
		}
		case REPORTSMENU:
		{
		    if(response)
		    {
		        if(CancelReport[playerid] == listitem) return 1;
				new reportid = ListItemReportId[playerid][listitem];
		        if(Reports[reportid][BeingUsed] == 0)
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Ese reporte ya fue revisado!");
				    return 1;
				}
				if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} El que reportó se ha desconectado !");
				    Reports[reportid][ReportFrom] = 999;
				    Reports[reportid][BeingUsed] = 0;
				    return 1;
				}
				format(string, sizeof(string), "{00F70C}¡Reporte Aceptado!:{FFFFFF} %s aceptó el reporte del usuario %s. [ID: %i - RID: %i]", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], reportid);
				ABroadCast(COLOR_VERDE, string, 2);
				if(Info[playerid][pAdminZC] == 6000)
				{
				    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Un administrador tomó carta del asunto, estará vigilando al reportado, recuerde tener imágenes por si se solicitan.");
				}
				else
				{
				    format(string, sizeof(string), "{FFFFFF}El administrador {FFFF00}%s{FFFFFF} aceptó tu reporte, use {FFFF00}/Reply{FFFFFF} y explique el problema. [Tiempo: 60 Seg.]", GetPlayerNameEx(playerid));
				    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
				}
				Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
				Reports[reportid][CheckingReport] = playerid;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
	    	}
	    	else
	    	{
	    	    if(CancelReport[playerid] == listitem) return 1;
	    	    new reportid = ListItemReportId[playerid][listitem];
	    	    if(Reports[reportid][BeingUsed] == 0)
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Ese reporta ya fue revisado!");
				    return 1;
				}
				if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} El que reportó se ha desconectado, recuerda tomar SS.");
				    Reports[reportid][ReportFrom] = 999;
				    Reports[reportid][BeingUsed] = 0;
				    return 1;
				}
				format(string, sizeof(string), "{FFFF00}[Administración]:{FF0000} %s rechazó el reporte de %s (RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
				ABroadCast(COLOR_GENERAL, string, 2);
				if(Info[playerid][pAdminZC] == 6000)
				{
				    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Un administrador a marcado tu reporte como inválido. Usa y lee muy bien {2EDFFF}/reglasparareportar{FFFFFF} antes de reportar.");
				}
				else
				{
       				format(string, sizeof(string), "La administración marcó tu reporte como inválido. Usa y lee muy bien {2EDFFF}/reglasparareportar{FFFFFF} antes de reportar.", GetPlayerNameEx(playerid));
				    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
				}
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
				new reportdialog[1000], itemid = 0;
				for(new i = 0; i < MAX_REPORTS; i++)
				{
				    if(Reports[i][BeingUsed] == 1 && itemid < 40)
				    {
				        ListItemReportId[playerid][itemid] = i;
				        itemid++;
				        format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | RID:%i | Reporte: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire]);
						format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
					}
				}
				CancelReport[playerid] = itemid;
				format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
				format(reportdialog, sizeof(reportdialog), "%sSalir", reportdialog);
				SafeDialogEx(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "{2EDFFF}Lista de Reportes", reportdialog, "Aceptar", "{FF0000}Rechazar");
	    	}
		}
	    case DIALOG_REG_MSN:
    	{
    	    if(response == 1)
    	    {
				new rt[] = "{FF0000}En la certificación habrá algunas que te marcará la respuesta!";
		        SafeDialogEx(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,"{FF0000}Fin del Registro", rt,"{FFFFFF}Iniciar","");
    	    }
	        else
	        {
	    		SetTimerEx("FreezePlayer", 1000, false, "i", playerid);
		        ClearChatbox(playerid);
				gNewbie[playerid]=1; gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
				SetPosEx(playerid, 1730.2910,-2335.4670,13.5540, 0, 0, 0);
                SetPlayerFacingAngle(playerid, 0.0000);
                SetPlayerCameraPos(playerid, 1730.2790,-2326.4793,13.5540);
                SetPlayerCameraLookAt(playerid, 1730.2790,-2335.4670,13.5540);
                SetPlayerVirtualWorld(playerid, 10);
				Info[playerid][pAge] = 30; Info[playerid][pSex] = 1;
				new sex[]= "{F0F0F0}• ¿Qué sexo es tu personaje?:\n";
				SafeDialogEx(playerid,REG_SEX,DIALOG_STYLE_MSGBOX, "{C3FF23}Paso Nº 1", sex, "Masculino", "Mujer");
	        }
 		}
		case DLOGIN:
		{
        	if(response == 1)
        	{
				if(udb_hash(inputtext) == Info[playerid][pKey])
				{
					InsideMainMenu[playerid] = false;
					INI_ParseFile(UserPath(playerid), "LoadUser_data", .bExtra = true, .extra = playerid);
					PlayerLogin(playerid);
				}
				else
				{
	        		new ip[32];
	        		new titlestring[64];
		        	GetPlayerIp(playerid, ip, 32);
					format(titlestring, sizeof(titlestring), "{2EDFFF}%s", GetPlayerNameEx(playerid));
					format(string, sizeof(string), "{FFFFFF}• Ingrese su clave correcta por favor:", ip);
		        	SafeDialogEx(playerid,DLOGIN,DIALOG_STYLE_INPUT ,titlestring,string,"Entrar","Salir");
		        	SetPlayerVirtualWorld(playerid, 20);
                	return 1;
				}
        	}
        	else
			{
			    SendClientMessageEx(playerid, COLOR_ROJO, "[ATENCIÓN]:{FFFFFF} Tu conexión se perdio por no cumplir las normas de: {2EDFFF}Absolute Titanium RolePlay");
            	Kick(playerid);
        	}
        	return 1;
    	}
		case DREGISTER:
    	{
        	if (response == 1)
        	{
            	if(strlen(inputtext) > 12)
            	{
		        	new ip[32];
		        	new titlestring[64];
		        	GetPlayerIp(playerid, ip, 32);
		        	format(titlestring, sizeof(titlestring), "{A2DC35}! {FFFFFF}%s", GetPlayerNameEx(playerid));
		        	format(string, sizeof(string), "{FFFFFF}Contraseña con un máximo de 12 carácteres!\n\n%s Ingresa una contraseña valida para registrarte en el servidor:\n\n{FF0000}Contraseña:", GetPlayerNameEx(playerid));
		        	SafeDialogEx(playerid,DREGISTER,DIALOG_STYLE_PASSWORD ,titlestring,string,"Registrar","Salir");
	            	SetPlayerVirtualWorld(playerid, 20);
                	return 1;
            	}
            	if(isnull(inputtext))
            	{
		        	new ip[32];
		        	new titlestring[64];
		        	GetPlayerIp(playerid, ip, 32);
					format(titlestring, sizeof(titlestring), "{A2DC35}Registro: {FFFFFF}%s", GetPlayerNameEx(playerid));
					format(string, sizeof(string), "Bienvenido a AT-RP\nIngresa una contraseña para registrarte en el servidor.\n\n{FF0000}Contraseña.", ip);
					SafeDialogEx(playerid,DREGISTER,DIALOG_STYLE_INPUT,titlestring,string,"Registrar","Salir");
                	return 1;
            	}
            	InsideMainMenu[playerid] = false;
				OnPlayerRegister(playerid,inputtext);
            	return 1;
        	}
        	else
        	{
        	    SendClientMessageEx(playerid, COLOR_GENERAL, "Fuiste expulsado del servidor automáticamente.");
            	Kick(playerid);
        	}
			return 1;
    	}
     case CARSPAWN:
    	{
         if (response == 1)
        	{
        		if(PlayerVehicleInfo[playerid][listitem][pvImpounded] == 1) return SendClientMessageEx(playerid,COLOR_WHITE,"El auto que intenta spawnear está embargado.");
		    	if(PlayerVehicleInfo[playerid][listitem][pvImpounded] >= 2) PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
	        	if(PlayerVehicleInfo[playerid][listitem][pvModelId] != 0 && PlayerVehicleInfo[playerid][listitem][pvImpounded] == 0 && PlayerVehicleInfo[playerid][listitem][pvSpawned]== 0)
	        	{
	        	    if(carsforplayer[playerid] == 20) return SendClientMessageEx(playerid,COLOR_WHITE,"* Sólo puedes tener 20 coches spawneados");
	            	PlayerCars++;
	            	carsforplayer[playerid]++;
					new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
					PlayerVehicleInfo[playerid][listitem][pvId] = carcreated;
					VehicleFuel[carcreated] = PlayerVehicleInfo[playerid][listitem][pvFuel];
					SetVehicleHealth(carcreated, PlayerVehicleInfo[playerid][listitem][pvHealth]);
					SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playerid][listitem][pvVW]);
					PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
					SendClientMessageEx(playerid,COLOR_WHITE,"Vehiculo spawneado correctamente, en la última posición que lo estacionaste. (/gps)");
					if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1)
					LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);
                    LoadPlayerVehicleMods(playerid, listitem);
					return 1;

				}
	        	else if(PlayerVehicleInfo[playerid][listitem][pvSpawned] == 1)
	        	{
				    new playername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, playername, sizeof(playername));
         			new Float:health;
            		GetVehicleHealth(PlayerVehicleInfo[playerid][listitem][pvId], health);
            		if(health < 500) return SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}[ATENCION]:{FFFFFF} El vehiculo está muy dañado para ser guardado.");
                    if(IsVehicleBusy(PlayerVehicleInfo[playerid][listitem][pvId])) return SendClientMessageEx(playerid, COLOR_GREY, " El vehiculo está ocupado por otra persona y no puede ser guardado.");
					if(PlayerVehicleInfo[playerid][listitem][pvImpounded] >= 2) PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
					if(PlayerVehicleInfo[playerid][listitem][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][listitem][pvImpounded] == 0 && PlayerVehicleInfo[playerid][listitem][pvSpawned]== 1)
					{
		            	PlayerCars--;
		            	carsforplayer[playerid]--;
            			if(LockStatus[PlayerVehicleInfo[playerid][listitem][pvId]] != 0) LockStatus[PlayerVehicleInfo[playerid][listitem][pvId]] = 0;
           		 		UpdatePlayerVehicleMods(playerid, listitem);
						DestroyVehicle(PlayerVehicleInfo[playerid][listitem][pvId]);
						VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = 200;
						PlayerVehicleInfo[playerid][listitem][pvId] = INVALID_PLAYER_VEHICLE_ID;
						PlayerVehicleInfo[playerid][listitem][pvSpawned] = 0;
						SendClientMessageEx(playerid,COLOR_WHITE,"Vehiculo fue guardado correctamente.");
						if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    				{
	    	    			Info[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	    	    			Info[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    					PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	    				}
	    			}
	            }
			}
	    }
	}
	//*********************
	if(dialogid == 999)
 		         {
    		          if(response)
      		        {
 			   		        SendClientMessage(playerid,COLOR_AT, "{2EDFFF}[Indicación]:{FFFFFF} Ve en busca de un arbol y comienza a talar este mismo!");
  				          SetPVarInt(playerid,"PlayerStartDrova",1);
    		          }
       	    }
    	if(dialogid == 962)
    	{
    	    if(response)
    	    {
    	    	strmid(BizzInfo[QuitExtortion[playerid]][bExtortion], "Nadie", 0, strlen("Nadie"), 32);
    	    	format(string, sizeof(string), "Has dejado de ser el extorcionista del negocio de {2EDFFF}%s", GetPlayerNameEx(ExtortionID[playerid]));
    	        Message(playerid, COLOR_WHITE, string);
             format(string, sizeof(string), "* %s ha aceptado dejar de ser el extorcionista de tu negocio.", GetPlayerNameEx(playerid));
    	        Message(ExtortionID[playerid], COLOR_WHITE, string);
				OnBizzTextdrawUpdate(QuitExtortion[playerid]);
				QuitExtortion[playerid] = 999;
				ExtortionID[playerid] = 999;
				UpdateBizz();
    	        return 1;

    	    }
    	    else
    	    {
    	        format(string, sizeof(string), "* %s no ha aceptado dejar de ser el extorcionista de tu negocio.", GetPlayerNameEx(playerid));
    	        Message(ExtortionID[playerid], COLOR_WHITE, string);
    	        Message(playerid, COLOR_WHITE, "* Has rechazado una peticion.");
    	    }
    	}
    if(dialogid == 578)
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
					case 0: { ShowPlayerDialog(playerid, BAR_MENU_TAPAS, DIALOG_STYLE_LIST, "{2EDFFF}Platos Combinados y Más", "Huevos con Chorizo (20$)\nJamón Ibérico (30$)\nSopa de Marisco (25$)\nMacarrones a la Bolognesa (15$)\nEnsalada (10$)", "Pedir", "Atrás"); return 1; }
					case 1: { ShowPlayerDialog(playerid, BAR_MENU_BEBIDAS, DIALOG_STYLE_LIST, "{2EDFFF}Bebidas", "Cerveza (45$)\nFernet (120$)\nChampagne (6$)\nCoca Cola (50$)\nAgua (1$)", "Pedir", "Atrás"); return 1; }
				}
			}
		}
		if(dialogid == 579)
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
		            case 0:
		            {
        	     		new Float:Health;
					 	GetPlayerHealth(playerid, Health);
		        	    if(Health < 101)	{	SetHP(playerid, Health+20); 	}
         				format(string, sizeof(string), "* %s come un plato de huevos con chorizos.", GetPlayerNameEx(playerid));
		            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	Bought(playerid, 20);
		            	CheckBizz(playerid, 20);
		            	Info[playerid][pSuci] += 7;
		            	UpdateBizz();
		            	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
		            	if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		            	    Info[playerid][pSuci] += 59;
						}
		            }
		            case 1:
	    	        {
	        	        new Float:Health;
	            	    GetPlayerHealth(playerid, Health);
	                	if(Health < 101)	{	SetHP(playerid, Health+30); 	}
	                	format(string, sizeof(string), "* %s come un plato de jamón ibérico.", GetPlayerNameEx(playerid));
	                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	Bought(playerid, 30);
	                	CheckBizz(playerid, 30);
	                	Info[playerid][pSuci] += 9;
	                	UpdateBizz();
	                	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	                	if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		            	    Info[playerid][pSuci] += 58;
						}
	            	}
		            case 2:
		            {
	    	            new Float:Health;
	        	        GetPlayerHealth(playerid, Health);
	            	    if(Health < 101)	{	SetHP(playerid, Health+25); 	}
	                	format(string, sizeof(string), "* %s come un plato de sopa con marisco.", GetPlayerNameEx(playerid));
	                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Bought(playerid, 25);
						CheckBizz(playerid, 25);
						Info[playerid][pSuci] += 3;
						UpdateBizz();
	                	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	                	if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		            	    Info[playerid][pSuci] += 54;
						}
		            }
		            case 3:
	    	        {
	        	        new Float:Health;
	            	    GetPlayerHealth(playerid, Health);
	                	if(Health < 101)	{	SetHP(playerid, Health+15); 	}
		                format(string, sizeof(string), "* %s come un plato de macarrones a la bolognesa.", GetPlayerNameEx(playerid));
		                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    	            Bought(playerid, 15);
	    	            CheckBizz(playerid, 15);
	    	            Info[playerid][pSuci] += 4;
	    	            UpdateBizz();
	        	        ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	            	    if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		            	    Info[playerid][pSuci] += 55;
						}
		            }
		            case 4:
	    	        {
	        	        new Float:Health;
	            	    GetPlayerHealth(playerid, Health);
	                	if(Health < 101)	{	SetHP(playerid, Health+10); 	}
		                format(string, sizeof(string), "* %s come un plato de ensalada.", GetPlayerNameEx(playerid));
		                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    	            Bought(playerid, 10);
	    	            CheckBizz(playerid, 10);
	    	            Info[playerid][pSuci] += 3;
	    	            UpdateBizz();
	        	        ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	            	    if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		            	    Info[playerid][pSuci] += 58;
						}
		            }
			 	}
			}
		}
		if(dialogid == 580)
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
		            case 0:
		            {
	    	            new Float:Health;
	        	        GetPlayerHealth(playerid, Health);
	            	    if(Health < 101)	{	SetHP(playerid, Health+3); 	}
	                	format(string, sizeof(string), "* %s se bebe una cerveza.", GetPlayerNameEx(playerid));
		                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                Bought(playerid, 45);
		                CheckBizz(playerid, 45);
		                Info[playerid][pSuci] += 7;
		                Info[playerid][pAlcohol] += 5;
		                UpdateBizz();
	    	            PlayerDrunk[playerid] += 2;
	        	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
	            	    if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita toda la cerveza consumida.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    PlayerDrunk[playerid]  += 1;
		                	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			                ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			                OnPlayerSavedStats(playerid);
						}
	    	        }
	        	    case 1:
	            	{
		                new Float:Health;
		                GetPlayerHealth(playerid, Health);
	    	            if(Health < 101)	{	SetHP(playerid, Health+5); 	}
	        	        format(string, sizeof(string), "* %s se bebe una copa de fernet.", GetPlayerNameEx(playerid));
	            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	Bought(playerid, 120);
	                	CheckBizz(playerid, 120);
	                	Info[playerid][pSuci] += 6;
	                	Info[playerid][pAlcohol] += 8;
	                	UpdateBizz();
                  		PlayerDrunk[playerid] += 1;
		                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
	    	            if(PlayerDrunk[playerid] > 10)
		    	        {
			    	        SetHP(playerid, 20);
	               			format(string, sizeof(string), "* %s vomita todo el fernet consumido.", GetPlayerNameEx(playerid));
		                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                PlayerDrunk[playerid]  += 1;
		    	            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		        	        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		        	        Info[playerid][pSuci] += 53;
						}
	            	}
		            case 2:
		            {
	    	            new Float:Health;
	        	        GetPlayerHealth(playerid, Health);
	            	    if(Health < 101)	{	SetHP(playerid, Health+6); 	}
	                	format(string, sizeof(string), "* %s se bebe una copa de champagne.", GetPlayerNameEx(playerid));
		                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                Bought(playerid, 6);
		                CheckBizz(playerid, 6);
		                Info[playerid][pSuci] += 6;
		                Info[playerid][pAlcohol] += 9;
		                UpdateBizz();
	    	            PlayerDrunk[playerid] += 3;
	        	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
	            	    if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita todo el champagne consumido.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    PlayerDrunk[playerid]  += 1;
		                	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			                ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			                Info[playerid][pSuci] += 59;
						}
	    	        }
	        	    case 3:
	            	{
		                new Float:Health;
		                GetPlayerHealth(playerid, Health);
	    	            if(Health < 101)	{	SetHP(playerid, Health+2); 	}
	        	        format(string, sizeof(string), "* %s se bebe una coca-cola.", GetPlayerNameEx(playerid));
	            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	Bought(playerid, 2);
	                	CheckBizz(playerid, 2);
	                	Info[playerid][pSuci] += 3;
	                	UpdateBizz();
		                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		                if(PlayerDrunk[playerid] > 10)
			            {
				            SetHP(playerid, 20);
	            	   		format(string, sizeof(string), "* %s vomita toda la coca-cola consumida.", GetPlayerNameEx(playerid));
		            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                	PlayerDrunk[playerid]  += 1;
			                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			                ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			                Info[playerid][pSuci] += 58;
						}
	        	    }
	            	case 4:
	            	{
		                new Float:Health;
		                GetPlayerHealth(playerid, Health);
	    	            if(Health < 101)	{	SetHP(playerid, Health+1); 	}
	        	        format(string, sizeof(string), "* %s se bebe una botella pequeña de agua.", GetPlayerNameEx(playerid));
	            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	Bought(playerid, 1);
	                	CheckBizz(playerid, 1);
	                	UpdateBizz();
	                	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
	                	if(PlayerDrunk[playerid] > 0)
		            	{
			                PlayerDrunk[playerid]  -= 1;
						}
	    	        }
		 		}
			}
		}
if(dialogid == 964)
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 1 || strlen(inputtext) > 32 || strfind(inputtext, "_", true) != -1)
		        {
		            ShowPlayerDialog(playerid,DNI_MENU,DIALOG_STYLE_INPUT,"{B9C9CF}DNI Falso (ERROR)","{FFFFFF}Coloque el Nombre y Apellido sin ''_'':","Aceptar","Salir");
          		}
          		else{
          		    strmid(DNIName[playerid], inputtext, 0, strlen(inputtext), 32);
          			format(string, sizeof(string), "{FFFFFF}¿Estás de acuerdo en utilizar %s por $10.000?:", DNIName[playerid]);
					ShowPlayerDialog(playerid,DNI_CONFIRM,DIALOG_STYLE_MSGBOX,"{B9C9CF}DNI Falso", string, "Aceptar", "Cancelar");
				}
			}
  		}
  		if(dialogid == 965)
  		{
  		    if(response)
  		    {
				strmid(Info[playerid][pDNIName], DNIName[playerid], 0, strlen(DNIName[playerid]), 32);
				new dni = 100000 + random(899999);  Info[playerid][pDNIFalse] = dni;
				format(string, sizeof(string), "* Ahora tienes un documento de identidad falsa, señor/a %s.", Info[playerid][pDNIName]);
				Message(playerid, COLOR_FADE1, string);
				GivePlayerCash(playerid, -10000);
  		    }
  		}
  		switch(dialogid)
    {
        case 5876:
        {
            if(!response)
            {
                    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha Cancelado");
                    return 1;
            }

            switch(listitem)
            {
                case 0:
				{
				    ShowPlayerDialog(playerid, Rojo, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 1:
				{
				    ShowPlayerDialog(playerid, Azul, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, Verde, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 3:
				{
					ShowPlayerDialog(playerid, Amarillo, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 4:
				{
					ShowPlayerDialog(playerid, Cyan, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 5:
				{
					ShowPlayerDialog(playerid, Rosado, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 6:
				{
					ShowPlayerDialog(playerid, Blanco, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 7:
				{
					ShowPlayerDialog(playerid, Negro, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
			}
		}
	}
	if(dialogid == Rojo) // Text color Rojo
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
                new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{FF0000}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Rojo, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Verde) // Text color Verde
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
            	new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Verde, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Azul) // Text color Azul
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{00FF00}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Azul, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Amarillo) // Text color Amarillo
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{FFFF00}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Amarillo, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Cyan) // Text color Cyan
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{00FFFF}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Cyan, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Rosado) // Text color Rosado
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{FF00FF}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Rosado, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Blanco) // Text color Blanco
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{FFFFFF}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Blanco, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Negro) // Text color Negro
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{0F0F0F}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Negro, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
 	return 1;
}

IsVehicleBusy(vehicleid) // The_Chaoz ¿?¿?¿
{
    for(new i; i<GetMaxPlayers(); i++)
    	if(IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid))
    		return 1;
    return 0;
}

function BroadCast(color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pLevel] >= 1 && AdminChat[i] == 0)
		{
		    SendClientMessageEx(i, color, string);
		}
	}
	return 1;
}

function SendVIPMessage(color, string[])
{
	foreach(Player, i)
	{
		if((Info[i][pVIP] >= 1 || Info[i][pAdminZC] >= 2) && Info[i][pVIPCHAT] >= 1)
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

stock ShopTechBroadCast(color,string[])
{
	foreach(Player, i)
	{
		if (Info[i][pShopTech] == 1 || Info[i][pAdminZC] >= 7)
		{
			SendClientMessageEx(i, color, string);
		}
	}
	return 1;
}

stock ABroadCast(color,string[],level)
{
	foreach(Player, i)
	{
		if (Info[i][pAdminZC] >= level && AdminChat[i] == 0)
		{
			SendClientMessageEx(i, color, string);
			//printf("%s", string);
		}
	}
	return 1;
}

stock CBroadCast(color,string[],level)
{
	foreach(Player, i)
	{
		if (Info[i][pHelper] >= level)
		{
			SendClientMessageEx(i, color, string);
			//printf("%s", string);
		}
	}
	return 1;
}

function SendDutyAdvisorMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pHelper] >= 1 && GetPVarInt(i, "AdvisorDuty") == 1)
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

function SendAdvisorMessage(color, string[])
{
	foreach(Player, i)
	{
			if((Info[i][pHelper] >= 1) && advisorchat[i])
			{
				SendClientMessageEx(i, color, string);
			}
			else
			{
			    if(Info[i][pAdminZC] >= 1 && advisorchat[i])
			    {
			        SendClientMessageEx(i, color, string);
			    }
			}
	}
}

function OOCOff(color, string[])
{
	foreach(Player, i)
	{
		if(!gOoc[i])
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

function OOCNews(color,string[])
{
	foreach(Player, i)
	{
		if(!gNews[i])
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

function SendRadioMessage(member, color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pMember] == member)
		{
			if(RadioOn[i])
            {
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

function SendNewFamilyMessage(family, color, string[])
{
	foreach(Player, i)
	{
			if(Info[i][pFMember] == family)
			{
				if(!gFam[i])
				{
					SendClientMessageEx(i, color, string);
				}
			}
	}
}

function SendFamilyMessage(family, color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pMember] == family || Info[i][pLeader] == family)
		{
			if(!gFam[i])
			{
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

stock SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(Info[i][pAdminZC] >= 1 && AdminChat[i] == 0)
		    {
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

stock SendAD(from, advert[], number)
{
    new bool:breakingloop = false, newid = -1;

	for(new i=0;i<MAX_AD;i++)
	{
		if(!breakingloop)
		{
			if(ADInfo[i][aActive] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != -1)
    {
        strmid(ADInfo[newid][aAdvert], advert, 0, strlen(advert), 128);
        strmid(ADInfo[newid][aResume], advert, 0, strlen(advert), 15);
        ADInfo[newid][aOther] = from;
        ADInfo[newid][aActive] = 1;
        ADInfo[newid][aNumber] = number;
        Info[from][pAdverID] = newid;
        new PlayerName[MAX_PLAYER_NAME];
     	GetPlayerName(from, PlayerName, sizeof(PlayerName));
     	strmid(ADInfo[newid][aContact], PlayerName, 0, strlen(PlayerName), MAX_PLAYER_NAME);
    }
    else
    {
		SendClientMessageEx(from, COLOR_WHITE,"* Tienes que esperar, el espacio de anuncios está lleno.");
    }
    return 1;
}

stock ClearAd(id)
{
	strmid(ADInfo[id][aAdvert], "Nada", 0, 4, 4);
	strmid(ADInfo[id][aResume], "Nada", 0, 4, 4);
	Info[ADInfo[id][aOther]][pAdverID] = -1;
    ADInfo[id][aOther] = 0;
    ADInfo[id][aActive] = 0;
    ADInfo[id][aNumber] = 0;
}

//*************************************************************************CMD'S INICIO*************************************************************************
    zcmd(servicios, playerid, params[]) // Nuevo formato de solicitar servicios.
	{
        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "- Para ver nuestras actualizaciones, usted debe loguear!");
        if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Para solicitar un servicio, debes tener un teléfono!");
		{
  			new solicitarservicios[] = "{FF80FF}- {FFFFFF} Médico\n{FF80FF}- {FFFFFF}Mecánico\n{FF80FF}- {FFFFFF}Taxi";
            SafeDialogEx(playerid,SOLICITAR_SERVICIOS,DIALOG_STYLE_LIST,"{FF80FF}• Servicios",solicitarservicios,"{FFFFFF}Solicitar","{FFFFFF}Cancelar");
		}
		return 1;
	}
	zcmd(reglas, playerid, params[]) // Informaciones sobre las actualizaciones mejoradas sin necesidad de colocar tantos comd's!
	{
        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "- Para ver nuestras actualizaciones, usted debe loguear!");
		{
  			new reglas[] = "{FF0000}» {FFFFFF}General\n{FF0000}» {FFFFFF}Reportes\n{FF0000}» {FFFFFF}Anuncios\n{FF0000}» {FFFFFF}Dudas\n{FF0000}» {FFFFFF}Secuestros\n{FF0000}» {FFFFFF}PK's";
            SafeDialogEx(playerid,VER_REGLAS,DIALOG_STYLE_LIST,"{FF0000}Reglas de AT-RP",reglas,"{FFFFFF}Ver","{FFFFFF}Salir");
		}
		return 1;
	}
	zcmd(actualizaciones, playerid, params[]) // Informaciones sobre las actualizaciones mejoradas sin necesidad de colocar tantos comd's!
	{
        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "- Para ver nuestras actualizaciones, usted debe loguear!");
		{
  			new veractualizaciones[] = "{FFFFFF}- 16/08/2018\n- 22/08/2020\t\t\t\t{00F70C}NUEVO";
            SafeDialogEx(playerid,ACTUALIZACIONES_ATRP,DIALOG_STYLE_LIST,"{446E8C}Actualizaciones",veractualizaciones,"{FFFFFF}Ver","{FFFFFF}Salir");
		}
		return 1;
	}
	zcmd(infovip, playerid, params[]) // Todos los VIP's con detalles y precios!
	{
        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "- Para saber nuestros precios VIP usted deberá loguear!");
		{
  			new informacionvip[] = "{FFFFFF}- VIP P-S\t\tBeneficios\n{FFFFFF}- VIP Nivel 1\t\tBronce\n{FFFFFF}- VIP Nivel 2\t\tPlata\n{FFFFFF}- VIP Nivel 3\t\tGold\n{FFFFFF}- VIP Nivel 4\t\tPlatino\n{FFFFFF}- VIP Nivel 5\t\tModerador";
            SafeDialogEx(playerid,INFO_VIP,DIALOG_STYLE_LIST,"{FF00B4}• Beneficios y Precios VIP's!",informacionvip,"{FFFFFF}Ver","{FFFFFF}Salir");
		}
		return 1;
	}
	zcmd(redes, playerid, params[]) // Link's de todas las redes sociales!
	{
        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "- Es importante loguear para ver nuestras redes sociales!");
		{
  			new redes[] = "{BEFFB3}Sitio Web\n{BEFFB3}Foro\n{BEFFB3}Página de Facebook\n{BEFFB3}Grupo de Facebook\n{BEFFB3}TeamSpeak 3";
            SafeDialogEx(playerid,REDES_SOCIALES,DIALOG_STYLE_LIST,"{72FF59}• Síguenos!",redes,"{FFFFFF}Ver","{FFFFFF}Salir");
		}
		return 1;
	}
	zcmd(buscartrabajo, playerid, params[])
	{
        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "- Para ver el listado de trabajo debe loguear.");
        if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Para ver los trabajos disponibles, debes tener un teléfono!");
		{
            SafeDialogEx(playerid, JOBFINDMENU, DIALOG_STYLE_LIST, "{2EDFFF}Búsquedas de Trabajos","Bartender\nPizzero {FF0000}[En Mantenimiento]\nRepartidor\nVendedor de Moviles\nTaxista\nJardinero\nLeñador\nFabricante de Armas\nCamionero\nTraficante de Drogas\nChofer de Autobuses\nGranjero\nVendedor de Chalecos\nArtesano\nHeladero\nConductor de Trenes\nBasurero", "Ok", "Cancelar");
		}
		return 1;
	}
	zcmd(entrarpd, playerid, params[]) // Ingresa al interior de Policía de Los Ángeles!
	{
        if(!IsPlayerInRangeOfPoint(playerid,2.0, 1555.382568, -1675.680419, 16.195301)) return SendClientMessage(playerid,COLOR_RED,"No te encuentras en la puerta exterior del departamento de policía.");
		{
  			SetPlayerPos(playerid, 246.326385, 107.422668, 1003.218750);
  			SetPlayerFacingAngle(playerid, 0.256408);
  			SetPlayerInterior(playerid, 10);
		}
		return 1;
	}
	zcmd(salirpd, playerid, params[]) // Sale al exterior de Policía de Los Ángeles!
	{
        if(!IsPlayerInRangeOfPoint(playerid,2.0, 246.326385, 107.422668, 1003.218750)) return SendClientMessage(playerid,COLOR_RED,"No te encuentras en la puerta interior del departamento de policía.");
		{
  			SetPlayerPos(playerid, 1555.382568, -1675.680419, 16.195301);
  			SetPlayerFacingAngle(playerid, 89.656661);
  			SetPlayerInterior(playerid, 0);
		}
		return 1;
	}
	zcmd(dnifalso, playerid, params[])
    {
        if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/dnifalso (usuario id){FFFFFF} para mostrar tu documento falso.");
        if(!IsPlayerConnected(params[0]))  return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
        if(Info[playerid][pDNIFalse] == 0)    return Message(playerid, COLOR_GRAD2, "No posees un DNI falso.");
        if(ProxDetectorS(8.0, playerid, params[0]))
        {
            new string[90];
            ShowDNIFalse(playerid, params[0]);
            format(string, sizeof(string), "* %s le muestra su documento de identificación a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        } else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
        return 1;
    }

zcmd(subsidio, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(SubsiOn == 0)
		{
			new string[1000];
    		format(string, sizeof(string), "! {FFFFFF}Aún te falta {FF0000}%d{FFFFFF} minutos para solicitar el subsidio.",SubsiLeft);
    		return SendClientMessageEx(playerid, COLOR_ROJO, string);
    	}
		else
		{
  			if(Info[playerid][YaCobre] == 0) return SubsiEx(playerid);
		    else
			{
				new string[1000];
    			format(string, sizeof(string), "! {FFFFFF}Aún te falta {FF0000}%d{FFFFFF} minutos para solicitar el subsidio.",SubsiLeft);
    			return SendClientMessageEx(playerid, COLOR_ROJO, string);
		    }
		}
	}
	return 1;
}
    zcmd(setsubsi, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if(!sscanf(params, "i", params[0]))
        {
            new string[128];
            SubsiLeft = params[0];
            format(string, sizeof(string), "(Subsidio): %s estableció los minutos del subsidio a %d.", GetPlayerNameEx(playerid), SubsiLeft);
            ABroadCast(COLOR_GENERAL, string, 2);
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/setsubsi (minutos){FFFFFF} para cambiar el tiempo de los subsidios.");
        return 1;
    }
   	zcmd(dropa, playerid, params[])
    {
    if(!IsAtjob(playerid)) return Message(playerid, COLOR_WHITE, "* No estas en el lugar donde te uniste al trabajo!");
    SetPlayerSkin(playerid, Info[playerid][pgskin]);
    return 1;
    }
	zcmd(panum, playerid, params[])
    {
        if(Team_LSTV(playerid))
		{
        SafeDialogEx(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "{00F70C}Anuncios LSTV","Nota: Tamaño del texto sólo será máximo 128 Letras.", "Enviar", "Atrás");
		}
        return 1;
    }
    zcmd(gcomprar, playerid, params[])
    {
    	if(!IsAtGasT(playerid))
		{
		SendClientMessageEx(playerid, COLOR_WHITE, "* No estás en una gasolinera !");
		return 1;
		}
        ShowPlayerDialog(playerid, GASMENU, DIALOG_STYLE_LIST, "{A2DC35}Gasolinera", "Lata Gas.\t\t$200\nBolsa Patatas\t\t$30\nRefresco\t\t$20\nCigarros\t\t$40\nEncendedor\t\t$20", "Comprar", "Cancelar");
        return 1;
    }
    zcmd(bgas, playerid, params[])
    {
        	new sendername[MAX_PLAYER_NAME];
       		new idcar = GetPlayerVehicleID(playerid),string[128];
	    	if(bgas[playerid] == 1)
	    	{
		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
		       		format(string, sizeof(string), "* %s llena el tanque de su vehículo con el bidón. (5 litros)", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					VehicleFuel[idcar] = 5;
					bgas[playerid] = 0;
    			}
			}
  			return 1;
    }
    zcmd(quitardni, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 3) return Message(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/quitardni (usuario id){FFFFFF} para retirarle el documento.");
        if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_WHITE, "Jugador no conectado.");
        if(Info[params[0]][pDNIFalse] != 0)
        {
            new string[128];
	        Info[params[0]][pDNIFalse] = 0;
    	    strmid(Info[params[0]][pDNIName], "Ninguno", 0, strlen("Ninguno"), 12);
            format(string, sizeof(string), "* Le has quitado el DNI Falso a {5ABAFF}%s{FFFFFF}.", GetPlayerNameEx(params[0]));
            Message(playerid, COLOR_WHITE, string);
        } else Message(playerid, COLOR_WHITE, "Esa persona no tiene un DNI Falso.");
        return 1;
    }
    zcmd(comprardni, playerid, params[])
    {
    if(GetPlayerMoney(playerid) < 15000) return SendClientMessage(playerid,COLOR_RED,"No tienes suficiente dinero.");
    if(IsPlayerInRangeOfPoint(playerid, 5.0,1189.772216,-822.351684,1083.414428))
	{
    	if(Info[playerid][pDNIFalse] > 0) return Message(playerid, COLOR_WHITE, "Ya posees un DNI Falso.");
   		ShowPlayerDialog(playerid,DNI_MENU,DIALOG_STYLE_INPUT,"{B9C9CF}DNI Falso","{FFFFFF}Ingrese el Nombre y el Apellido para crear su DNI por $10.000:","Aceptar","Salir");
   		}
   		return 1;
    }
	 zcmd(rendirse, playerid, params[])
 	{
 	    if(PlayerDrunk[playerid] > 9) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando ahora.");
 	    if(GetPVarInt(playerid, "IsFrozen") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto porque estás congelado.");
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPVarInt(playerid, "Injured") == 0)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
  	  		return 1;
		}
		else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando ahora.");
	}
	zcmd(irnegocio, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
 		if(Info[playerid][pAdminZC] < 8) return Message(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
   		if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_WHITE, "Utiliza: /irnegocio (Negocio ID)");
		if(params[0] < 0 || params[0] >= MAX_BIZZ) return Message(playerid, COLOR_ROJO, "!{FFFFFF} ID de negocio errónea.");
			SetPlayerPos(playerid,BizzInfo[params[0]][bEntrancex],BizzInfo[params[0]][bEntrancey],BizzInfo[params[0]][bEntrancez]);
			Message(playerid, COLOR_WHITE, "Teleportado al negocio seleccionado.");
			return 1;
	}
	zcmd(comer, playerid, params[]){
        if(!IsAtBarr(playerid)) return Message(playerid, COLOR_ROJO, "!{FFFFFF} No estas en un lugar donde Comer.");
        if(GetPlayerMoney(playerid) < 0) return Message(playerid, COLOR_FADE2, "Bartender dice: Vete a otro lugar a comer gratis.");
	    if(IsPlayerConnected(playerid)){
		    ShowPlayerDialog(playerid, BAR_MENU, DIALOG_STYLE_LIST, "{2EDFFF}Menú del día", "Platos combinados y tapas\nBebidas", "Ver", "Salir");
	    } else Message(playerid, COLOR_WHITE, " Usted no esta conectado.");
	    return 1;
	}
	zcmd(staffvnegocio, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 8) return Message(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        if(!sscanf(params, "i", params[0]))
        {
        	new string[128];
            if(params[0] >= MAX_BIZZ || params[0] < 0) return Message(playerid, COLOR_WHITE, "ID incorrecto.");
            else{
				SellBizz(params[0]);
            	format(string, sizeof(string), "Negocio {FF0000}%d{FFFFFF} vendido.", params[0]);
				Message(playerid, COLOR_WHITE, string);
			}
        } else Message(playerid, COLOR_WHITE, "Utiliza: /staffvnegocio (Negocio ID)");
        return 1;
   	}
   	CMD:desbugmanos(playerid, params[]) {
			YaRobo[playerid] = 0;
		    DejarRobo(playerid);
			SendClientMessageEx(playerid, COLOR_GENERAL, "[SERVER] {FFFFFF}Manos Desbugeadas.");
			return 1;
}
CMD:desbug(playerid, params[])
{
    if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
	if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando en el Paintball!");
	if(GetPlayerInterior(playerid)!=0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes hacer esto en un interior.");
	if(IsPlayerConnected(playerid))
	{
	  SetPlayerInterior(playerid,0);
	  SetPlayerVirtualWorld(playerid, 0);
	    Info[playerid][pInt] = 0;
	    Info[playerid][pVW] = 0;
	    SendClientMessageEx(playerid, COLOR_ROJO, "Desbugeado: {FFFFFF}Esperamos que haya obtenido una solución, en casos de seguir con el problema use: /Reportarbug");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, " Usted no esta logeado.");
    return 1;
// Comandos para colocar efectos de sonidos mediante link.mp3
}
zcmd(bocinatren, playerid, params[])
{
    new string[128];
    new vehicleid = GetPlayerVehicleID(playerid);
    new Float:X, Float:Y, Float:Z, Float:Distance = 99.0;
    GetPlayerPos(playerid, X, Y, Z);
    if(!(Tren_Vehicle(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
	    SendClientMessageEx(playerid,COLOR_WHITE,"Debes estar en un tren para tocar la bocina!");
	    return 1;
	}
    format(string, sizeof(string), "* %s toca la bocina del tren!", GetPlayerNameEx(playerid));
    ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  	PlayAudioStreamForPlayer(playerid, "http://sfp-rp.net/samp-sound-effects/bocinatren.mp3", Distance); // Actualizar el link cuando el efecto de sonido sea subido!
    return 1;
}
    zcmd(editarnegocio, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		new string[128], item[32];
		if(Info[playerid][pAdminZC] < 10) return Message(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
	 	if(!sscanf(params, "s[64]i", item, params[1]))
	 	{
	   		for(new b = 0; b < sizeof(BizzInfo); b++)
	   		{
		     	if(PlayerToPoint(3, playerid,BizzInfo[b][bEntrancex], BizzInfo[b][bEntrancey], BizzInfo[b][bEntrancez]))
		 		{
     				if(params[1] > 0)
		 			{
                        if(strcmp(item,"nivel",true) == 0)
						{
      					BizzInfo[b][bLevelNeeded] = params[1];
                        }
                        else if(strcmp(item,"precio",true) == 0)
						{
      					BizzInfo[b][bBuyPrice] = params[1];
                        }
                        else if(strcmp(item,"ganancias",true) == 0)
						{
      					BizzInfo[b][bTill] = params[1];
                        }
                        OnBizzTextdrawUpdate(b);
        	        	format(string, sizeof(string), "Negocio: ID %d | Item: %s | Valor: %d", b, item, params[1]);
        	        	Message(playerid, COLOR_GRAD2, string);
      	        	}
  	        	}
            }
	    }
		else
		{
			Message(playerid, COLOR_WHITE, "Nombres para Negocios: Nivel, Precio, Ganancias");
 	 	}
		return 1;
	}
    zcmd(negocioname, playerid, params[]){
   	    new string[128];
   	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 10) return Message(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
		for(new b = 0; b < sizeof(BizzInfo); b++){
		    if(PlayerToPoint(3.0, playerid, BizzInfo[b][bEntrancex], BizzInfo[b][bEntrancey], BizzInfo[b][bEntrancez]))
		    {
				if(!sscanf(params,"s[32]",params[0]))
				{
					strmid(BizzInfo[b][bName], params[0], 0, strlen(params[0]), 255);
					format(string, sizeof(string), "NegocioID: %d | Nuevo Nombre: %s", b, params[0]);
					Message(playerid, COLOR_GRAD2, string);
					OnBizzTextdrawUpdate(b);
				} else Message(playerid, COLOR_WHITE, "Utiliza: /negocioname (Nuevo Nombre)");
			}
   	    }
   	    return 1;
   }
	zcmd(comprarnegocio, playerid, params[])
	{
	    for(new b = 0; b < sizeof(BizzInfo); b++)
		{
		    new string[128];
		    if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntrancex], BizzInfo[b][bEntrancey], BizzInfo[b][bEntrancez]))
			{
		        if(BizzInfo[b][bOwned] == 1) return Message(playerid, COLOR_WHITE, "Este negocio ya tiene dueño.");
		        if(Info[playerid][pPbizzkey] != 9999) return Message(playerid, COLOR_WHITE, "Ya posees un negocio.");
		        if(Info[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
		        {
		            format(string, sizeof(string), "Para comprar éste negocio debes tener nivel: {2EDFFF}%d", BizzInfo[b][bLevelNeeded]);
					Message(playerid, COLOR_WHITE, string);
					return 1;
				}
				if(GetPlayerMoney(playerid) >= BizzInfo[b][bBuyPrice])
				{
     				Info[playerid][pPbizzkey] = b;
					BizzInfo[b][bOwned] = 1;
					strmid(BizzInfo[b][bOwner], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), 255);
					Bought(playerid, BizzInfo[b][bBuyPrice]);
					Message(playerid, COLOR_WHITE, "Felicidades, has adquirido este negocio. Utiliza /ayuda negocio");
					OnBizzTextdrawUpdate(b);
					UpdateBizz();
					return 1;
				} else Message(playerid, COLOR_WHITE, "No tienes los fondos necesarios para adquirir este negocio.");
			}
		}
		return 1;
	}
	zcmd(vendernegocio, playerid, params[])
	{
	    new string[128], bid = Info[playerid][pPbizzkey];
	    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
	    if(PlayerToPoint(3.0, playerid, BizzInfo[bid][bEntrancex],BizzInfo[bid][bEntrancey],BizzInfo[bid][bEntrancez]))
		{
			if(Info[playerid][pPbizzkey] != 9999 && strcmp(GetPlayerNameEx(playerid), BizzInfo[bid][bOwner], true) == 0)
			{
	            new money = BizzInfo[bid][bBuyPrice]+BizzInfo[bid][bTill]+BizzInfo[bid][bTillEx];
				Earn(playerid, money);
				format(string, sizeof(string), "Has vendido tu negocio. Has recuperado {A2DC35}%d$",money);
				Message(playerid, COLOR_WHITE, string);
				SellBizz(bid);
				Info[playerid][pPbizzkey] = 9999;
			} else Message(playerid, COLOR_WHITE, "Este negocio no está a tu nombre.");
		} else Message(playerid, COLOR_WHITE, "Debes estar cerca de tu negocio para vernderlo.");
	    return 1;
	}
	zcmd(sganancias, playerid, params[])
	{
	    new string[128], bid = Info[playerid][pPbizzkey];
	    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
	    if(PlayerToPoint(3.0, playerid, BizzInfo[bid][bEntrancex],BizzInfo[bid][bEntrancey],BizzInfo[bid][bEntrancez]))
		{
		    if(!sscanf(params,"d",params[0])){
				if(params[0] < 1 || params[0] > BizzInfo[bid][bTill]) return Message(playerid, COLOR_WHITE, "La cantidad que usted ingresó es: {2EDFFF}Incorrecta");
		    	if(Info[playerid][pPbizzkey] != 9999 && strcmp(GetPlayerNameEx(playerid), BizzInfo[bid][bOwner], true) == 0)
				{

			    	Earn(playerid, params[0]);
					format(string, sizeof(string), "Usted retiró {2EDFFF}$%d{7D997D} de la caja registradora.", params[0]);
			    	Message(playerid, COLOR_WHITE, string);
	            	BizzInfo[bid][bTill] -= params[0];
	        	} else Message(playerid, COLOR_ROJO, "!{FFFFFF} Este negocio no está a tu nombre.");
       		} else Message(playerid, COLOR_WHITE, "{FFFFFF}Para retirar el dinero de su negocio, use: {2EDFFF}/Sganacias [Cantidad]");
  		} else Message(playerid, COLOR_WHITE, "{FF0000}[ATENCIÓN]: {FFFFFF}Debes estar cerca de tu negocio para retirar dinero de la caja.");
		return 1;
  	}
  	zcmd(infonegocio, playerid, params[])
  	{
  	    new string[128];
  	    for(new b = 0; b < sizeof(BizzInfo); b++)
		{
		    if(PlayerToPoint(3.0, playerid, BizzInfo[b][bEntrancex], BizzInfo[b][bEntrancey], BizzInfo[b][bEntrancez]))
			{
		        if(BizzInfo[b][bOwned] == 0)
                {
                    Message(playerid, COLOR_AT, "{2EDFFF}________________________________________________________________________________________");
					Message(playerid, 0xAAAAFFFF, "¡Negocio en Venta!");
		        	format(string, sizeof(string), "{2EDFFF}%s{FFFFFF}", BizzInfo[b][bName]);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "{7D997D}Valor: {2EDFFF}%d{7D997D}   -   Nivel: {2EDFFF}%d{7D997D}", BizzInfo[b][bBuyPrice],BizzInfo[b][bLevelNeeded]);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "{7D997D}Negocio ID: {2EDFFF}%d{7D997D}", b);
			        Message(playerid, COLOR_WHITE, string);
			        Message(playerid, COLOR_WHITE, "{FFFFFF}- ¿Estás interesado en comprarlo?, Usa: {2EDFFF}/Comprarnegocio{FFFFFF}");
			        Message(playerid, COLOR_AT, "{2EDFFF}________________________________________________________________________________________");
			        return 1;
				}
				if(Info[playerid][pPbizzkey] == b)
    			{
    			    Message(playerid, COLOR_AT, "{2EDFFF}________________________________________________________________________________________");
				    Message(playerid, 0xAAAAFFFF, "{7D997D}¡Negocio con Propetario!");
        			format(string, sizeof(string), "{7D997D}Nombre: {2EDFFF}%s", BizzInfo[b][bName]);
		        	Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "{7D997D}Valor: {2EDFFF}%d{7D997D}   -   Nivel: {2EDFFF}%d", BizzInfo[b][bBuyPrice],BizzInfo[b][bLevelNeeded]);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "{7D997D}Ganancias: {2EDFFF}%d", BizzInfo[b][bTill]);
			        Message(playerid, COLOR_WHITE, string);
			        Message(playerid, COLOR_AT, "{2EDFFF}________________________________________________________________________________________");
			        return 1;
				} else Message(playerid, COLOR_WHITE, "No hay información disponible para este negocio.");
			}
		}
		return 1;
	}
	zcmd(extorcion, playerid, params[]){
	    new string[128], bkey = Info[playerid][pPbizzkey];
	    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
		if(!sscanf(params,"u",params[0])){
		    if(PlayerToPoint(4.0, playerid, BizzInfo[bkey][bEntrancex], BizzInfo[bkey][bEntrancey], BizzInfo[bkey][bEntrancez])){
		        if(IsPlayerConnected(params[0])){
		            if(params[0] != playerid){
		       	 		if(ProxDetectorS(5.0, playerid, params[0])){
							if(strcmp("Nadie", BizzInfo[bkey][bExtortion], true) == 0){
            	    			strmid(BizzInfo[bkey][bExtortion], GetPlayerNameEx(params[0]), 0, strlen(GetPlayerNameEx(params[0])), 255);
								format(string, sizeof(string), "Desde ahora {FF4FD4}%s {FFFFFF}será el extorcionista de tu negocio.", GetPlayerNameEx(params[0]));
								Message(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "{FF4FD4}%s{FFFFFF} te ha puesto como extorcionista de su negocio, ahora puedes usar {FF4FD4}/recaudar{FFFFFF}.", GetPlayerNameEx(playerid));
								Message(params[0], COLOR_WHITE, string);
								OnBizzTextdrawUpdate(bkey);
								UpdateBizz();
				        	} else Message(playerid, COLOR_WHITE, "* Tu negocio ya tiene un extorcionista, primero usa /qextorcion.");
                        } else Message(playerid, COLOR_WHITE, "Jugador muy lejos.");
				   	} else Message(playerid, COLOR_WHITE, "No te puedes poner como extorcionista tu mismo.");
  				} else Message(playerid, COLOR_WHITE, "Jugador no conectado.");
			} else Message(playerid, COLOR_WHITE, "Debes estar cerca de tu negocio.");
    	} else Message(playerid, COLOR_WHITE, "Utilize: /extorcion (PlayerID)");
	    return 1;
	}
	zcmd(qextorcion, playerid, params[]){
	    new string[128], bkey = Info[playerid][pPbizzkey];
	    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
	    if(!sscanf(params,"u",params[0])){
	        if(PlayerToPoint(4.0, playerid, BizzInfo[bkey][bEntrancex], BizzInfo[bkey][bEntrancey], BizzInfo[bkey][bEntrancez])){
	            if(IsPlayerConnected(params[0])){
                    if(params[0] != playerid){
                        if(ProxDetectorS(5.0, playerid, params[0])){
                            if(strcmp(GetPlayerNameEx(params[0]), BizzInfo[bkey][bExtortion], true) == 0){
                                format(string, sizeof(string), "{FFFFFF}%s ha dedicido quitarte como extorcionista de su negocio.\n\t¿Estás de acuerdo con esta decisión?",GetPlayerNameEx(playerid));
                                ShowPlayerDialog(params[0], QUIT_EXTORTION, DIALOG_STYLE_MSGBOX, "{A2DC35}Confirmacion Negocios", string, "Si", "No");
                                Message(playerid, COLOR_WHITE, "* La solicitud fue enviada, espera su respuesta.");
                                QuitExtortion[params[0]] = bkey;
								ExtortionID[params[0]] = playerid;
                            } else Message(playerid, COLOR_WHITE, "* Esa persona no es extorcionista de tu negocio.");
                        } else Message(playerid, COLOR_WHITE, "Jugador muy lejos.");
                    } else Message(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
	            } else Message(playerid, COLOR_WHITE, "Jugador no conectado.");
			} else Message(playerid, COLOR_WHITE, "Debes estar cerca de tu negocio.");
	    } else Message(playerid, COLOR_WHITE, "Utiliza: /qextorcion (PlayerID)");
	    return 1;
	}
	zcmd(recaudar, playerid, params[])
	{
		for(new b = 0; b < sizeof(BizzInfo); b++)
		{
		    if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntrancex], BizzInfo[b][bEntrancey], BizzInfo[b][bEntrancez]))
			{
	            if(strcmp(GetPlayerNameEx(playerid), BizzInfo[b][bExtortion], true) == 0){
	                if(BizzInfo[b][bTillEx] > 0){
	                	new string[128];
	                	Earn(playerid, BizzInfo[b][bTillEx]);
						format(string, sizeof(string), "{7D997D}Has recaudado {2EDFFF}$%d {7D997D} como extorcionista de éste negocio.", BizzInfo[b][bTillEx]);
						Message(playerid, COLOR_WHITE, string);
						BizzInfo[b][bTillEx] = 0;
					} else Message(playerid, COLOR_WHITE, "En este momento no hay dinero para recaudar.");
				}
			}
		}
		return 1;
	}
	CMD:verdatos(playerid, params[])
	{
	    TextDrawShowForPlayer(playerid, FechaD);
	    TextDrawShowForPlayer(playerid, TiempoD);
	    TextDrawShowForPlayer(playerid, Experiencia[playerid]);
	    SendClientMessageEx(playerid, COLOR_AT, "! {FFFFFF}Colocaste los datos del servidor.");
	    return 1;
	}
	CMD:nodatos(playerid, params[])
	{
	    TextDrawHideForPlayer(playerid, FechaD);
	    TextDrawHideForPlayer(playerid, TiempoD);
	    TextDrawHideForPlayer(playerid, Experiencia[playerid]);
	    SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Sacaste los datos del servidor, recuerda que para volver a ver estos mismos debes poner: /Verdatos");
	    return 1;
	}

	CMD:ocultarnamex(playerid, params[])
	{
	    ShowPlayerNameTagForPlayer(playerid, playerid, 0);
	    SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Ocultaste tu nick.");
	    return 1;
	}
	CMD:mostrarnamex(playerid, params[])
	{
	    ShowPlayerNameTagForPlayer(playerid, playerid, 1);
	    SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Tu nick ahora se verá.");
	    return 1;
	}

	zcmd(explotarpuerta, playerid, params[])
	{
		if(IsPlayerInRangeOfPoint(playerid,3,585.914489,-1474.647216,-21.713333))
		{
	    if(pbomba[playerid] != 1) return SendClientMessage(playerid,COLOR_WHITE,"No tienes una bomba.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
		BOMBA[playerid] = CreateObject(1252, x, y-0.5, z-0.5, 0,0,0,0);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
		SendClientMessage(playerid,COLOR_WHITE,"La bomba fue plantada, ¡apartate va a explotar!");
		bombap[playerid] = 1;
		SetTimerEx("TimerBANK",10000,false,"d",playerid);
		}
		return 1;
	}
	zcmd(tirarrobo, playerid, params[])
 	{
 	    if(YaRobo[playerid] == 1)
  		{
  		YaRobo[playerid] = 0;
  		DejarRobo(playerid);
  		SendClientMessageEx(playerid, COLOR_GRAD2, "Tiraste el objeto robado al suelo.");
		}
		return 1;
	}

	zcmd(cticket, playerid, params[])
 	{
	 	if(IsPlayerInRangeOfPoint(playerid, 5.0,359.3290,-2032.0443,7.8359))
		{
		Vortex[playerid] = 1;
		SetTimerEx("TimerTICKET",420000,false,"d",playerid);
		SendClientMessageEx(playerid, COLOR_FADE1, "Vendedor dice: Espero que disfrutes, cualquier cosa vuelva por otro ticket!");
		GivePlayerCash(playerid, -50);
		}
		return 1;
	}
	zcmd(cbomba, playerid, params[])
 	{
 	    if(GetPlayerMoney(playerid) < 20000) return SendClientMessage(playerid,COLOR_RED,"No tienes suficiente dinero.");
	 	if(pbomba[playerid] == 0)
	 	{
	 	    if(bombap[playerid] == 0)
	 	    {
		 	   	if(!IsPlayerInRangeOfPoint(playerid,2.0,1187.30615, -819.82098, 1087.11108)) return SendClientMessage(playerid,COLOR_WHITE,"No estas en la zona de compra."); // Cambien x,y,z por las coordenadas del lugar donde quieren que se compre la bomba
				{
				if(GetPlayerMoney(playerid) < 4999) return SendClientMessage(playerid,COLOR_WHITE,"No tienes suficiente dinero.");
				pbomba[playerid] = 1;
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Has comprado una c4 por 20,000$, usa /bomba para colocarla.");
				GivePlayerCash(playerid,-20000);
				}
			}
		}
		return 1;
	}
	zcmd(bomba, playerid, params[])
 	{
 	    if(pbomba[playerid] != 1) return SendClientMessage(playerid,COLOR_WHITE,"No tienes una bomba.");
		new Float:x,Float:y,Float:z; //aquí identificamos la coordenadas X,Y,Z para luego usarlas en el Objeto de la bomba y la explosión.
		GetPlayerPos(playerid, x, y, z);//con esto obtendremos la posición del jugador(X,Y,Z), para luego usarla en la bomba.
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//La animación de planteando la bomba.
		BOMBA[playerid] = CreateObject(1252, x, y-0.5, z-0.5, 0,0,0,0);//El Objeto que sera la bomba.
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0); //Nuevamente la animación, en caso que no funcione la otra.
		SendClientMessage(playerid,COLOR_WHITE,"La bomba fue plantada, explotala usando: {FF0000}/detonar{FFFFFF}.");//El Mensaje que mostrara cuando tengas la bomba plantada.
		bombap[playerid] = 1;
		pbomba[playerid] = 0;
		return 1;
	}
	zcmd(detonar, playerid, params[])
 	{
 	  	if(bombap[playerid] != 1) return SendClientMessage(playerid,COLOR_WHITE,"No tienes ninguna bomba plantada.");
		new Float:x, Float:y, Float:z;
		GetObjectPos(BOMBA[playerid], x, y, z);//Identifica cual es la posición del objeto.
		CreateExplosion(x, y, z, 7, 2.0); //Crea la explosion.
		DestroyObject(BOMBA[playerid]); //Destruye el objeto de la bomba.
		SendClientMessage(playerid,COLOR_WHITE,"La bomba fue detonada.");//Mensaje que la bomba fue detonada
		pbomba[playerid] = 0;
		bombap[playerid] = 0;
		return 1;
	}
 	zcmd(dejarrobo, playerid, params[])
 	{
 	if(IsPlayerInRangeOfPoint(playerid,2,1406.8153,-1372.5907,8.1257))
		{
		    if(YaRobo[playerid] == 1)
		    {
      		YaRobo[playerid] = 0;
		        	if(ArtRobado(playerid) == TVPobre)
		        	{
				    SendClientMessage(playerid,-1,"Ganas $450 por traer esta television vieja.");
				    GivePlayerCash(playerid,450);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == TVBuena)
					{
				    SendClientMessage(playerid,-1,"Ganas $900 por traer esta television en buen estado.");
				    GivePlayerCash(playerid,900);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == PlayVieja)
					{
				    SendClientMessage(playerid,-1,"Ganas $350 por traer esta playstation vieja.");
				    GivePlayerCash(playerid,350);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == PlayBuena)
					{
				    SendClientMessage(playerid,-1,"Ganas $700 por traer esta playstation en buen estado.");
				    GivePlayerCash(playerid,700);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == VideoVieja)
					{
				    SendClientMessage(playerid,-1,"Ganas $270 por traer esta videograbadora vieja.");
				    GivePlayerCash(playerid,270);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == VideoBuena)
					{
				    SendClientMessage(playerid,-1,"Ganas $800 por traer esta videograbadora en buen estado.");
				    GivePlayerCash(playerid,800);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == PC)
					{
				    SendClientMessage(playerid,-1,"Ganas $1000 por traer esta PC.");
				    GivePlayerCash(playerid,1000);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == Caja)
					{
				    SendClientMessage(playerid,-1,"Ganas $500 por traer esta caja.");
				    GivePlayerCash(playerid,500);
				    DisablePlayerCheckpoint(playerid);
					}
			 	   DejarRobo(playerid);
			 	   return 1;
			}
			return SendClientMessage(playerid,COLOR_WHITE,"No robaste nada.");
		}
    return 0;
	}

	zcmd(robarshop, playerid, params[])
 	{
 	if(lapdon() == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No hay policías conectados o en servicio.");
 	if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes tener nivel 3 para poder robar la tienda.");
 	if(Info[playerid][probita] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Solo puedes robar 1 vez cada 20 minutos.");
   		if(IsPlayerInRangeOfPoint(playerid,5,1009.2381,48.5105,55.3221))
		{
				if(YaRobo[playerid] == 0)
			 	{
			 	new string[128];
			 	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		 		SendRadioMessage(1, 0x8D8DFFFF, "[Central]: Tenemos un robo en Electrónica ubicada en Market, sospechoso posiblemente armado."); // LAPD
		 		format(string,128,"{7D997D}¡Robaron una tienda!: %s [ID: {FFFFFF}%d{7D997D}]",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_GREY,string);
				SendClientMessage(playerid, COLOR_GENERAL,"{FFFFFF}{FF0000}¡Alarma encendida!:{FFFFFF} Unidades vienen en camino al lugar.");
    			GameTextForPlayer(playerid,"~r~PERMANECE 1 MINUTO EN LA TIENDA PARA ROBAR UN OBJETO!",7000,3);
    			SendClientMessage(playerid, COLOR_GENERAL,"Si sales de la tienda no lograrás robar el objeto.");
			 	SetTimerEx("RobadoCosas",100000,0,"i",playerid);
			 	Info[playerid][probita] = 1;
			 	SetTimerEx("TimerROB",1200000,false,"d",playerid);
			 	LoadMoneyy[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadMoneyy[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadMoneyy[playerid]);
				SetTimerEx("LoadMonn", 1000, 0, "d", playerid);
			  	return 1;
				}
				return SendClientMessage(playerid,COLOR_WHITE,"Ya robaste, mejor largate del lugar!");
  		}
  		return 0;
	}
	zcmd(recogercesped, playerid, params[])
	{
		if(Info[playerid][pJob] == 13 || Info[playerid][pJob2] == 13)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0,2043.81250, -1249.0247,23.9810))
			{
			Info[playerid][pgskin] = GetPlayerSkin(playerid);
			OldskinJ[playerid] = GetPlayerSkin(playerid);
			SendClientMessageEx(playerid, COLOR_RED, "Por favor, sube a una maquina y recuerda no bajar hasta terminar el recorrido.");
			recojercesped[playerid]=1;
			}

  		}
  		return 1;
	}
	zcmd(adminduty, playerid, params[])
	{
	new string[200];
	if(papilla[playerid] == 1) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Ya estás en servicio administrativo, recuerda sacartelo con /Adminoffduty");
	if(Info[playerid][pAdminZC] >= 2)
	{
	Info[playerid][pSex] = 1;
	papilla[playerid] = 1;
	SetPlayerArmour(playerid, 1000);
	SetHP(playerid, 1000);
	SetPlayerSkin(playerid, 217);
	AdminDuty[playerid] = 1;
	 	  if(Info[playerid][pAdminZC] == 2)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 3)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 4)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 5)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 6)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 7)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
           if(Info[playerid][pAdminZC] == 8)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 9)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 10)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 11)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          format(string, sizeof(string), "[<!>]:{FFFFFF} El Administrador %s se encuentra en servicio, puedes solicitarlo con: {FFA500}/Soporte" , GetPlayerNameEx(playerid),playerid);
          BroadCast(COLOR_NARANJA, string);
          Log("logs/- Servicios Administrativos (ON).log", string);
          SendClientMessageEx(playerid, COLOR_ROJO,"{FF0000}Importante: {FFFFFF}Entraste en servicio administrativo, recuerda respetar tu tiempo de labor con los usuarios.");
	}
	return 1;
	}
	zcmd(adminoffduty, playerid, params[])
	{
	    new string[200];
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}No estás en servicio administrativo lo cual no puedes utilizar este comando!");
		if(Info[playerid][pAdminZC] >= 2)
		{
		SetPlayerToTeamColor(playerid);
        SetPlayerSkin(playerid, Info[playerid][pChar]);
        papilla[playerid]= 0;
    	SetHP(playerid, 100);
    	SetPlayerArmour(playerid, 0);
    	BigEar[playerid] = 0;
        format(string, sizeof(string), "[<!>]:{FFFFFF} El Administrador %s ya no se encuentra en servicio para brindar soporte." , GetPlayerNameEx(playerid));
        BroadCast(COLOR_NARANJA, string);
        Log("logs/- Servicios Administrativos (OFF).log", string);
  		}
  		return 1;
}
	CMD:scripterduty(playerid, params[])
	{
	    new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
	    if(!strcmp(nick, "Kenji_Wang", true) || !strcmp(nick, "Killian_Mihaly", true)|| !strcmp(nick, "Micro_Lopez", true))
	    {
	        if(papilla[playerid] == 0)
	        {
				papilla[playerid] = 1;
				AdminDuty[playerid] = 1;
				SetPlayerColor(playerid, 0x970000FF);
				SetHP(playerid, 1000);
				SetPlayerSkin(playerid, 217);
    			SetPlayerArmour(playerid, 1000);
    		//	ClearAnimations(playerid);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El Programador {FFA500}%s{FFFFFF} se encuentra en servicio, {CC0000}no molestar{FFFFFF}." , GetPlayerNameEx(playerid),playerid);
	          	BroadCast(COLOR_NARANJA, string);
			}
			else
			{
			    papilla[playerid] = 0;
				AdminDuty[playerid] = 0;
				SetHP(playerid, 100);
				SetPlayerArmour(playerid, 100);
				BigEar[playerid] = 0;
				SetPlayerColor(playerid, 0xFFFFFF00);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El Programador {FFA500}%s{FFFFFF} ya no se encuentra en servicio." , GetPlayerNameEx(playerid));
	          	BroadCast(COLOR_NARANJA, string);
			}
		}
		return 1;
	}
	CMD:esduty(playerid, params[])
	{
		if(Info[playerid][pModStaff] == 1)
	    {
	        if(papilla[playerid] == 0)
	        {
				papilla[playerid] = 1;
				AdminDuty[playerid] = 1;
				SetPlayerColor(playerid, 0x970000FF);
				SetHP(playerid, 100);
				SetPlayerSkin(playerid, 217);
    			SetPlayerArmour(playerid, 100);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El E.S {5DBBBB}%s{FFFFFF} se encuentra en servicio, puedes solicitarlo con: {9700FF}/soporte." , GetPlayerNameEx(playerid),playerid);
	          	BroadCast(COLOR_EE, string);
			}
			else
			{
			    papilla[playerid] = 0;
				AdminDuty[playerid] = 0;
				SetHP(playerid, 100);
				SetPlayerArmour(playerid, 100);
				BigEar[playerid] = 0;
				SetPlayerColor(playerid, 0xFFFFFF00);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El E.S {5DBBBB}%s{FFFFFF} ya no se encuentra en servicio." , GetPlayerNameEx(playerid));
	          	BroadCast(COLOR_EE, string);
			}
		}
		return 1;
	}
	CMD:efduty(playerid, params[])
	{
	    if(Info[playerid][pFactionModerator] == 1)
	    {
	        if(papilla[playerid] == 0)
	        {
				papilla[playerid] = 1;
				AdminDuty[playerid] = 1;
				SetPlayerColor(playerid, 0x970000FF);
				SetHP(playerid, 199);
				SetPlayerSkin(playerid, 217);
    			SetPlayerArmour(playerid, 100);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El E.F {5DBBBB}%s{FFFFFF} se encuentra en servicio, puedes solicitarlo con: {9700FF}/soporte." , GetPlayerNameEx(playerid),playerid);
	          	BroadCast(COLOR_EE, string);
			}
			else
			{
			    papilla[playerid] = 0;
				AdminDuty[playerid] = 0;
				SetHP(playerid, 100);
				SetPlayerArmour(playerid, 100);
				BigEar[playerid] = 0;
				SetPlayerColor(playerid, 0xFFFFFF00);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El E.F {5DBBBB}%s{FFFFFF} ya no se encuentra en servicio." , GetPlayerNameEx(playerid));
	          	BroadCast(COLOR_EE, string);
			}
		}
		return 1;
	}
	CMD:efamduty(playerid, params[])
	{
	    if(Info[playerid][pGangModerator] == 1)
	    {
	        if(papilla[playerid] == 0)
	        {
				papilla[playerid] = 1;
				AdminDuty[playerid] = 1;
				SetPlayerColor(playerid, 0x970000FF);
				SetHP(playerid, 100);
				SetPlayerSkin(playerid, 217);
    			SetPlayerArmour(playerid, 100);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El E.Fam {5DBBBB}%s{FFFFFF} se encuentra en servicio, puedes solicitarlo con: {9700FF}/soporte." , GetPlayerNameEx(playerid),playerid);
	          	BroadCast(COLOR_EE, string);
			}
			else
			{
			    papilla[playerid] = 0;
				AdminDuty[playerid] = 0;
				SetHP(playerid, 100);
				SetPlayerArmour(playerid, 100);
				BigEar[playerid] = 0;
				SetPlayerColor(playerid, 0xFFFFFF00);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El E.Fam {5DBBBB}%s{FFFFFF} ya no se encuentra en servicio." , GetPlayerNameEx(playerid));
	          	BroadCast(COLOR_EE, string);
			}
		}
		return 1;
	}
	CMD:evipduty(playerid, params[])
	{
	 if(Info[playerid][pShopTech] == 1)
	    {
	        if(papilla[playerid] == 0)
	        {
				papilla[playerid] = 1;
				AdminDuty[playerid] = 1;
				SetPlayerColor(playerid, 0x970000FF);
				SetHP(playerid, 100);
				SetPlayerSkin(playerid, 217);
    			SetPlayerArmour(playerid, 100);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El Encargado de VIP {5DBBBB}%s{FFFFFF} se encuentra en servicio, puedes solicitarlo con: {9700FF}/soporte." , GetPlayerNameEx(playerid),playerid);
	          	BroadCast(COLOR_EE, string);
			}
			else
			{
			    papilla[playerid] = 0;
				AdminDuty[playerid] = 0;
				SetHP(playerid, 100);
				SetPlayerArmour(playerid, 100);
				BigEar[playerid] = 0;
				SetPlayerColor(playerid, 0xFFFFFF00);
				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El Encargado de VIP {5DBBBB}%s{FFFFFF} ya no se encuentra en servicio." , GetPlayerNameEx(playerid));
	          	BroadCast(COLOR_EE, string);
			}
		}
		return 1;
	}
	CMD:killianmihalyduty(playerid, params[])
	{
	    new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
	    if(!strcmp(nick, "Killian_Mihaly", true))
	    {
	        if(papilla[playerid] == 0)
	        {
				papilla[playerid] = 1;
				AdminDuty[playerid] = 1;
			//	SetPlayerColor(playerid, 0x970000FF);
				SetHP(playerid, 100);
			//	SetPlayerSkin(playerid, 217);
    			SetPlayerArmour(playerid, 130);
    		//	ClearAnimations(playerid);
    		    Info[playerid][pVIP] = 5;
				Info[playerid][pTempVIP] = 10000;
    			Info[playerid][pModStaff] = 1;
    			Info[playerid][pAdminZC] = 11;
    			GivePlayerValidWeapon(playerid, 24);
    			ResetPlayerMoney(playerid);
    			GivePlayerCash(playerid, 750000);
/*				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El Programador {FFA500}%s{FFFFFF} se encuentra en servicio, {CC0000}no molestar{FFFFFF}." , GetPlayerNameEx(playerid),playerid);
	          	BroadCast(COLOR_NARANJA, string);
*/
				SendClientMessageEx(playerid, COLOR_ROJO,"{FF0000}¡Eh, Killian!{FFFFFF} Bienvenido a tu servidor. Te has puesto Staff duty. Disfruta.");
			}
			else
			{
			    papilla[playerid] = 0;
				AdminDuty[playerid] = 0;
				SetHP(playerid, 100);
				SetPlayerArmour(playerid, 100);
				BigEar[playerid] = 0;
				SetPlayerColor(playerid, 0xFFFFFF00);
/*				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El Programador {FFA500}%s{FFFFFF} ya no se encuentra en servicio." , GetPlayerNameEx(playerid));
	          	BroadCast(COLOR_NARANJA, string);
*/
				SendClientMessageEx(playerid, COLOR_ROJO,"{FF0000}¡Eh, Killian!{FFFFFF} ¿Te vas? Acabas de salir de Staff duty.");
			}
		}
		return 1;
	}
	CMD:nickmasonduty(playerid, params[])
	{
	    new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
	    if(!strcmp(nick, "Nick_Mason", true))
	    {
	        if(papilla[playerid] == 0)
	        {
				papilla[playerid] = 1;
				AdminDuty[playerid] = 1;
			//	SetPlayerColor(playerid, 0x970000FF);
				SetHP(playerid, 100);
			//	SetPlayerSkin(playerid, 217);
    			SetPlayerArmour(playerid, 130);
    		//	ClearAnimations(playerid);
    		    Info[playerid][pVIP] = 5;
				Info[playerid][pTempVIP] = 10000;
    			Info[playerid][pModStaff] = 1;
    			Info[playerid][pAdminZC] = 12;
    			GivePlayerValidWeapon(playerid, 24);
    			ResetPlayerMoney(playerid);
    			GivePlayerCash(playerid, 750000);
/*				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El Programador {FFA500}%s{FFFFFF} se encuentra en servicio, {CC0000}no molestar{FFFFFF}." , GetPlayerNameEx(playerid),playerid);
	          	BroadCast(COLOR_NARANJA, string);
*/
				SendClientMessageEx(playerid, COLOR_ROJO,"{FF0000}¡Eh, Killian! o. . . ¿debería decir Nick?{FFFFFF} Bienvenido a tu servidor. Te has puesto Staff duty. Disfruta.");
			}
			else
			{
			    papilla[playerid] = 0;
				AdminDuty[playerid] = 0;
				SetHP(playerid, 100);
				SetPlayerArmour(playerid, 100);
				BigEar[playerid] = 0;
				SetPlayerColor(playerid, 0xFFFFFF00);
/*				new string[200];
				format(string, sizeof(string), "[<!>]:{FFFFFF} El Programador {FFA500}%s{FFFFFF} ya no se encuentra en servicio." , GetPlayerNameEx(playerid));
	          	BroadCast(COLOR_NARANJA, string);
*/
				SendClientMessageEx(playerid, COLOR_ROJO,"{FF0000}¡Eh, Killian! o. . . ¿debería decir Nick?{FFFFFF} ¿Te vas? Acabas de salir de Staff duty.");
			}
		}
		return 1;
	}
    zcmd(sentarse, playerid, params[])
	{
	    new anim;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/sentarse (1-5){FFFFFF} para tomar asiento.");
        switch(anim){
			case 1: LoopingAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0);
			case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0);
			case 3: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0);
			case 4: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
			case 5: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
			case 6: LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/sentarse (1-6){FFFFFF} para sentarse.");
		}
		return 1;
	}
	zcmd(orinar, playerid, params[]){
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
	    if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando ahora.");
		SetPlayerSpecialAction(playerid, 68);
		return 1;
	}
    zcmd(dj, playerid, params[]){
	    new anim;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/dj (1-4){FFFFFF} para animar como DJ.");
        switch(anim){
			case 1: LoopingAnim(playerid,"SCRATCHING","scdldlp",4.0,1,0,0,0,0);
			case 2: LoopingAnim(playerid,"SCRATCHING","scdlulp",4.0,1,0,0,0,0);
			case 3: LoopingAnim(playerid,"SCRATCHING","scdrdlp",4.0,1,0,0,0,0);
			case 4: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.0,1,0,0,0,0);
		 	default: return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/dj (1-4){FFFFFF} para animar como DJ.");
		}
		return 1;
	}
	zcmd(sinaliento, playerid, params[]){
		new anim;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/sinaliento (1-2){FFFFFF} para iniciar la animación sin aliento.");
        switch(anim){
			case 1: LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0);
			case 2: LoopingAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0);
            default: return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/sinaliento (1-2){FFFFFF} para iniciar la animación sin aliento.");
		}
		return 1;
	}
	zcmd(poli, playerid, params[]){
		new anim;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/poli (1-2){FFFFFF} para apuntar.");
		switch(anim){
			case 1:LoopingAnim(playerid,"POLICE","CopTraf_Come",4.0,0,0,0,0,0);
			case 2:LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.0,0,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/poli (1-2){FFFFFF} para apuntar.");
		}
		return 1;
	}
    zcmd(asiento, playerid, params[]){
    	new anim;
		if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /asiento (1-7)");
		if(anim < 1 || anim > 7) return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/asiento (1-7){FFFFFF} para tomar asiento.");
		switch(anim){
			case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0);// Not looping
			case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0);
			case 3: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0); // Not looping
			case 4: LoopingAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0);
			case 5: LoopingAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0);
			case 6: LoopingAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0);
			case 7: LoopingAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0); // Not looping
		}
		return 1;
	}
    zcmd(bailar, playerid, params[]){
 		new dancestyle;
		if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
        if(sscanf(params, "d", dancestyle)) return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/bailar (1-4){FFFFFF} para comenzar a bailar.");
 		switch(dancestyle){
			case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
			case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
			case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
			case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		}
	   	return 1;
	}
    zcmd(cruzar, playerid, params[]){
    	new anim;
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/cruzar (1-5){FFFFFF} para cruzar tus brazos.");
		if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
 		switch(anim){
			case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
			case 2: LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
			case 3: LoopingAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
			case 4: LoopingAnim(playerid,"GRAVEYARD","mrnM_loop",4.0,1,0,0,0,0);
			case 5: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/cruzar (1-5){FFFFFF} para cruzar tus brazos.");
		}
		return 1;
	}
    zcmd(jiggy, playerid, params[])
	{
		new anim;
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/jiggy (1-4){FFFFFF} para comenzar a bailar.");
        if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
 		switch(anim){
			case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.0,1,0,0,0,0);
			case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.0,1,0,0,0,0);
			case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.0,1,0,0,0,0);
			case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.0,1,0,0,0,0);
			case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.0,1,0,0,0,0);
			case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.0,1,0,0,0,0);
			case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.0,1,0,0,0,0);
			case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
			case 9: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
			case 10: LoopingAnim(playerid,"DANCING","dnce_M_d",4.0,1,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/jiggy (1-4){FFFFFF} para comenzar a bailar.");
		}
		return 1;
	}
	zcmd(ped, playerid, params[]){
		new anim;
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /ped (1-26)");
        if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
 		switch(anim){
			case 1: LoopingAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1);
			case 2: LoopingAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1);
			case 3: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
			case 4: LoopingAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1);
			case 5: LoopingAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1);
			case 6: LoopingAnim(playerid,"PED","run_old",4.0,1,1,1,1,1);
			case 7: LoopingAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1);
			case 8: LoopingAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1);
			case 9: LoopingAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1);
			case 10: LoopingAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1);
			case 11: LoopingAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1);
			case 12: LoopingAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);
			case 13: LoopingAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);
			case 14: LoopingAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);
			case 15: LoopingAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);
			case 16: LoopingAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1);
			case 17: LoopingAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1);
			case 18: LoopingAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1);
			case 19: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1);
			case 20: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);
			case 21: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
			case 22: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1);
			case 23: LoopingAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1);
			case 24: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);
			case 25: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);
			case 26: LoopingAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /ped (1-26)");
		}
		return 1;
	}
	zcmd(rap, playerid, params[]){
		new rapstyle;
        if(sscanf(params, "d", rapstyle)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /rap (1-3)");
		if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
 		switch(rapstyle){
			case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
			case 2: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
			case 3: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /rap [1-3]");
		}
	   	return 1;
	}
	zcmd(gesto, playerid, params[]){
		new gesto;
        if(sscanf(params, "d", gesto)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gesto (1-15)");
        if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
 		switch(gesto){
			case 1: OnePlayAnim(playerid,"GHANDS","gsign1",4.0,0,0,0,0,0);
			case 2: OnePlayAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
			case 3: OnePlayAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
			case 4: OnePlayAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
			case 5: OnePlayAnim(playerid,"GHANDS","gsign3",4.0,0,0,0,0,0);
			case 6: OnePlayAnim(playerid,"GHANDS","gsign3LH",4.0,0,0,0,0,0);
			case 7: OnePlayAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
			case 8: OnePlayAnim(playerid,"GHANDS","gsign4LH",4.0,0,0,0,0,0);
			case 9: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
			case 10: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
			case 11: OnePlayAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
			case 12: OnePlayAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
			case 13: OnePlayAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
			case 14: OnePlayAnim(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,0,0);
			case 15: OnePlayAnim(playerid,"GANGS","smkcig_prtl",4.0,0,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /gesto (1-15)");
		}
		return 1;
	}
    zcmd(sexo, playerid, params[]){
    	new sexstyle;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora !");
        if(sscanf(params, "d", sexstyle)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sexo (1-8)");
 		switch(sexstyle){
 			case 1: LoopingAnim(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,0);
			case 2: LoopingAnim(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,0);
			case 3: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,0);
			case 4: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,0);
			case 5: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,0);
			case 6: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,0);
			case 7: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,0);
			case 8: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,0);
			default: return SendClientMessageEx(playerid,0xFF0000FF,"Utiliza: /sexo (1-8)");
		}
 	  	return 1;
	}
	CMD:apuntar(playerid, params[])
	{
	if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
 	if(sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /apuntar [1-3]");
    if(params[0] < 1 || params[0] > 3)   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /apuntar [1-3]");
    switch(params[0])
    {
        case 1: LoopingAnim(playerid,"SHOP","ROB_Loop_Threat",50.0,1,0,0,1,1);
        case 2: LoopingAnim(playerid,"ped", "ARRESTgun",50.0,0,1,1,1,1);
        case 3: LoopingAnim(playerid,"SHOP","SHP_Gun_Aim",50.0,1,0,0,1,1);
    }
    return 1;
	}
    CMD:apoyarse(playerid, params[])
	{
	if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
 	if(sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /apoyarse [1-2]");
    if(params[0] < 1 || params[0] > 2)   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /apoyarse [1-2]");
    switch(params[0])
    {
        case 1: LoopingAnim(playerid,"GANGS","leanIDLE",50.0,1,0,1,1,1);
        case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",50.0,1,1,1,1,1);
    }
    return 1;
	}
	CMD:dedo(playerid, params[])
	{
    	OnePlayAnim(playerid,"RIOT","RIOT_FUKU",4.0,0,0,0,0,0);
        return 1;
	}
	zcmd(fumar, playerid, params[]){
        new gesto;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora !");
        if(sscanf(params, "d", gesto)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/fumar (1-2){FFFFFF} para comenzar la animación de fumar.");
		switch(gesto){
			case 1: OnePlayAnim(playerid,"SMOKING","M_smk_in",4.0,0,0,0,0,0);
			case 2: LoopingAnim(playerid,"SMOKING","M_smklean_loop",4.0,1,0,0,0,0);
			default: return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fumar (1-2)");
		}
		return 1;
	}
	zcmd(chora, playerid, params[])
	 {
	 OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_watch",4.0,0,0,0,0,0);
	  return 1;
	  }
	zcmd(relax, playerid, params[])
	{
	LoopingAnim(playerid, "CRACK", "crckidle1",4.0,0,1,1,1,-1);
	 return 1;
	  }
   zcmd(animar, playerid, params[])
	 {
  		LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,1);
	  return 1;
	  }
   zcmd(paja, playerid, params[])
	 {
	 ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	  return 1;
	  }
   zcmd(dormir, playerid, params[])
	 {
	 ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
	 SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Para detener la animación, utilice: {2EDFFF}/Stopanim");
	  return 1;
	  }
   	zcmd(herido, playerid, params[])
	 {
	 ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	 SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Para detener la animación, utilice: {2EDFFF}/Stopanim");
	  return 1;
	  }
   zcmd(agonizar, playerid, params[])
	 {
	 ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
	 SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Para detener la animación, utilice: {2EDFFF}/Stopanim");
	  return 1;
	  }
	zcmd(palmaputa, playerid, params[])
	{
	ApplyAnimation(playerid,"MISC","bitchslap",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(sigueme, playerid, params[])
	{
	ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(crabs, playerid, params[])
	{
	OnePlayAnim(playerid,"MISC","Scratchballs_01",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(darregalo, playerid, params[])
	{
	ApplyAnimation(playerid,"KISSING","gift_give",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(palmada, playerid, params[])
	{
	ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(lookout, playerid, params[])
	{
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	 return 1;
	  }
	zcmd(stop, playerid, params[])
	{
	OnePlayAnim(playerid,"PED","endchat_01",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(lavarse, playerid, params[])
	{
	OnePlayAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(saludo2, playerid, params[])
	 {
	 OnePlayAnim(playerid,"ON_LOOKERS","Pointup_loop",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(llorar, playerid, params[])
	 {
	 LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0);
	 return 1;
	 }
	zcmd(panimx, playerid, params[])
	 {
	 ApplyAnimation(playerid,"SWORD","sword_block",50.0,0, 1,1,1,1);
	 Info[playerid][pWSeeds] += 3;
	 return 1;
	 }
    zcmd(saludo, playerid, params[])
	 {
	 ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
	 return 1;
	 }
    zcmd(quieto, playerid, params[])
	 {
	 LoopingAnim(playerid,"WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0);
	  return 1;
	   }
    zcmd(enganche, playerid, params[])
	 {
      LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	  return 1;
	   }
    zcmd(cpr, playerid, params[])
	 {
	 OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	  return 1;
	   }
    zcmd(borracho, playerid, params[])
	 {
	 LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	   return 1;
	    }
    zcmd(arobar, playerid, params[])
	 {
	 LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 0);
	  return 1;
	   }
    zcmd(reir, playerid, params[])
	 {
	 ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	  return 1;
	  }
    zcmd(robman, playerid, params[])
	 {
	 LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	  return 1;
	  }
    zcmd(esconder, playerid, params[])
	 {
	 LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	  return 1;
	  }
	zcmd(vomitar, playerid, params[])
	{
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
	}
    zcmd(crack, playerid, params[])
	 {
	 LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	  return 1;
	   }
    zcmd(hablar, playerid, params[])
	 {
	 ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5, 1,1,1);
	 SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Para detener la animación, utilice: {2EDFFF}/Stopanim");
	  return 1;
	   }
    zcmd(hablar2, playerid, params[])
	 {
	 ApplyAnimation(playerid,"MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0);
	 SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Para detener la animación, utilice: {2EDFFF}/Stopanim");
	  return 1;
	   }
    zcmd(jodete, playerid, params[]) { ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0); return 1; }
    zcmd(taichi, playerid, params[])
	{
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	 return 1;
	  }
    zcmd(beso, playerid, params[]) { ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0); return 1; }
	zcmd(chelado, playerid, params[])
	{
	    if(Helado[playerid] == 0) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Usted no tiene un helado para comer.");
        new string[64];
  		SetHP(playerid,100);
  		format(string, sizeof(string), "* %s toma el helado y se lo come todo.", GetPlayerNameEx(playerid));
  		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  		Helado[playerid] -= 1;
	    return 1;
	}
	zcmd(venderhelado, playerid, params[])
	{
	    if (Info[playerid][pJob] != 14 && Info[playerid][pJob2] != 14) return SendClientMessageEx(playerid,COLOR_WHITE,"No eres Vendedor de Helados.");
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en el Vehiculo de Helados.");
	    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "* Escriba {B9C9CF}/venderhelador (Usuario){FFFFFF} para vender un helado.)");
	    if(ProxDetectorS(10.0, playerid, params[0])){
	    new string[64];
                format(string, sizeof(string), "* %s le has ofrecido un helado a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
                GivePlayerCash(playerid, -250);
  				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                format(string, sizeof(string), "* %s te ha vendido un helado por 250$, Usa /chelado Para comerlo", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
                GivePlayerCash(playerid, 250);
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $250 a tu bolsillo por vender un helado.");
				Helado[playerid] -= 1;
				Helado[params[0]] += 1;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Usuario lejos...");
		return 1;
    }
    zcmd(w, playerid, params[])
    {
        if(!sscanf(params, "us[128]", params[0], params[1]))
        {
            if(params[0] != INVALID_PLAYER_ID)
    		{
	      		if(Info[playerid][pAdminZC] > 0 || Info[playerid][pAdminZC] == 0 && Info[params[0]][pAdminZC] > 0)
	        	{
	         		if(HidePM[params[0]] == 1 && Info[playerid][pAdminZC] < 6000) return SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} Este administrador/ayudante tiene los susurros bloqueados!");
	         		new string[128];
					format(string, sizeof(string), "Mensaje de %s (%d): %s", GetPlayerNameEx(playerid), playerid, params[1]);
					SendClientMessage(params[0], 0xE9BC0AFF, string);
					format(string, sizeof(string), "Susurras a %s (%d): %s", GetPlayerNameEx(params[0]), params[0] ,params[1]);
					SendClientMessage(playerid,  0xE9BC0AFF, string);
					if(Info[playerid][pAdminZC] != 10 && Info[params[0]][pAdminZC] != 10)
					{
	    				for(new i = 0; i < MAX_PLAYERS; i++)
				    	{
        					if(Info[i][pAdminZC] >= 10)
				    	    {
            					if(See_MP[i] == 1)
				        	    {
                					format(string, sizeof(string), "[MP] %s(ID: %d) a %s(ID: %d): %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(params[0]), params[0], params[1]);
				                	SendClientMessage(i, 0xFF8000FF, string);
				                	Log("logs/- Mensajes Privados (W).log", string);
					            }
					        }
					    }
 					}
				}
				else SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Susurros solo ha administradores!");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Jugador no conectado.");
        }
		else SendClientMessage(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/w (usuario id) (Texto){FFFFFF} para comunicarse con un usuario/staff.");
        return 1;
    }
	CMD:venderarma(playerid,params[])
	{
	new cliente,precio, weapon, id;
	if(Team_LAPD(playerid) || Team_AININT(playerid) || Team_USMC(playerid))
	{
			SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No puedes vender armas siendo policia o AININT!");
			return 1;
		}
		if (Info[playerid][pJob] == 7 || Info[playerid][pJob2] == 7)
		{
	    	if(!sscanf(params,"ii",cliente,precio))
	    	{
	        	if(IsPlayerConnected(cliente))
	        	{
	            	if(precio >= 0)
	            	{
     	       			manubrio[playerid] = 1;
						SetTimerEx("Timermanubrio",900000,false,"d",playerid);
	            	    weapon = GetPlayerWeapon(playerid);
	              		new string[200],name[MAX_PLAYER_NAME+1];
	                	GetPlayerName(playerid, name, sizeof(name));
		                format(string,sizeof(string),"* %s quiere venderte su %s por %i$. Usa /aceptararma para comprarla",name,WeaponNames[weapon],precio);
		                SendClientMessage(cliente,COLOR_LIGHTBLUE,string);
		                GetPlayerName(cliente, name, sizeof(name));
		                format(string,sizeof(string),"* Has ofrecido un %s a %s por %i$. Espera a que acepte.",WeaponNames[weapon],name,precio);
		                SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
						SetPVarInt(id,"gunID",playerid);
						SetPVarInt(playerid,"gun",weapon);
						SetPVarInt(playerid,"slot",GetWeaponSlot(weapon));
		                VentaDeArmaCon[cliente][0] = playerid;
		                VentaDeArmaCon[cliente][1] = precio;
					}
	            	else
	            	{
	                SendClientMessage(playerid,-1,"{FF0000}[ERROR]:{FFFFFF} El precio no puede ser negativo.");
	            	}
        		}
        		else
        		{
            	SendClientMessage(playerid,COLOR_WHITE,"Ese jugador no está conectado.");
        		}
			}
    		else
    		{
        	SendClientMessage(playerid,COLOR_WHITE,"Utiliza: /venderarma (ID) (precio)");
    		}
		}
		else
		{
 		SendClientMessage(playerid,COLOR_WHITE,"No eres fabricante de armas.");
		}
    return 1;
}

CMD:aceptararma(playerid,params[])
{
	if(Info[playerid][pConnectTime] < 5 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes obtener armas debido a tu restricción de 5 horas.");
    if(VentaDeArmaCon[playerid][0] != -1)
    {
        if(GetPlayerMoney(playerid) >= VentaDeArmaCon[playerid][1])
        {
        new
					playerOffering = GetPVarInt(playerid,"gunID"),
					weaponOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"gun"),
					slotOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"slot");
            if(weaponOffering != 0 && slotOffering != 0)
			{
            new string[200],name[MAX_PLAYER_NAME+1];
            GetPlayerName(VentaDeArmaCon[playerid][0], name, sizeof(name));
            format(string,sizeof(string),"* Has comprado el arma %s que te ofreció %s por %i$",WeaponNames[weaponOffering],name,VentaDeArmaCon[playerid][1]);
            SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
            GetPlayerName(playerid, name, sizeof(name));
            format(string,sizeof(string),"* %s te ha comprado el arma %s que le ofreciste por %i$.",name,WeaponNames[weaponOffering],VentaDeArmaCon[playerid][1]);
            SendClientMessage(VentaDeArmaCon[playerid][0],COLOR_LIGHTBLUE,string);
            GivePlayerCash(playerid,-VentaDeArmaCon[playerid][1]);
            GivePlayerCash(VentaDeArmaCon[playerid][0],VentaDeArmaCon[playerid][1]);
           	RemovePlayerWeapon(playerOffering, weaponOffering);
			GivePlayerValidWeapon(playerid, weaponOffering);
            VentaDeArmaCon[playerid][0] = -1;
            VentaDeArmaCon[playerid][1] = 0;
            DeletePVar(playerOffering,"gun");
			DeletePVar(playerid,"gunID");
			DeletePVar(playerOffering,"slot");
			RemovePlayerAttachedObject(playerid, 9);
			}
        }
        else
        {
            SendClientMessage(playerid,COLOR_WHITE,"No puedes pagar ese precio");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_WHITE,"Nadie te ha ofrecido armas.");
    }
    return 1;
}
	CMD:matricula(playerid, params[])
	{
	if(OrgGob(playerid))
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, Color_Rojo, "{FF0000}[ATENCION]:{FFFFFF} Debe estar en un vehículo a utilizar este comando.");
	else
	{
		ShowPlayerDialog(playerid, 5876, DIALOG_STYLE_LIST, "{2EDFFF}Seleccione el color!", "{FF0000}Rojo\n{00FF00}Verde\n{0000FF}Azul\n{FFFF00}Amarillo\n{00FFFF}Cyan\n{FF00FF}Rosado\n{FFFFFF}Blanco\n{0F0F0F}Negro", "Ok", "Cancelar");
	}
	return 1;
	}
	CMD:robarbanco(playerid, params[])
	{
	    if(Banco_Activo == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}ERROR]:{FFFFFF} Tienes que pedir permiso de un administrador para robar el banco!");
		if(OrgGob(playerid)) return SendClientMessageEx(playerid,COLOR_GRAD2,"Policías no pueden robar el banco.");
		if(Info[playerid][pLeader] == 10 || Info[playerid][pLeader] == 11 || Info[playerid][pLeader] == 12 || Info[playerid][pLeader] == 13 || Info[playerid][pLeader] == 14 || Info[playerid][pLeader] == 15 || Info[playerid][pLeader] == 16 || Info[playerid][pLeader] == 18)
        {
	        if(robobanco[playerid] == 0)
	        {
 		       	if(robobanco[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Solo puedes robar el banco una vez por hora.");
				if(IsPlayerInRangeOfPoint(playerid, 5.0, 1300.037841, -987.819091, 1075.327758))
				{
				new string[128];
				SetTimerEx("Tiempo", 300000, false, "i", playerid);
				SendRadioMessage(1, 0x8D8DFFFF, "[Central]: Aviso a todas las unidades, están robando en el banco central."); // LAPD
				format(string, sizeof(string), "* Sospechoso identificado como: %s.", GetPlayerNameEx(playerid));
				SendRadioMessage(1,COLOR_VIP,string);
    			SendClientMessage(playerid, COLOR_GENERAL,"LA ALARMA HA COMENZADO A SONAR, L.A.P.D ESTARÁ EN CAMINO.");
    			GameTextForPlayer(playerid,"~r~PERMANECE 5 MINUTOS EN LA CAJA FUERTE PARA REUNIR EL DINERO.",4500,3);
				robobanco[playerid] = 1;
				GivePlayerCash(playerid, 10000000);
				SetTimerEx("TimerBANCO", 7200000, 0, "d", playerid);
				LoadMoney[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadMoney[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadMoney[playerid]);
				SetTimerEx("LoadMon", 7000, 0, "d", playerid);
				}
			}
		}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Solo puedes robar el banco cada 2 subsidios.");
			return 1;
	}
    CMD:estilodepelea(playerid, params[])
	{
        if(PlayerToPoint(10, playerid, 767.6719,13.6320,1000.7010))
		{
	        SafeDialogEx(playerid, FSTYLE_DIALOG, DIALOG_STYLE_LIST, "{2EDFFF}¿Qué técnicas de peleas deseas aprender?", "Me gustaría aprender Knee Head\t 1500$\nMe gustaría aprender Kung Fu\t 1000$\nMe gustaría aprender Boxeo\t 800$\nMe gustaría aprender pelea callejera\t 800$\nMe gustaría aprender pelea de codos\t 800$", "Sí", "No");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estas en el GYM.");
		return 1;
	}
	CMD:venderbebida(playerid, params[])
    {
		if(Info[playerid][pJob] == 1 || Info[playerid][pJob2] == 1)
		{
			if(IsAtBar(playerid))
			{
				new string[128], giveplayerid;
				if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USE: /venderbebida [playerid]");

				if(IsPlayerConnected(giveplayerid))
				{
					if(playerid == giveplayerid)
					{
						return SendClientMessageEx(playerid, COLOR_GREY, " No puedes venderte a ti mismo.");
					}
					if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
						DrinkOffer[giveplayerid] = playerid;
						format(string, sizeof(string), "* Bartender %s te ha ofrecido una bebida. /aceptar bebida para aceptar la bebida", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Has ofrecído a %s una bebida.",GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, " Ese jugador no está cerca tuyo");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, " Ese jugador no está conectado");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "   No estás en un bar");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, " No eres Bartender!");
		return 1;
 }
	CMD:aceptar(playerid, params[])
	{
	    new sendername[MAX_PLAYER_NAME];
		new giveplayer[MAX_PLAYER_NAME];
		new string[128];
	    if(IsPlayerConnected(playerid))
		{
	        if(isnull(params))
			{
			    ClearChatbox(playerid);
	            SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/aceptar (nombre){FFFFFF} para aceptar algún objeto/pedido.");
	            SendClientMessageEx(playerid, COLOR_GREY, "");
	            SendClientMessageEx(playerid, COLOR_GREY, "Nombres P1: bebida - telefono - multa - materiales - matrimonio - arma - coche - fichasg");
	            SendClientMessageEx(playerid, COLOR_GREY, "Nombres P2: taxi - mecanico - familia - fix - recarga - vip - fichasvip");
	            return 1;
	        }
	        if(strcmp(params,"muerteeee",true) == 0) // Retirado para evitar la evasión de rol
			{
			    if(medicoon() == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Hay médicos disponibles para atenderte, usa /servicios medico(s).");
	   	    	if(GetPVarInt(playerid, "Injured") == 1)
				{
                	KillEMSQueue(playerid);
                	ResetPlayerWeaponsEx(playerid);
                	SetPVarInt(playerid, "Hospital", 1);
                	SendClientMessageEx(playerid, COLOR_DUDA, "- Fuiste trasladado/a al hospital más cerca la zona!");
                	SpawnPlayer(playerid);
            	}
            	else SendClientMessageEx(playerid, COLOR_WHITE, "* No estás apunto de morir, no puedes hacer esto ahora!");
        	}
        	else if(strcmp(params,"familia",true) == 0)
			{
            	if(InviteOffer[playerid] < 999)
				{
                	if(IsPlayerConnected(InviteOffer[playerid]))
					{
                    	if(InviteFaction[playerid] == 0 && InviteFamily[playerid] != 255)
						{
                        	if(GetPVarInt(playerid, "IsInArena") == 1)
							{
                            	SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero sal del paintball arena.");
                          	  	return 1;
	                        }
	                        if(Info[playerid][pJailTime] > 1)
							{
	                            SendClientMessageEx(playerid, COLOR_WHITE, "No puedes ser invitado estando en prisión.");
	                            return 1;
	                        }
                        	if( Info[playerid][pMember] >= 3 || Info[playerid][pFMember] != 255 || Info[playerid][pLeader] >= 3 || Info[playerid][pLeader] == 1 || Info[playerid][pMember] == 1 || Info[playerid][pMember] == 2 && Info[playerid][pDivision] >= 3 || Info[playerid][pMember] == 2 && Info[playerid][pDivision] == 1)
							{
                        	    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes aceptar esta invitación, porque ya estás en una familia o facción.");
                        	}
                        	else
							{
                            	Info[playerid][pFMember] = InviteFamily[playerid];
                            	Info[playerid][pRank] = 1;
                            	fINFO[InviteFamily[playerid]][FamilyMembers] ++;
                            	saveFamilies();
                            	format(string, sizeof(string), "   Aceptaste unirte a %s, fuiste invitado por %s.", fINFO[InviteFamily[playerid]][FamilyName], GetPlayerNameEx(InviteOffer[playerid]));
                            	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            	format(string, sizeof(string), "   %s aceptó la invitación para unirse a %s.", GetPlayerNameEx(playerid),fINFO[InviteFamily[playerid]][FamilyName]);
                            	SendClientMessageEx(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
               	             	SendClientMessageEx(playerid, COLOR_WHITE, "Usa (/f) para hablar por el chat de familias. /ayuda familia");
    	                        InviteOffer[playerid] = 999;
    	                        InviteFaction[playerid] = 0;
    	                        InviteFamily[playerid] = 255;
    	                    }
    	                }
    	            }
    	        }
    	        else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Nadie te ha invitado a unirte a una familia.");
	        }
	        else if(strcmp(params,"fix",true) == 0)
			{
    	        if(RepairOffer[playerid] < 999){
        	        if(GetPlayerCash(playerid) > RepairPrice[playerid]){
            	        if(IsPlayerInAnyVehicle(playerid)){
                	        if(IsPlayerConnected(RepairOffer[playerid])){
                	            RepairCar[playerid] = GetPlayerVehicleID(playerid);

                	            RepairVehicle(RepairCar[playerid]);
                	            SetVehicleHealth(RepairCar[playerid], 1000.0);
	                            GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
	                            GivePlayerCash(playerid, -RepairPrice[playerid]);
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(RepairOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "%s(IP:%s) has repaired the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairPrice[playerid]);
	                            Log("logs/- Pagas de Mecánicos.log", string);
	                            format(string, sizeof(string), "* %s repara el vehiculo de %s.", GetPlayerNameEx(RepairOffer[playerid]), GetPlayerNameEx(playerid));
	                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                            format(string, sizeof(string), "* Tu coche fue reparado por $%d, por el mecánico %s.",RepairPrice[playerid],GetPlayerNameEx(RepairOffer[playerid]));
	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

	                            format(string, sizeof(string), "* Reparaste el coche de %s, sumaste $%d!",GetPlayerNameEx(playerid),RepairPrice[playerid]);
	                            SendClientMessageEx(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
	                            RepairOffer[playerid] = 999;
	                            RepairPrice[playerid] = 0;
	                            return 1;
	                        }
	                        return 1;
	                    }
	                    return 1;
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero para pagar esto.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Nadie te ha ofrecido reparar tu vehiculo.");
	        }
		    else if(strcmp(params, "saludo",true) == 0){
	        	new Count;
		        foreach(Player, i){
	               	if(GetPVarInt(i, "shrequest") == playerid){
                    	new
                        	Float: ppFloats[3];

                    	GetPlayerPos(i, ppFloats[0], ppFloats[1], ppFloats[2]);

                    	if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2])){
     						Count++;
                   	    	SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado lejos. No puedes aceptar el saludo ahora.");
                    	}
                    	else
						{
                        	switch(GetPVarInt(i, "shstyle"))
							{
                            	case 1:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                           	 	case 2:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 3:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                            	case 4:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000,1);
                                	ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                            	case 5:
                            	{
                           	    	Count++;
                            	   	PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 6:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600,1);
                            	    ApplyAnimation( i, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 7:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250,1);
                            	    ApplyAnimation( i, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 8:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "prtial_hndshk_biz_01", 3.7, 1, 1, 1, 0, 2200,1);
                                	ApplyAnimation( i, "GANGS", "prtial_hndshk_biz_01", 3.5, 1, 1, 1, 0, 2200,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                        	}
                    	}
                	}
            	}
        	    if(Count == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha saludado.");
    	        return 1;
	        }
	        else if(strcmp(params,"entrevista",true) == 0)
			{
	            if(LiveOffer[playerid] < 999)
				{
	                if(IsPlayerConnected(LiveOffer[playerid]))
					{
	                    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
	                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Estarás congelado hasta que termine la entrevista.");
	                        TalkingLive[playerid] = LiveOffer[playerid];
	                        TalkingLive[LiveOffer[playerid]] = playerid;
	                        LiveOffer[playerid] = 999;
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "Estás lejos del reportero.");
	                }
	                return 1;
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha invitado a una entrevista.");
	        }
	        else if(strcmp(params,"recarga",true) == 0){
    	        if(RefillOffer[playerid] < 999){
        	        if(GetPlayerCash(playerid) > RefillPrice[playerid]){
            	        if(IsPlayerInAnyVehicle(playerid)){
                	        if(IsPlayerConnected(RefillOffer[playerid])){
                            	new vehicleid = GetPlayerVehicleID(playerid);
                            	VehicleFuel[vehicleid] = 200;
                            	if(VehicleFuel[vehicleid] > 200) VehicleFuel[vehicleid] = 200;
                            	GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]);
                            	GivePlayerCash(playerid, -RefillPrice[playerid]);
                            	new ip[32], ipex[32];
                            	GetPlayerIp(playerid, ip, sizeof(ip));
                            	GetPlayerIp(RefillOffer[playerid], ipex, sizeof(ipex));
                            	format(string, sizeof(string), "%s(IP:%s) has refilled the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RefillOffer[playerid]), ipex, RefillPrice[playerid]);
                            	Log("logs/- Pagas de Mecánicos.log", string);

                            	format(string, sizeof(string), "* %s llenó el tanque del vehículo de %s.", GetPlayerNameEx(RefillOffer[playerid]), GetPlayerNameEx(playerid));
                            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                            	format(string, sizeof(string), "* Tu vehiculo fue llenado por $%d por el mecánico %s.",RefillPrice[playerid],GetPlayerNameEx(RefillOffer[playerid]));
                            	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

                            	format(string, sizeof(string), "* Llenaste el tanque del vehículo de %s por $%d, lo sumaste al bolsillo!", GetPlayerNameEx(playerid),RefillPrice[playerid]);
                            	SendClientMessageEx(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
	                            RefillOffer[playerid] = 999;
	                            RefillPrice[playerid] = 0;
	                            return 1;
	                        }
	                        return 1;
	                    }
	                    return 1;
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido llenar el tanque de tu coche.");
			}
        	else if(strcmp(params,"medico",true) == 0) {
            	if(Info[playerid][pMember] == 4 || Info[playerid][pLeader] == 4){
                    if(Tren_Route[playerid] == 1 || Tren_Route[playerid] == 2 || Tren_Route[playerid] == 3 || Tren_Route[playerid] == 4 || Tren_Route[playerid] == 5 || Tren_Route[playerid] == 6) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no tener un viaje pendiente como maquinista. Para cancelar el viaje, use: /Cancelarviaje");
                	if(MedicCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ya aceptaste una llamada.");
                	if(GetPVarInt(playerid, "Packages") >= 1 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1){
                    	SendClientMessageEx(playerid, COLOR_WHITE, "Asegurate de que no hay ningún checkpoint activado en este momento.");
                    	return 1;
                	}
                	if(MedicCall < 999){
                    	if(IsPlayerConnected(MedicCall))
						{
                        	format(string, sizeof(string), "* Aceptaste una llamada de %s",GetPlayerNameEx(MedicCall));
                        	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Después de 45 segundos en checkpoint desaparecerá.");
                        	format(string, sizeof(string), "* Médico %s aceptó tu llamada espera en tu actual posición.",GetPlayerNameEx(playerid));
                        	SendClientMessageEx(MedicCall, COLOR_LIGHTBLUE, string);
                        	new Float:X,Float:Y,Float:Z;
                        	GetPlayerPos(MedicCall, X, Y, Z);
                        	SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                        	new zone[MAX_ZONE_NAME];
                        	GetPlayer3DZone(MedicCall, zone, sizeof(zone));
                        	format(string, sizeof(string), "{FF8000}[INDICACION]:{FFFFFF} %s fue localizado en %s", GetPlayerNameEx(MedicCall), zone);
                        	SendClientMessageEx(playerid, COLOR_WHITE, string);
                        	MedicCallTime[playerid] = 1;
                        	MedicAccepted[playerid] = MedicCall;
                        	MedicCall = 999;
                        	return 1;
                    	}
                    	return 1;
                	}
                	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie a llamado un médico.");
            	}
            	else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres un médico.");
        	}
	        if(strcmp(params,"casa",true) == 0){
	            if(HouseOffer[playerid] < 999){
	                if(IsPlayerConnected(HouseOffer[playerid])){
	                    if(Info[HouseOffer[playerid]][pPhousekey] == INVALID_HOUSE_ID && Info[HouseOffer[playerid]][pPhousekey2] == INVALID_HOUSE_ID){
	                        SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene ninguna casa.");
	                        return 1;
	                    }
	                    if(GetPlayerCash(playerid) > HousePrice[playerid]){

	                        new house;
	                        if(House[playerid] == 1) house = Info[HouseOffer[playerid]][pPhousekey];
	                        else if(House[playerid] == 2) house = Info[HouseOffer[playerid]][pPhousekey2];
	                        else return SendClientMessageEx(playerid, COLOR_RED, "{FF0000}[ERROR]:{FFFFFF} Casa no especificada.");
	                        ClearHouse(house);
	                        HouseInfo[house][hLock] = 1;
	                        format( HouseInfo[house][hOwner], 128, "Nobody" );
	                        sendername = GetPlayerNameEx(HouseOffer[playerid]);
	                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	                        format(string, sizeof(string), "~w~Felicitaciones~n~ Has vendido tu propiedad por ~n~~g~$%d", HousePrice[playerid]);
	                        GameTextForPlayer(HouseOffer[playerid], string, 4000, 3);
	                        if(House[playerid] == 1) Info[HouseOffer[playerid]][pPhousekey] = INVALID_HOUSE_ID;
	                        else Info[HouseOffer[playerid]][pPhousekey2] = INVALID_HOUSE_ID;
	                        SaveHouses();
	                        OnPlayerUpdate(HouseOffer[playerid]);
	                        DestroyDynamicPickup(HouseInfo[house][hPickupID]);
	                        HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
	                        GivePlayerCash(HouseOffer[playerid],HousePrice[playerid]);

	                        Info[playerid][pPhousekey] = house;
	                        HouseInfo[house][hOwned] = 1;
	                        GetPlayerName(playerid, sendername, sizeof(sendername));
	                        strmid(HouseInfo[house][hOwner], sendername, 0, strlen(sendername), 255);
	                        GivePlayerCash(playerid,-HousePrice[playerid]);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra.");
	                        SendClientMessageEx(playerid, COLOR_WHITE, "Usa /ayuda para ver los comandos disponibles.");
	                        SaveHouses();
	                        OnPlayerUpdate(playerid);
	                        DestroyDynamicPickup(HouseInfo[house][hPickupID]);
	                        HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
	                        format(string, sizeof(string), "{CC0000}• Propiedad Privada •\n\n{FFFFFF}Dirección: {CC0000}%d\n{FFFFFF}(/Timbre)", house);
	                        UpdateDynamic3DTextLabelText(HouseInfo[house][hTextID], -1, string);

	                        new ip[32], ipex[32];
	                        GetPlayerIp(HouseOffer[playerid],ip,sizeof(ip));
	                        GetPlayerIp(playerid,ipex,sizeof(ipex));
	                        format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) to %s (IP: %s) for $%d.",GetPlayerNameEx(HouseOffer[playerid]),ip,house,GetPlayerNameEx(playerid),ipex,HousePrice[playerid]);
	                        Log("logs/- Casas Compradas.log", string);

	                        HouseOffer[playerid] = 999;
	                        HousePrice[playerid] = 0;
	                        House[playerid] = 0;
	                    }
	                    else{
	                        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes pagar esta casa.");
	                        HouseOffer[playerid] = 999;
	                        HousePrice[playerid] = 0;
	                        House[playerid] = 0;
	                        return 1;
	                    }
	                }
	                return 1;
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te a ofrecido una casa.");
	        }
	        else if(strcmp(params,"mecanico",true) == 0){
	            if(Team_Mecanicos(playerid)){
				if(MechanicCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ya aceptaste una llamada.");
				if(Tren_Route[playerid] == 1 || Tren_Route[playerid] == 2 || Tren_Route[playerid] == 3 || Tren_Route[playerid] == 4 || Tren_Route[playerid] == 5 || Tren_Route[playerid] == 6) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no tener un viaje pendiente como maquinista. Para cancelar el viaje, use: /Cancelarviaje");
	            if(GetPVarInt(playerid, "Packages") >= 1 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero termina de llegar al otro checkpoint (Estás en una llamada o algo que activó un marcador rojo.");
	            if(MechanicCall < 999)
				{
	                if(IsPlayerConnected(MechanicCall))
					{
	                    if(playerid == MechanicCall) return 1;
	                    format(string, sizeof(string), "* Aceptaste la llamada de %s, tienes 60 segundos para ir allá.",GetPlayerNameEx(MechanicCall));
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Después de 60 Segundos el marcador rojo desaparecerá.");
	                    format(string, sizeof(string), "* Mecánico %s aceptó tu llamada por favor, espera en tu posición actual.",GetPlayerNameEx(playerid));
	                    SendClientMessageEx(MechanicCall, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "** %s aceptó la llamada reciente de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(MechanicCall));
						SendFamilyMessage(6, TEAM_AZTECAS_COLOR, string);
						new Float:X,Float:Y,Float:Z;
	                    GetPlayerPos(MechanicCall, X, Y, Z);
	                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
	                    GameTextForPlayer(playerid, "~r~Ve al Marcador rojo", 5000, 1);
		                MechanicCallTime[playerid] = 1;
                    	MechanicCall = 999;
                    	return 1;
                	}
                	return 1;
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie a llamado un mecanico.");
            	}
        	}
	        else if(strcmp(params,"taxi",true) == 0){
	            if(TransportDuty[playerid] != 1) return SendClientMessageEx(playerid, COLOR_GREY, "No estás en servicio.");
	            if(TaxiCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ya aceptaste una llamada.");
	            if(TaxiCall < 999){
	                if(IsPlayerConnected(TaxiCall)){
	                    format(string, sizeof(string), "* Aceptaste la llamada de %s, puedes ir al marcador rojo para recogerlo.",GetPlayerNameEx(TaxiCall));
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                    format(string, sizeof(string), "* Taxista %s aceptó tu llamada; por favor espera en tu posición actual.",GetPlayerNameEx(playerid));
	                    SendClientMessageEx(TaxiCall, COLOR_LIGHTBLUE, string);
	                    GameTextForPlayer(playerid, "~n~~r~Ve al CheckPoint.", 5000, 1);
	                    new Float:X,Float:Y,Float:Z;
	                    GetPlayerPos(TaxiCall, X, Y, Z);
	                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						TaxiCallTime[playerid] = 1;
	                    TaxiAccepted[playerid] = TaxiCall;
	                    TaxiCall = 999;
	                }
	                return 1;
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie ha llamado a un taxista.");
	        }
	        if(strcmp(params,"bebida",true) == 0){
   				if((DrinkOffer[playerid] != INVALID_PLAYER_ID) && (IsPlayerConnected(DrinkOffer[playerid]))){
	                if (ProxDetectorS(8.0, playerid, DrinkOffer[playerid])){
	                    SafeDialogEx(playerid, DRINKLISTDIALOG, DIALOG_STYLE_LIST, "Bebidas", "Cerveza ($45)\nVodka ($60)\nWhiskey ($100)\nAgua ($20)\nCoca Cola ($50)", "Comprar", "Cancelar");
	                }
	                else{
	                    SendClientMessageEx(playerid, COLOR_WHITE, "Estás lejos del Bartender.");
	                    DrinkOffer[playerid] = INVALID_PLAYER_ID;
	                    return 1;
	                }
                	return 1;
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido una bebida.");
    	    }
            if(strcmp(params,"telefono",true) == 0){
                if(NumBuy[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido un número.");
                if(NumPrice[playerid] > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes suficiente dinero.");
                format(string, sizeof(string), "* %s compra un número de teléfono", GetPlayerNameEx(playerid));
                ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
                Info[playerid][pPnumber] = NumBuy[playerid];
                Earn(NumSeller[playerid], NumPrice[playerid]);
                Bought(playerid, NumPrice[playerid]);
                NumBuy[playerid] = 0;
                NumPrice[playerid] = 0;
                NumSeller[playerid] = 0;
                Facturing[playerid] = 0;
            }
			else if(strcmp(params,"multa",true) == 0){
			    if(TicketOffer[playerid] == 999) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Nadie te multado.");
			    format(string, sizeof(string), "* %s paga una multa", GetPlayerNameEx(playerid));
   				ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
   				format(string, sizeof(string), " %s pagó una multa de %d$.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
   				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
   				SendClientMessageEx(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
   				Bought(playerid, TicketMoney[playerid]);
   				Tax += TicketMoney[playerid];
   				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				Facturing[playerid] = 0;
			}
	        else if(strcmp(params,"matrimonio",true) == 0) {
	            if(ProposeOffer[playerid] < 999) {
	                if(IsPlayerConnected(ProposeOffer[playerid])) {
	                    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid])) {
	                        if(MarryWitness[ProposeOffer[playerid]] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "El proponente no tiene un testigo de matrimonio!");
	                        if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]])) {
	                            if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
	                                if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1963.9612, -369.1851, 1093.7289))
									{
    	                                format(string, sizeof(string), "* Aceptaste la petición de matrimonio a %s.", GetPlayerNameEx(ProposeOffer[playerid]));
	    	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
       	                             	format(string, sizeof(string), "* %s ha aceptado la solicitud de ser tu esposa", GetPlayerNameEx(playerid));
                                    	SendClientMessageEx(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
                                    	format(string, sizeof(string), "Sacerdote: %s, aceptas a %s como tu marido por siempre? (Escribe 'si', que otro caracter arruinará el matrimonio.)", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposeOffer[playerid]));
                                    	SendClientMessageEx(playerid, COLOR_WHITE, string);
                                    	MarriageCeremoney[playerid] = 1;
                                    	ProposedTo[ProposeOffer[playerid]] = playerid;
                                    	GotProposedBy[playerid] = ProposeOffer[playerid];
                                    	MarryWitness[ProposeOffer[playerid]] = 999;
                                    	ProposeOffer[playerid] = 999;
                                    	return 1;
                                	}
                                	else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en la iglesia.");
                            	}
                            	else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El testigo del matrimonio no está cerca de su proponente!");
                        	}
                        	return 1;
                    	}
                    	else return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador que propuso no está cerca de ti!");
                	}
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha propuesto matrimonio!");
        	}
        	if(strcmp(params,"coche",true) == 0) {
            	if(VehicleOffer[playerid] < 999) {
                	if(IsPlayerConnected(VehicleOffer[playerid])) {
                    	if(GetPlayerCash(playerid) > VehiclePrice[playerid]) {
                        	if(IsPlayerInVehicle(VehicleOffer[playerid], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]))
							{
                            	if(!ProxDetectorS(8.0, VehicleOffer[playerid], playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca del que te va a vender");
                            	new playervehicleid = GetPlayerFreeVehicleId(playerid);
                            	new carsamount = VehicleCount(playerid);
                            	if(Info[playerid][pVIP] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, usuarios normales sólo pueden tener 2 coches.");
                            	if(Info[playerid][pVIP] == 1 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, BVIP Sólo puede tener 4 coches.");
                            	if(Info[playerid][pVIP] == 2 && carsamount >= 6) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, SVIP Sólo puede tener 5 coches.");
                            	if(Info[playerid][pVIP] == 3 && carsamount >= 9) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más coches, GVIP Sólo puede tener 7 coches.");
                                if(Info[playerid][pVIP] == 4 && carsamount >= 12) return SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}}[ERROR]:{FFFFFF} No puedes tener más coches, PVIP Sólo puede tener 8 coches.");
								if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes tener más autos.");
                            	new ip[32], ipex[32];
                            	GetPlayerIp(playerid, ip, sizeof(ip));
                            	GetPlayerIp(VehicleOffer[playerid], ipex, sizeof(ipex));
                            	format(string, sizeof(string), "[CAR] %s (IP: %s) pagó $%d a %s por el %s (IP: %s)", GetPlayerNameEx(playerid), ip, VehiclePrice[playerid], GetPlayerNameEx(VehicleOffer[playerid]), GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), ipex);
                            	Log("logs/- Ventas de Coches (Usuarios).log", string);
                            	GetPlayerName(VehicleOffer[playerid], giveplayer, sizeof(giveplayer));
                            	GetPlayerName(playerid, sendername, sizeof(sendername));
                            	format(string, sizeof(string), "* Has pagado por un %s, $%d, de %s. (Usa /ayuda coche para más información)", GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), VehiclePrice[playerid],giveplayer);
                            	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            	format(string, sizeof(string), "* Vendiste tu %s a %s por $%d.",GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), sendername,VehiclePrice[playerid]);
                            	SendClientMessageEx(VehicleOffer[playerid], COLOR_LIGHTBLUE, string);
                            	GivePlayerCash( VehicleOffer[playerid], VehiclePrice[playerid] );
                            	GivePlayerCash(playerid, -VehiclePrice[playerid]);
                            	RemovePlayerFromVehicle(VehicleOffer[playerid]);
                            	new Float:slx, Float:sly, Float:slz;
                            	GetPlayerPos(VehicleOffer[playerid], slx, sly, slz);
                            	SetPlayerPos(VehicleOffer[playerid], slx, sly, slz+2);
                            	PlayerVehicleInfo[playerid][playervehicleid][pvId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle];
                                PlayerVehicleInfo[playerid][playervehicleid][pvVW] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvVW];
								PlayerVehicleInfo[playerid][playervehicleid][pvLock] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvLocked] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2];
                            	strmid(PlayerVehicleInfo[playerid][playervehicleid][pvAllowPlayer], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer], 0, strlen(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer]), 255);
                            	PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPark] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = VehiclePrice[playerid];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
                            	carsforplayer[playerid]++;
                            	for(new m = 0; m < MAX_MODS; m++){
                            	    PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m];
                            	}
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX] = 0.0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY] = 0.0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ] = 0.0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle] = 0.0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvVW] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob] = -1;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1] = 0;
								PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvImpounded] = 0;
               	             	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2] = 0;
             	             	strmid(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer], "Nadie", 0, strlen("Nadie"), 255);
                	            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
                	            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark] = 0;
                	            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPrice] = 0;
                	            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSpawned] = 0;
                	            carsforplayer[VehicleOffer[playerid]]++;
                	            for(new m = 0; m < MAX_MODS; m++) {
                	                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m] = 0;
                	            }
                	            VehicleOffer[playerid] = 999;
                	            VehiclePrice[playerid] = 0;
                	            return 1;
                	        }
                	        else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El que te va a vender no está en el coche.");
                	    }
                	    else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar este coche!");
                	}
                	return 1;
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido un coche!");
        	}
			else if(strcmp(params,"cocaina",true) == 0){
	            if(CrackOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) > CrackPrice[playerid]){
	                    if(Info[playerid][pCrack] < 60){
	                        if(IsPlayerConnected(CrackOffer[playerid])){
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(CrackOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "[COCAINA DEAL (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", CrackGram[playerid], GetPlayerNameEx(playerid), ip, CrackPrice[playerid], GetPlayerNameEx(CrackOffer[playerid]), ipex);
	                            Log("logs/- Ventas de Drogas.log", string);

	                            GivePlayerCash(playerid, -CrackPrice[playerid]);
	                            GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
	                            format(string, sizeof(string), "* Le compraste %d gramos por $%d al vendedor %s.",CrackGram[playerid],CrackPrice[playerid],GetPlayerNameEx(CrackOffer[playerid]));
	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                            format(string, sizeof(string), "* %s ha comprado %d gramos, se ha añadido $%d a tu bolsillo.",GetPlayerNameEx(playerid),CrackGram[playerid],CrackPrice[playerid]);
	                            SendClientMessageEx(CrackOffer[playerid], COLOR_LIGHTBLUE, string);
	                            Info[playerid][pCrack] += CrackGram[playerid];
                                Info[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
	        					if(Info[CrackOffer[playerid]][pDobleExp] == 0)
								{
              						Info[CrackOffer[playerid]][pDrugsSkill]++;
								}
								else
								{
									Info[CrackOffer[playerid]][pDrugsSkill] += 2;
									SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
								}
								CrackOffer[playerid] = 999;
	                            CrackPrice[playerid] = 0;
	                            CrackGram[playerid] = 0;
	                            return 1;
	                        }
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "Estás muy cargado de droga.");
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar esa cantidad.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido droga.");
	        }
	        else if(strcmp(params,"marihuana",true) == 0) {
	            if(PotOffer[playerid] < 999) {
	                if(GetPlayerCash(playerid) > PotPrice[playerid]) {
	                    if(Info[playerid][pPot] < 25) {
	                        if(IsPlayerConnected(PotOffer[playerid])) {
								if(Info[PotOffer[playerid]][pPot] < PotGram[playerid])
								{
							    	SendClientMessageEx(playerid,COLOR_WHITE, "Ese jugador no tiene esa cantidad de marihuana.");
							    	return 1;
								}
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(PotOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "[MARIHUANA (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", PotGram[playerid], GetPlayerNameEx(playerid), ip, PotPrice[playerid], GetPlayerNameEx(PotOffer[playerid]), ipex);
	                            Log("logs/- Ventas de Drogas.log", string);
            	                format(string, sizeof(string), "* Le Compraste %d gramos por $%d a %s.",PotGram[playerid],PotPrice[playerid],GetPlayerNameEx(PotOffer[playerid]));
            	                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            	                format(string, sizeof(string), "* %s te compro %d gramos, sumaste $%d a tu bolsillo.",GetPlayerNameEx(playerid),PotGram[playerid],PotPrice[playerid]);
            	                SendClientMessageEx(PotOffer[playerid], COLOR_LIGHTBLUE, string);
            	                SetPVarInt(PotOffer[playerid], "Cash", GetPVarInt(PotOffer[playerid], "Cash")+PotPrice[playerid]);
								if(Info[PotOffer[playerid]][pDobleExp] == 0)
								{
              						Info[PotOffer[playerid]][pDrugsSkill]++;
								}
								else
								{
									Info[PotOffer[playerid]][pDrugsSkill] += 2;
									SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
								}
            	                GivePlayerCash(playerid, -PotPrice[playerid]);
            	                Info[playerid][pPot] += PotGram[playerid];
            	                Info[PotOffer[playerid]][pPot] -= PotGram[playerid];
            	                PotOffer[playerid] = 999;
            	                PotPrice[playerid] = 0;
            	                PotGram[playerid] = 0;
            	                return 1;
            	            }
            	            return 1;
            	        }
            	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Estás totalmente cargado con marihuana, utilízala primero.");
            	    }
            	    else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar estos gramos de marihuana.");
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido marihuana.");
       	 	}
	        else if(strcmp(params,"chaleco",true) == 0) {
	            if(GuardOffer[playerid] < 999) {
	                if(GetPlayerCash(playerid) > GuardPrice[playerid]) {
	                    if(IsPlayerConnected(GuardOffer[playerid]))
						{
	                        if(ProxDetectorS(6.0, playerid, GuardOffer[playerid])) {
	                            new Float:armour;
	                            GetPlayerArmour(playerid, armour);
	                            if(armour >= 50)
								{
	                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ya tienes un chaleco.");
	                                return 1;
	                            }
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(GuardOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "[Chaleco] %s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, GuardPrice[playerid], GetPlayerNameEx(GuardOffer[playerid]), ipex);
	                            Log("logs/- Ventas de Chalecos.log", string);
	                            SetPlayerArmour(playerid, 50);
	                            format(string, sizeof(string), "* Aceptaste el chaleco usado por $%d del vendedor %s.",GuardPrice[playerid],GetPlayerNameEx(GuardOffer[playerid]));
	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                            format(string, sizeof(string), "* %s aceptó tu chaleco usado, has ganado $%d.",GetPlayerNameEx(playerid),GuardPrice[playerid]);
	                            SendClientMessageEx(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
	                            GivePlayerCash(GuardOffer[playerid], GuardPrice[playerid]);
	                            GivePlayerCash(playerid, -GuardPrice[playerid]);
	                            GuardOffer[playerid] = 999;
	                            GuardPrice[playerid] = 0;
	                            return 1;
	                        }
	                        else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de la persona que te va a vender.");
	                    }
	                    return 1;
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar este Chaleco!");
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido Ningun Chaleco.");
	        }
	        else if(strcmp(params,"spray",true) == 0){
	            if(SprayOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= SprayPrice[playerid]){
	                    if(Info[playerid][pLevel] >= 1){
	                        if(IsPlayerConnected(SprayOffer[playerid])){
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(SprayOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "[SPRAY DEAL (%d MARIHUANAS)] %s (IP:%s) has paid $%d to %s (IP:%s)", SprayGram[playerid], GetPlayerNameEx(playerid), ip, SprayPrice[playerid], GetPlayerNameEx(SprayOffer[playerid]), ipex);
	                            Log("logs/- Ventas de Sprays.log", string);

	                            GivePlayerCash(playerid, -SprayPrice[playerid]);
	                            GivePlayerCash(SprayOffer[playerid], SprayPrice[playerid]);
	                            format(string, sizeof(string), "* Le compraste %d potes por $%d al vendedor %s. (Puedes usar /colorcoche y /paintcoche para pintar tu coche.",SprayGram[playerid],SprayPrice[playerid],GetPlayerNameEx(SprayOffer[playerid]));
	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                            format(string, sizeof(string), "* %s ha comprado %d potes, se ha añadido $%d a tu bolsillo.",GetPlayerNameEx(playerid),SprayGram[playerid],SprayPrice[playerid]);
	                            SendClientMessageEx(SprayOffer[playerid], COLOR_LIGHTBLUE, string);
	                            Info[playerid][pSpraycan] += SprayGram[playerid];
								SprayOffer[playerid] = 999;
	                            SprayPrice[playerid] = 0;
	                            SprayGram[playerid] = 0;
	                            return 1;
	                        }
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto.");
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pagar esa cantidad.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido sprays.");
	        }
			else if(strcmp(params, "arma", true) == 0) {

				new
					playerOffering = GetPVarInt(playerid,"gunID"),
					weaponOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"gun"),
					slotOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"slot"),
					wstring[128];

		   		if(weaponOffering != 0 && slotOffering != 0) {
					if(ProxDetectorS(6.0, playerid, playerOffering) && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(playerOffering)) {
						if(Info[playerOffering][pEstado]!=0) {
							return SendClientMessage(playerid, COLOR_WHITE, "El jugador que quiere venderte está tazeado, esposado o congelado.");
						}
						else if(Info[playerid][pEstado]!=0) {
							return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto mientras estas tazeado, esposado o congelado.");
						}
						else {
							RemovePlayerWeapon(playerOffering, weaponOffering);
							GivePlayerValidWeapon(playerid, weaponOffering);
							format(wstring, sizeof(wstring), "Aceptas el %s de %s.", WeaponNames[weaponOffering], GetPlayerNameEx(playerOffering));
							SendClientMessage(playerid, COLOR_WHITE, wstring);
							format(wstring, sizeof(wstring), "%s aceptó tu %s que le ofreciste.", GetPlayerNameEx(playerid), WeaponNames[weaponOffering]);
							SendClientMessage(playerOffering, COLOR_WHITE, wstring);
							format(wstring, sizeof(wstring), "* %s le da su %s a %s.", GetPlayerNameEx(playerOffering), WeaponNames[weaponOffering], GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, wstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							DeletePVar(playerOffering,"gun");
							DeletePVar(playerid,"gunID");
							DeletePVar(playerOffering,"slot");
							RemovePlayerAttachedObject(playerid, 9);
						}
			    	}
			    	else SendClientMessage(playerid, COLOR_ROJO, "!{FFFFFF} Estás muy lejos de la persona o está en un vehículo.");
			    }
		    	else SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido un arma.");
			}
            else if(strcmp(params,"objeto",true) == 0)
			{
			    if(CraftOffer[playerid] < 999)
				{
					if(IsPlayerConnected(CraftOffer[playerid]))
					{
					    if (ProxDetectorS(5.0, playerid, CraftOffer[playerid]))
					    {
                        	new weaponname[50];
                        	format(weaponname, 50, "%s", CraftName[playerid]);
                        	switch(CraftId[playerid])
							{
								case 1:
								{
									Info[playerid][pScrewdriver]++;
									return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/creararma");
								}
								case 2:
								{
									Info[playerid][pSurveillance]++;
									return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/ponercam /quitarcam /vercam");
								}
								case 3:
								{
									Info[playerid][pFirstaid]++;
									return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/hpsave");
								}
								case 4:
								{
									return GivePlayerValidWeapon(playerid, 46);
								}
							}
                        	Info[CraftOffer[playerid]][pMats] -= CraftMats[playerid];
                        	Info[CraftOffer[playerid]][pArmsSkill]++;
                        	format(string, sizeof(string), "Le diste a %s una %s.", GetPlayerNameEx(playerid),weaponname);
                        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        	SendClientMessageEx(CraftOffer[playerid], COLOR_GRAD1, string);
                        	format(string, sizeof(string), "Recibiste una %s de %s.", weaponname, GetPlayerNameEx(CraftOffer[playerid]));
                        	SendClientMessageEx(playerid, COLOR_GRAD1, string);
                        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        	format(string, sizeof(string), "* %s crea algo de materiales, y se lo da a %s.", GetPlayerNameEx(CraftOffer[playerid]), GetPlayerNameEx(playerid));
                        	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        	CraftOffer[playerid] = 999;
                        	CraftId[playerid] = 0;
                        	CraftMats[playerid] = 0;
					    }
                   		else return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca de la persona para aceptar el objeto.");
					}
					return 1;
				}
				return 1;
			}
	        else if(strcmp(params,"testigo",true) == 0) {
	            if(MarryWitnessOffer[playerid] < 999) {
	                if(IsPlayerConnected(MarryWitnessOffer[playerid])) {
	                    if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid])){
	                        format(string, sizeof(string), "* Aceptaste la solicitud de %s, para ser tu testigo de matrimonio.", GetPlayerNameEx(MarryWitnessOffer[playerid]));
	                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* %s aceptó tu solicitud para ser tu testigo de matrimonio.", GetPlayerNameEx(playerid));
	                        SendClientMessageEx(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
	                        MarryWitness[MarryWitnessOffer[playerid]] = playerid;
	                        MarryWitnessOffer[playerid] = 999;
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador que te ha pedido que seas su testigo de matrimonio no está cerca de ti.");
	                }
	                return 1;
    	        }
    	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te pidió ser testigo de matrimonio.");
    	    }
	        else if(strcmp(params,"divorcio",true) == 0){
	            if(DivorceOffer[playerid] < 999){
	                if(IsPlayerConnected(DivorceOffer[playerid])){
	                    if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid])){
	                        format(string, sizeof(string), "* Firmaste los papeles del divorcio de %s, ahora estás solo(a) de nuevo.", GetPlayerNameEx(DivorceOffer[playerid]));
	                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* %s firmó los papeles del divorcio, ahora estás solo(a) de nuevo.", GetPlayerNameEx(playerid));
	                        SendClientMessageEx(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
	                        ClearMarriage(playerid);
	                        ClearMarriage(DivorceOffer[playerid]);
	                        Info[playerid][pPhousekey] = 999;
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador que te propuso el divorcio no está cerca tuyo.");
                	}
                	return 1;
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te propuso el divorcio.");
        	}
			else if(strcmp(params,"materiales",true) == 0){
	            if(MatsOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= MatsPrice[playerid]){
						if(IsPlayerConnected(MatsOffer[playerid])){
							if(Info[MatsOffer[playerid]][pMats] < MatsAmount[playerid]) return SendClientMessageEx(playerid,COLOR_ROJO, "!{FFFFFF} No tiene los materiales suficientes.");

	         				format(string, sizeof(string), "* Compraste %d materiales por $%d, de  %s.", MatsAmount[playerid], MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]));
	            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof(string), "* %s has vendido %d materiales, sumaste $%d a tu bolsillo.", GetPlayerNameEx(playerid), MatsAmount[playerid], MatsPrice[playerid]);
	                		SendClientMessageEx(MatsOffer[playerid], COLOR_LIGHTBLUE, string);

	                  		GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
							GivePlayerCash(playerid, -MatsPrice[playerid]);
	                    	Info[playerid][pMats] += MatsAmount[playerid];
	                    	Info[MatsOffer[playerid]][pMats] -= MatsAmount[playerid];

	                        new ip[32], ipex[32];
	                        GetPlayerIp(playerid, ip, sizeof(ip));
	                        GetPlayerIp(MatsOffer[playerid], ipex, sizeof(ipex));
	                        format(string, sizeof(string), "[MATS DEAL] %s(IP:%s) pagó %d materiales de %s(IP:%s)", GetPlayerNameEx(playerid), ip, MatsAmount[playerid], GetPlayerNameEx(MatsOffer[playerid]), ipex);
	                        Log("logs/- Ventas de Materiales.log", string);

                            SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
	                    	MatsOffer[playerid] = 999;
	                    	MatsPrice[playerid] = 0;
	                    	MatsAmount[playerid] = 0;
	                    }
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido materiales.");
			}
			else if(strcmp(params,"fichasvip",true) == 0){
	            if(FOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= FPrice[playerid]){
						if(IsPlayerConnected(FOffer[playerid])){
							if(Info[FOffer[playerid]][pVTokens] < FAmount[playerid]) return SendClientMessageEx(playerid,COLOR_ROJO, "!{FFFFFF} No tiene las fichas suficientes.");

	         				format(string, sizeof(string), "* Compraste %d fichas VIP por $%d, de %s.", FAmount[playerid], FPrice[playerid], GetPlayerNameEx(FOffer[playerid]));
	            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof(string), "* %s has vendido %d fichas VIP, ganaste $%d de dinero.", GetPlayerNameEx(playerid), FAmount[playerid], FPrice[playerid]);
	                		SendClientMessageEx(FOffer[playerid], COLOR_LIGHTBLUE, string);

	                  		GivePlayerCash(FOffer[playerid], FPrice[playerid]);
							GivePlayerCash(playerid, -FPrice[playerid]);
	                    	Info[playerid][pVTokens] += FAmount[playerid];
                            Info[FOffer[playerid]][pVTokens] -= FAmount[playerid];
	                    	FOffer[playerid] = 999;
	                    	FPrice[playerid] = 0;
	                    	FAmount[playerid] = 0;
	                    }
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido fichas del Oro Gift.");
			}
			else if(strcmp(params,"vip",true) == 0){
	            if(VIPOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= VIPPrice[playerid]){
						if(IsPlayerConnected(VIPOffer[playerid])){
							if(Info[VIPOffer[playerid]][pVIP] == 0) return SendClientMessageEx(playerid,COLOR_ROJO, "!{FFFFFF} Ese usuario no es Premium.");
    			    		new viptype[10];
			   			 	switch(Info[VIPOffer[playerid]][pVIP])
			    			{
			        			case 1: viptype = "Bronce";
			        			case 2: viptype = "Plata";
			        			case 3: viptype = "Oro";
			        			case 4: viptype = "Platino";
			    			}
							format(string, sizeof(string), "* Compraste el VIP %s de %s por $%d.",viptype,GetPlayerNameEx(VIPOffer[playerid]),VIPPrice[playerid]);
	            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof(string), "* %s le has vendido tu VIP %s y ganaste $%d de dinero.",GetPlayerNameEx(playerid),viptype,VIPPrice[playerid]);
	                		SendClientMessageEx(VIPOffer[playerid], COLOR_LIGHTBLUE, string);
	                        new ip[32], ipex[32];
	                        GetPlayerIp(playerid, ip, sizeof(ip));
	                        GetPlayerIp(VIPOffer[playerid], ipex, sizeof(ipex));
	                        format(string, sizeof(string), "[VIP DEAL] %s(IP:%s) pagó VIP %s por $%d de %s(IP:%s)", GetPlayerNameEx(playerid), ip, viptype, VIPPrice[playerid],GetPlayerNameEx(VIPOffer[playerid]), ipex);
	                        Log("logs/- Ventas VIP.log", string);
              		        new year, month,day;
    						getdate(year, month, day);
	                        format(string, sizeof(string), "[[COMPRA IG] VIP EXCHANGE] %s dejo de ser VIP %s, razón: compra a %s (%d/%d/%d)",GetPlayerNameEx(VIPOffer[playerid]),viptype,GetPlayerNameEx(playerid),year,month,day);
	                        Log("logs/- Ventas VIP.log", string);

							new level = Info[VIPOffer[playerid]][pVIP],
                				dExpire = Info[VIPOffer[playerid]][pVIPDateD],
                				mExpire = Info[VIPOffer[playerid]][pVIPDateM];

	                  		GivePlayerCash(VIPOffer[playerid], VIPPrice[playerid]);
							GivePlayerCash(playerid, -VIPPrice[playerid]);
							// buyer
	                    	Info[playerid][pVIP] = level;
	                    	Info[playerid][pVIPDateM] = mExpire;
	                    	Info[playerid][pVIPDateD] = dExpire;
	                    	Info[playerid][pBuddyInvited] = 0;
	                    	Info[playerid][pTempVIP] = 0;
	                    	// Offer
	                    	Info[VIPOffer[playerid]][pVIP] = 0;
	                    	Info[VIPOffer[playerid]][pVIPDateM] = -1;
	                    	Info[VIPOffer[playerid]][pVIPDateD] = -1;

	                    	VIPOffer[playerid] = 999;
	                    	VIPPrice[playerid] = 0;

	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "La persona que te ofreció se desconectó.");
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido fichas del Oro Gift.");
			}
			else if(strcmp(params,"faccion",true) == 0){
	            if(ContratoFac[playerid] == 0) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}No tienes ninguna invitación a facción.");{
	                {
						{
	              			format(string, sizeof(string), "Felicitaciones, usted aceptó un contrato en:{FFFFFF} %s",ReqF_Name[playerid]);
	              			SendClientMessageEx(playerid, COLOR_YELLOW, string);
	              			Info[playerid][pMember]= ReqF_Faction[playerid];
	              			Info[playerid][pRank] = 1;
	              			Info[playerid][pDivision] = 1;
	              			format(string, sizeof(string), "* %s firma un contrato.", GetPlayerNameEx(playerid));
	              			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	              			ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
	              			ContratoFac[playerid] = 0;

	                    }
	                }
				}
			}
			else if(strcmp(params,"fichasg",true) == 0){
	            if(GGOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= GGPrice[playerid]){
						if(IsPlayerConnected(GGOffer[playerid])){
							if(Info[GGOffer[playerid]][pGTokens] < GGAmount[playerid]) return SendClientMessageEx(playerid,COLOR_ROJO, "!{FFFFFF} No tiene las fichas suficientes.");

	         				format(string, sizeof(string), "* Compraste %d fichas del Oro Gift por $%d, de %s.", GGAmount[playerid], GGPrice[playerid], GetPlayerNameEx(GGOffer[playerid]));
	            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof(string), "* %s has vendido %d fichas del Oro Gift, ganaste $%d de dinero.", GetPlayerNameEx(playerid), GGAmount[playerid], GGPrice[playerid]);
	                		SendClientMessageEx(GGOffer[playerid], COLOR_LIGHTBLUE, string);

	                  		GivePlayerCash(GGOffer[playerid], GGPrice[playerid]);
							GivePlayerCash(playerid, -GGPrice[playerid]);
	                    	Info[playerid][pGTokens] += GGAmount[playerid];
                            Info[GGOffer[playerid]][pGTokens] -= GGAmount[playerid];
	                    	GGOffer[playerid] = 999;
	                    	GGPrice[playerid] = 0;
	                    	GGAmount[playerid] = 0;
	                    }
	                }
	                else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido fichas del Oro Gift.");
			}
        	else { return 1; }
    	}
   	 	return 1;
	}
    zcmd(cfumar, playerid, params[])
    {
    	if(Info[playerid][pCigarettes] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, 		"No tienes cigarros.");
	    else if(Info[playerid][pLighter] == 0) 	return SendClientMessageEx(playerid, COLOR_WHITE, 		"No tienes encendedor.");
	    else if(IsSmoking[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, 		"Ya estas fumando. Utiliza: /dfumar");
	    else
    	{
	        new randsmoke = random(6);
	        if(randsmoke < 5)
     	   {
				new string[128];
				Info[playerid][pCigarettes]--;
				Info[playerid][pSuci] += 13;
				IsSmoking[playerid] = 1;
	    		format(string, sizeof(string), "* %s saca un cigarro y lo enciende.", GetPlayerNameEx(playerid));
			    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estás fumando, te recordamos usar {2EDFFF}/dfumar {FFFFFF}para dejar ésta acción.");
	        }
	        else
    	    {
    			SendClientMessageEx(playerid, COLOR_WHITE, "Mucho viento, no lograste encender el cigarro.");
	        }
	    }
	    return 1;
	}
    zcmd(dfumar, playerid, params[])
	{
        if(IsSmoking[playerid] > 0)
		{
            new string[128];
        	IsSmoking[playerid] = 0;
         	format(string, sizeof(string), "* %s tira el cigarro al suelo y lo pisa.", GetPlayerNameEx(playerid));
         	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
          	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
          	ClearAnimations(playerid);
        }
        else SendClientMessageEx(playerid, COLOR_GREY, "No está fumando.");
        return 1;
    }
	//Toys
    zcmd(ctoys,playerid, params[])
    {
        if(IsPlayerInRangeOfPoint(playerid,5.0,802.5069,-1419.6813,1016.4688) || (playerid,5.0,2383.9473, 1112.8636, 34.3070))
        {
        	if(Info[playerid][pVIP] >= 3)
        	{
            	return SafeDialogEx(playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "{CC0066}Tienda de Accesorios", "Bienvenido al dispensador de accesorios VIP! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir que menú verás","Ok", "Salir");
        	}
        }
        if(IsAtClothShop(playerid))
        {
            SafeDialogEx(playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "{CC0066}Tienda de Accesorios", "Bienvenido a la tienda de accesorios!\n\nSeleccione por favor la sección:","{FFFFFF}Normal", "{FFFF00}VIP");
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una tienda de Ropa.");
        return 1;
	}
    zcmd(ayudatoy,playerid, params[])
    {
        SendClientMessageEx(playerid, COLOR_GENERAL,"{CC0066}Comandos para TOY's");
        SendClientMessageEx(playerid, COLOR_WHITE,"- Para comprar un toy en la tienda usa: /ctoys");
        SendClientMessageEx(playerid, COLOR_WHITE,"- Para ponerte y editar un toy usa: /toys");
        SendClientMessageEx(playerid, COLOR_WHITE,"- Para ponerte todos tus toy usa: /ptoys");
        SendClientMessageEx(playerid, COLOR_WHITE,"- Para quitarte todos tus toy usa: /qtoys");
        SendClientMessageEx(playerid, COLOR_WHITE,"- Para poner o quitar un determinado toy usa: /toy (0-9 slot)");
        return 1;
    }
	CMD:ayudacajafam(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Caja Fuerte (Familia)");
		SendClientMessageEx(playerid, COLOR_WHITE, "C. Fuerte: /cfdepositar /cfretirar /fgarma /fsarma /cfbalance");
		return 1;
	}
	//CMD:ayuda(playerid, params[]) return SafeDialogEx(playerid, MENUAYUDA, DIALOG_STYLE_LIST, "{00F70C}Ayuda","General\nFacción\nChat\nLider\nTelefono\nCasa\nCoche\nBanco\nPremium\nMatrimonio\nArmas\nNegocios\nFamilia\nTrabajo\nAnimaciones\nNegocio", "Ok", "Cancelar");
    CMD:ayuda(playerid, params[])
    {
    	for(new i = 0; i < 15; i++)
		{
            TextDrawShowForPlayer(playerid, AyudaTexdrawS);
            TextDrawShowForPlayer(playerid, XCierreA);
			TextDrawShowForPlayer(playerid, AyudaT[i]);
		}
		SelectTextDraw(playerid, COLOR_AYUDABLANCO);
        return 1;
    }
 //Solicitar soporte
zcmd(soporte, playerid, params[])
    {
        if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás conectado");
        if(JustReported[playerid] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Debe esperar 1 minuto, si es una duda sobre el servidor, coloque /duda para tener respuestas.");
        {
			new so[] = "{FFFFFF}- Administración\n{FFFFFF}- Vendedor VIP";
			SafeDialogEx(playerid, DIALOG_SO, DIALOG_STYLE_LIST,"{B87DFF}• Soporte Administrativo", so, "Solicitar", "Cerrar");
		}
        return 1;
    }

zcmd(asoporte, playerid, params[])
	{
        if (Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "No eres de la administración para usar este comando.");
        if(!sscanf(params, "u", params[0]))
		{
		    if(IsPlayerConnected(params[0]))
		    {
		    	if(PlayerSol[params[0]] == 1)
		    	{
		    	    new string[128];
		    	    format(string, sizeof(string), "Inf. Soporte:{FFFFFF} %s aceptó la solicitud de soporte: {B87DFF}ID %d", GetPlayerNameEx(playerid), params[0], GetPlayerNameEx(params[0]));
		    	    ABroadCast(COLOR_LILA_CLARO, string, 1);
		    	    new NotiSoport[1000];
		    	    strcat(NotiSoport, "{B87DFF}»{FFFFFF} La solicitud de soporte que ha enviado fue aceptada lo cual le pedimos\n");
		    	    strcat(NotiSoport, "{FFFFFF}   que espere en su posición, en minutos está contigo.\n\n");
		    	    strcat(NotiSoport, "{B87DFF}»{FFFFFF} En el caso de que no lo atiendan, vuelva a enviar el pedido ó espere con\n");
		    	    strcat(NotiSoport, "{FFFFFF}   moderación hasta que estén contigo y te ayuden en lo que solicite.\n\n");
		    	    strcat(NotiSoport, "{FF0000}!{FFFFFF} Si enviaste solicitud 3 veces en total, por favor tome imágenes de las 3\n");
		    	    strcat(NotiSoport, "{FFFFFF}  notificaciones que le llegó en su chat, luego ir a /redes el cual seleccione\n");
		    	    strcat(NotiSoport, "{FFFFFF}  una para ir a reportar con la siguiente razón: {FF0000}Falta de Atención\n\n");
		    	    strcat(NotiSoport, "{B87DFF}»{FFFFFF} Saludos desde el centro de supervisión administrativa.\n");
		    	    ShowPlayerDialog(params[0], 1500, DIALOG_STYLE_MSGBOX, "{B87DFF}• {FFFFFF}Soporte Aceptado", NotiSoport, "Cerrar", "");
		    	    PlayerPlaySound(params[0], 1056, 0.0, 0.0, 0.0);
		    	    format(string, sizeof(string), "Notificación de Seguridad:{FFFFFF} %s aceptó tu petición de soporte.", GetPlayerNameEx(playerid), playerid);
		    	    SendClientMessageEx(params[0], COLOR_LILA_CLARO, string);
		    	    PlayerSol[params[0]] = 0;
		    	} else SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}[Error de Soporte]:{FFFFFF} El usuario/id colocado, no ha pedido ningún soporte.");
		    } else SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}[Error de Soporte]:{FFFFFF} El usuario/id colocado, no esta conectado.");
        } else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}Para brindar soporte, utilice:{893F8E} /Asoporte ID");
        return 1;
    }

zcmd(rsoporte, playerid, params[])
	{
        if (Info[playerid][pAdminZC] < 9) return SendClientMessageEx(playerid, COLOR_GRAD2, "No eres de la administración para usar este comando.");
        if(!sscanf(params, "u", params[0]))
		{
		    if(IsPlayerConnected(params[0]))
		    {
		    	if(PlayerSol[params[0]] == 1)
		    	{
		    	    new string[128];
		    	    format(string, sizeof(string), "Inf. Soporte:{FFFFFF} %s rechazó la solicitud de soporte: {B87DFF}ID %d", GetPlayerNameEx(playerid), params[0], GetPlayerNameEx(params[0]));
		    	    ABroadCast(COLOR_LILA_CLARO, string, 1);
		    	    new NotiSoport[1000];
		    	    strcat(NotiSoport, "{B87DFF}»{FFFFFF} La solicitud que enviaste fue rechazada, pedimos que leas las posibles\n");
		    	    strcat(NotiSoport, "{FFFFFF}   razones lo cual se rechazó dicha solicitud.\n\n");
		    	    strcat(NotiSoport, "{FF0000}1){FFFFFF} En estos momentos se encuentran ocupados\n");
		    	    strcat(NotiSoport, "{FF0000}2){FFFFFF} Te pusieron en espera\n");
		    	    strcat(NotiSoport, "{FF0000}3){FFFFFF} No hay nadie con el rango suficiente para aceptar tu soporte\n");
		    	    strcat(NotiSoport, "{FF0000}4){FFFFFF} Ya te atendieron un soporte\n\n");
		    	    strcat(NotiSoport, "{B87DFF}»{FFFFFF} Puedes intentar solicitar a un moderador (Recomendado)\n");
		    	    ShowPlayerDialog(params[0], 1500, DIALOG_STYLE_MSGBOX, "{FF0000}! {FFFFFF}Soporte Rechazado", NotiSoport, "Cerrar", "");
		    	    PlayerPlaySound(params[0], 1056, 0.0, 0.0, 0.0);
		    	    format(string, sizeof(string), "Notificación de Seguridad:{FFFFFF} Se rechazó tu pedido de soporte!", GetPlayerNameEx(playerid), playerid);
		    	    SendClientMessageEx(params[0], COLOR_LILA_CLARO, string);
		    	    PlayerSol[params[0]] = 0;
		    	} else SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}[Error de Soporte]:{FFFFFF} El usuario/id colocado, no ha pedido ningún soporte.");
		    } else SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}[Error de Soporte]:{FFFFFF} El usuario/id colocado, no esta conectado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/rsoporte (usuario id){FFFFFF} para rechazar un soporte.");
        return 1;
    }

zcmd(suciedad, playerid, params[])
     {
      if(IsPlayerConnected(playerid))
      {
           new string[80];
             format(string, sizeof(string), "Suciedad: {FFFFFF}Tu por ciento de suciedad es: {A04000}%d", Info[playerid][pSuci]);
             SendClientMessageEx(playerid, COLOR_SUCIEDAD, string);

       }
      return 1;
     }

zcmd(cursos, playerid, params[])
     {
      if(IsPlayerConnected(playerid))
      {
           new string[100];
             format(string, sizeof(string), "Emergencias: {B9C9CF}%d", Info[playerid][pCRet]);
             SendClientMessageEx(playerid, COLOR_WHITE, string);

       }
      return 1;
     }

zcmd(semillas, playerid, params[])
     {
      if(IsPlayerConnected(playerid))
      {
           new string[100];
             format(string, sizeof(string), "Semillas: {B9C9CF}%d", Info[playerid][pWSeeds]);
             SendClientMessageEx(playerid, COLOR_WHITE, string);

       }
      return 1;
     }
//*******************Aviso de suciedad**************************
function CheckSuciedad()
{
   for(new i=0; i < MAX_PLAYERS; i++)
   {
       if(IsPlayerConnected(i))
       {
           new string[128], Float:health;
         if(Info[i][pSuci] == 10 && Info[i][pSuci] == 15)
         {
             SendClientMessageEx(i, COLOR_SUCIEDAD, "Tu ropa está un poco sucia, te recomendamos ir a lavarla.");
         }
         else if(Info[i][pSuci] == 50 && Info[i][pSuci] == 60 && Info[i][pSuci] == 70 && Info[i][pSuci] == 80)
         {
             format(string, sizeof(string), "* %s desprende un olor desagradable tras estar sucio.", GetPlayerNameEx(i));
             ProxDetector(20.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
         }
         else if(Info[i][pSuci] == 90 && Info[i][pSuci] == 100)
         {
             GetPlayerHealth(i, health);
             format(string, sizeof(string), "* %s desprende un olor muy grave.", GetPlayerNameEx(i));
             ProxDetector(20.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
         }
      }
   }
   return 1;
}

function LavadoraTienda(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new string[128];
      Bought(playerid, 170);
      format(string, sizeof string, "* %s comienza a ponerse la ropa limpia.", GetPlayerNameEx(playerid));
      ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      SendClientMessageEx(playerid, COLOR_AT, "Lavandería: {FFFFFF}La ropa ya está limpia, el costo fue de 170$.");
      SetPlayerSkin(playerid, Info[playerid][pChar]);
      Info[playerid][pSuci] = 0;
   }
   return 0;
}

function LavadoraCasa(playerid)
{
   if(IsPlayerConnected(playerid))
   {
      new string[128];
      format(string, sizeof string, "* %s comienza a ponerse la ropa limpia.", GetPlayerNameEx(playerid));
      ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      SetPlayerSkin(playerid, Info[playerid][pChar]);
      Info[playerid][pSuci] = 0;
   }
   return 0;
}

function TiempoB(playerid)
{
   if(IsPlayerConnected(playerid))
   {
      C_OOC[playerid] = 1;
   }
   return 0;
}
	CMD:hduty(playerid, params[])
	{
    if(TrabajoHeladero(playerid) || Info[playerid][pJob] == 14  || Info[playerid][pJob2] == 14)
	{
        if(OnDuty[playerid] == 1)
		{
 			new string[128];
			format(string, sizeof(string), "**[Heladero] Heladero/a %s está fuera de servicio",GetPlayerNameEx(playerid));
			BroadCast(COLOR_LIGHTBLUE, string);
		    SendClientMessageEx(playerid, COLOR_BLUE, "* Ahora estás fuera servicio, ya no recibirás llamadas.");
            OnDuty[playerid] = 0;

        }
        else
		{
			new string[128];

			format(string, sizeof(string), "**[Heladero] Heladero/a %s está en las calles vendiendo helados",GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
			BroadCast(COLOR_LIGHTBLUE, string);
			SendClientMessageEx(playerid, COLOR_BLUE, "* Ahora estás en servicio, recibirás llamadas de la gente que te necesite.");
            OnDuty[playerid] = 1;

        }
    }
    else
	{

        SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando porque no eres Heladero");
    }
    return 1;
	}
	CMD:ayudasuciedad(playerid, params[])
	{
		SendClientMessageEx(playerid, COLOR_ROSADOC, "Sistema de Suciedad: {FFFFFF}/Suciedad — /Lavarropa (En lavandería o casas)");
		return 1;
	}
	CMD:ayudasafe(playerid, params[])
	{
		SendClientMessageEx(playerid, COLOR_BLANCO, "C. Fuerte: /cfdepositar — /cfretirar — /fgarma — /fsarma — /cfbalance");
		return 1;
	}
    zcmd(toys,playerid, params[])
    {
	    SafeDialogEx( playerid, TOYS, DIALOG_STYLE_LIST, "{CC0066}Menu de TOY's", "Poner/Quitar un toy\nEditar un toy\nEliminar un toy","OK", "Cancelar" );
	    return 1;
    }
    zcmd(ptoys,playerid, params[])
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "{CC0066}Inf. Toy's:{FFFFFF} Te colocaste todos los toy's!");
	    for(new x;x<MAX_PLAYERTOYS;x++)
	    {
		    if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ],
			PlayerToyInfo[playerid][x][ftscaleX], PlayerToyInfo[playerid][x][ftscaleY], PlayerToyInfo[playerid][x][ftscaleZ]);
	    }
	    return 1;
    }
    zcmd(qtoys,playerid, params[])
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "{CC0066}Inf. Toy's:{FFFFFF} Te quitaste todos los toy's");
	    for(new x;x<MAX_PLAYERTOYS;x++)
	    {
		    RemovePlayerAttachedObject(playerid, x);
        }
        return 1;
    }
    zcmd(sentadilla,playerid,params[])
	{
    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		AplicaAnim(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
		}
		return 1;
	}
    // Nombre Temporal Admin
	CMD:adminnombre(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarminombre (Nuevo Nombre)");
		if (Info[playerid][pAdminZC] >= 5)
		{
			if(GetPVarInt(playerid, "TempName") == 0)
			{
				if(!INI_Exist(params))
				{
				    format(string, sizeof(string), "[AVISO]: %s está temporalmente con el nombre de %s.",GetPlayerNameEx(playerid), params);
				    ABroadCast(COLOR_GENERAL, string, 2);
					format(string, sizeof(string), "Estás temporalmente con el nombre de {5ABAFF}%s{FFFFFF}.", params);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SendClientMessageEx(playerid, COLOR_GRAD2, "- Este comando es para utilizar estando off duty!");
					SetPVarInt(playerid, "TempName", 1);
					new name[MAX_PLAYER_NAME];
					GetPlayerName(playerid, name, sizeof(name));
					SetPVarString(playerid, "TempNameName", name);
					SetPlayerName(playerid, params);
					format(string, sizeof(string), "%s ha cambiado su nombre a {5ABAFF}%s{FFFFFF}.", name, params);
					Log("logs/- Cambios de Nombres (Staff).log", string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "Este nombre ya está registrado.");
			}
			else
			{
				new name[MAX_PLAYER_NAME];
				format(string, sizeof(string), "[AVISO]: %s volvió a usar su nombre anterior.",GetPlayerNameEx(playerid));
				ABroadCast(COLOR_GENERAL, string, 2);
				GetPVarString(playerid, "TempNameName", name, sizeof(name));
				format(string, sizeof(string), "Tu nombre a sido cambiado al anterior: {5ABAFF}%s{FFFFFF}.", name);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[NOTA]:{FFFFFF} Ahora tus stats se guardarán.");
				SetPVarInt(playerid, "TempName", 0);
				SetPlayerName(playerid, name);
			}
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando ahora.");
		return 1;
	}
	 zcmd(borrarcuenta, playerid, params[]){
		new string3[32], string[128], name[32];
   	    if(Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres programador para utilizar este comando!");
   	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty{FFFFFF} para usar este comando.");
   	    if(!sscanf(params, "s[32]", name)){
			format(string3,sizeof(string3),"accounts/%s.ini",name);
			if(fexist(string3)){
				fremove(string3);
				format(string, sizeof(string), "- %s ha eliminado la cuenta de %s de la base de datos.",GetPlayerNameEx(playerid), name);
				ABroadCast(COLOR_ROJO, string, 2);
			} else Message(playerid, COLOR_BLANCO, "- La cuenta que intentas de eliminar no existe en la base de datos.");
		} else Message(playerid, COLOR_BLANCO, "Para eliminar la cuenta de un usuario, utilice: /Borrarcuenta Nombre_Apellido");
    	return 1;
   	}
	//Canales
	zcmd(togac, playerid, params[]){
        if(Info[playerid][pAdminZC] >= 2){
            if(!AdminChat[playerid]){
		        AdminChat[playerid] = 1;
		        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} Canal de administración desactivado.");
		    }
		    else{
		        AdminChat[playerid] = 0;
		        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} Canal de administración activado.");
		    }
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        return 1;
    }
	zcmd(togpm, playerid, params[]){
        if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización, brindar atención lo más posible.");
		if (!HidePM[playerid]){
			HidePM[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_ROJO, "/W Bloqueados");
		}
		else if (HidePM[playerid]){
			HidePM[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_VERDE, "/W Desbloqueados");
		}
        return 1;
    }
    zcmd(togfam, playerid, params[]){
        if(!gFam[playerid]){
			gFam[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}¡Chat de facción desactivado!");
		}
		else{
			gFam[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}¡Chat de facción activado!");
		}
        return 1;
    }
    zcmd(tognews, playerid, params[]){
        if(!gNews[playerid]){
			gNews[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[FOX Desactivado]:{FFFFFF} Ahora no podras ver los anuncios y transmisiones de FOX.");
		}
		else{
			gNews[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[FOX Activado]:{FFFFFF} Ahora podras ver los anuncios y transmisiones de FOX.");
		}
        return 1;
    }
	zcmd(togphone, playerid, params[]){
        if (!PhoneOnline[playerid]){
			PhoneOnline[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}Has apagado tu teléfono!");
		}
		else{
			PhoneOnline[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}Has prendido tu teléfono!");
		}
        return 1;
    }
	zcmd(tognewbie, playerid, params[]){
		if (!gOoc[playerid]){
			gOoc[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Desactivaste el chat de ayuda.");
		}
		else{
			gOoc[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Activaste el chat de ayuda.");
		}
		return 1;
	}
    zcmd(removegps, playerid, params[]){
		if(IsPlayerConnected(playerid)) DisablePlayerCheckpoint(playerid);
		return 1;
	}
    zcmd(saltartutorial, playerid, params[]){
        if(TutStep[playerid] > 0){
    		TutTime[playerid] = 13;
   			Tutorial_Inside(playerid);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}No estás en un tutorial para utilizar este comando!");
		return 1;
	}
    zcmd(jetpack, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if (Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if(IsPlayerConnected(playerid))
        {
        	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
        	JetPack[playerid] = 1;
		 	SendClientMessageEx(playerid, COLOR_ROJO_BORDO, "{CC0000}» JetPack 2 puesto correctamente!");
        }
		return 1;
    }
	zcmd(eject, playerid, params[])
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new State = GetPlayerState(playerid), string[90], giveplayerid;
            if(State!=PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres conductor.");
            if(!sscanf(params, "d", giveplayerid))
            {
                if(IsPlayerConnected(giveplayerid))
				{
    				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No te puedes echar ati mismo.");
        			if(IsPlayerInAnyVehicle(giveplayerid))
			        {
						if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(giveplayerid))
						{
	      					format(string, sizeof(string), "* %s agarra fuertemente a %s y lo expulsa del vehículo", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    	    RemovePlayerFromVehicle(giveplayerid);
						} else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El jugador no está en tu vehículo.");
					} else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El jugador no está en un vehículo.");
				} else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
            } else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/eject (usuario id){FFFFFF} para expulsarlo del vehículo.");
        } else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en ningún vehículo!");
        return 1;
    }
    // Other's
    zcmd(rllamada, playerid, params[])
    {
        if(Team_LAPD(playerid))
        {
        	if(pdtrace != 0 || pdtrace_x != 0 || pdtrace_y != 0 || pdtrace_z != 0)
         	{
                Message(playerid, COLOR_YELLOW2, "Ubicación de la última llamada marcada.");
				SetPlayerCheckpoint(playerid,pdtrace_x,pdtrace_y,pdtrace_z,8.0);
	        }
	        else Message(playerid, COLOR_WHITE, "Error en la localizacion de la persona que llama.");
		}
        if(Team_CBP(playerid))
        {
        	if(pdtrace != 0 || pdtrace_x != 0 || pdtrace_y != 0 || pdtrace_z != 0)
         	{
                Message(playerid, COLOR_YELLOW2, "Ubicación de la última llamada marcada.");
				SetPlayerCheckpoint(playerid,pdtrace_x,pdtrace_y,pdtrace_z,8.0);
	        }
	        else Message(playerid, COLOR_WHITE, "Error en la localizacion de la persona que llama.");
		}
	    else if(Team_LAMD(playerid))
        {
        	if(emdtrace != 0 || emdtrace_x != 0 || emdtrace_y != 0 || emdtrace_z != 0)
         	{
	            Message(playerid, COLOR_YELLOW2, "Ubicación de la última llamada marcada.");
				SetPlayerCheckpoint(playerid,emdtrace_x,emdtrace_y,emdtrace_z,8.0);
	        } else Message(playerid, COLOR_WHITE, "Error al localizar!");
		} else Message(playerid, COLOR_WHITE, "¡No autorizado!");
        return 1;
    }
	zcmd(entrar, playerid, params[])
	{
	    if( Info[playerid][pJailed] > 0 ) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando.");
	    if(IsPlayerConnected(playerid))
		{
		    for(new i = 0; i < sizeof(DDoorsInfo); i++)
			{
	        	if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW])
				{
	            	if(DDoorsInfo[i][ddVIP] > 0 && Info[playerid][pVIP] < DDoorsInfo[i][ddVIP])
					{
	                	SendClientMessageEx(playerid, COLOR_FADE1, "Seguridad dice: Para entrar a este lugar debes tener tu credencial del Club VIP.");
	                	return 1;
	            	}
	            	if(DDoorsInfo[i][ddFamily] > 0)
					{
	                	if(Info[playerid][pFMember] != DDoorsInfo[i][ddFamily]-1)
						{
	                    	SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, sólo para miembros de la familia.");
	    					return 1;
	    				}
	   	            }
		            if(DDoorsInfo[i][ddFaction] > 0)
					{
						if(DDoorsInfo[i][ddFaction] >= 1 && DDoorsInfo[i][ddFaction] <= 3)
						{
							if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, esta puerta está restringida. (Sólo Policías)");
						}
						else if(DDoorsInfo[i][ddFaction] < 32 && Info[playerid][pMember] != DDoorsInfo[i][ddFaction])
						{
							return	SendClientMessageEx(playerid, COLOR_WHITE, "Sólo ingreso a miembros de la facción.");
						}
		            }
		            if(DDoorsInfo[i][ddAdmin] > 0 && Info[playerid][pAdminZC] < DDoorsInfo[i][ddAdmin])
					{
		                return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, necesitas ser de más nivel administrativo.");
		            }

		            if(DDoorsInfo[i][ddWanted] > 0 && Info[playerid][pWantedLevel] != 0)
					{
		                return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta esta restringida a personas con nivel de búsqueda.");
		            }

					if(DDoorsInfo[i][dLocked] == 1)
					{
					    return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta está bloqueada.");
					}
            		SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
            		Info[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
            		Info[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
            		SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
            		if(DDoorsInfo[i][ddInteriorLoad])
					{
            		   LoadObjects(playerid);
            		}
            		if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
            	    	SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
            	    	SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
            	    	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
            	    	LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
            		}
            		else
					{
                		SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                		SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                		SetCameraBehindPlayer(playerid);
            		}
            		if(DDoorsInfo[i][dMusic] == 0) return 1;
            		else
            		{
            		    switch(DDoorsInfo[i][dMusic])
            		    { // Listado de canciones para las pertas dinámicas!
            		      //  case 1: PlayAudioStreamForPlayer(playerid, "http://AT-rp.net/music/Alhambra%20Music%20-%20BIG%20ROOM.mp3", 1, 1, 1, 1, 0); // BIG ROOM
                          //  case 2: PlayAudioStreamForPlayer(playerid, "http://AT-rp.net/music/Alhambra%20Music%20-%20Melbourne%20Bounce.mp3", 1, 1, 1, 1, 0); // Melbourne Bounce
   				          //case 3: PlayAudioStreamForPlayer(playerid, "http://AT-rp.net/music/Alhambra%20Music%20-%20Cumbia.mp3", 1, 1, 1, 1, 0); // Cumbia POP
                          //  case 4: PlayAudioStreamForPlayer(playerid, "http://AT-rp.net/music/Alhambra%20Music%20-%20Reggaeton.mp3", 1, 1, 1, 1, 0); // Reggaeton
                          //  case 5: PlayAudioStreamForPlayer(playerid, "http://AT-rp.net/music/Alhambra%20Music%20-%20Hip%20Hop.mp3", 1, 1, 1, 1, 0); // Hip Hop
                            case 6: PlayAudioStreamForPlayer(playerid, "Sin-Pista.mp3", 1, 1, 1, 1, 0); // Trap
                            case 7: PlayAudioStreamForPlayer(playerid, "Sin-Pista.mp3", 1, 1, 1, 1, 0); // Retro
                        }
                    }
					return 1;
        		}
			}
		    for(new x = 0; x < MAX_GARAGES; x++)
			{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2]))
			{
        		if(GaragesVariables[x][gLocked] == 1) return SendClientMessage(playerid, COLOR_BLANCO, "- Para ingresar a tu garaje o de otro usuario debe estar abierto: /agaraje");
        		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				{
            		SetVehiclePos(GetPlayerVehicleID(playerid),  GaragesVariables[x][gInteriorPos][0], GaragesVariables[x][gInteriorPos][1], GaragesVariables[x][gInteriorPos][2]);
            		SetVehicleZAngle(GetPlayerVehicleID(playerid), GaragesVariables[x][gInteriorPos][3]);
            		SetPlayerVirtualWorld(playerid, x);
            		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), x);
            		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GaragesVariables[x][gInterior]);
            		SetPlayerVirtualWorld(playerid, x);
            		SetPlayerInterior(playerid, GaragesVariables[x][gInterior]);
					Streamer_Update(playerid);
					LoadObjects(playerid);
            	}
            	else
				{
					SetPlayerPos(playerid, GaragesVariables[x][gInteriorPos][0], GaragesVariables[x][gInteriorPos][1], GaragesVariables[x][gInteriorPos][2]);
					SetPlayerInterior(playerid, GaragesVariables[x][gInterior]);
					SetPlayerVirtualWorld(playerid, x);
					LoadObjects(playerid);
				}
				return 1;
			}
			}
		    for(new i = 0; i < sizeof(fINFO); i++)
			{
        		if (IsPlayerInRangeOfPoint(playerid,3.0,fINFO[i][FamilyEntrance][0], fINFO[i][FamilyEntrance][1], fINFO[i][FamilyEntrance][2]))
				{
    				LoadObjects(playerid);
	            	SetPlayerInterior(playerid,fINFO[i][FamilyInterior]);
            		Info[playerid][pInt] = fINFO[i][FamilyInterior];
            		Info[playerid][pVW] = fINFO[i][FamilyVirtualWorld];
            		SetPlayerVirtualWorld(playerid, fINFO[i][FamilyVirtualWorld]);
            		if(fINFO[i][FamilyCustomMap])
					{
                		LoadObjects(playerid);
            		}
            		Streamer_UpdateEx(playerid, fINFO[i][FamilyExit][0],fINFO[i][FamilyExit][1],fINFO[i][FamilyExit][2]);
            		SetPlayerPos(playerid,fINFO[i][FamilyExit][0],fINFO[i][FamilyExit][1],fINFO[i][FamilyExit][2]);
            		SetPlayerFacingAngle(playerid,fINFO[i][FamilyExit][3]);
        	    	return 1;
        		}
			}
			if (IsPlayerInRangeOfPoint(playerid,3,2281.1748,-1724.4528,13.2521)) //  GARAGE 1
			{
            	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                	SetVehiclePos(GetPlayerVehicleID(playerid),  2233.9280,-1758.3882,2031.3885);
                	SetVehicleZAngle(GetPlayerVehicleID(playerid),  11.4);
                	Streamer_Update(playerid);
                }
                else{
					SetPlayerPos(playerid, 2235.1851,-1763.5916,2032.9728);
					SetPlayerFacingAngle(playerid, 14.9);
					SetCameraBehindPlayer(playerid);
					LoadObjects(playerid);
				}
				return 1;
			}
			if (IsPlayerInRangeOfPoint(playerid,3,1242.2382,-1732.4800,13.2911)) //  GARAGE 2
			{

            	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                	SetVehiclePos(GetPlayerVehicleID(playerid),  1134.0381,-1591.4459,6602.5879);
                	SetVehicleZAngle(GetPlayerVehicleID(playerid),  176.3030);
                	Streamer_Update(playerid);
                }
                else{
					SetPlayerPos(playerid, 1134.0381,-1591.4459,6602.5879);
					SetPlayerFacingAngle(playerid, 14.9);
					SetCameraBehindPlayer(playerid);
					LoadObjects(playerid);
				}
				return 1;
			}
			if (IsPlayerInRangeOfPoint(playerid,3,853.3862,-1387.1884,13.7470)) //  GARAGE VIP
			{

				if(Info[playerid][pVIP] == 0) return GameTextForPlayer(playerid, "~r~No eres VIP", 2000, 4);
            	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
                	SetVehiclePos(GetPlayerVehicleID(playerid),  855.6053,-1412.6117,4202.1577);
                	SetVehicleZAngle(GetPlayerVehicleID(playerid),  NORTE);
                	Streamer_Update(playerid);
                }
                else{
					SetPlayerPos(playerid, 855.6053,-1412.6117,4202.1577);
					SetPlayerFacingAngle(playerid, NORTE);
					SetCameraBehindPlayer(playerid);
					LoadObjects(playerid);
				}
				return 1;
			}
		    for(new i = 0; i < sizeof(HouseInfo); i++){
        		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])){
            		if(Info[playerid][pPhousekey] == i || Info[playerid][pPhousekey2] == i || HouseInfo[i][hLock] == 0 || Info[playerid][pRenting] == i){
				        LoadObjects(playerid);
                		SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                		Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                		Info[playerid][pVW] = i+6000;
                		SetPlayerVirtualWorld(playerid, i+6000);
                		if(HouseInfo[i][hInteriorLoad] == 1){
                    		LoadObjects(playerid);
                		}
                		SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                		SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                		SetCameraBehindPlayer(playerid);
                		GameTextForPlayer(playerid, "~w~Bienvenido", 5000, 1);
						Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            		}
            		else
					{
                		GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
            		}
            		return 1;
            	}
        	}
    	}
		return 1;
	}
	zcmd(salir, playerid, params[])
	{
	    if( Info[playerid][pJailed] > 0 ) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando ahora.");
	    if(GetPVarInt(playerid, "IsInArena") == 1) {
	        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la arena!");
	        return 1;
	    }
	    if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
    	for(new i = 0; i <  sizeof(DDoorsInfo); i++)
		{
        	if (IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
			{
            	SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            	Info[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
            	SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
            	Info[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
            	if(DDoorsInfo[i][ddExteriorLoad])
				{
					LoadObjects(playerid);
            	}
            	if(DDoorsInfo[i][dMusic] != 0) StopAudioStreamForPlayer(playerid);
            	if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
                	SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                	SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                	LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
            	}
            	else
				{
                	SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                	SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                	SetCameraBehindPlayer(playerid);
                	return 1;
            	}
        	}
    	}
    	for(new x = 0; x < MAX_GARAGES; x++)
		{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, GaragesVariables[x][gInteriorPos][0], GaragesVariables[x][gInteriorPos][1], GaragesVariables[x][gInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == x)
		{
        	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
            	SetVehiclePos(GetPlayerVehicleID(playerid), GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2]);
            	SetVehicleZAngle(GetPlayerVehicleID(playerid), GaragesVariables[x][gExteriorPos][3]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				SetPlayerVirtualWorld(playerid, 0);
  				LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
  				SetPlayerInterior(playerid, 0);
				Streamer_Update(playerid);
				LoadObjects(playerid);
            }
            else
			{
				SetPlayerPos(playerid, GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				if(GetPlayerInterior(playerid) != 0) LoadObjects(playerid);
			}
			return 1;
		}
    	}
    	for(new i = 0; i < sizeof(fINFO); i++)
		{
        	if (IsPlayerInRangeOfPoint(playerid,3.0,fINFO[i][FamilyExit][0], fINFO[i][FamilyExit][1], fINFO[i][FamilyExit][2]) && Info[playerid][pVW] == fINFO[i][FamilyVirtualWorld]) {
            	Info[playerid][pInt] = 0;
            	SetPlayerVirtualWorld(playerid, 0);
            	SetPlayerInterior(playerid,0);
            	Streamer_UpdateEx(playerid, fINFO[i][FamilyEntrance][0],fINFO[i][FamilyEntrance][1],fINFO[i][FamilyEntrance][2]);
            	SetPlayerPos(playerid,fINFO[i][FamilyEntrance][0],fINFO[i][FamilyEntrance][1],fINFO[i][FamilyEntrance][2]);
            	SetPlayerFacingAngle(playerid,fINFO[i][FamilyEntrance][3]);
            	return 1;
        	}
    	}
		if (IsPlayerInRangeOfPoint(playerid,8,2233.9280,-1758.3882,2031.3885)) //  GARAGE 1
		{
           	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
               	SetVehiclePos(GetPlayerVehicleID(playerid),  2281.1748,-1724.4528,13.2521);
               	SetVehicleZAngle(GetPlayerVehicleID(playerid),  179.93);
               	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 2280.5620,-1722.8878,13.5469);
				SetPlayerFacingAngle(playerid, 181);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid,8,1140.7430,-1592.1893,6602.4922)) //  GARAGE 1
		{
           	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
               	SetVehiclePos(GetPlayerVehicleID(playerid),  1242.2382,-1732.4800,13.2911);
               	SetVehicleZAngle(GetPlayerVehicleID(playerid),  359.47);
               	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 1241.9020,-1734.0985,13.5899);
				SetPlayerFacingAngle(playerid, 354.9746);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid,8,855.6053,-1412.6117,4202.1577)) //  GARAGE VIP
		{
           	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
               	SetVehiclePos(GetPlayerVehicleID(playerid),  853.3862,-1387.1884,13.7470);
               	SetVehicleZAngle(GetPlayerVehicleID(playerid),  182.4513);
               	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 853.3862,-1387.1884,13.7470);
				SetPlayerFacingAngle(playerid, 182.4513);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
	    for(new i = 0; i <  sizeof(HouseInfo); i++)
		{
	        if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && Info[playerid][pVW] == i+6000)
			{
				SetPlayerInterior(playerid,0);
	            Info[playerid][pInt] = 0;
	            if(HouseInfo[i][hExteriorLoad])
				{
	                LoadObjects(i);
	            }
	            SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
	            SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
	            SetCameraBehindPlayer(playerid);
	            SetPlayerVirtualWorld(playerid, 0);
	            Info[playerid][pVW] = 0;
	            return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
	        }
	    }
    	return 1;
    }
	CMD:ipusuarios(playerid, params[]){
		if(Info[playerid][pAdminZC] >= 3){
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ipusuarios (ip)");

			new string[128], IP[32];

			foreach(Player, i){
				GetPlayerIp(i, IP, sizeof(IP));
				if(strfind(IP, params, true) != -1){
					format(string, sizeof(string),
					 "Player: %s (ID: %d) | IP: %s",
					  GetPlayerNameEx(i),
					  i,
					  IP);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}

		return 1;
	}
	zcmd(radio, playerid, params[])
	{
        if(OnDuty[playerid] == 0 && !Team_Judicial(playerid) && !Team_BomberosBA(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, " No estás en servicio.");
        if(!RadioOn[playerid])
		{
			RadioOn[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Prendiste tu radio");
		}
		else
		{
			RadioOn[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Apagaste tu radio");
		}
        return 1;
}
	zcmd(gobduty, playerid, params[])
	{
        if(Gobierno(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estas en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora ya no estas en servicio.");
      		}
		}
        else SendClientMessageEx(playerid, -1, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
   	zcmd(sjduty, playerid, params[])
	{
        if(Team_Judicial(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estas en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estaras como fuera de servicio.");
      		}
		}
        else SendClientMessageEx(playerid, -1, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(pduty, playerid, params[])
	{
        if(Team_LAPD(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    TextDrawShowForPlayer(playerid, TEXTPLACAB);
      		    TextDrawShowForPlayer(playerid, PLACAPD);
			    SendClientMessageEx(playerid, COLOR_GREY, "Entraste en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		TextDrawHideForPlayer(playerid, PLACAPD);
        		TextDrawHideForPlayer(playerid, TEXTPLACAB);
			    SendClientMessageEx(playerid, COLOR_GREY, "Saliste de servicio.");
      		}
		}
        else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(mduty, playerid, params[])
	{
        if(Team_LAMD(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    TextDrawShowForPlayer(playerid, TEXTPLACAB);
			    TextDrawShowForPlayer(playerid, PLACAMD);
			    SendClientMessageEx(playerid, COLOR_GREY, "Entraste en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		TextDrawHideForPlayer(playerid, PLACAMD);
        		TextDrawHideForPlayer(playerid, TEXTPLACAB);
			    SendClientMessageEx(playerid, COLOR_GREY, "Saliste de servicio.");
      		}
		}
        else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(bduty, playerid, params[])
	{
        if(Team_BomberosBA(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    TextDrawShowForPlayer(playerid, TEXTPLACAC);
			    TextDrawShowForPlayer(playerid, PLACABOM);
			    SendClientMessageEx(playerid, COLOR_GREY, "Entraste en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		TextDrawHideForPlayer(playerid, PLACABOM);
        		TextDrawHideForPlayer(playerid, TEXTPLACAC);
			    SendClientMessageEx(playerid, COLOR_GREY, "Saliste de servicio.");
      		}
		}
        else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(eduty, playerid, params[])
	{
        if(Team_USMC(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    TextDrawShowForPlayer(playerid, TEXTPLACAB);
			    TextDrawShowForPlayer(playerid, PLACAEM);
			    SendClientMessageEx(playerid, COLOR_GREY, "Entraste en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		TextDrawHideForPlayer(playerid, PLACAEM);
        		TextDrawHideForPlayer(playerid, TEXTPLACAB);
			    SendClientMessageEx(playerid, COLOR_GREY, "Saliste de servicio.");
      		}
		}
        else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(ainintduty, playerid, params[])
	{
        if(Team_AININT(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    TextDrawShowForPlayer(playerid, TEXTPLACAC);
			    TextDrawShowForPlayer(playerid, PLACAAININT);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "Entraste en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		TextDrawHideForPlayer(playerid, PLACAAININT);
        		TextDrawHideForPlayer(playerid, TEXTPLACAC);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "Fuera de servicio.");
      		}
		}
        else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(frecuencia, playerid, params[])
	{
		new string[128], frequency;
		if(sscanf(params, "d", frequency))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /frecuencia [frecuencia]");
			SendClientMessageEx(playerid, COLOR_WHITE, "* Ajusta la frecuencia de tu radio - 0 Si no quieres oir nada.");
			return 1;
		}
        if(frequency > 9999999 || frequency < -9999999) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Frecuencia no debe ser menor a -9999999 y mayor 9999999."); return 1; }
		if (Info[playerid][pRadio] == 1)
		{
			Info[playerid][pRadioFreq] = frequency;
			format(string, sizeof(string), "Ajustaste la frecuencia de tu radio portable a %d khz.",frequency);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
        else SendClientMessageEx(playerid, COLOR_WHITE, "No tiene una Radio Portable.");
        return 1;
    }
    zcmd(pr, playerid, params[]){
		if(Info[playerid][pRadio] == 1){
            if(Info[playerid][pRadioFreq] >= 1 || Info[playerid][pRadioFreq] <= -1){
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /pr (chat)");
				if(GetPVarInt(playerid, "Injured") != 0||Info[playerid][pEstado] !=0) return SendClientMessageEx (playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar esto ahora.");
				RadioBroadCast(playerid, COLOR_GREY, params);
            }
            else SendClientMessageEx(playerid, COLOR_WHITE, "* Primero ajusta la frecuencia. /frecuencia'");
        }
        else SendClientMessageEx(playerid, COLOR_WHITE, "* Primero necesitas tener una radio portatil, comprala en el 24 Horas");
        return 1;
    }
	zcmd(togpr, playerid, params[])
	{
		if(Info[playerid][pRadio] == 1)
		{
 			if (gRadio[playerid] == 0)
   			{
   		    	new string[128];
     			gRadio[playerid] = 1;
       			format(string,sizeof(string),"Has prendido tu radio portátil, y está sincronizada a %d khz.",Info[playerid][pRadioFreq]);
	        	SendClientMessageEx(playerid,COLOR_WHITE,string);
	    	}
	    	else
	    	{
     			gRadio[playerid] = 0;
       			SendClientMessageEx(playerid,COLOR_WHITE,"Has apagado su radio portátil.");
	    	}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una Radio portátil.");
  		return 1;
	}
	zcmd(f, playerid, params[])
	{
	    if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás conectado.");
	    if(nofac == 1 && Info[playerid][pLeader] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "El Chat de faccion esta bloqueado");
        if(!isnull(params))
	    {
            new string[128];
			if (Info[playerid][pLeader] > 0 || Info[playerid][pMember] > 0 || Info[playerid][pFMember] < 255)
			{
			    new member = Info[playerid][pMember];
			    new fam = Info[playerid][pFMember];
			    if(member==1)// LAPD
			    {
			        if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Comandante %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Teniente %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Sargento %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Detective %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Oficial %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Cadete %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Cadete %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
			    }
				else if(member==2)// AININT
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sub-Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Espía %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Agente Táctico %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Agente Especializado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Agente %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
			    else if(member==3)// USMC
			    {
					if(Info[playerid][pRank] == 27) { format(string, sizeof(string), "{04FFFF}** (( General %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 26) { format(string, sizeof(string), "** (( LtGen %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 25) { format(string, sizeof(string), "** (( MajGen %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 24) { format(string, sizeof(string), "** (( BGen %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 23) { format(string, sizeof(string), "** (( Col %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 22) { format(string, sizeof(string), "** (( LtCol %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 21) { format(string, sizeof(string), "** (( Maj %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 20) { format(string, sizeof(string), "** (( Capt %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 19) { format(string, sizeof(string), "** (( 1stLt %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 18) { format(string, sizeof(string), "** (( 2ndLt %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 17) { format(string, sizeof(string), "** (( CWO5 %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 16) { format(string, sizeof(string), "** (( CWO4 %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 15) { format(string, sizeof(string), "** (( CWO3 %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 14) { format(string, sizeof(string), "** (( CWO2 %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 13) { format(string, sizeof(string), "** (( WO %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 12) { format(string, sizeof(string), "** (( SMMC %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 11) { format(string, sizeof(string), "** (( SgtMaj %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 10) { format(string, sizeof(string), "** (( MGySgt %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 9) { format(string, sizeof(string), "** (( 1st Sgt %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 8) { format(string, sizeof(string), "** (( MSgt %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 7) { format(string, sizeof(string), "** (( GySgt %s: %s )) **", GetPlayerNameEx(playerid), params); }
			  		else if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "** (( SSgt %s: %s )) **", GetPlayerNameEx(playerid), params); }
     				else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sgt %s: %s )) **", GetPlayerNameEx(playerid), params); }
     				else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Cpl %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( LCpl %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( PFC %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( PVT %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( PVT %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    else if(member==4)// LAMD
			    {
					if(Info[playerid][pRank] == 16) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 15) { format(string, sizeof(string), "** (( Adjunto %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 14) { format(string, sizeof(string), "** (( Jefe de Cirugía %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 13) { format(string, sizeof(string), "** (( Jefe de Departamento %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 12) { format(string, sizeof(string), "** (( Cirujano Especialista %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 11) { format(string, sizeof(string), "** (( Especialista %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 10) { format(string, sizeof(string), "** (( Cirujano Titular %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 9) { format(string, sizeof(string), "** (( Médico Titular %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 8) { format(string, sizeof(string), "** (( Jefe de Residentes %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 7) { format(string, sizeof(string), "** (( R4 %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "** (( R3 %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( R2 %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( R1 %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Médico Interno %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Enfermero %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Enfermero Aux. %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Enfermero Auxiliar %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
			    }
				else if(member==5) //FOX
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director FOX %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Presentador %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Enviado Especial %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Periodista %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Redactor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Becario %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Becario %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==6)// Mecánicos
			    {
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Supervisor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Ingeniero %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Mecánico %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Trucker %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Ayudante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Ayudante %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==7) // Gobierno
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Gobernador %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vicegobernador %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Ministro %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Alcalde %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Secretario %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Staff %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Ministro %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==8) // Hitman
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vice-Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Agente Especial %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Sicario %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==9) // Sistema Judicial
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director G. %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Asociado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Juez %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Fiscal %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Secretario %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( abogado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==10) // Cedar Block Piru
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
                 else if(member==11) // Boulevard Mafia Crips
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				 else if(member==12) // N/S Broadway XIV
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==13) // Sur 13
				{
				    if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Real King %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( El Carnal %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Real Vato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Vato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Gangster %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Iniciado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
			    else if(member==14) // Mafia Rusa
				{
				    if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
                else if(member==15) // LCN
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano Derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Terrorista %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Principiante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
    			else if(member==16) // Yakuza
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Oyabun %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Zamestitel %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Saiko Komon %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Senpai Kohai %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Wakashu %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Kyodai %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Kyodai %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==17) // CIA
			    {
			        if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sub Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Detective %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Espía %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Agente Secreto %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Agente %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Agente %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
			    }
				else if(member==18) // Santana
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Don %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano Derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Hombre De Confianza %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Hombre De Honor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==19) // ISIS
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( General %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sub-General %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Supervisor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Soldado Mayor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Soldado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Principiante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==20) // Bomberos
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sub Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Sargento Mayor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Sargento %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Bachillerato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Bombero ESO %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Bombero EGB %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==21) // Motoqueros
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Presidente %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vice-Presidente %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Demonio Rodante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Hermano de Fuego %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Prospecto %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Aspirante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Limpia Baños %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==22) // Play Music Radio
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sub Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Supervisor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Productor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( DJ %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Seguridad %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Limpieza %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
	            if(Info[playerid][pFMember] < 255)
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** %s %s: %s **", fINFO[fam][FamilyRank6], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** %s %s: %s **", fINFO[fam][FamilyRank5], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** %s %s: %s  **", fINFO[fam][FamilyRank4], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** %s %s: %s  **", fINFO[fam][FamilyRank3], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** %s %s: %s  **", fINFO[fam][FamilyRank2], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** %s %s: %s  **", fINFO[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (0) %s %s: %s **", fINFO[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
					SendNewFamilyMessage(Info[playerid][pFMember], TEAM_AZTECAS_COLOR, string);
				}
				return 1;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una facción.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/f (texto){FFFFFF} para hablar OOC en chat de facción.");
		return 1;
	}
	zcmd(d, playerid, params[])
	{
	new string[256], rank[64], div[20];
	if(RadioOn[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu radio está apagada.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /d (radio chat)");
	    switch (Info[playerid][pMember])
	    {
	        case 1:
	        {
                switch(Info[playerid][pRank])
                {
				case 1: rank = "Cadete";
				case 2: rank = "Oficial";
				case 3: rank = "Detective";
				case 4: rank = "Sargento";
				case 5: rank = "Teniente";
				case 6: rank = "Comandante";
				default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
				case 2: div = " (DIVCRI)";
				case 3: div = " (DIVOES)";
				case 4: div = " (DIVANDRO)";
				case 5: div = " (SWAT)";
				case 6: div = " (SASD)";
				case 7: div = " (SASD)";
				default: div = "";
				}
				format(string, sizeof(string), "** [L.A.P.D] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			case 2:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Agente";
					case 2: rank = "Agente Especializado";
					case 3: rank = "Agente Táctico";
					case 4: rank = "Espía";
					case 5: rank = "Sub-Director";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
 				switch(Info[playerid][pDivision])
				{
				    case 1: div = " (FBI)";
					case 2: div = " (CIA)";
					case 3: div = " (DEA)";
					case 4: div = " (BOPE)";
					case 5: div = " (Aduanas)";
					case 6: div = " (Interpol)";
					default: div = " (FBI)";
				}
                format(string, sizeof(string), "** [AININT] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
            case 3:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "PVT";
					case 2: rank = "PFC";
					case 3: rank = "LCpl";
					case 4: rank = "Cpl";
					case 5: rank = "Sgt";
					case 6: rank = "SSgt";
					case 7: rank = "GySgt";
					case 8: rank = "MSgt";
					case 9: rank = "1st Sgt";
					case 10: rank = "MGySgt";
					case 11: rank = "SgtMaj";
					case 12: rank = "SMMC";
					case 13: rank = "WO";
					case 14: rank = "CWO2";
					case 15: rank = "CWO3";
					case 16: rank = "CWO4";
					case 17: rank = "CWO5";
					case 18: rank = "2ndLt";
					case 19: rank = "1stLt";
					case 20: rank = "Capt";
					case 21: rank = "Maj";
					case 22: rank = "LtCol";
					case 23: rank = "Col";
					case 24: rank = "BGen";
					case 25: rank = "MajGen";
					case 26: rank = "LtGen";
					case 27: rank = "General";
					default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
					case 2: div = " (SOCOM)";
					case 3: div = " (AFSOC)";
					case 4: div = " (ARSOC)";
					case 5: div = " (NAVSOC)";
					case 6: div = " (USAF)";
					case 7: div = " (USN)";
					case 8: div = " (AMEDD/AMS)";
					default: div = "";
				}
                format(string, sizeof(string), "** [USMC] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			case 4:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Enfermero Auxiliar";
					case 2: rank = "Enfermero";
					case 3: rank = "Médico Interno";
					case 4: rank = "Residente R1";
					case 5: rank = "Residente R2";
					case 6: rank = "Residente R3";
					case 7: rank = "Residente R4";
					case 8: rank = "Jefe de Residentes";
					case 9: rank = "Médico Titular";
					case 10: rank = "Cirujano Titular";
					case 11: rank = "Especialista";
					case 12: rank = "Cirujano Especialista";
					case 13: rank = "Jefe de Departamento";
					case 14: rank = "Jefe de Cirugía";
					case 15: rank = "Adjunto";
					case 16: rank = "Director";
					default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
					case 2: div = " (PCMD)";
					default: div = "";
				}
				format(string, sizeof(string), "** [LAMD] %s%s %s: %s **", rank, div, GetPlayerNameEx(playerid), params);
			}
			case 7:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Staff";
					case 2: rank = "Secretario";
					case 3: rank = "Alcalde";
					case 4: rank = "Ministro de";
					case 5: rank = "Vicegobernador";
					case 6: rank = "Gobernador";
					default: rank = "[Error]";
				}
  				switch(Info[playerid][pDivision])
				{
					case 2: div = " (Chofer)";
					case 3: div = " (UG)";
					case 4: div = " Defensa";
					case 5: div = " Justicia";
					case 6: div = " Economía";
					default: div = "";
				}
				format(string, sizeof(string), "** [GOB] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			case 9:
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "Abogado";
					case 2: rank = "Secretario";
					case 3: rank = "Fiscal";
					case 4: rank = "Juez";
					case 5: rank = "Asociado";
					case 6: rank = "Director General";
					default: rank = "Abogado";
				}
				format(string, sizeof(string), "** [S.JUD] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			case 17:
	        {
                switch(Info[playerid][pRank])
                {
					case 1: rank = "Agente";
			    	case 2: rank = "Agente Secreto";
			    	case 3: rank = "Espia";
			    	case 4: rank = "Detective";
			    	case 5: rank = "Sub Director";
			    	case 6: rank = "Director";
					default: rank = "Agente";
				}
				switch(Info[playerid][pDivision])
				{
					case 1: div = "General";
			    	case 2: div = "UC";
			    	case 3: div = "DIVFO";
			    	case 4: div = "DIVAT";
			    	default: div = "";
				}
				format(string, sizeof(string), "** [CIA] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			case 20:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Bombero ESO";
				    case 2: rank = "Bachillerato";
				    case 3: rank = "Sargento";
				    case 4: rank = "Sargento Mayor";
				    case 5: rank = "Subdirector";
				    case 6: rank = "Director";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** [BOMBEROS] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			default:
			{
				SendClientMessageEx(playerid,COLOR_GRAD2,"{FF0000}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
				return 1;
			}
		}
		for(new i = 1; i < 5; i++)
		{
		    SendRadioMessage(i, COLOR_ALLDEPT, string);
		}
		SendRadioMessage(7, COLOR_ALLDEPT, string);
		SendRadioMessage(9, COLOR_ALLDEPT, string);
		SendRadioMessage(10, COLOR_ALLDEPT, string);
		SendRadioMessage(17, COLOR_ALLDEPT, string);
		SendRadioMessage(20, COLOR_ALLDEPT, string);
		format(string, sizeof(string), "(radio) %s",params);
	    SetPlayerChatBubble(playerid,string,COLOR_WHITE,15.0,5000);
	    return 1;
	}
	zcmd(dooc, playerid, params[])
	{
	new string[256], rank[64];
	if(Info[playerid][pLeader] == 0 || Info[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "- Este canal solo funciona para organizaciones del gobierno!");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dooc (Canal OOC)");
	    switch (Info[playerid][pMember])
	    {
	        case 1:
	        {
                switch(Info[playerid][pRank])
                {
				case 1: rank = "Cadete";
				case 2: rank = "Oficial";
				case 3: rank = "Detective";
				case 4: rank = "Sargento";
				case 5: rank = "Teniente";
				case 6: rank = "Comandante";
				default: rank = "Cadete";
				}
				format(string, sizeof(string), "(OOC - L.A.P.D){FFFFFF} %s %s: %s", rank, GetPlayerNameEx(playerid), params);
			}
			case 2:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Agente";
					case 2: rank = "Agente Especializado";
					case 3: rank = "Agente Táctico";
					case 4: rank = "Espía";
					case 5: rank = "Sub-Director";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
                format(string, sizeof(string), "(OOC - AININT){FFFFFF} %s %s: %s", rank, GetPlayerNameEx(playerid), params);
			}
            case 3:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "PVT";
					case 2: rank = "PFC";
					case 3: rank = "LCpl";
					case 4: rank = "Cpl";
					case 5: rank = "Sgt";
					case 6: rank = "SSgt";
					case 7: rank = "GySgt";
					case 8: rank = "MSgt";
					case 9: rank = "1st Sgt";
					case 10: rank = "MGySgt";
					case 11: rank = "SgtMaj";
					case 12: rank = "SMMC";
					case 13: rank = "WO";
					case 14: rank = "CWO2";
					case 15: rank = "CWO3";
					case 16: rank = "CWO4";
					case 17: rank = "CWO5";
					case 18: rank = "2ndLt";
					case 19: rank = "1stLt";
					case 20: rank = "Capt";
					case 21: rank = "Maj";
					case 22: rank = "LtCol";
					case 23: rank = "Col";
					case 24: rank = "BGen";
					case 25: rank = "MajGen";
					case 26: rank = "LtGen";
					case 27: rank = "General";
					default: rank = "PVT";
				}
              format(string, sizeof(string), "(OOC - USMC){FFFFFF} %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			}
			case 4:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Enfermero Auxiliar";
					case 2: rank = "Enfermero";
					case 3: rank = "Médico Interno";
					case 4: rank = "Residente R1";
					case 5: rank = "Residente R2";
					case 6: rank = "Residente R3";
					case 7: rank = "Residente R4";
					case 8: rank = "Jefe de Residentes";
					case 9: rank = "Médico Titular";
					case 10: rank = "Cirujano Titular";
					case 11: rank = "Especialista";
					case 12: rank = "Cirujano Especialista";
					case 13: rank = "Jefe de Departamento";
					case 14: rank = "Jefe de Cirugía";
					case 15: rank = "Adjunto";
					case 16: rank = "Director";
					default: rank = "Enfermero Auxiliar";
				}
				format(string, sizeof(string), "(OOC - LAMD){FFFFFF} %s %s: %s", rank, GetPlayerNameEx(playerid), params);
			}
			case 7:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Staff";
					case 2: rank = "Secretario";
					case 3: rank = "Alcalde";
					case 4: rank = "Ministro de";
					case 5: rank = "Vicegobernador";
					case 6: rank = "Gobernador";
					default: rank = "Staff";
				}
				format(string, sizeof(string), "(OOC - GOB){FFFFFF} %s %s: %s", rank, GetPlayerNameEx(playerid), params);
			}
			case 9:
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "Abogado";
					case 2: rank = "Secretario";
					case 3: rank = "Fiscal";
					case 4: rank = "Juez";
					case 5: rank = "Asociado";
					case 6: rank = "Director General";
					default: rank = "Abogado";
				}
				format(string, sizeof(string), "(OOC - S. JUDICIAL){FFFFFF} %s %s: %s", rank, GetPlayerNameEx(playerid), params);
			}
			case 17:
	        {
                switch(Info[playerid][pRank])
                {
					case 1: rank = "Agente";
			    	case 2: rank = "Agente Secreto";
			    	case 3: rank = "Espia";
			    	case 4: rank = "Detective";
			    	case 5: rank = "Sub Director";
			    	case 6: rank = "Director";
					default: rank = "Agente";
				}
				format(string, sizeof(string), "(OOC - CIA){FFFFFF} %s %s: %s", rank, GetPlayerNameEx(playerid), params);
			}
			case 20:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Bombero ESO";
				    case 2: rank = "Bachillerato";
				    case 3: rank = "Sargento";
				    case 4: rank = "Sargento Mayor";
				    case 5: rank = "Subdirector";
				    case 6: rank = "Director";
					default: rank = "Bombero ESO";
				}
				format(string, sizeof(string), "(OOC - Bomberos){FFFFFF} %s %s: %s", rank, GetPlayerNameEx(playerid), params);
			}
			default:
			{
				SendClientMessageEx(playerid,COLOR_GRAD2,"{FFFF00}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
				return 1;
			}
		}
		SendRadioMessage(1, COLOR_ROJO, string);
		SendRadioMessage(2, COLOR_ROJO, string);
		SendRadioMessage(3, COLOR_ROJO, string);
		SendRadioMessage(4, COLOR_ROJO, string);
		SendRadioMessage(7, COLOR_ROJO, string);
		SendRadioMessage(9, COLOR_ROJO, string);
		SendRadioMessage(17, COLOR_ROJO, string);
		SendRadioMessage(20, COLOR_ROJO, string);
		format(string, sizeof(string), "(D-OOC) {FFFFFF}%s",params);
	    SetPlayerChatBubble(playerid,string,COLOR_ROJO,1.0,5000);
	    return 1;
	}
	zcmd(r, playerid, params[])
	{
	new string[128], rank[64], div[20];
	if(RadioOn[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu radio está apagada.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/r (texto){FFFFFF} para hablar por radio.");

		switch (Info[playerid][pMember]) // employer/rank/division data is pulled from here
		{
			case 1:
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "Cadete";
					case 2: rank = "Oficial";
					case 3: rank = "Detective";
					case 4: rank = "Sargento";
					case 5: rank = "Teniente";
					case 6: rank = "Comandante";
					default: rank = "Cadete a Prueba";
				}
				switch(Info[playerid][pDivision])
				{
					case 2: div = " (DIVCRI)";
					case 3: div = " (DIVOES)";
					case 4: div = " (DIVANDRO)";
					case 5: div = " (SWAT)";
					case 6: div = " (SASD)";
					case 7: div = " (SASD)";
					default: div = "";
				}
				format(string, sizeof(string), "[Radio Policial] {FFFFFF}(%s%s %s): %s", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(1, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 2:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Agente";
					case 2: rank = "Agente Especializado";
					case 3: rank = "Agente Táctico";
					case 4: rank = "Espía";
					case 5: rank = "Sub-Director";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
 				switch(Info[playerid][pDivision])
				{
				    case 1: div = " (FBI)";
					case 2: div = " (CIA)";
					case 3: div = " (DEA)";
					case 4: div = " (BOPE)";
					case 5: div = " (Aduanas)";
					case 6: div = " (Interpol)";
					default: div = " (FBI)";
				}
				format(string, sizeof(string), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(2, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
            case 3:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "PVT";
					case 2: rank = "PFC";
					case 3: rank = "LCpl";
					case 4: rank = "Cpl";
					case 5: rank = "Sgt";
					case 6: rank = "SSgt";
					case 7: rank = "GySgt";
					case 8: rank = "MSgt";
					case 9: rank = "1st Sgt";
					case 10: rank = "MGySgt";
					case 11: rank = "SgtMaj";
					case 12: rank = "SMMC";
					case 13: rank = "WO";
					case 14: rank = "CWO2";
					case 15: rank = "CWO3";
					case 16: rank = "CWO4";
					case 17: rank = "CWO5";
					case 18: rank = "2ndLt";
					case 19: rank = "1stLt";
					case 20: rank = "Capt";
					case 21: rank = "Maj";
					case 22: rank = "LtCol";
					case 23: rank = "Col";
					case 24: rank = "BGen";
					case 25: rank = "MajGen";
					case 26: rank = "LtGen";
					case 27: rank = "General";
					default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
					case 2: div = " (SOCOM)";
					case 3: div = " (AFSOC)";
					case 4: div = " (ARSOC)";
					case 5: div = " (NAVSOC)";
					case 6: div = " (USAF)";
					case 7: div = " (USN)";
					case 8: div = " (AMEDD/AMS)";
					default: div = "";
				}
                format(string, sizeof(string), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(3, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 4:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Enfermero Auxiliar";
					case 2: rank = "Enfermero";
					case 3: rank = "Médico Interno";
					case 4: rank = "Residente R1";
					case 5: rank = "Residente R2";
					case 6: rank = "Residente R3";
					case 7: rank = "Residente R4";
					case 8: rank = "Jefe de Residentes";
					case 9: rank = "Médico Titular";
					case 10: rank = "Cirujano Titular";
					case 11: rank = "Especialista";
					case 12: rank = "Cirujano Especialista";
					case 13: rank = "Jefe de Departamento";
					case 14: rank = "Jefe de Cirugía";
					case 15: rank = "Adjunto";
					case 16: rank = "Director";
					default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
					case 2: div = " (PCMD)";
					default: div = "";
				}
				format(string, sizeof(string), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(4, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 5:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Fotógrafo";
					case 2: rank = "Redactor";
					case 3: rank = "Periodista";
					case 4: rank = "Administrador";
					case 5: rank = "Gerente";
					case 6: rank = "Director FOX";
					default: rank = "Limpia Baños";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(5, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 6:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Ayudante";
					case 2: rank = "Trucker";
					case 3: rank = "Mecánico";
					case 4: rank = "Ingeniero";
					case 5: rank = "Supervisor";
					case 6: rank = "Director";
					default: rank = "Limpia Baños";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(6, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 7:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Staff";
					case 2: rank = "Secretario";
					case 3: rank = "Alcalde";
					case 4: rank = "Ministro de";
					case 5: rank = "Vicegobernador";
					case 6: rank = "Gobernador";
					default: rank = "Limpia Baños";
				}
  				switch(Info[playerid][pDivision])
				{
					case 2: div = " (Chofer)";
					case 3: div = " (UG)";
					case 4: div = " Defensa";
					case 5: div = " Justicia";
					case 6: div = " Economía";
					default: div = "";
				}
				format(string, sizeof(string), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(7, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 9:
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "Abogado";
					case 2: rank = "Secretario";
					case 3: rank = "Fiscal";
					case 4: rank = "Juez";
					case 5: rank = "Asociado";
					case 6: rank = "Director General";
					default: rank = "Limpia Baños";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(9, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 17:
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "Agente";
			   	 	case 2: rank = "Agente Secreto";
	   		 		case 3: rank = "Espia";
	   		 		case 4: rank = "Detective";
			    	case 5: rank = "Sub Director";
			    	case 6: rank = "Director";
					default: rank = "Limpia Baños";
				}
				switch(Info[playerid][pDivision])
				{
					case 1: div = "General";
			    	case 2: div = "UC";
			    	case 3: div = "DIVFO";
			    	case 4: div = "DIVAT";
					default: div = "";
				}
				format(string, sizeof(string), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(17, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 20:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Bombero ESO";
					case 2: rank = "Bachillerato";
					case 3: rank = "Sargente";
					case 4: rank = "Sargento Mayor";
					case 5: rank = "Sub Director";
					case 6: rank = "Director";
					default: rank = "Limpia Baños";
				}
				format(string, sizeof(string), "{FF0000}[Radio de Bombero] {FFFFFF}(%s%s %s): %s", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(20, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "* %s habla por radio.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			default:
			{
				SendClientMessageEx(playerid,COLOR_GRAD2,"Tu facción no tiene radio, puedes comprar una en el 24 Horas.");
				return 1;
			}
		}
		format(string, sizeof(string), "(radio) %s",params);
	    SetPlayerChatBubble(playerid,string,COLOR_WHITE,15.0,5000);
	    return 1;
	}
	zcmd(lapddiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 1)
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /lapddiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Divisiones L.A.P.D: 1 (Ninguna), 2 {5ABAFF}(DIV-CRI){FFFFFF}, 3 {5ABAFF}(DIV-OES){FFFFFF}, 4 {5ABAFF}(DIV-ANDRO){FFFFFF}, 5 {5ABAFF}(SWAT), 6 {5ABAFF}(SASD){FFFFFF}");
			return 1;
			}

			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 1)
					{
						if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División de Operaciones Especiales [DIVOES].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División de Operaciones Especiales [DIVOES].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División de Criminalistica [DIVCRI].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División de Criminalistica [DIVCRI].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División de Anti-Drogas [DIVANDRO].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División de Anti-Drogas [DIVANDRO].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 5)
						{
							Info[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la SWAT.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la SWAT.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 6)
						{
							Info[giveplayerid][pDivision] = 6;
							format(string, sizeof(string), "%s te trasladó a Palomino Creek Police Department.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has trasladado a %s a Palomino Creek Police Department.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "Ahora estás sin división en LAPD por: %s.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Ahora %s está sin división en LAPD.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese jugador no pertenece a L.A.P.D.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás autorizado para hacer divisiones en L.A.P.D.");
		}
		return 1;
	}
	zcmd(ainintdiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 2)
		{
			new string[500], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/ainintdiv (usuario id) (división id){FFFFFF} para cambiar de división.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones AININT: 1: FBI, 2: CIA, 3: DEA, 4: BOPE, 5: Aduanas, 6: Interpol");
			return 1;
			}

			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 2)
					{
						if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte de Drug Enforcement Administration [DEA].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a Drug Enforcement Administration [DEA]", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de Central Intelligence Agency [CIA].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a Central Intelligence Agency [CIA].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha invitado a formar parte del Batallón de Operaciones Policiales Especiales [BOPE].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse al Batallón de Operaciones Policiales Especiales [BOPE].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 5)
						{
							Info[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s te ha invitado a formar parte de Aduanas.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a Aduanas.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 6)
						{
							Info[giveplayerid][pDivision] = 6;
							format(string, sizeof(string), "%s te ha invitado a formar parte de Interpol.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a Interpol.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha invitado a formar parte de Federal Bureau of Investigation [FBI].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a Federal Bureau of Investigation [FBI].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese jugador no pertenece al AININT.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás autorizado hacer divisiones en AININT.");
		}
		return 1;
	}
	zcmd(usmcdiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 3)
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/usmcdiv (usuario id) (división id){FFFFFF} para cambiar de división.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones USMC: 1: SOCOM, 2: AFSOC, 3: ARSOC, 4: NAVSOC, 5: USAF, 6: USN, 7: AMEDD/AMS");
			return 1;
			}
			if (Info[playerid][pRank] == 27)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 3)
					{
						if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha seleccionado como miembro del Mando de Operaciones del Ejército de Estados Unidos [ARSOC].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has puesto a %s como miembro del Mando de Operaciones del Ejército de Estados Unidos [ARSOC].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha seleccionado como miembro del Mando de Operaciones Especiales de la Fuerza Aérea [AFSOC].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has puesto a %s como miembro del Mando de Operaciones Especiales de la Fuerza Aérea [AFSOC].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 5)
						{
							Info[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s te ha seleccionado como miembro del Mando de Guerra Naval Especial [NAVSOC].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has puesto a %s como miembro del Mando de Guerra Naval Especial [NAVSOC].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 6)
						{
							Info[giveplayerid][pDivision] = 6;
							format(string, sizeof(string), "%s te ha seleccionado como miembro de la Fuerza Aérea de los Estados Unidos [USAF].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has puesto a %s como miembro de la Fuerza Aérea de los Estados Unidos [USAF].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 7)
						{
							Info[giveplayerid][pDivision] = 7;
							format(string, sizeof(string), "%s te ha seleccionado como miembro de la Marina de los Estados Unidos [USN].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has puesto a %s como miembro de la Marina de los Estados Unidos [USN].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 8)
						{
							Info[giveplayerid][pDivision] = 8;
							format(string, sizeof(string), "%s te ha seleccionado como miembro del Departamento Médico del Ejército de los Estados Unidos [AMEDD].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has puesto a %s como miembro del Departamento Médico del Ejército de los Estados Unidos [AMEDD].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha seleccionado como miembro del Mando de Operaciones Especiales [SOCOM].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has puesto a %s como miembro del Mando de Operaciones Especiales [SOCOM].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "Ahora estás sin división en la USMC por: %s.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Ahora %s está sin división en la USMC.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					} else SendClientMessageEx(playerid, COLOR_GRAD2, "Ese jugador no pertenece a USMC");
				}
			} else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás autorizado para hacer divisiones en USMC.");
		}
		return 1;
	}
	zcmd(gobdiv, playerid, params[])
	{
		if(Presidente(playerid))
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gobdiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}Divisiones Staff: 1 (Ninguna), 2 {5ABAFF}(Chofer){FFFFFF}, 3 {5ABAFF}(UG)(Guardaespaldas)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Divisiones Ministros: {FFFFFF}4 {5ABAFF}(Defensa){FFFFFF}, 5 {5ABAFF}(Justicia){FFFFFF}, 6 {5ABAFF}(Economía)");
			return 1;
			}

			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 7)
					{
						if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de los choféres del gobierno.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a los choféres del gobierno.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad de Guardaespaldas [UG].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad de Guardaespaldas [UG].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha nombrado Ministro de Defensa.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has nombrado a %s Ministro de Defensa.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 5)
						{
							Info[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s te ha nombrado Ministro de Justicia.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has nombrado a %s Ministro de Justicia.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 6)
						{
							Info[giveplayerid][pDivision] = 6;
							format(string, sizeof(string), "%s te ha nombrado Ministro de Economía.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has nombrado a %s Ministro de Economía.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					} else SendClientMessageEx(playerid, COLOR_GRAD2, "Ese jugador no pertenece al FBI");
				}
			}else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás autorizado para hacer divisiones en Gobierno.");
		}
		return 1;
	}
	zcmd(ciadiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 17)
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /ciadiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones CIA: 1 (Ninguna), 2 {5ABAFF}(UC){FFFFFF}, 3 {5ABAFF}(DIVFO){FFFFFF}, 4 {5ABAFF}(DIVAT){FFFFFF}");
			return 1;
			}

			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 17)
					{
						if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad Criminalistica [UC].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad Criminalistica [UC].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División Forense [DIVFO].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División Forense [DIVFO].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División Anti-Terrorista [DIVAT].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División Anti-Terrorista [DIVAT].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese jugador no pertenece a la CIA.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para hacer divisiones en la CIA.");
		}
		return 1;
	}
	zcmd(lamddiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 4)
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /lamddiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Divisiones S.A.M.D: 1 (Ninguna), 2 {5ABAFF}(PCMD)");
			return 1;
			}

			if (Info[playerid][pAdminZC] >= 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 4)
					{
						if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te asignó miembro de Palomino Creek Medical Center (PCMD).", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "%s ahora trabaja en Palomino Creek Medical Center (PCMD).", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese jugador no pertenece a L.A.P.D.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para hacer divisiones en L.A.P.D.");
		}
		return 1;
	}
 	zcmd(contratar, playerid, params[]){
        if(Info[playerid][pLeader] > 0){
            new giveplayerid;
        	if(!sscanf(params, "d", giveplayerid)){
        	    if(IsPlayerConnected(giveplayerid)){
        	        if(ProxDetectorS(8.0, playerid, giveplayerid)){
	            	    if(giveplayerid == playerid) 		return	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes invitarte a ti mismo.");
	            	    if(Info[giveplayerid][pFMember] < 255)	return	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF}Esta persona es miembro de una familia, por lo tanto no podrá invitarlo.");
	            	    if(Facturing[giveplayerid] > 0)    return 	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Este jugador está en otra tarea, espera.");
	            	    if(Info[giveplayerid][pMember] > 0 || Info[giveplayerid][pLeader] > 0) return 	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF}Este jugador ya tiene facción.");
						new string[256];
	            	    switch(Info[playerid][pLeader]){
						    case 1: 	ReqF_Name[giveplayerid] = "Policía de Los Ángeles";
						    case 2: 	ReqF_Name[giveplayerid] = "AININT";
						    case 3: 	ReqF_Name[giveplayerid] = "USMC";
						    case 4: 	ReqF_Name[giveplayerid] = "Hospital Público";
						    case 5:     ReqF_Name[giveplayerid] = "FOX";
						    case 6: 	ReqF_Name[giveplayerid] = "Mecánicos";
						    case 7: 	ReqF_Name[giveplayerid] = "Gobierno de EE.UU.";
                            case 8: 	ReqF_Name[giveplayerid] = "Hitman";
                            case 9: 	ReqF_Name[giveplayerid] = "Sistema Judicial";
                            case 10:    ReqF_Name[giveplayerid] = "CBP";
                            case 11:    ReqF_Name[giveplayerid] = "Boulevard Mafia Crips";
                            case 12:    ReqF_Name[giveplayerid] = "N/S Broadway XIV";
                            case 13:    ReqF_Name[giveplayerid] = "Varrio Longos 13";
                            case 14: 	ReqF_Name[giveplayerid] = "Mafia Rusa";
                            case 15:    ReqF_Name[giveplayerid] = "La Cosa Nostra";
                            case 16: 	ReqF_Name[giveplayerid] = "Mafia Yakuza";
                            case 17: 	ReqF_Name[giveplayerid] = "CIA";
                            case 18: 	ReqF_Name[giveplayerid] = "Mafia Santana";
                            case 19:    ReqF_Name[giveplayerid] = "Terroristas";
                            case 20:    ReqF_Name[giveplayerid] = "Bomberos";
                            case 21:    ReqF_Name[giveplayerid] = "Motoqueros";
                            case 22:    ReqF_Name[giveplayerid] = "Play Music Radio";
						}
                        ReqF_Faction[giveplayerid] = Info[playerid][pLeader];
                        Facturing[giveplayerid] = 1;
		    	        format(string, sizeof(string), "* %s te quiere contratar en %s, por favor use  /aceptar faccion, o ignore la invitación.", GetPlayerNameEx(playerid), ReqF_Name[giveplayerid]);
			            SendClientMessageEx(giveplayerid, COLOR_AMARILLO, string);
			            ContratoFac[giveplayerid] = 1;
	            	}else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador esta muy lejos para brindar un contrato.");
        	    }else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador esta desconectado.");
			}else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/contratar (usuario id){FFFFFF} para contratar a una persona.");
		}else SendClientMessageEx(playerid, COLOR_WHITE, "Disculpe, informamos que usted no es líder.");
		return 1;
	}
    zcmd(despedir, playerid, params[]){
		new give;
        if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango líder para retirar a este usuario de la facción!");
		if(sscanf(params, "d", give)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/despedir (usuario id){FFFFFF} para despedir a una persona.");
		if(!IsPlayerConnected(give)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        if(Info[playerid][pLeader] == Info[give][pMember]){
			new string[80];
			format(string, sizeof(string), "{2EDFFF}Inf. Facción:{FFFFFF} %s te ha retirado de la facción.", GetPlayerNameEx(playerid));
			SendClientMessageEx(give, COLOR_WHITE, string);
			format(string, sizeof(string), "{FF0000}Has retirado de su cargo a %s con éxito.", GetPlayerNameEx(give));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			Info[give][pMember] = 0;
			Info[give][pRank] = 0;
			Info[give][pDivision] = 0;
			SetPlayerSkin(give, NOOB_SKIN);
			pTazer[give] = 0;
			if(Info[give][pVIP] < 3) for(new iToyIter; iToyIter < MAX_PLAYER_ATTACHED_OBJECTS; ++iToyIter){
				for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist){
					if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[give][iToyIter][ptModelID]){
						PlayerToyInfo[give][iToyIter][ptModelID] = 0;
						PlayerToyInfo[give][iToyIter][ptBone] = 0;
						PlayerToyInfo[give][iToyIter][ptPosX] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosY] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosZ] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosX] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosY] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosZ] = 0.0;
						PlayerToyInfo[give][iToyIter][ftscaleX] = 0.0;
						PlayerToyInfo[give][iToyIter][ftscaleY] = 0.0;
						PlayerToyInfo[give][iToyIter][ftscaleZ] = 0.0;
					}
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El jugador no pertenece a tu facción.");
        return 1;
    }
	zcmd(darrango, playerid, params[])
    {
        new giveplayerid, rank;
        if(!sscanf(params, "di", giveplayerid, rank))
		{
            if(rank > 6 || rank < 0) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No hay rango tan alto."); return 1; }
		    if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres líder de facción.");
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(Info[giveplayerid][pLeader] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes asignar rango a un líder");
          		if(Info[playerid][pLeader] == Info[giveplayerid][pMember])
            	{
            	    new string[128];
            	    Info[giveplayerid][pRank] = rank;
            	    format(string, sizeof(string), "Líder %s asignó rango %d al miembro %s", GetPlayerNameEx(playerid), Info[giveplayerid][pRank], GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            	}
            	else SendClientMessageEx(playerid, COLOR_WHITE, "Este miembro no es de tu facción.");
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "Jugado desconectado.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/darrango (usuario id) (rango){FFFFFF} para dar un rango a una persona.0");
        return 1;
    }
	zcmd(equipamiento, playerid, params[])
	{
	    //*******************Facciones legales*******************
	    if(Team_LAMD(playerid))
		{
			if(PlayerToPoint(5, playerid, -196.25780, -1748.83069, 675.66779))
			{
			    new eq[] = "Médica\nMédico\nDirectora\nDirector\nIndumentario Normal";
			    SafeDialogEx(playerid,EQUIPO_DOC,DIALOG_STYLE_LIST,"{FF7477}Equipo Médico",eq,"Equipar","Cancelar");
			}
		}
		else if(Team_LSTV(playerid))
		{
		    if(PlayerToPoint(5, playerid, 691.758422,-1417.117675,1087.292675))
		    {
		        new cnn[] = "Seguridad\nPeriodista\nRopa Normal";
		        SafeDialogEx(playerid,EQUIPO_CNN,DIALOG_STYLE_LIST,"{2EDFFF}Equipo LSTV",cnn,"Equipar","Cancelar");
		    }
		}
		else if(Team_Mecanicos(playerid))
		{
			if(PlayerToPoint(5, playerid, 983.81604,-1443.65845,13.74660))
			{
				new mec[] = "Ayudante\nTrucker\nMecanico\nSupervisor\nMujer\nDirector\nRopa Normal";
			    SafeDialogEx(playerid,EQUIPO_MECANICO,DIALOG_STYLE_LIST,"{2EDFFF}Equipo Mecánico",mec,"Equipar","Cancelar");
   			}
		}
		if(Gobierno(playerid))
		{
		    if(PlayerToPoint(5, playerid, 362.1189,-52.2308,-93.8500))
		    {
		        new gob[] = "Seguridad 1\nSeguridad 2\nSeguridad 3\nSeguridad 4\nChofér\nRecepcionista\nSecretario\nMinistro\nVicepresidente\nPresidente\nChaleco Antibalas\nRopa normal";
		        SafeDialogEx(playerid,EQUIPO_GOB,DIALOG_STYLE_LIST,"{2EDFFF}Equipo Gobierno",gob,"Equipar","Cancelar");
		    }
		}
        else if(Team_Judicial(playerid))
		{
		    if(PlayerToPoint(5, playerid, 2135.5605,1300.7083,7698.8999))
		    {
		        new SistemaJ[] = "Seguridad\nChofer\nDirector\nRopa Normal";
		        SafeDialogEx(playerid,EQUIPO_SistemaJ,DIALOG_STYLE_LIST,"{2EDFFF}Equipo Sistema Judicial",SistemaJ,"Equipar","Cancelar");
		    }
		}
		else if(Team_BomberosBA(playerid))
		{
		    if(PlayerToPoint(5, playerid, -1683.8572,-2074.3633,19.2459))
		    {
		        new bom[] = "Ayudante\nIntermedio\nDirector\nRopa Normal";
		        SafeDialogEx(playerid,EQUIPO_BOMBEROS,DIALOG_STYLE_LIST,"{00F70C}Bomberos",bom,"Equipar","Cancelar");
		    }
		}
		//*******************Facciones Ilegales*******************
        if(Hitman(playerid))
		{
	    	if(PlayerToPoint(5, playerid, 0000.0000,0000.0000,0000.0000))
		   {
	  			new eqh[] = "Silenced 9mm\nCuchillo\nMascara\nSniper\nMP5";
			  	SafeDialogEx(playerid,EQUIPO_HITMAN,DIALOG_STYLE_LIST,"{2EDFFF}Equipo Hitman",eqh,"Equipar","Cancelar");
		   }
		}
		if(Team_Rusa(playerid))
		{
		    if(PlayerToPoint(5, playerid, -12.3236,44.0121,4013.2021))
		    {
		        new eqr[] = "Cuchillo\nDesert deagle\t\t$3.000\nMP5\t\t\t$4.500";
			    SafeDialogEx(playerid,EQUIPO_RUSA,DIALOG_STYLE_LIST,"{2EDFFF}Equipo Rusos",eqr,"Equipar","Cancelar");
		    }
		}
		if(Team_LCN(playerid))
		{
		    if(PlayerToPoint(5, playerid, -777.4551, 496.1395, 1368.4968))
		    {
		        new eqlcn[] = "Cuchillo\nDesert Deagle\t\t$3.000\nMP5\t\t\t$4.500";
			    SafeDialogEx(playerid,EQUIPO_LCN,DIALOG_STYLE_LIST,"{2EDFFF}Equipo LCN",eqlcn,"Equipar","Cancelar");
		    }
		}
		if(Team_Yakuza(playerid))
		{
		    if(PlayerToPoint(5, playerid, 1242.5764,-761.2462,5080.7578))
		    {
		        new eqykz[] = "Cuchillo\nDesert Deagle\t\t$3.000\nMP5\t\t\t$4.500";
			    SafeDialogEx(playerid,EQUIPO_YAKUZA,DIALOG_STYLE_LIST,"{2EDFFF}Equipo Yakuza",eqykz,"Equipar","Cancelar");
		    }
		}
		if(Team_Alqaeda(playerid))
		{
		    if(PlayerToPoint(5, playerid, -3804.9746,1306.9164,75.5859))
		    {
		        new eqal[] = "MP5\nAK-47\nDesert Eagle\nChaleco Antibalas";
			    SafeDialogEx(playerid,EQUIPO_ALQAEDA,DIALOG_STYLE_LIST,"{2EDFFF}I.S.I.S Equipamiento",eqal,"Equipar","Cancelar");
		    }
		}
        if(Team_Motor(playerid))
		{
		    if(PlayerToPoint(5, playerid, 671.02521,-480.26691,-25.53537))
		    {
            		new eqms[] = "Cuchillo\nBate\n9mm\nEscopeta\nVestimenta 1\nVestimenta 2";
            		SafeDialogEx(playerid,EQUIPO_MOTOQUEROS,DIALOG_STYLE_LIST,"Casillero de Hell's Angels",eqms,"Equipar","Cancelar");
            }
		}
		if(Team_Santana(playerid))
		{
		    if(PlayerToPoint(5, playerid, 1109.7301,244.2895,9001.6875))
		    {
		        new eqst[] = "Cuchillo\nDesert Deagle\t\t$3.000\nMP5\t\t\t$4.500";
			    SafeDialogEx(playerid,EQUIPO_SANTANA,DIALOG_STYLE_LIST,"{2EDFFF}Equipo Santana",eqst,"Equipar","Cancelar");
		    }
		}
	    return 1;
	}
	zcmd(moneda, playerid, params[])
	{
	    new coin = random(2)+1, string[90], coinname[10];
	    if(coin == 1) 	coinname = "cara";
	    else 			coinname = "cruz";
	    format(string, sizeof(string), "*** %s lanza una moneda al aire y cae %s", GetPlayerNameEx(playerid), coinname);
	    ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    return 1;
	}
	zcmd(ven, playerid, params[])
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
			new string[128];
            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
	        {
		       VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
		       format(string, sizeof(string), "* %s baja la ventana.", GetPlayerNameEx(playerid));
		       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		       return 1;
	        }
            else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1)
	        {
		       VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
		       format(string, sizeof(string), "* %s sube la ventanilla.", GetPlayerNameEx(playerid));
		       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		       return 1;
	        }
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "Usted necesita estar en el vehiculo para utilizar esta función.");
        return 1;

     }
   	zcmd(levantar, playerid, params[])
	{
    	if(IsPlayerConnected(playerid))
        {
           new giveplayerid;
             if(Info[giveplayerid][pEstado] == 0) return ClearAnimations(giveplayerid);

        }
		return 1;
     }
   	zcmd(alpiso, playerid, params[])
	{
		new giveplayerid;
        if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
			return 1;
		}
		if(IsAPolice(playerid))
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF} No puedes hacer esto contigo mismo.");
	    if(sscanf(params, "d", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/alpiso (usuario id){FFFFFF} para intentar de tirarlo al piso.");
		if(KnockedDown[playerid] == 0 || IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(params[0]))
		{
			if(ProxDetectorS(5.0, playerid, params[0]))
			{
				new rands = random(2)+1, string[128];
				format(string, sizeof(string), "* %s se acerca al sujeto tomándolo, así, hace fuerza para tirarlo.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
            	KnockedDown[playerid] = 100;

            	if(rands == 1)
				{
					ApplyAnimation(params[0], "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
					SetPlayerDrunkLevel(params[0], 5000);
					SetTimerEx("ClearKnock", 60000, false, "i", params[0]);
					SetTimerEx("ClearKnock", 0000, false, "i", playerid);
					KnockedDown[params[0]] = 1;
                    format(string, sizeof(string), "* %s intentó de tirar a %s al piso, y lo consiguió.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
					ProxDetector(3.0, playerid, string, 0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF);
					format(string, sizeof(string), "* %s cae al piso.", GetPlayerNameEx(params[0]));
            		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            		SetPlayerDrunkLevel(params[0], 3000);
				}
				else
				{
					format(string, sizeof(string), "* %s intentó de tirar a %s al piso pero no pudo.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
					ProxDetector(5.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
            		SetPlayerDrunkLevel(params[0], 3000);
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador está muy lejos de usted.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no puede utilizar este comando ahora.");
		return 1;
	}
	//USMC
    zcmd(misil, playerid, params[])
	{
	    new Float:M_X, Float:M_Y, Float:M_Z, Float:radius;
	    if(Team_USMC(playerid))
		{
	        if(Misile_Launcher < 100)
			{
	            new string[128];
		        if(PlayerToPoint(5.0,playerid,275.61795,2044.75574,46.45055))
				{
			        if(!sscanf(params, "fffiii",M_X,M_Y,M_Z,radius,params[1],params[2])){
			            if(Info[playerid][pRank] > 3){
			                if(radius > 100 || radius < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Radio máximo 100");
			                if(params[1] > 13  || params[1] < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tipo explosión 0-13");
			                if(params[2] > 60  || params[1] < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tiempo máximo 60 segundos");
			            	SetTimerEx("MissileLaunchEx", params[2]*1000, false, "fffii", M_X,M_Y,M_Z,radius,params[1]);
							Misile_Launcher ++;
							SendRadioMessage(3, TEAM_RADIO_COLOR, "** AVISO DE LANZAMIENTO DE MISIL **");
                            format(string, sizeof(string), "%s ejecutará lanzamiento de misil en %d segundos, destino: %0.2f - %0.2f - %0.2f, radio: %d",
                            GetPlayerNameEx(playerid),params[2],M_X,M_Y,M_Z,radius,params[1]);
                            SendRadioMessage(3, TEAM_RADIO_COLOR, string);
						} else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Necesitas ser mayor de rango 3.");
			        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /misil (coordenada X) (coordenada Y) (coordenada Z) (radio) (tipo) (tiempo)");
				}
				else if(PlayerToPoint(1.0,playerid,275.61795,2044.75574,46.45055))
				{
				    if(!sscanf(params, "id",params[0], params[1]))
					{
			            if(Info[playerid][pRank] > 3)
						{
			                if(params[0] > MAX_VEHICLES || params[0] < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vehículo incorrecto.");
			                SetTimerEx("MissileLaunch", params[1]*1000, false, "i", params[0]);
			                Misile_Launcher ++;
			                SendRadioMessage(3, TEAM_RADIO_COLOR, "** AVISO DE LANZAMIENTO DE MISIL **");
                            format(string, sizeof(string), " %s ejecutará Lanzamiento de misil en %d Segundos, Objetivo Vehículo %d", GetPlayerNameEx(playerid), params[1], params[0]);
                            SendRadioMessage(100, TEAM_RADIO_COLOR, string);
			            } else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Necesitas ser mayor de rango 3.");
			        } else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /misil (vehículo) (tiempo)");
				} else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en ningún lanzamisiles.");
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Aún no han detonado los otros misiles.");
	    } else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
	    return 1;
	}
 CMD:su(playerid, params[]){
	new string[170];
	if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	if(OnDuty[playerid] == 0 && OrgGob(playerid)) return  SendClientMessageEx(playerid, COLOR_WHITE, "No estas en servicio.");
	if(!sscanf(params,"ii", params[0], params[1]))
		{
		 GetPlayerName(params[0], cargos, sizeof(cargos));
		 GetPlayerName(playerid, cargos2, sizeof(cargos2));
		 switch(params[1])
		{
		  case 1:
			{
			 format(string, sizeof(string), "Notificación Policial: {FFFFFF}%s quiere hablar contigo, por favor no intentes de escapar.", GetPlayerNameEx(playerid));
		     SendClientMessageEx(params[0], TEAM_BLUE_COLOR, string);
			 Info[params[0]][pWantedLevel] = 1;
		     SetPlayerWantedLevel(params[0], 1);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(OrgGob(playerid))
		     format(string, sizeof(string), "[Radio de policía] {FFFFFF}%s dice: %s se resistió al arresto, procedemos a su persecución.", cargos2, cargos);
		     SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 2:
			{
			 Info[params[0]][pWantedLevel] = 2;
			 SetPlayerWantedLevel(params[0], 2);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(OrgGob(playerid))
			 format(string, sizeof(string), "[Radio de policía] {FFFFFF}%s dice: %s se encuentra armado, procedan con precaución.", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 3:
			{
			 Info[params[0]][pWantedLevel] = 3;
			 SetPlayerWantedLevel(params[0], 3);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(OrgGob(playerid))
			 format(string, sizeof(string), "[Radio de policía] {FFFFFF}%s dice: %s abrió fuego, procedan su arresto rápido!", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 4:
			{
			 Info[params[0]][pWantedLevel] = 4;
			 SetPlayerWantedLevel(params[0], 4);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(OrgGob(playerid))
			 format(string, sizeof(string), "[Radio de policía] {FFFFFF}%s dice: %s tiene cargos de asesinatos, detenerlo lo antes posible.", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 5:
			{
		     Info[params[0]][pWantedLevel] = 5;
			 SetPlayerWantedLevel(params[0], 5);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(OrgGob(playerid))
		   	 format(string, sizeof(string), "[Radio de policía] {FFFFFF}%s dice: %s es extremadamente peligroso, disparen a matar!", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 6:
			{
			 Info[params[0]][pWantedLevel] = 6;
			 SetPlayerWantedLevel(params[0], 6);
		     for(new i = 0; i < GetMaxPlayers(); i++)
			 if(OrgGob(playerid))
			 format(string, sizeof(string), "[Radio de policía] {FFFFFF}%s dice: Todas las organizaciones del Gobierno detengan a %s!", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		}
	  }
		else SendClientMessage(playerid, -1, "Utiliza: /Su [ID] [1 al 6] al saber su nombre acompañado por su rol correspondiente.");
	return 1;
	}
forward Policia(member, color, string[]);
public Policia(member, color, string[])
{
 for(new i = 0; i < MAX_PLAYERS; i++)
	{
	 if(IsPlayerConnected(i))
		{
	     if(OrgGob(i))
		 {
		 SendClientMessage(i, color, string);
		 }
		}
	}
}
	CMD:sospechosos(playerid, params[])
	{
		if(OrgGob(playerid))
		{
			new string[128], x;

			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Sospechosos Buscados:");
			foreach(Player, i)
			{
				if(Info[i][pWantedLevel] >= 1)
				{
					format(string, sizeof(string), "%s%s: %d", string,GetPlayerNameEx(i),Info[i][pWantedLevel]);
					x++;
					if(x > 3)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						x = 0;
						format(string, sizeof(string), " ");
					}
					else
					{
						format(string, sizeof(string), "%s, ", string);
					}
				}
			}
			if(x <= 3 && x > 0)
			{
				string[strlen(string)-2] = '.';
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
		else
		{
			 SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
		}
		return 1;
	}
	zcmd(bkainint, playerid, params[])
	{
        if(Info[playerid][pRequestingBackup] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ya tienes un pedido de ayuda.");
        if(Team_AININT(playerid))
		{
            new Float:px,Float:py,Float:pz,string[128]; GetPlayerPos(playerid, px, py, pz);
			if(Team_AININT(playerid))
			{
			    Info[playerid][pRequestingBackup] = 1;
			    format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información Marcada).", GetPlayerNameEx(playerid));
			    SendRadioMessage(2, TEAM_RADIO_COLOR, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_AININT(i) && OnDuty[i] == 1)
						{
                            ShowPlayerMarkers(1);
							SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 500000.0);
						}
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Utiliza /bkc, para cancelar los refuerzos.");
				SetTimerEx("BackupClear", 180000, false, "iii", playerid, 1, 1);
			}
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        return 1;
    }
    zcmd(bk, playerid, params[])
	{
        if(Info[playerid][pRequestingBackup] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ya tienes un pedido de ayuda.");
        if(IsAPolice(playerid))
		{
            new Float:px,Float:py,Float:pz,string[128]; GetPlayerPos(playerid, px, py, pz);
			if(Team_LAPD(playerid))
			{
			    Info[playerid][pRequestingBackup] = 1;
			    format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información Marcada).", GetPlayerNameEx(playerid));
			    SendRadioMessage(1, TEAM_RADIO_COLOR, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_LAPD(i) && OnDuty[i] == 1)
						{
                            ShowPlayerMarkers(1);
							SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 500000.0);
						}
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Utiliza /bkc, para cancelar los refuerzos.");
				SetTimerEx("BackupClear", 180000, false, "iii", playerid, 1, 1);
			}
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        return 1;
    }
    zcmd(bkc, playerid, params[])
	{
        if(Team_LAPD(playerid) || Team_USMC(playerid) || Team_AININT(playerid)) BackupClear(playerid, 1, 0);
        else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        ShowPlayerMarkers(0);
        SetPlayerToTeamColor(playerid);
        return 1;
	}
    zcmd(bklamd, playerid, params[])
	{
        if(Info[playerid][pRequestingBackup] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF} Ya tienes un pedido de ayuda.");
        if(OrgGob(playerid))
		{
            new Float:px,Float:py,Float:pz,string[128]; GetPlayerPos(playerid, px, py, pz);
			{
			    Info[playerid][pRequestingBackup] = 1;
			    format(string, sizeof(string), "* A todas las unidades del LAMD, el departamento de policía solicitó una ambulancia. (Ubicación Marcada)", GetPlayerNameEx(playerid));
			    SendRadioMessage(4, TEAM_RADIO_COLOR, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_LAMD(i) && OnDuty[i] == 1)
						{
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/bkclamd {FFFFFF}para cancelar el pedido.");
				SetTimerEx("BackupClear", 180000, false, "iii", playerid, 1, 1);
			}
        }
        return 1;
    }
    zcmd(bkclamd, playerid, params[])
	{
        if(OrgGob(playerid)) BackupClear(playerid, 1, 0);
        else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        ShowPlayerMarkers(0);
        return 1;
	}
    zcmd(bks, playerid, params[])
	{
        if(Info[playerid][pRequestingBackup] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ya tienes un pedido de ayuda.");
        if(Team_USMC(playerid))
		{
            new Float:px,Float:py,Float:pz,string[128]; GetPlayerPos(playerid, px, py, pz);
			if(Team_USMC(playerid))
			{
			    Info[playerid][pRequestingBackup] = 1;
			    format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", GetPlayerNameEx(playerid));
			    SendRadioMessage(3, TEAM_RADIO_COLOR, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_USMC(i) && OnDuty[i] == 1)
						{
							SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 500000.0);
						}
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Utiliza /bkc, para cancelar los refuerzos.");
				SetTimerEx("BackupClear", 180000, false, "iii", playerid, 1, 1);
			}
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        return 1;
    }
    zcmd(multar, playerid, params[])
    {
        if(!OrgGob(playerid) && !Team_USMC(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte del cuerpo policial.");
        if(OnDuty[playerid] == 0 && !Team_USMC(playerid)) return  SendClientMessageEx(playerid, COLOR_WHITE, "No estas en servicio.");
        if(!sscanf(params, "dis[64]", params[0], params[1], params[2]))
        {
            if(params[1] < 0 || params[1] > 10000) return SendClientMessageEx(playerid, COLOR_WHITE, "El máximo de multa son 10000$");
            if(IsPlayerConnected(params[0]))
			{
			    if(Facturing[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador ya tiene una petición pendiente.");
			    if(!ProxDetectorS(8.0,playerid,params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Muy lejos de el jugador.");
			    new string[128];
			    if(GetPlayerCash(params[0]) < params[1])
				{
    				format(string, sizeof(string), "* El infractor no tiene {FFFF00}%d${FFFFFF} para pagar la multa.", params[1]);
					return SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				else
				{
				    ClearChatbox(playerid);
				    SendClientMessageEx(params[0], -1, "Ciudad de Los Ángeles");
				    format(string, sizeof(string), "Demandante: %s", GetPlayerNameEx(playerid));
					SendClientMessageEx(params[0], -1, string);
					format(string, sizeof(string), "Infracción: %s", params[2]);
					SendClientMessageEx(params[0], -1, string);
					format(string, sizeof(string), "Multa: %d$", params[1]);
					SendClientMessageEx(params[0], -1, string);
					SendClientMessageEx(playerid, COLOR_WHITE, "* Espera la respuesta del sujeto");
					SendClientMessageEx(params[0], COLOR_WHITE, "Te han multado. Utiliza /aceptar multa ó /cancelar multa, para pagar la multa.");
					TicketOffer[params[0]] = playerid;
					TicketMoney[params[0]] = params[1];
					Facturing[params[0]] = 1;
				}
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /multar (ID) (precio) (razón)");
        return 1;
    }
     zcmd(m, playerid, params[])
    {
        if(sscanf(params, "s[128]", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /m (texto)");
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo.");
		if(Team_LAMD(playerid) || OrgGob(playerid) || Team_USMC(playerid) || Team_BomberosBA(playerid) || Team_CIA(playerid)|| Team_AININT(playerid))
        {
			new string[128];
			format(string, sizeof(string), "(Megáfono) %s: %s",GetPlayerNameEx(playerid), params[0]);
			ProxDetector(60.0, playerid, string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes utilizar este comando.");
        return 1;
    }
    zcmd(dni, playerid, params[])
    {
        if(sscanf(params, "d", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dni (id)");
        if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
        if(ProxDetectorS(8.0, playerid, params[0]))
        {
	        new string[90];
	        ShowDNI(playerid, params[0]);
	        format(string, sizeof(string), "* %s le muestra su documento de identificación a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
		return 1;
    }
    zcmd(encontrar, playerid, params[])
    {
        if(!Team_AININT(playerid) || Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "<!>{FFFFFF} Debes ser Agente Táctico (3) o superior.");
        if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "[Central]: Ahora es imposible, prueba de aquí a unos segundos");
		if(!sscanf(params, "d", params[0]))
		{
		    if(IsPlayerConnected(params[0]))
			{
                new string[128];
			    new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
			    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "Estableciendo conexión...");
			    format(string, sizeof(string), "** Conectado con Satélite #%d Cobertura(%d)", sat,luck);
			    SendClientMessageEx(playerid, COLOR_WHITE,string);
			    format(string, sizeof(string), "** Persona a buscar: %s", GetPlayerNameEx(params[0]));
			    SendClientMessageEx(playerid, COLOR_WHITE,string);
				if(luck > 10 && Info[params[0]][pSex] == 1) 		SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Masculino");
				if(luck > 10 && Info[params[0]][pSex] == 2) 		SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Femenino");
				if(luck > 13 && IsPlayerInAnyVehicle(params[0])) 		SendClientMessageEx(playerid, COLOR_WHITE,"Estado: En Automóvil");
				if(luck > 17 && Info[params[0]][pPnumber] != 0)	format(string, sizeof(string), "Teléfono: %d", Info[params[0]][pPnumber]); SendClientMessageEx(playerid, COLOR_WHITE,string);
    			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
       			UsedFind[playerid] = reuse_time;
				WhoFind[playerid] = params[0];
				format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
    			SendClientMessageEx(playerid, COLOR_WHITE,string);
    			format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
    			SendClientMessageEx(playerid, COLOR_WHITE,string);
    			SetTimerEx("Detective_FindPerson", sat+luck*1000, false, "i", playerid);
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /encontrar [ID jugador]");
        return 1;
    }
    zcmd(encontrarveh, playerid, params[])
    {
        if(!Team_AININT(playerid) || Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "<!>{FFFFFF} Debes ser Agente Táctico (3) o superior.");
        if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "[Central]: Ahora es imposible, prueba de aquí a unos segundos");
		if(!sscanf(params, "i", params[0]))
		{
            new string[128];
		    if(params[0] < 0 || params[0] > MAX_VEHICLES) return SendClientMessageEx(playerid, COLOR_GRAD2, "Error ID.");
		    new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
		    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "* Estableciendo conexión...");
		    format(string, sizeof(string), "Conectado con Satélite #%d Cobertura(%d)", sat,luck);
		    SendClientMessageEx(playerid, COLOR_WHITE,string);
		    format(string, sizeof(string), "ID Vehículo: %d",params[0]);
		    SendClientMessageEx(playerid, COLOR_WHITE,string);
			if(luck > 13)
			{
   				format(string, sizeof(string), "Modelo Vehículo: %s", GetVehicleFriendlyName(params[0]));
		    	SendClientMessageEx(playerid, COLOR_WHITE,string);
			}
   			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
			UsedFind[playerid] = reuse_time;
			WhoFind[playerid] = params[0];
			format(string, sizeof(string), "La información se marcará en el mapa en: %d segundos.", sat+luck);
	   		SendClientMessageEx(playerid, COLOR_YELLOW,string);
	   		format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
	   		SendClientMessageEx(playerid, COLOR_YELLOW,string);
	   		SetTimerEx("Detective_FindCar", sat+luck*1000, false, "i", playerid);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /encontrar [ID coche]");
        return 1;
    }
    zcmd(pagar, playerid, params[])
    {
        new string[128];
        if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes que tener mínimo 2 Horas de juego para dar dinero.");
        if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar esto aquí.");
        if(!sscanf(params, "di", params[0], params[1]))
		{
            if(params[1] > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No posees esa cantidad.");
            if(params[1] < 1 || params[1] > 200000) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Máximo: $20,000");
            if(IsPlayerConnected(params[0]))
			{
                if (GetPVarInt(playerid, "GiveMoneyTimer") > 0)
				{
				format(string, sizeof(string), "Tienes que esperar {FF0000}%d{FFFFFF} segundos después de pagado.", GetPVarInt(playerid, "GiveMoneyTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				}
				if(ProxDetectorS(5.0, playerid, params[0]))
				{
    			SetPVarInt(playerid, "GiveMoneyTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PAYTIMER);
				Bought(playerid, params[1]);
				Earn(params[0], params[1]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(params[0], 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s le da $%d a %s", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s pagó %d$ a %s", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
				OnPlayerSavedStats(playerid);
				OnPlayerSavedStats(params[0]);
    			Log("logs/- Pagos a Usuarios.log", string);
                }
				else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
            }
			else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/pagar (usuario id) (cantidad){FFFFFF} para pagarle a alguien.");
        return 1;
    }
	zcmd(vehid, playerid, params[])
	{
	    if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No has logueado.");
        if(IsPlayerInAnyVehicle(playerid))
		{
			new string[12];
	        format(string, sizeof(string), "* Vehiculo ID: %d.", GetPlayerVehicleID(playerid));
	        SendClientMessageEx(playerid, COLOR_GREY, string);
	    } else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo");
	    return 1;
	}
    zcmd(dveh, playerid, params[]){
        new idcar = GetPlayerVehicleID(playerid);
        if(IsaRent[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No has rentado ningún auto.");
		if(IsARentCar(idcar) && HireKey[playerid] == idcar)
		{
		    SetVehicleParamsEx(idcar,0,0,0,0,0,0,0);
  			SetVehicleToRespawn(HireKey[playerid]);
  			SendClientMessageEx(playerid, COLOR_GREY, "Gracias por no dejar el vehículo tirado, te daremos $800 por utilizar /dveh.");
  			IsaRent[playerid] = 0;
  			RentTime[playerid] = 0; HireKey[playerid] = 9999;
  			GivePlayerCash(playerid, 800);
		}
        return 1;
    }
    zcmd(subirnivel, playerid, params[])
	{
	    if(Info[playerid][pLevel] >= 0)
		{
			new nxtlevel = Info[playerid][pLevel]+1;
			new expamount = nxtlevel*explevel;
			if(Info[playerid][pExp] < expamount)
			{
			    new infostring[128];
				format(infostring, 128, "Necesitas %i puntos de respeto más para subir de nivel, tienes %d.",expamount,Info[playerid][pExp]);
				SendClientMessageEx(playerid, COLOR_GRAD1, infostring);
				return 1;
			}
			else
			{
			    new infostring[64];
				format(infostring, sizeof(infostring), "~p~~h~Subiste al nivel %d!", nxtlevel);
				GameTextForPlayer(playerid, infostring, 5000, 1);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Info[playerid][pLevel]++;
				Info[playerid][pExp] = Info[playerid][pExp]-expamount;
				OnPlayerSavedStats(playerid);
				if(Info[playerid][pLevel] == 5) SendClientMessageEx(playerid, COLOR_GRAD1, "{2EDFFF}[Lvl 5]: {FFFFFF}Pensamos que el canal de duda ya no te sera util, por lo tanto será desactivado automáticamente.");
			}
		}
	    return 1;
 	}
    zcmd(quitar, playerid, params[])
    {
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás herido.");
			return 1;
		}
        if(!OrgGob(playerid) && !Team_USMC(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización para usar este comando.");
        new item[32], string[128], giveplayerid;
        if(!sscanf(params, "ds[32]",giveplayerid,item))
        {
            if(!IsPlayerConnected(giveplayerid))               return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado.");
			if(GetPlayerSpecialAction(giveplayerid) != SPECIAL_ACTION_HANDSUP && Info[giveplayerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes revisar a una persona si no tiene las manos arriba (/rendirse) o si está detenida.");
			if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador muy lejos.");
            if(strcmp(item,"lconduccion",true) == 0)
			{
			    Info[giveplayerid][pCarLic] = 0;
			    format(string, sizeof(string), "* Oficial %s toma la licencia de conducción de %s y la guarda.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"lvuelo",true) == 0)
			{
			    Info[giveplayerid][pFlyLic] = 0;
			    format(string, sizeof(string), "* Oficial %s toma la licencia de vuelo de %s y la guarda.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"larma",true) == 0)
			{
			    Info[giveplayerid][pGunLic] = 0;
		        format(string, sizeof(string), "* Oficial %s toma la licencia de armas de %s y la guarda.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"drogas",true) == 0)
			{
                Info[giveplayerid][pCrack] = 0;
                Info[giveplayerid][pPot] = 0;
			    format(string, sizeof(string), "* Oficial %s quita las drogas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"materiales",true) == 0)
			{
                Info[giveplayerid][pMats] = 0;
			    format(string, sizeof(string), "* Oficial %s quita los materiales a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"telefono",true) == 0)
			{
                Info[giveplayerid][pPnumber] = 0;
			    format(string, sizeof(string), "* Oficial %s quita el teléfono %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"pasaporte",true) == 0)
			{
                Info[giveplayerid][pPasaporte] = 0;
			    format(string, sizeof(string), "* Oficial %s quita el pasaporte a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"armas",true) == 0)
			{
			    ResetPlayerWeaponsEx(giveplayerid);
       			format(string, sizeof(string), "* Oficial %s le quita las armas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
       			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Item incorrecto.");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "* /quitar <jugador> <item>");
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Items: lconduccion, lvuelo, larma, drogas, materiales, telefono, armas, pasaporte");
		}
        return 1;
	}
    zcmd(obtenerip, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        if(!sscanf(params, "d", params[0]))
        {
            new ip[20], string[64];
            GetPlayerIp(params[0],ip,sizeof(ip));
            format(string, sizeof(string), "{FFFFFF}• %s:{000099} %s", GetPlayerNameEx(params[0]), ip);
            SendClientMessageEx(playerid, COLOR_GRAD2, string);
        } else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /Obtenerip [ID]");
        return 1;
    }
	CMD:desbanearip(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pBanAppealer] == 1)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desbanearip (ip)");
			if(IsValidIP(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa IP no es válida, chequear bien.");
			new string[128], year, month,day;
			getdate(year, month, day);
			RemoveBan(params);
			format(string, 128, "[Desbaneos]: %s desbaneó la dirección IP %s", GetPlayerNameEx(playerid), params);
			ABroadCast(COLOR_GENERAL,string,2);
			format(string, sizeof(string), "AdmCmdExe: %s desbaneó la IP %s (%d-%d-%d)", GetPlayerNameEx(playerid), params, month, day, year);
			Log("logs/- IPs Desbaneadas.log", string);
		}
		return 1;
	}
 CMD:desbanear(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
  		if(Info[playerid][pBanAppealer] == 1)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /Desbanear (Nombre_Apellido)");
			if(INI_Exist(params))
			{
				new PlayerFile[ 13 + MAX_PLAYER_NAME + 1], string[128]; //tmpunban[32], stringfile[32]
	    		format( PlayerFile , sizeof PlayerFile, USERFILE, params);
	    		new INI:File = INI_Open(PlayerFile);
	    		INI_SetTag(File,"data");
	    		INI_WriteInt(File,"AdminZC",0);
	    		INI_WriteInt(File,"BanAppealer",0);
				INI_WriteInt(File,"FactionModerator",0);
				INI_WriteInt(File,"GangModerator",0);
				INI_WriteInt(File,"AdminNivelZC",0);
				INI_WriteInt(File,"Helper",0);
				INI_WriteInt(File,"BanZC",0);
				INI_WriteInt(File,"ShopTech",0);
				INI_Close(File);
				format(string, 128, "[ATENCIÓN]: %s fue desbaneado por %s.", params, GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 2);
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "[LOG] %s fue desbaneado por %s. (%d-%d-%d)", params, GetPlayerNameEx(playerid),month,day,year);
				Log("logs/- Usuarios Desbaneados.log", string);
			}
			else SendClientMessageEx( playerid, COLOR_WHITE, "Esa cuenta no existe." );
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	   }
 CMD:desbloquear(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
  		if(Info[playerid][pBanAppealer] >= 1)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /Desbloquear (Nombre_Apellido)");
			if(INI_Exist(params))
			{
				new PlayerFile[ 13 + MAX_PLAYER_NAME + 1], string[128]; //tmpunban[32], stringfile[32]
	    		format( PlayerFile , sizeof PlayerFile, USERFILE, params);
	    		new INI:File = INI_Open(PlayerFile);
	    		INI_SetTag(File,"data");
	    		INI_WriteInt(File,"AdminZC",0);
	    		INI_WriteInt(File,"BanAppealer",0);
				INI_WriteInt(File,"FactionModerator",0);
				INI_WriteInt(File,"GangModerator",0);
				INI_WriteInt(File,"AdminNivelZC",0);
				INI_WriteInt(File,"Helper",0);
				INI_WriteInt(File,"BanZC",0);
				INI_WriteInt(File,"ShopTech",0);
				INI_Close(File);
				format(string, 128, "[Inf. Cuentas]: %s fue desbloqueado por %s.", params, GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 2);
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "[LOG] %s fue desbloqueado por %s. (%d-%d-%d)", params, GetPlayerNameEx(playerid),month,day,year);
				Log("logs/- Usuarios Desbloqueados.log", string);
			}
			else SendClientMessageEx( playerid, COLOR_WHITE, "Esa cuenta no existe." );
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	   }
    zcmd(expulsarstaff, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pModStaff] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /Expulsarstaff (Nombre_Apellido)");
  		if(INI_Exist(params))
		{
 			new PlayerFile[MAX_PLAYER_NAME + 32];
	    	format( PlayerFile , sizeof PlayerFile, USERFILE, params);
	    	new INI:File = INI_Open(PlayerFile);
    		INI_SetTag(File,"data");
	    	INI_WriteInt(File,"Helper",0);
        	INI_WriteInt(File,"AdminZC",0);
        	INI_WriteInt(File,"AdminNivelZC",0);
    		INI_WriteInt(File,"BanAppealer",0);
    		INI_WriteInt(File,"FactionModerator",0);
    		INI_WriteInt(File,"GangModerator",0);
    		INI_WriteInt(File,"ShopTech",0);
    		INI_Close(File);
           	format(string, sizeof(string), "Inf. Admintrativa: %s expulsó del staff a %s de manera OFF-Line.", GetPlayerNameEx(playerid), params);
           	ABroadCast(COLOR_GENERAL,string,4);
           	Log("logs/- Información de Staff.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Esta cuenta no existe en la base de datos.");
		return 1;
	}
    zcmd(banoffline, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	  	if(Info[playerid][pBanAppealer] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
		new string[128], playername[MAX_PLAYER_NAME], reason[64];
		if(sscanf(params, "ss", playername, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /Banoffline (Nombre_Apellido) (Razón)");
  		if(INI_Exist(playername))
		{
				new PlayerFile[MAX_PLAYER_NAME + 32];
	    		format( PlayerFile , sizeof PlayerFile, USERFILE, playername);
	    		new INI:File = INI_Open(PlayerFile);

	    		INI_SetTag(File,"data");
	    		INI_WriteInt(File,"AdminZC",0);
	    		INI_WriteInt(File,"Helper",0);
	    		INI_WriteInt(File,"AdminNivelZC",0);
	    		INI_WriteInt(File,"BanZC",2);
	    		INI_Close(File);
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "ATENCIÓN: %s fue baneado por %s, razón: %s (%d-%d-%d)", playername, GetPlayerNameEx(playerid), reason, month, day, year);
				Log("logs/- Baneos OFFLine.log", string);
				format(string, 128, "[Administración]: %s fue baneado por %s, razón: %s [CMD OFFLINE]", playername, GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,2);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Esa cuenta no existe." );
		return 1;
	}
	CMD:cambiarclave(playerid, params[])
	{
		if (gPlayerLogged{playerid})
		{
			SafeDialogEx(playerid, CPASS, DIALOG_STYLE_PASSWORD, "{2EDFFF}Cambio de contraseña. . .", "{FFFFFF}- Por favor, coloque su nueva contraseña:", "Cambiar", "Cancelar" );
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Debes ingresar al servidor y luego cambiar su contraseña.");
		return 1;
	}
	CMD:ipod(playerid, params[])
	{
	    if(Info[playerid][pIpadMusic] == 1)
	    {
	        new string[128];
			SafeDialogEx(playerid, IPAD, DIALOG_STYLE_LIST, "{00F70C}Ipod", "Drum and Bass HD\nReggaeton 24 Horas\nMetal Time\nRock and Roll\nLa Mega\nRap Gansta\nBachata radio\nRadio Mambo\nSlap Back Radio\n Maxima FM\nApagar IpodMusic", "Play", "Guardar");
            format(string, sizeof(string), "* %s saca su Ipod del bolsillo.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes un IpodMusic, puedes conseguirlo en un 24 Horas");
		return 1;
	}
 	zcmd(cuenta, playerid, params[]){
		if(Info[playerid][pLevel] >= 1)
		{
			ShowStats(playerid,playerid);
		}
		return 1;
	}
	zcmd(gob, playerid, params[])
	{
	    new string[128];
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/gob (texto){FFFFFF} para hablar global.");
			return 1;
		}		if(Info[playerid][pLeader] == 1 || Gobierno(playerid) || Info[playerid][pLeader] == 2 || Info[playerid][pLeader] == 3 || Info[playerid][pLeader] == 4 || Info[playerid][pLeader] == 7 || Info[playerid][pLeader] == 9 || Info[playerid][pLeader] == 17 || Info[playerid][pLeader] == 19 || Info[playerid][pLeader] == 20)
		{
			if(Info[playerid][pLeader] == 1)
	    	{
			    format(string, sizeof(string), "[Transmisión - LAPD]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x00ACFFFF, string);
	    	}
			else if(Info[playerid][pLeader] == 2)
	    	{
			    format(string, sizeof(string), "[Transmisión - AININT]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x00ACFFFF, string);
	    	}
	    	else if(Info[playerid][pLeader] == 3)
	        {
			    format(string, sizeof(string), "[Transmisión - USMC]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x00ACFFFF, string);
	        }
            else if(Info[playerid][pLeader] == 4)
	    	{
			    format(string, sizeof(string), "[Transmisión - LAMD]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x00ACFFFF, string);
	    	}
	        else if(Presidente(playerid))
	        {
			    format(string, sizeof(string), "[Transmisión - Gobierno]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x00ACFFFF, string);
			}
			else if(Gobierno(playerid) && Info[playerid][pRank] == 5)
			{
			    format(string, sizeof(string), "[Transmisión - Gobierno]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x00ACFFFF, string);
			}
			else if(Info[playerid][pLeader] == 9)
			{
			    format(string, sizeof(string), "[Transmisión - S.Jud]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x00ACFFFF, string);
			}
			else if(Info[playerid][pLeader] == 10)
			{
			    format(string, sizeof(string), "[Transmisión - P.N.A]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x00ACFFFF, string);
			}
  		    else if(Info[playerid][pLeader] == 17)
	    	{
			    format(string, sizeof(string), "[Transmisión - CIA]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x00ACFFFF, string);
	    	}
	    	else if(Info[playerid][pLeader] == 19)
	    	{
			    format(string, sizeof(string), "{FF0000}[Transmisión - ISIS]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x00ACFFFF, string);
	    	}
	    	else if(Info[playerid][pLeader] == 20)
	    	{
			    format(string, sizeof(string), "[Transmisión - BOM]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x00ACFFFF, string);
	    	}
  		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización para usar este comando.");
		return 1;
	}
 	zcmd(impuesto, playerid, params[])
	{
	    if(Presidente(playerid))
	    {
	        if(!sscanf(params, "i", params[0]))
	        {
	            if(params[0] < 0 || params[0] > 10000) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Valor entre 1 - 10.000");

	            new string[90];
	            TaxValue = params[0];
				SaveStuff();
				format(string, sizeof(string), "[Impuestos - Gobierno Nacional]:{FFFFFF} Anunciamos que los impuestos aumentan en todo SA: $%d{FFFFFF}", TaxValue);
				SendClientMessageToAllEx(0x00ACFFFF, string);

	        }
	        else SendClientMessageEx(playerid, COLOR_GRAD2, "* /impuesto <cantidad>");
	    }
	    else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización para usar este comando.");
	    return 1;
 	}
	zcmd(altavoz, playerid, params[])
	{
        if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted no tiene un telefono.");
        if(Mobile[playerid] == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted no está en una llamada telefonica.");
        if(IsPlayerConnected(playerid))
        {
			if(Info[playerid][pSpeaker] == 0)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW2, "* Beep * El altavoz está conectado.");
				Info[playerid][pSpeaker] = 1;
				return 1;
			}
			if(Info[playerid][pSpeaker] == 1)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW2, "* Beep * El altavoz se ha desconectado.");
				Info[playerid][pSpeaker] = 0;
				return 1;
			}
		}
		return 1;
	}

    zcmd(tv, playerid, params[])
	{
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO,"! {FFFFFF}No puedes utilizar este cmd si no forma parte de la policía.");
        {
            new VerTV[] = "{FFFFFF}» Entretenimiento\n{FFFFFF}» Entrevistas\n{FFFFFF}» Notificas\n{FFFFFF}» Música";
            SafeDialogEx(playerid,CAMARAS_TV,DIALOG_STYLE_LIST,"{377FE3}• {98E944}• {FE3D1E}• {FFFFFF}FOX",VerTV,"{FFFFFF}Ver","{FFFFFF}Salir");
        }
        return 1;
	}

    zcmd(salirtv, playerid, params[])
	{
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO,"! {FFFFFF}No puedes utilizar este cmd si no forma parte de la policía.");
        {
            SetCameraBehindPlayer(playerid);
        }
        return 1;
	}

    zcmd(drones, playerid, params[])
	{
     	if(!IsPlayerInRangeOfPoint(playerid,2.0,1544.16296, -1616.43152, 13.35340)) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}No te encuentras en los controles de drones.");
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO,"! {FFFFFF}No puedes utilizar este cmd si no forma parte de la policía.");
        if(Info[playerid][pRank] < 3) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}Debes ser rango 3 o más para ver y controlar los drones.");
        {
            DronesCam[playerid] = 1;
            new DronesActivos[] = "{FFFFFF}Número del dron: {000099}1\t{FFFFFF}Tipo de dron: {000099}Helicóptero\t{FFFFFF}Estado: {00F70C}En línea\n{FFFFFF}Número del dron: {000099}2\t{FFFFFF}Tipo de dron: {000099}Helicóptero\t{FFFFFF}Estado: {00F70C}En línea\n{FFFFFF}Número del dron: {000099}3\t{FFFFFF}Tipo de dron: {000099}Helicóptero\t{FFFFFF}Estado: {00F70C}En línea\n{FFFFFF}Número del dron: {000099}4\t{FFFFFF}Tipo de dron: {000099}Helicóptero\t{FFFFFF}Estado: {00F70C}En línea\n";
            SafeDialogEx(playerid,DRONES_PD,DIALOG_STYLE_LIST,"{000099}Drones del Departamento de Policía",DronesActivos,"{FFFFFF}Ver","{FFFFFF}Salir");
        }
        return 1;
	}

    zcmd(apagardron, playerid, params[])
	{
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO,"! {FFFFFF}No puedes utilizar este cmd si no forma parte de la policía.");
        if(DronesCam[playerid] == 0) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}No te encuentras en ningún dron.");
        {
            DronesCam[playerid] = 0;
            RemovePlayerFromVehicle(playerid);
            SetPlayerPos(playerid, 1544.16296, -1616.43152, 13.35340);
            SetPlayerFacingAngle(playerid, 175.967102);
            ShowPlayerNameTagForPlayer(playerid, playerid, 1);
        }
        return 1;
	}

    zcmd(camaras, playerid, params[])
	{
     	if(!IsPlayerInRangeOfPoint(playerid,2.0,267.478240, 119.877952, 1004.617187)) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}No te encuentras en el centro de vigilancia de la policía.");
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO,"! {FFFFFF}No puedes utilizar este cmd si no forma parte de la policía.");
        {
            SistemaCam[playerid] = 1;
            new CamActivas[] = "{FFFFFF}• Plaza Central\t\t• Dirección: Oeste\t\t• C-1\n• Pasadena\t\t• Dirección: Oeste\t\t• C-2\n• Lawrence\t\t• Dirección: Norte\t\t• C-3\n• Broadway\t\t• Dirección: Oeste\t\t• C-4\n• Western\t\t• Dirección: Sur\t\t\t• C-5\n• S.M.B (I-425)\t\t• Dirección: Oeste\t\t• C-6\n{FFFFFF}• S.M.B (I-425)\t\t• Dirección: Este\t\t• C-7\n• Peaje (LA-SF)\t\t• Dirección: Oeste\t\t• C-8\n• Peaje (LA-SF)\t\t• Dirección: Este\t\t• C-9\n• Belmont\t\t• Dirección: Noreste\t\t• C-10";
            SafeDialogEx(playerid,CAMARAS_LAPD,DIALOG_STYLE_LIST,"Cámaras de Seguridad - Los Ángeles",CamActivas,"{FFFFFF}Ver","{FFFFFF}Salir");
        }
        return 1;
	}

    zcmd(salircamara, playerid, params[])
	{
        if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO,"! {FFFFFF}No puedes utilizar este cmd si no forma parte de la policía.");
        if(SistemaCam[playerid] == 0) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}No te encuentras en ninguna cámara de seguridad.");
        {
            SistemaCam[playerid] = 0;
            SetPlayerInterior(playerid,10);
            TogglePlayerControllable(playerid,1);
            SetCameraBehindPlayer(playerid);
            SetPlayerPos(playerid, 267.478240, 119.877952, 1004.617187);
            SetPlayerFacingAngle(playerid, 0.420113);
            SetPVarInt(playerid, "IsFrozen", 0);
            TextDrawHideForPlayer(playerid, PFAVig_1);
            TextDrawHideForPlayer(playerid, PFAVig_2);
            TextDrawHideForPlayer(playerid, PFAVig_3);
            TextDrawHideForPlayer(playerid, PFAVig_4);
            TextDrawShowForPlayer(playerid, FechaD);
            TextDrawShowForPlayer(playerid, TiempoD);
            TextDrawShowForPlayer(playerid, Experiencia[playerid]);
        }
        return 1;
	}

    zcmd(derechos, playerid, params[])
    {
        if(OrgGob(playerid))
        {
            new string[128];
	        format(string, sizeof(string),"%s dice: Tienes derecho a guardar silencio, todo lo que diga puede usarse en su contra.",GetPlayerNameEx(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        format(string, sizeof(string),"%s dice: Tiene derecho a un abogado, si no puede pagar uno, se le asignará uno a costas del Estado.",GetPlayerNameEx(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        format(string, sizeof(string),"%s dice: Tiene derecho a una llamada por teléfono.",GetPlayerNameEx(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        format(string, sizeof(string),"%s dice: ¿De acuerdo señor?",GetPlayerNameEx(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        }
        return 1;
    }
    zcmd(cargos, playerid, params[])
    {
        if(OrgGob(playerid))
        {
            SendClientMessageEx(playerid,COLOR_WHITE,"________________________________________________________________________________________");
            SendClientMessageEx(playerid,TEAM_BLUE_COLOR,"» Departamento de Policía S.A - Cargos");
            SendClientMessageEx(playerid,COLOR_WHITE,"");
			SendClientMessageEx(playerid,COLOR_WHITE,"Nivel de búsqueda 1: Resistencia al arresto");
        	SendClientMessageEx(playerid,COLOR_WHITE,"Nivel de búsqueda 2: Sujeto armado");
        	SendClientMessageEx(playerid,COLOR_WHITE,"Nivel de búsqueda 3: Sujeto abre fuego");
        	SendClientMessageEx(playerid,COLOR_WHITE,"Nivel de búsqueda 4: Cargos por asesinatos");
        	SendClientMessageEx(playerid,COLOR_WHITE,"Nivel de búsqueda 5: Extremadamente peligroso");
        	SendClientMessageEx(playerid,COLOR_WHITE,"Nivel de búsqueda 6: Notificar la detención a todas las organizaciones del gobierno");
        	SendClientMessageEx(playerid,COLOR_WHITE,"________________________________________________________________________________________");
        }
        return 1;
    }
    zcmd(robar, playerid, params[])
    {
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No puedes usar este comando mientras estás herido.");
			return 1;
		}
		if(lapdon() == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No hay policías conectados o en servicio.");
        if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar esto aquí.");
		{
		    if(Info[playerid][pRob] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Ya robaste, espera el próximo subisidio!");
		    if(!sscanf(params, "s[32]", params[0]))
		    {
		        new string[128];
		        if(strcmp(params[0],"persona",true) == 0)
		        {
		            new victim = GetClosestPlayer(playerid);
		            if(ProxDetectorS(2.0,playerid, victim))
		            {
                        if(GetPlayerWeapon(victim) == 41)
		    			{
	        				format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y falla.", GetPlayerNameEx(playerid), GetPlayerNameEx(victim));
							ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
       						format(string, sizeof(string), "* %s le rocía la cara con un spray anti-ladrones a %s.", GetPlayerNameEx(victim), GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							Info[playerid][pRob] = 1;
							SendClientMessageEx(params[0], COLOR_YELLOW2, "-> ¡Evitaste que te robaran!");
					    }
					    new rob = random(2)+1;
					    if(rob == 1)
					    {
	        				Info[params[0]][pPnumber] = 0;
					        format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y lo logra.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(params[0]));
							ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
       						format(string, sizeof(string), "* %s se acerca hacia %s y le roba su teléfono.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(params[0]));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendClientMessageEx(params[0], COLOR_YELLOW2, "-> ¡Te han robado el teléfono!");
							SendClientMessageEx(playerid, COLOR_YELLOW2, "-> ¡Has robado un teléfono!");
							Info[playerid][pRob] = 1;
							TelfRob[playerid] += 1;
						}
						else
						{
      						format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y falla.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
							ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
       						format(string, sizeof(string), "* %s se da cuenta y le da un golpe de puño a %s.", GetPlayerNameEx(params[0]), GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendClientMessageEx(params[0], COLOR_GREEN, "-> Has evitado que te roben!");
							SendClientMessageEx(playerid, COLOR_YELLOW, "Te han pillado! Menudo ostión te has llevado! Corre!");
							Info[playerid][pRob] = 1;
						}
		            }
		        }
		        else if(strcmp(params[0],"24 Horas",true) == 0)
		        {
		            if(!IsAt247(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡No estás en el 24 Horas!");
		            else
		            {
		            	new robmoney = random(5000);
			            Earn(playerid, robmoney);
						ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 4000); // Rob
						Info[playerid][pRob] = 1;
						format(string, sizeof(string), "* %s amenaza al vendedor sacando dinero de la caja registradora.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendRadioMessage(1, 0x8D8DFFFF, "[Central]: Tenemos un robo en algún 24 Horas, sospechoso posiblemente armado."); // LAPD
		            }
		        }
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/robar (persona o 24 horas){FFFFFF} para robar cualquier tienda o a una persona.");
		}
        return 1;
    }
	CMD:ayudafichas(playerid, params[])
	{
        SendClientMessageEx(playerid, COLOR_YELLOW2,"{FFFF00}______________________________________________________________________");
		SendClientMessageEx(playerid, COLOR_YELLOW2,"{FFFFFF}*** Información sobre fichas {FFFF00}VIP {FFFFFF}***");
		SendClientMessageEx(playerid, COLOR_YELLOW2,"");
    	SendClientMessageEx(playerid, COLOR_WHITE,"{FFFFFF}- Se pueden cambiar por armas en el casillero {FFFF00}VI.");
    	SendClientMessageEx(playerid, COLOR_WHITE,"{FFFFFF}- Las podes ganar en eventos o regalos");
    	SendClientMessageEx(playerid, COLOR_WHITE,"{FFFFFF}- Cada arma cuesta de 1 a 5 fichas");
	    SendClientMessageEx(playerid, COLOR_WHITE,"{FFFFFF}- Puedes darlas con el comando: {FFFF00}/Darfichas");
	    SendClientMessageEx(playerid, COLOR_WHITE,"{FFFFFF}- Si deseas venderlas puedes hacerlo con el comando: {FFFF00}/Venderfichasvip");
	    SendClientMessageEx(playerid, COLOR_YELLOW2,"");
	    SendClientMessageEx(playerid, COLOR_YELLOW2,"{FFFF00}______________________________________________________________________");
	    return 1;
	}
    zcmd(hotdog, playerid, params[])
	{
        if(!IsAtHotDogCar(playerid))   return SendClientMessageEx(playerid, COLOR_WHITE, "No estas en un lugar donde comprar un Hot Dog.");
		if(GetPlayerMoney(playerid) < 30) return SendClientMessageEx(playerid, COLOR_FADE1, "Vendedor grita: ¡Vete a otro lugar a comer gratis!");

		 new string[200];
	     new Float:Health;
         GetPlayerHealth(playerid, Health);
	        if(Health < 101)
		    {
            SetHP(playerid, Health+5);
            }
	    format(string, sizeof(string), "* %s toma el Hot Dog que le ofrece el vendedor y seguido, este lo come.", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    GivePlayerCash(playerid, -30);
	    ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	    SendClientMessage(playerid, COLOR_FADE1, "Vendedor dice: Espero que lo disfrute, gracias por la compra.");
		return 1;
	}
	zcmd(dejarsss, playerid, params[])
	{
        if(!IsAtVagabundo(playerid))   return SendClientMessageEx(playerid, COLOR_WHITE, "Para darle algo a un vagabundo, necesitas estar cerca de uno!");
		{
  			new baga[] = "Dinero\nComida\nRopa\nGalletas\nInsulto\nConsuelo\n";
            SafeDialogEx(playerid,DEJAR_VAGABUNDO,DIALOG_STYLE_LIST,"{FFFFFF}¿Qué le vas a dejar a este vagabundo?",baga,"Dejar","Cancelar");
		}
		return 1;
	}
	zcmd(irfacc, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pFactionModerator] == 1)
		{
  			new admintel[] = "LAPD\nPCPD\nAININT\nLAMD\nFOX\nUSMC\nMecanicos\nGobierno\nAgencia Hitman\nSistema Judicial\nCedar Block Piru\nN/S Broadway XIV\nVarrio Longos 13\nLCN\nBoulevard Mafia Crips\nMafia Rusa\nMafia Yakuza\nMafia Santana\nCIA\nI.S.I.S\nBomberos LS\nMotoqueros\nPlay Music Radio";
            SafeDialogEx(playerid,TELEPORTS_FACCIONES,DIALOG_STYLE_LIST,"{FFFFFF}Facciones de {2EDFFF}AT-RP",admintel,"Ir","Cancelar");
		}
		return 1;
	}
	zcmd(irjob, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] >= 3)
		{
  			new admintel[] = "Bartender\nVendedor de Móviles\nChofer de Autobuses\nPizzero\nCamionero\nRepartidor\nFabricante de Armas\nTaxista\nGranjero\nTraficante de Drogas\nVendedor de Chalecos\nArtesano\nJardinero\nLeñador\nHeladero\nMaquinista de Trenes\nBasurero";
            SafeDialogEx(playerid,TELEPORTS_JOBS,DIALOG_STYLE_LIST,"{FFFFFF}Trabajos de {2EDFFF}AT-RP",admintel,"Ir","Cancelar");
		}
		return 1;
	}
	zcmd(irzona, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] >= 2)
		{
  			new admintel[] = "Escuela RolePlay\nSanciones\nDepósitos de Casas";
            SafeDialogEx(playerid,TELEPORTS_ZONAS,DIALOG_STYLE_LIST,"{FFFFFF}Zonas de {2EDFFF}AT-RP",admintel,"Ir","Cancelar");
		}
		return 1;
	}
	zcmd(darlider, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pFactionModerator] == 1)
		{
		    if(!sscanf(params, "di", params[0], params[1]))
		    {
                new ftext[30];
		        if(params[1] < 0 || params[1] > MAX_FACTION) 		return SendClientMessageEx(playerid, COLOR_WHITE, "ID facción incorrecto.");
		        if(!IsPlayerConnected(params[0]))                   return SendClientMessageEx(playerid, COLOR_WHITE, "Jugado desconectado.");
		        switch(params[1])
		        {
		            case 0: 	{Info[params[0]][pRank] = 0; ftext = "Ninguna"; }
		            case 1: 	{Info[params[0]][pRank] = 6; ftext = "Policía de Los Ángeles"; }
		            case 2: 	{Info[params[0]][pRank] = 6; ftext = "AININT"; }
		            case 3: 	{Info[params[0]][pRank] = 27; ftext = "USMC"; }
		            case 4: 	{Info[params[0]][pRank] = 16; ftext = "LAMD"; }
		            case 5:     {Info[params[0]][pRank] = 6; ftext = "FOX"; }
		            case 6:     {Info[params[0]][pRank] = 6; ftext = "Mecánicos"; }
		            case 7:     {Info[params[0]][pRank] = 6; ftext = "Gobierno"; }
                    case 8:     {Info[params[0]][pRank] = 6; ftext = "Ninguna"; }
                    case 9:     {Info[params[0]][pRank] = 6; ftext = "Sistema Judicial"; }
                    case 10:    {Info[params[0]][pRank] = 6; ftext = "Cedar Block Piru.";}
                    case 11:    {Info[params[0]][pRank] = 6; ftext = "Boulevard Mafia Crips";}
                    case 12:    {Info[params[0]][pRank] = 6; ftext = "N/S Broadway XIV.";}
                    case 13:    {Info[params[0]][pRank] = 6; ftext = "Varrio Longos 13.";}
                    case 14:    {Info[params[0]][pRank] = 6; ftext = "Mafia Rusa";}
                    case 15:    {Info[params[0]][pRank] = 6; ftext = "La Cosa Nostra";}
                    case 16:    {Info[params[0]][pRank] = 6; ftext = "Mafia Yakuza"; }
                    case 17:    {Info[params[0]][pRank] = 6; ftext = "Ninguna"; }
                    case 18:    {Info[params[0]][pRank] = 6; ftext = "Mafia Santana"; }
                    case 19:    {Info[params[0]][pRank] = 6; ftext = "I.S.I.S."; }
                    case 20:    {Info[params[0]][pRank] = 6; ftext = "Bomberos";}
                    case 21:    {Info[params[0]][pRank] = 6; ftext = "Hell's Angels";}
                    case 22:    {Info[params[0]][pRank] = 6; ftext = "Play Music Radio";}
		        }
		        new string[200];
		        pTazer[params[0]] = 0;
		        Info[params[0]][pLeader] = params[1];
		        Info[params[0]][pMember] = params[1];
		        format(string, sizeof(string), "{FFFFFF}El administrador {2EDFFF}%s{FFFFFF} te asignó líder de la facción: {2EDFFF}%s", GetPlayerNameEx(playerid), ftext);
		        SendClientMessageEx(params[0], 0x2EDFFFFF, string);
		        format(string, sizeof(string), "Facciones:{FFFFFF} %s asignó líder de la facción %s a %s.", GetPlayerNameEx(playerid), ftext, GetPlayerNameEx(params[0]));
				ABroadCast(COLOR_DARLIDER, string, 3);
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/darlider (usuario id) (facción id){FFFFFF} para dar líder.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes autorización de usar éste comando.");
        return 1;
    }
    zcmd(darmiembro, playerid, params[])
    {
        if(Info[playerid][pFactionModerator] == 1)
        {
            if(!sscanf(params, "did", params[0], params[1], params[2]))
            {
                new ftext[30];
                if(params[1] < 0 || params[1] > MAX_FACTION)        return SendClientMessageEx(playerid, COLOR_GREY, "ID facción incorrecto.");
                if(!IsPlayerConnected(params[0]))                   return SendClientMessageEx(playerid, COLOR_GREY, "Jugado desconectado.");
            //	if(params[2] < 1 || params[2] > 6)                  return SendClientMessageEx(playerid, COLOR_GREY, "Rangos del 1 al 6");
            //	if(params[7] < 1 || params[7] > 27)                 return SendClientMessageEx(playerid, COLOR_GREY, "Rangos del 1 al 27 con USMC");
                switch(params[1])
                {
                	case 0: 	{Info[params[0]][pRank] = params[2]; ftext = "Ninguna"; }
		            case 1: 	{Info[params[0]][pRank] = params[2]; ftext = "Policía de Los Ángeles"; }
		            case 2: 	{Info[params[0]][pRank] = params[2]; ftext = "AININT"; }
		            case 3: 	{Info[params[0]][pRank] = params[2]; ftext = "USMC"; }
		            case 4: 	{Info[params[0]][pRank] = params[2]; ftext = "LAMD"; }
		            case 5:     {Info[params[0]][pRank] = params[2]; ftext = "FOX"; }
		            case 6:     {Info[params[0]][pRank] = params[2]; ftext = "Mecánicos"; }
		            case 7:     {Info[params[0]][pRank] = params[2]; ftext = "Gobierno"; }
                    case 8:     {Info[params[0]][pRank] = params[2]; ftext = "Ninguna"; }
                    case 9:     {Info[params[0]][pRank] = params[2]; ftext = "Sistema Judicial"; }
                    case 10:    {Info[params[0]][pRank] = params[2]; ftext = "Cedar Block Piru.";}
                    case 11:    {Info[params[0]][pRank] = params[2]; ftext = "Boulevard Mafia Crips";}
                    case 12:    {Info[params[0]][pRank] = params[2]; ftext = "N/S Broadway XIV.";}
                    case 13:    {Info[params[0]][pRank] = params[2]; ftext = "Varrio Longos 13.";}
                    case 14:    {Info[params[0]][pRank] = params[2]; ftext = "Mafia Rusa";}
                    case 15:    {Info[params[0]][pRank] = params[2]; ftext = "La Cosa Nostra";}
                    case 16:    {Info[params[0]][pRank] = params[2]; ftext = "Mafia Yakuza"; }
                    case 17:    {Info[params[0]][pRank] = params[2]; ftext = "Ninguna"; }
                    case 18:    {Info[params[0]][pRank] = params[2]; ftext = "Mafia Santana"; }
                    case 19:    {Info[params[0]][pRank] = params[2]; ftext = "I.S.I.S."; }
                    case 20:    {Info[params[0]][pRank] = params[2]; ftext = "Bomberos";}
                    case 21:    {Info[params[0]][pRank] = params[2]; ftext = "Hell's Angels";}
                    case 22:    {Info[params[0]][pRank] = params[2]; ftext = "Play Music Radio";}
                }
                new string[500];
                pTazer[params[0]] = 0;
                Info[params[0]][pMember] = params[1];
                Info[params[0]][pLeader] = 0;
                new rangoID = params[2];
                format(string, sizeof(string), "Administrador {2EDFFF}%s {FFFFFF} te añadió a la faccion {2EDFFF}%s{FFFFFF} con rango {2EDFFF}%d{FFFFFF}.", GetPlayerNameEx(playerid), ftext, rangoID);
                SendClientMessageEx(params[0], 0xFFFFFFFF, string);
                format(string, sizeof(string), "Facciones:{FFFFFF} Administrador {2EDFFF}%s{FFFFFF} asignó al jugador %s a la faccion %s con rango %d.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]), ftext, rangoID);
                ABroadCast(COLOR_AT, string, 3);
            }
            else SendClientMessageEx(playerid, COLOR_GRAD2, "USA: /darmiembro [jugador] [facción] [rango] {970000}IMPORTANTE: QUITARLE EL RANGO DE LIDER CON /DARLIDER{FFFFFF}.");
        }
        else SendClientMessageEx(playerid, COLOR_GRAD2, "No autorizado.");
        return 1;
    }
    //zcmd - Bank
    zcmd(balance, playerid, params[])
	{
        if(IsAtATM(playerid))
	    {
            new string[64];
			format(string, sizeof(string), "Saldo:{B9C9CF} $%d",Info[playerid][pAccount]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		} else SendClientMessageEx(playerid, COLOR_GREY, "No estás en un cajero o banco.");
		return 1;
	}
    zcmd(licencias, playerid, params[])
	{
	    new giveplayerid, item[32], string[84];
        if(!sscanf(params, "ds", giveplayerid, item))
		{
            if(IsPlayerConnected(giveplayerid))
			{
   				if(ProxDetectorS(5.0, playerid, giveplayerid))
   				{
   				    if(strcmp(item,	"conduccion",	true) == 0)
   				    {
   				        if(Info[playerid][pCarLic] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,1);
   				            format(string, sizeof(string), "* %s muestra su licencia de conducción a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
   				    if(strcmp(item,	"navegacion",	true) == 0)
   				    {
   				        if(Info[playerid][pBoatLic] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,2);
                            format(string, sizeof(string), "* %s muestra su licencia de navegación a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
   				    if(strcmp(item,	"aviacion",	true) == 0)
   				    {
   				        if(Info[playerid][pFlyLic] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,3);
                            format(string, sizeof(string), "* %s muestra su licencia de aviación a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
				   		    ShowLicencia(playerid,giveplayerid,3);
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
   				    if(strcmp(item,	"armas",	true) == 0)
   				    {
   				        if(Info[playerid][pGunLic] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,4);
                            format(string, sizeof(string), "* %s muestra su licencia de armas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
   				    if(strcmp(item,	"taxista",	true) == 0)
   				    {
   				        if(Info[playerid][pTaxiLicense] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,5);
                            format(string, sizeof(string), "* %s muestra su licencia de taxista a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
					format(string, sizeof(string), "* %s muestra sus licencias a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
					ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    }else SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado lejos del jugador.");
			}else SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador desconectado.");
        }else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /licencias (jugador) (opcion: conduccion, navegacion, aviacion, armas, taxista).");
        return 1;
    }
	CMD:reportarbug(playerid, params[])
	{
	    if(Info[playerid][pBlockBug] == 0)
	    {
	   		SafeDialogEx(playerid,REBUG,DIALOG_STYLE_INPUT,"{2EDFFF}Reportar Bug","{FFFFFF}Escribe exactamente el bug que has encontrado, se quedará guardado en la base de datos\ncuando el equipo de programadores lo revise, tratarán de solucionar el bug lo más rapido posible.\n\nGracias por reportar.", "Reportar", "Cancelar");
	   	}
	   	else SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No puedes reportar bugs, estás bloqueado del comando. Razón: Abuso de Comando");
	   	return 1;
	   }
	CMD:sugerencia(playerid, params[])
	{
	    if(Info[playerid][pBlockBug] == 0)
	    {
	   		SafeDialogEx(playerid,SUG,DIALOG_STYLE_INPUT,"         {FFFFFF}Sugerencia para {2EDFFF}Absolute Titanium {FFFFFF}RolePlay","{FFFFFF}Escribe la sugerencia para que la administración la vea\ny sea implementada en la comunidad así disfrutar de esta misma.\n\nGracias por la sugerencia!", "Enviar", "Cancelar");
	   	}
	   	else SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No puedes enviar sugerencias, fuiste bloqueado por mal uso y/o insultos.");
	   	return 1;
	}
	CMD:solicitargaraje(playerid, params[])
	{
	    if(Info[playerid][pBlockBug] == 0)
	    {
	   		SafeDialogEx(playerid,SOLICITUD_GARAGE,DIALOG_STYLE_INPUT,"{BDA5D9}- Solicitar Garage","{FFFFFF}Para solicitar un garage para su casa debes colocar la ID\nde su(s) casa(s) o solicitar mediante /foro y esperar\n respuestas.\n\n{BDA5D9}Aviso Importante: {FFFFFF}Para solicitar debe estar conectado algún Encargado de Ventas!", "Enviar", "Cancelar");
	   	}
	   	else SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No puedes reportar bugs, estás bloqueado del comando. Razón: Abuso de Comando");
	   	return 1;
	   }
    zcmd(replyyyy, playerid, params[])
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /reply (explicación)");
		new string[128];
		new reportid = INVALID_REPORT_ID;
		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][ReportFrom] == playerid && Reports[i][CheckingReport] != 999)
			{
				reportid = i;
			}
		}
		if(reportid == INVALID_REPORT_ID)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un reporte ahora mismo.");
			return 1;
		}
		if (IsPlayerConnected(Reports[reportid][CheckingReport]))
		{
			format(string, sizeof(string), "(RID){FFFFFF} %s (ID: %d): %s", GetPlayerNameEx(playerid), playerid, params);
			SendClientMessageEx(Reports[reportid][CheckingReport], COLOR_YELLOW, string);

			format(string, sizeof(string), "{2EDFFF}Respuesta enviada{FFFFFF} a %s: %s", GetPlayerNameEx(Reports[reportid][CheckingReport]), params);
			SendClientMessageEx(playerid,  COLOR_YELLOW, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		return 1;
	}
	CMD:limpiarreportes(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	    if (Info[playerid][pAdminZC] >= 7)
		{
	        new string[128];
	        ClearReports();
	        SendClientMessageEx(playerid,COLOR_GRAD1, "Has limpiado todos los reportes activos.");
	        format(string, sizeof(string), "Administración: %s ha limpiado todos los reportes activos.", GetPlayerNameEx(playerid));
	        ABroadCast(COLOR_GENERAL, string, 2);
	    }
	    else
		{
	        SendClientMessageEx(playerid, COLOR_WHITE, "No estas autorizado a usar este comando.");
	    }
	    return 1;
	}
		zcmd(re, playerid, params[])
    {
        if(Info[playerid][pRMuted] != 0) return SafeDialogEx(playerid,TIPRE,DIALOG_STYLE_MSGBOX,"{F95322}Reporte Bloqueado.","{FFFFFF}\n- Estas bloqueado de los reportes, tienes que esperar.\n- Reporta lo que necesitas, no a quien necesitas.\n- Se especifico y claro, reporta exactamente lo que necesitas.\n- No hacer falsos reportes [Advertencia].\n- No llames administradores.\n- Reporta sólo asuntos, In Game [IG].","Cerrar", "");
        if(AdminOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}No hay {FF0000}administradores online{FF0000} en este momento, intenta más tarde!");
        if(JustReported[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Espera 60 segundos para otro reporte.");
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/re (usuario id) (razón){FFFFFF} para reportar a una persona.");

		SendReportToQue(playerid, params);
 		SendClientMessageEx(playerid, COLOR_GREY, "Enviaste un reporte, el equipo administrativo dará una respuesta en cuanto lo vea. (/Creporte para cancelar)");
        JustReported[playerid] = 60;
        if(Info[playerid][pAccount] >= 50000) Info[playerid][pAccount] -= 1000;
        return 1;
    }
	CMD:creporte(playerid, params[])
	{
	    for(new i = 0; i < MAX_REPORTS; i++)
		{
		    if(Reports[i][ReportFrom] == playerid)
		    {
		        Reports[i][ReportFrom] = 999;
				Reports[i][BeingUsed] = 0;
				Reports[i][TimeToExpire] = 0;
				return SendClientMessageEx(playerid, COLOR_GREY, "Cancelaste el reporte satisfactoriamente." );
			}
		}
		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Actualmente no tienes reportes pendientes.");
		return 1;
	}
   zcmd(ar, playerid, params[])
	{
	  if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] >= 1)
		{
			new string[128], reportid;
			if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ar (Reporte ID)");
			if(reportid < 0 || reportid > 50) { SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[Administración]:{FFFFFF} ID del reporte no debe ser menor de 0 ni mayor de 499!"); return 1; }
			if(Reports[reportid][BeingUsed] == 0)
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese RID ya fue atendido.");
				return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El que reportó se ha desconectado !");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				return 1;
			}
				format(string, sizeof(string), "{00F70C}¡Reporte Aceptado!:{FFFFFF} %s aceptó el reporte del usuario %s. [ID: %i - RID: %i]", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
				ABroadCast(COLOR_VERDE, string, 2);
				format(string, sizeof(string), "%s tomó carta del asunto, estará vigilando al reportado, recuerde tener imágenes por si se solicitan.", GetPlayerNameEx(playerid));
				SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_GREY, string);
				Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
				Reports[reportid][CheckingReport] = playerid;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
				strmid(Reports[reportid][Report], "None", 0, 4, 4);
		}
		return 1;
    }
    zcmd(rr, playerid, params[])
	{
	  if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] >= 1)
		{
			new string[128], reportid;
			if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USE: /rr [Report ID]");

			if(reportid < 0 || reportid > 499) { SendClientMessageEx(playerid, COLOR_WHITE, "ID del reporte no debe ser menor de 0 ni mayor de 499!"); return 1; }
			if(Reports[reportid][BeingUsed] == 0)
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese RID ya fue atendido!");
				return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El que reportó se ha desconectado !");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				return 1;
			}
				format(string, sizeof(string), "{FFFF00}[Administración]:{FF0000} %s rechazó el reporte de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
				ABroadCast(COLOR_ORANGE, string, 2);
				format(string, sizeof(string), "%s marcó tu reporte como inválido. Usa y lee muy bien {2EDFFF}/reglasparareportar{FFFFFF} antes de reportar.", GetPlayerNameEx(playerid));
				SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
				strmid(Reports[reportid][Report], "None", 0, 4, 4);
		}
		return 1;
	}
	CMD:nao(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] >= 3)
		{
			new string[128], reportid;
			if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"Utiliza: /nao [Reporte ID (RID)]");

			if(reportid < 0 || reportid > 50) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} ID del reporte no debe ser menor de 0 ni mayor de 499!"); return 1; }
			if(Reports[reportid][BeingUsed] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Ese RID ya fue atendido.");
				return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} El que reportó se ha desconectado.");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				return 1;
			}
			format(string, sizeof(string), "{FFFF00}[Administración]:{FF0000} %s ha revisado el reporte de %s (RID: %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
			ABroadCast(COLOR_GENERAL, string, 2);
			format(string, sizeof(string), "%s ha revisado tu reporte, y no podrá ayudarte debido a la ausencia de administradores de mayor rango.", GetPlayerNameEx(playerid));
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Puedes acercarte a nuestro foro para un mejor soporte, disculpa los inconvenientes.");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			strmid(Reports[reportid][Report], "None", 0, 4, 4);
		}
		return 1;
	}
    zcmd(aforo, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] >= 3)
		{
			new string[128], reportid;
			if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"Utiliza: /aforo [Reporte ID (RID)]");

			if(reportid < 0 || reportid > 50) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} ID del reporte no debe ser menor de 0 ni mayor de 499."); return 1; }
			if(Reports[reportid][BeingUsed] == 0)
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese RID ya fue atendido.");
				return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El que reportó se ha desconectado, tomar SS para notificar a la persona.");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				return 1;
			}
				format(string, sizeof(string), "{FFFF00}Administración:{FF0000} %s revisó y señalo el reporte de %s como correspondiente al foro.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
				ABroadCast(COLOR_GENERAL, string, 2);
				format(string, sizeof(string), "%s te ha enviado a www.titaniumgamers.es para realizar el reporte correspondiente con evidencias.", GetPlayerNameEx(playerid));
				SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_GREY, string);
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
				strmid(Reports[reportid][Report], "None", 0, 4, 4);
		}
		return 1;
	}
    CMD:mps(playerid, params[])
    {
        new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
        if( !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
        if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "-!- Comando reservado. . .");
        if(See_MP[playerid] == 1)
		{
			See_MP[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRIS, "-!- Desactivaste los whisper privados de la cúpula administrativa.");
		}
        else
		{
            See_MP[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "-!- Activaste los whisper privados de la cúpula administrativa.");
		}
        return 1;
    }
	CMD:reportes(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] >= 2)
		{
			new reportdialog[1000], itemid = 0;
			for(new i = 0; i < MAX_REPORTS; i++)
			{
				if(Reports[i][BeingUsed] == 1 && itemid < 40)
				{
					ListItemReportId[playerid][itemid] = i;
					itemid++;
					format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | RID:%i | Reporte: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire]);
					format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
				}
			}
			CancelReport[playerid] = itemid;
			format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
			format(reportdialog, sizeof(reportdialog), "%sSalir", reportdialog);
			SafeDialogEx(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "{00F70C}Reportes", reportdialog, "Aceptar", "Rechazar");
		}
		return 1;
	}
	zcmd(darvida, playerid, params[])
    {
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(!sscanf(params, "di", params[0], params[1]))
		{
		    if(IsPlayerConnected(params[0]))
		    {
		        if(Info[playerid][pAdminZC] >= 2)
		        {
		            new string[128];
		            SetHP(params[0],params[1]);
				 	format(string, sizeof(string), "{FF7477}¡Vida Restaurada!: {FFFFFF}%s estableció la salud de %s a: {FF7477}%dHP", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[1]);
				 	ABroadCast(COLOR_ORANGE, string, 2);
				 	return 1;
		        }
				else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Usted no esta en la cúpula administrativa.");
		    }
			else SendClientMessageEx(playerid,  COLOR_WHITE, "ID Inválida");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darvida (PlayerID) (HP)");
        return 1;
    }
    zcmd(darchaleco, playerid, params[])
    {
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(!sscanf(params, "di", params[0], params[1]))
		{
		    if(IsPlayerConnected(params[0]))
		    {
		        if(Info[playerid][pAdminZC] >= 3)
		        {
		            new string[128];
		            SetPlayerArmour(params[0],params[1]);
					format(string, sizeof(string), "{2EDFFF}¡Chaleco restaurado!:{FFFFFF} %s estableció el chaleco de %s a: {2EDFFF}%d", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[1]);
				 	ABroadCast(COLOR_GRIS, string, 2);
				 	return 1;
		        }
				else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Usted no esta en la cúpula administrativa.");
		    }
			else SendClientMessageEx(playerid,  COLOR_WHITE, "ID Inválida");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darchaleco (PlayerID) (Cántidad)");
        return 1;
    }
    zcmd(loteria, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        else
        {
	        new rand = random(100);
	        if(rand < 101) { rand += 3; }
	        Lotto(rand);
		}
        return 1;
    }
    zcmd(darstat, playerid, params[])
    {
        new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
      		if( !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        new string[128];
        if(CommandSpamTimes[playerid] == 8)
		{
          	format(string, sizeof(string), "[<!>] %s fue baneado automáticamente, razón: Posible AA", GetPlayerNameEx(playerid));
	        ABroadCast(COLOR_GENERAL,string,2);
	        Log("logs/- Intentos de Abusos Administrativo (Stats).log", string);
	        Info[playerid][pBannedZC] = 2;
			Kick(playerid);
			return 1;
		}
        if(IsPlayerConnected(playerid)){
	        if(Info[playerid][pAdminZC] >= 7){
	            if(!sscanf(params, "dii", params[0],params[1],params[2])){
	                if(IsPlayerConnected(params[0])){
			    	    if(IsPlayerConnected(params[0])){
			    	        switch (params[1]){
								case 1:{
									Info[params[0]][pLevel] = params[2];
									format(string, sizeof(string), "Nivel: %d", params[2]);
								}
								case 2:
								{
									Info[params[0]][pAccount] = params[2];
									format(string, sizeof(string), "Cuenta bancaria: $%d", params[2]);
								}
								case 3:
								{
									Info[params[0]][pPnumber] = params[2];
									format(string, sizeof(string), "Teléfono: #%d", params[2]);
								}
								case 4:
								{
									Info[params[0]][pExp] = params[2];
									format(string, sizeof(string), "Puntos Respeto: %d", params[2]);
								}
								case 5:
								{
									Info[params[0]][pPhousekey] = params[2];
									format(string, sizeof(string), "Casa: %d", params[2]);
								}
								case 6:
								{
								    Info[params[0]][pPot] = params[2];
								    format(string, sizeof(string), "Marihuana: %d", params[2]);
								}
								case 7:
								{
								    PlayerDrunk[playerid] = params[2];
								    format(string, sizeof(string), "Drunk: %d", params[2]);
									SetPlayerDrunkLevel(playerid, params[2]);
								}
								case 8:
								{
								    Info[params[0]][pRenting] = params[2];
								    format(string, sizeof(string), "Renta: %d", params[2]);
								}
								case 9:
								{
								    Info[params[0]][pFStyle] = params[2];
								    format(string, sizeof(string), "Tipo Lucha: %d", params[2]);
								}
								case 10:
								{
								    Info[params[0]][pMats] = params[2];
								    format(string, sizeof(string), "Materiales: %d", params[2]);
								}
								case 11:
								{
								    Info[params[0]][pCrack] = params[2];
								    format(string, sizeof(string), "Drogas: %d", params[2]);
								}
								case 12:
								{
								    Info[params[0]][pAge] = params[2];
								    format(string, sizeof(string), "Edad: %d", params[2]);
								}
								case 13:
								{
								    Info[params[0]][pJob] = params[2];
								    format(string, sizeof(string), "Trabajo: %d", params[2]);
								}
								case 14:
								{
                                    Info[params[0]][pCarKey2] = params[2];
                                    format(string, sizeof(string), "Auto2: %d", params[2]);
                                }
								case 15:
								{
                                    Info[params[0]][pNMute] = params[2];
                                    format(string, sizeof(string), "NMute: %d", params[2]);
                                }
								case 16:
								{
                                    Info[params[0]][pWarn] = params[2];
                                    format(string, sizeof(string), "Warns: %d", params[2]);
                                }
								case 17:
								{
									Info[params[0]][pConnectTime] = params[2];
									format(string, sizeof(string), "Connect Time: %d", params[2]);
								}
								case 18:{
									Info[params[0]][pJailAdmin] = params[2];
									format(string, sizeof(string), "Jails: %d", params[2]);
								}
								case 19:{
									Info[params[0]][pPhousekey2] = params[2];
									format(string, sizeof(string), "House 2: %d", params[2]);
								}
								case 20:{
									Info[params[0]][pArmsSkill] = params[2];
									format(string, sizeof(string), "habilidad Guns: %d", params[2]);
								}
								case 21:
								{
									SetPVarInt(params[0], "Packages",  params[2]);
									format(string, sizeof(string), "Paquetes: %d", params[2]);
								}
						 		case 22:
						 		{
								 	Info[params[0]][pCrates] = params[2];
								 	format(string, sizeof(string), "Pack Drug: %d", params[2]);
								}
						 		case 23:
						 		{
								 	Info[params[0]][pADMuteTotal] = params[2];
								 	format(string, sizeof(string), "Total Ad Mutes: %d.", params[2]);
								}
						 		case 24:
						 		{
								 	Info[params[0]][pRHours] = params[2];
								 	format(string, sizeof(string), "Hours R.: %d.", params[2]);
								}
								case 25:
								{
									Info[params[0]][pVIPDateD] = params[2];
									format(string, sizeof(string), "Dia VIP: %d.", params[2]);
								}
								case 26:
								{
									Info[params[0]][pVIPDateM] = params[2];
									format(string, sizeof(string), "Mes VIP: %d.", params[2]);
								}
								default: SendClientMessageEx(playerid, COLOR_WHITE, "Código inválido!");
							}
							CommandSpamTimes[playerid]++;
							CommandSpamUnmute[playerid] = 60;
							SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
							SendClientMessageEx(playerid, COLOR_GRAD2, string);
			    	    }
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválida.");
	            }
	            else{
	                SendClientMessageEx(playerid, COLOR_TURQUESA, "Utiliza: /Darstat (PlayerID) (Numero) (valor)");
	                SendClientMessageEx(playerid, COLOR_GRAD1, "1 Nivel 2 $ Bank 3 Tlf. 4 Respeto 5 ID Casa 6 Marihuana 7 Drunk 8 Renta 9 E. Pelea 10 Mats 11 Drogas 12 Edad 13 Trabajo");
	                SendClientMessageEx(playerid, COLOR_GRAD1, "14 ID Veh 2. 15 NMute 16 Warns 17 ConnectTime 18 Jails 19 ID Casa[2] 20 Habilidad Armero 21 Pack Mat 22 Pack Drug 23 Total AD Mutes");
	            }
	        } else SendClientMessageEx(playerid, COLOR_GRAD2, "No estás autorizado para usar este comando.");
	    }
        return 1;
    }
    zcmd(verstat, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 6) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "d", params[0]))
		{
		    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    ShowStats(playerid,params[0]);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza /verstat (ID)");
        return 1;
    }
    zcmd(cambiarint, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{{2EDFFF}¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "dd", params[0],params[1]))
		{
		    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    new string[64];
		    SetPlayerInterior(params[0], params[1]);
		    format(string, sizeof(string), "Interior de %s es ahora %d", GetPlayerNameEx(params[0]), params[1]);  SendClientMessageEx(playerid, COLOR_GRAD1, string);
			return SendClientMessageEx(params[0], COLOR_GRAD1, string);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarint (PlayerID) (Interior)");
        return 1;
    }
    zcmd(cambiarvw, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "dd", params[0],params[1]))
		{
		    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    new string[64];
		    SetPlayerVirtualWorld(params[0], params[1]);
		    format(string, sizeof(string), "VirtualWorld de %s ahora es %d", GetPlayerNameEx(params[0]), params[1]);  SendClientMessageEx(playerid, COLOR_GRAD1, string);
			return SendClientMessageEx(params[0], COLOR_GRAD1, string);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarvw (PlayerID) (VirtualWorld)");
        return 1;
    }
    zcmd(autovw, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		new string[64];
    	if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "dd", params[0],params[1]))
		{
			SetVehicleVirtualWorld(params[0], params[1]);
		    format(string, sizeof(string), "VirtualWorld del Auto ID %dt, ahora es %d", params[0], params[1]);
			return SendClientMessageEx(playerid, COLOR_GRAD1, string);
		} else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /autovw (Auto ID) (VirtualWorld)");
		return 1;
	}
    zcmd(silenciar, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "d", params[0]))
		{
		    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    new string[128];
		    if(Muted[params[0]] == 0)
			{
   				Muted[params[0]] = 1;
			    format(string, sizeof(string), "Usuario Silenciado:{FFFFFF} El Administrador %s ha silenciado a %s de todos los canales.",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
				SendClientMessageEx(params[0],COLOR_ROJO,string);
				return ABroadCast(COLOR_GENERAL,string,2);
			}
			else
			{
				Muted[params[0]] = 0;
				format(string, sizeof(string), "{AA3333}[Administración]:{FFFF00} El Administrador %s ha desilenciado al jugador %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
				SendClientMessageEx(params[0],COLOR_RED2,string);
				return ABroadCast(COLOR_GENERAL,string,2);
			}
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /silenciar (PlayerID)");
        return 1;
    }
    zcmd(warn, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		new string[128], reason[64];
        if(Info[playerid][pBanAppealer] < 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "ds[64]", params[0], reason))
		{
   			if(Info[params[0]][pAdminZC] >= 4)
			{
				return SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No puedes hacer esto a administradores.");
			}
			if(Info[params[0]][pWarn] == 2)
			{
                new ip[32];
				GetPlayerIp(params[0],ip,sizeof(ip));
			    Info[params[0]][pBannedZC] = 2;
			    Info[params[0]][pWarn]= 0;
			    format(string, sizeof(string), "[Administración]: %s fue baneado automaticamente, razón: Execesivas advertencias.", GetPlayerNameEx(params[0]));
				BroadCast(COLOR_LIGHTRED,string);
				AddBan(ip);
				Kick(params[0]);
			}
			Info[params[0]][pWarn]++;
			format(string, sizeof(string), "[Advertencias]: %s dio una advertencia a %s, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]), reason);
			ABroadCast(COLOR_GENERAL,string,2);
			format(string, sizeof(string), "[Advertencias]: %s te dio una advertencia [%d/3], razón: %s (TIP: A la 3ra serás baneado automaticamente)",GetPlayerNameEx(playerid), Info[params[0]][pWarn],reason);
			SendClientMessageEx(params[0], COLOR_LIGHTRED, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /warn (PlayerID)");
        return 1;
    }
   	zcmd(administradores, playerid, params[])
	{
	    new string[84];
		if(Info[playerid][pAdminZC] >=10)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "|----------| Administradores Conectados |----------|");
  			foreach(Player, i)
  			{
  				if(Info[i][pAdminZC] >= 1 && Info[i][pAdminZC] <= Info[playerid][pAdminZC])
  				{
                    if(Info[i][pAdminZC] == 1)
					{

                        format(string, sizeof(string), "{FF0000}Staff de Licencia: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 2)
					{
                        format(string, sizeof(string), "{660066}Moderador a Prueba: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 3)
					{
                        format(string, sizeof(string), "{660066}Moderador Global: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 4)
					{
                        format(string, sizeof(string), "{33FFFF}Administrador Principiante: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 5)
					{
                        format(string, sizeof(string), "{33FFFF}Administrador Superior: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 6)
					{
                        format(string, sizeof(string), "{33FFFF}Administrador General: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 7)
					{
                        format(string, sizeof(string), "{33FFFF}Administrador Líder: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 8)
					{
                        format(string, sizeof(string), "{33FFFF}Administrador Técnico: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 9)
					{
                        format(string, sizeof(string), "{33FFFF}Sub-Dueño: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 10)
					{
                        format(string, sizeof(string), "{FF0000}Dueño: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 11)
					{
                        format(string, sizeof(string), "{CC0000}Programador: {FFFFFF}%s", GetPlayerNameEx(i));
                    }

                    SendClientMessageEx(playerid, COLOR_WHITE, string);
  				}
  			}
		}
		return 1;
	}
	zcmd(tecnicos, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] > 9){
		    SendClientMessageEx(playerid, COLOR_GRAD1, "Encargados de Ventas Conectados");
  			foreach(Player, i){
  			    new string[84];
			    if(Info[i][pShopTech] >= 1){
  			    	if(Info[i][pShopTech] == 1){
					  format(string, sizeof(string), "Encargado: %s", GetPlayerNameEx(i));
					}
					else{
	    			  format(string, sizeof(string), "*Undefined: %s", GetPlayerNameEx(i));
	    			}
  			    	SendClientMessageEx(playerid, COLOR_GRAD2, string);
  			    }
  			}
  		}
  		return 1;
	}
	zcmd(encargadostaffon, playerid, params[])
	{
		new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
  		if(!strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
	{
		    SendClientMessageEx(playerid, COLOR_INFORMEON, "-------> Encargado de Staff conectado");
  			foreach(Player, i){
  			    new string[84];
			    if(Info[i][pModStaff] >= 1){
  			    	if(Info[i][pModStaff] == 1){
					  format(string, sizeof(string), "E.S: %s", GetPlayerNameEx(i));
					}
					else{
	    			  format(string, sizeof(string), "*Undefined: %s", GetPlayerNameEx(i));
	    			}
  			    	SendClientMessageEx(playerid, COLOR_INFORMEON2, string);
  			    }
  			}
  		}
  		return 1;
	}
 	zcmd(encargadofaccon, playerid, params[])
	{
		new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
  		if(!strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
	{
		    SendClientMessageEx(playerid, COLOR_INFORMEON, "-------> Encargado de Staff conectado");
  			foreach(Player, i){
  			    new string[84];
			    if(Info[i][pFactionModerator] >= 1){
  			    	if(Info[i][pFactionModerator] == 1){
					  format(string, sizeof(string), "Enc. Facciones: %s", GetPlayerNameEx(i));
					}
					else{
	    			  format(string, sizeof(string), "*Undefined: %s", GetPlayerNameEx(i));
	    			}
  			    	SendClientMessageEx(playerid, COLOR_INFORMEON2, string);
  			    }
  			}
  		}
  		return 1;
	}
		zcmd(encargadofamon, playerid, params[])
	{
		new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
  		if(!strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
	{
		    SendClientMessageEx(playerid, COLOR_INFORMEON, "-------> Encargado de Familias conectado");
  			foreach(Player, i){
  			    new string[84];
			    if(Info[i][pGangModerator] >= 1){
  			    	if(Info[i][pGangModerator] == 1){
					  format(string, sizeof(string), "Enc. Familias: %s", GetPlayerNameEx(i));
					}
					else{
	    			  format(string, sizeof(string), "*Undefined: %s", GetPlayerNameEx(i));
	    			}
  			    	SendClientMessageEx(playerid, COLOR_INFORMEON2, string);
  			    }
  			}
  		}
  		return 1;
	}
		zcmd(encargadobanon, playerid, params[])
	{
		new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
  		if(!strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
	{
		    SendClientMessageEx(playerid, COLOR_INFORMEON, "-------> Encargado de Baneos conectado");
  			foreach(Player, i){
  			    new string[84];
			    if(Info[i][pBanAppealer] >= 1){
  			    	if(Info[i][pBanAppealer] == 1){
					  format(string, sizeof(string), "Enc. Baneos: %s", GetPlayerNameEx(i));
					}
					else{
	    			  format(string, sizeof(string), "*Undefined: %s", GetPlayerNameEx(i));
	    			}
  			    	SendClientMessageEx(playerid, COLOR_INFORMEON2, string);
  			    }
  			}
  		}
  		return 1;
	}
CMD:taxiduty(playerid, params[])
{
    if(IsAPizzabike(playerid) || Info[playerid][pJob] == 8  || Info[playerid][pJob2] == 8)
	{
        if(OnDuty[playerid] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "* Fuera de servicio.");
            OnDuty[playerid] = 0;

        }
        else
		{
			new string[128];

			format(string, sizeof(string), "Taxis disponibles, puede solicitar uno a su ubicación. (/Servicios)",GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
			BroadCast(COLOR_YELLOW, string);
			SendClientMessageEx(playerid, COLOR_GREY, "* Ahora estás en servicio, recibirás llamadas de la gente que te necesite.");
            OnDuty[playerid] = 1;

        }
    }
    else
	{

        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando porque no eres Taxista.");
    }
    return 1;
}
zcmd(cargarc, playerid, params[])
    {
        new vehicleid = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 5 ||  Info[playerid][pJob2] == 5)
		{
		    if(TrabajoCam(vehicleid))
		    {
                if(CEntregas_01[playerid] == 1 || CEntregas_02[playerid] == 1) return SendClientMessage(playerid, COLOR_ROJO,"• {FFFFFF}Ya tienes una carga pendiente.");
                if(CEntregas_03[playerid] == 1 || CEntregas_04[playerid] == 1) return SendClientMessage(playerid, COLOR_ROJO,"• {FFFFFF}Ya tienes una carga pendiente.");
		        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Tienes que ser el conductor.");
		        if(!IsPlayerInRangeOfPoint(playerid,8.0,2364.40063, -106.75380, 27.54597)) return SendClientMessage(playerid,COLOR_ROJO,"! {FFFFFF}Debes estar en el punto de carga.");
                {
                    TogglePlayerControllable(playerid, 0);
                    SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
                    SendClientMessageEx(playerid, COLOR_YELLOW2, "!{FFFFFF} Espere un momento mientras se carga el material en el camión.");
			     	}
					    new Entregas = random(4)+1;
					    if(Entregas == 1) // E-1 (Ladrillos)
					    {
	        				MatCam[vehicleid] = 1;
							ObjMat_01[vehicleid] = CreateObject(1685, 0.00000, -4.69650, 0.47500,   0.00000, 0.00000, 90.00000, 500000.0); // Carga 1
                    		AttachObjectToVehicle(ObjMat_01[vehicleid], vehicleid, 0.00000, -4.69650, 0.47500,   0.00000, 0.00000, 90.00000);
                    		ObjMat_02[vehicleid] = CreateObject(1685, 0.00000, -2.69780, 0.47500,   0.00000, 0.00000, 90.00000, 500000.0); // Carga 2
                    		AttachObjectToVehicle(ObjMat_02[vehicleid], vehicleid, 0.00000, -2.69780, 0.47500,   0.00000, 0.00000, 90.00000);
                    		ObjMat_03[vehicleid] = CreateObject(1685, 0.00000, -0.69530, 0.47500,   0.00000, 0.00000, 90.00000, 500000.0); // Carga 3
                    		AttachObjectToVehicle(ObjMat_03[vehicleid], vehicleid, 0.00000, -0.69530, 0.47500,   0.00000, 0.00000, 90.00000);
                    		ObjMat_04[vehicleid] = CreateObject(1685, 0.00000, 1.33780, 0.47500,   0.00000, 0.00000, 90.00000, 500000.0); // Carga 4
                    		AttachObjectToVehicle(ObjMat_04[vehicleid], vehicleid, 0.00000, 1.33780, 0.47500,   0.00000, 0.00000, 90.00000);
                    		CEntregas_01[playerid] = 1;
  		                	SendClientMessageEx(playerid, COLOR_BLANCO, "- Debes entregar estos {B9C9CF}4 packs de ladrillos{FFFFFF} a cada pedido solicitado.");
		        	        SetPlayerCheckpoint(playerid, 2286.1921, -2217.9263, 14.0657, 5.0);
						}
						else if(Entregas == 2) // E-2 (3 Cajas)
						{
      						MatCam[vehicleid] = 1;
      						ObjMat_01[vehicleid] = CreateObject(3798, 0.00000, -4.59750, -0.29340,   0.00000, 0.00000, 0.00000, 500000.0); // Carga 1
                    		AttachObjectToVehicle(ObjMat_01[vehicleid], vehicleid, 0.00000, -4.59750, -0.29340,   0.00000, 0.00000, 0.00000);
                    		ObjMat_02[vehicleid] = CreateObject(3798, 0.00000, -1.66290, -0.29340,   0.00000, 0.00000, 0.00000, 500000.0); // Carga 2
                    		AttachObjectToVehicle(ObjMat_02[vehicleid], vehicleid, 0.00000, -1.66290, -0.29340,   0.00000, 0.00000, 0.00000);
                    		ObjMat_03[vehicleid] = CreateObject(3798, 0.00000, 1.18000, -0.29340,   0.00000, 0.00000, 0.00000, 500000.0); // Carga 3
                    		AttachObjectToVehicle(ObjMat_03[vehicleid], vehicleid, 0.00000, 1.18000, -0.29340,   0.00000, 0.00000, 0.00000);
                    		CEntregas_02[playerid] = 1;
  		                	SendClientMessageEx(playerid, COLOR_BLANCO, "- Debes entregar estas {B9C9CF}3 cajas{FFFFFF} a cada pedido solicitado.");
		        	        SetPlayerCheckpoint(playerid, 857.4225, -1217.2032, 17.391919, 5.0);
						}
						else if(Entregas == 3) // E-3 (2 Cajas)
						{
      						MatCam[vehicleid] = 1;
      						ObjMat_01[vehicleid] = CreateObject(944, 0.00000, -3.46620, 0.60540,   0.00000, 0.00000, 90.00000, 500000.0); // Carga 2
                    		AttachObjectToVehicle(ObjMat_01[vehicleid], vehicleid, 0.00000, -3.46620, 0.60540,   0.00000, 0.00000, 90.00000);
      						ObjMat_02[vehicleid] = CreateObject(944, 0.00000, 0.05310, 0.60540,   0.00000, 0.00000, 90.00000, 500000.0); // Carga 1
                    		AttachObjectToVehicle(ObjMat_02[vehicleid], vehicleid, 0.00000, 0.05310, 0.60540,   0.00000, 0.00000, 90.00000);
                    		CEntregas_03[playerid] = 1;
  		                	SendClientMessageEx(playerid, COLOR_BLANCO, "- Debes entregar estas {B9C9CF}4 cajas{FFFFFF} a cada pedido solicitado.");
		        	        SetPlayerCheckpoint(playerid, 2286.1921, -2217.9263, 14.0657, 5.0);
						}
						else if(Entregas == 4) // E-4 (Madera)
						{
      						MatCam[vehicleid] = 1;
      						ObjMat_01[vehicleid] = CreateObject(18609, 0.00000, -5.01390, 0.84441,   0.00000, 0.00000, 2.76000, 500000.0); // Carga 1
                    		AttachObjectToVehicle(ObjMat_01[vehicleid], vehicleid, 0.00000, -5.01390, 0.84441,   0.00000, 0.00000, 2.76000);
                    		CEntregas_04[playerid] = 1;
  		                	SendClientMessageEx(playerid, COLOR_BLANCO, "- Debes entregar estas {B9C9CF}maderas{FFFFFF} al pedido solicitado.");
		        	        SetPlayerCheckpoint(playerid, 1154.1096, -1849.7893, 14.2547, 5.0);
						}
	       	}
	       	else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en un camión de la empresa.");
	    }
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización, debes trabajar para camioneros.");
        return 1;
}
zcmd(recorrido, playerid, params[])
    {
        new newcar = GetPlayerVehicleID(playerid);
        if(Bus_Route1[playerid] == 1 || Bus_Route1[playerid] == 2 || Bus_Route1[playerid] == 3 || Bus_Route1[playerid] == 4 || Bus_Route1[playerid] == 5 || Bus_Route1[playerid] == 6 || Bus_Route1[playerid] == 7 || Bus_Route1[playerid] == 8 || Bus_Route1[playerid] == 9 || Bus_Route1[playerid] == 10) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}Ya iniciaste un recorrido, por favor pon /crecorrido para cancelar este mismo");
		if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
		{
		    if(IsAnBus(newcar))
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que ser el conductor.");
                //if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Tienes que estar al volante del autobús.");
                if(TransportDuty[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Para inciar el recorrido, debes poner un precio:{2EDFFF} /precioviaje ($1 a $10)");
                {
                	//TransportDuty[playerid] = 1;
	      	    	Bus_Route1[playerid] = 1;
  		        	SendClientMessageEx(playerid, COLOR_GREY, "Dirígete a la primera parada. . .");
		        	SetPlayerCheckpoint(playerid, 2024.67395, -1939.89514, 13.31972, 5.0);
		        	GameTextForPlayer(playerid, "~w~Primera parada: ~p~Willowfield", 5000, 1);
		        	TogglePlayerControllable(playerid, 1);
		        	AntiAbuso[playerid] = 1;
				}
	       	}
	       	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ¡No estás en un autobús de la empresa!");
	    }
		else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF}¡No autorizado!");
        return 1;
}
zcmd(crecorrido, playerid, params[])
    {
        new carid = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
		{
		    if(Bus_Route1[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "- Actualmente no te encuentras en un recorrido o puede ser que estés en el 2: /Crecorrido2");
		    {
                {
	      	    	Bus_Route1[playerid] = 0;
	      	    	DisablePlayerCheckpoint(playerid);
	      	    	RemovePlayerFromVehicle(playerid);
	      	    	SetVehicleToRespawn(carid);
				}
	       	}
	       	GameTextForPlayer(playerid, "~w~Recorrido 1 Cancelado", 5000, 3);
	    }
	    else SendClientMessageEx(playerid, COLOR_BLANCO, "- Usted no trabaja en Autobuses!");
        return 1;
}
zcmd(recorrido2503, playerid, params[])
    {
        new newcar = GetPlayerVehicleID(playerid);
        if(Bus_Route2[playerid] == 1) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}Ya iniciaste un recorrido, por favor pon /crecorrido2 para cancelar este mismo");
		if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
		{
		    if(IsAnBus(newcar))
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que ser el conductor.");
                //if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Tienes que estar al volante del autobús.");
                if(TransportDuty[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Para inciar el recorrido, debes poner un precio:{2EDFFF} /precioviaje ($1 a $10)");
                {
                	//TransportDuty[playerid] = 1;
	      	    	Bus_Route2[playerid] = 1;
  		        	SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}¡Dirígete al Checkpoint para comenzar la ruta!");
		        	SetPlayerCheckpoint(playerid, 1820.96985, -2148.90112, 13.36040, 5.0);
		        	GameTextForPlayer(playerid, "~w~Primera parada: ~p~El Corona", 5000, 1);
		        	TogglePlayerControllable(playerid, 1);
		        	AntiAbuso[playerid] = 1;
				}
	       	}
	       	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ¡No estás en un autobús de la empresa!");
	    }
		else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF}¡No autorizado!");
        return 1;
}
zcmd(crecorrido2503, playerid, params[])
    {
        new carid = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
		{
		    if(Bus_Route2[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "- Actualmente no te encuentras en un recorrido o puede ser que estés en el 1: /Crecorrido1");
		    {
                {
	      	    	Bus_Route2[playerid] = 0;
	      	    	DisablePlayerCheckpoint(playerid);
	      	    	RemovePlayerFromVehicle(playerid);
	      	    	SetVehicleToRespawn(carid);
				}
	       	}
	       	GameTextForPlayer(playerid, "~w~Recorrido 2 Cancelado", 5000, 3);
	    }
	    else SendClientMessageEx(playerid, COLOR_BLANCO, "- Usted no trabaja en Autobuses!");
        return 1;
}
CMD:trenduty(playerid, params[])
{
    if(Info[playerid][pJob] == 15  || Info[playerid][pJob2] == 15)
	{
        if(TreneroDuty[playerid] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste de estar en servicio en conductor de trenes!");
            TreneroDuty[playerid] = 0;
            SetPlayerSkin(playerid, Info[playerid][pChar]);
        }
        else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FFFF00}¡Uniforme Preparado!: {FFFFFF}Estas listo para comenzar el recorrido, suerte en el viaje.");
            TreneroDuty[playerid] = 1;
           	if(Info[playerid][pSex] == 1) {SetPlayerSkin(playerid, 255);}
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque no eres conductor de trenes.");
    }
    return 1;
}
zcmd(iniciarviaje, playerid, params[])
    {
        new newcar = GetPlayerVehicleID(playerid);
        new string[128];
		if(Info[playerid][pJob] == 15 ||  Info[playerid][pJob2] == 15)
		{
		    if(GetVehicleModel(newcar)== 538) // Es el tren.
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Tienes que estar como conductor para utilizar este comando.");
                if(Tren_Route[playerid] > 0) return SendClientMessageEx(playerid, COLOR_FADE1, "{FFFFFF}¡Ya estás realizando la ruta de tren!");
                if(AntiAbuso[playerid] == 1) return SendClientMessageEx(playerid, COLOR_FADE1, "{FFFFFF}La gente esta llegando a la estación, deberas esperar 2 minutos!");
                if(TreneroDuty[playerid] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Para iniciar el recorrido, debes ponerte en servicio y el uniforme. {CC0000}(/Trenduty)");
					RemovePlayerFromVehicle(playerid);
	        		return 1;
				}
                Tren_Route[playerid] = 1;
	        	SetPlayerCheckpoint(playerid, 805.1542,-1357.9359,-0.1724, 5.0);
	        	GameTextForPlayer(playerid, "~w~Proxima Estacion: ~y~Market", 5000, 1);
	        	TogglePlayerControllable(playerid, 1);
	        	AntiAbuso[playerid] = 1;// 9 lineas en total con el fin de limpiar el mapa de los pasajeros!
	        	format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
		    	format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
		    	format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
		    	format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
		    	format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
		    	format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
		    	format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
			    format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
		    	format(string, sizeof(string), "", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO,COLOR_BLANCO);
	            format(string, sizeof(string), "[Transporte Público]:  {FFFFFF}• Estación Actual: Unity Station    • Próxima Estación: Market Station", GetPlayerNameEx(playerid));
		    	ProxDetector(99.0, playerid,string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
				SetTimerEx("AntiAbusoTimer", 150, false, "i", playerid); // 2,5 Minutos.
	       	}
	       	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ¡No estás dentro del tren para hacer esto!");
	    }
		else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF}¡No autorizado!");
        return 1;
}
zcmd(cancelarviaje, playerid, params[])
    {
        new carid = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 15 ||  Info[playerid][pJob2] == 15)
		{
		    if(Tren_Route[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "- Actualmente no tienes un viaje programado.");
		    {
                {
	      	    	Tren_Route[playerid] = 0;
	      	    	DisablePlayerCheckpoint(playerid);
	      	    	RemovePlayerFromVehicle(playerid);
	      	    	SetVehicleToRespawn(carid);
				}
	       	}
	       	GameTextForPlayer(playerid, "~w~Viaje Cancelado", 5000, 3);
	    }
	    else SendClientMessageEx(playerid, COLOR_BLANCO, "- Usted no trabaja de Maquinista de Trenes!");
        return 1;
}
zcmd(rbasurero, playerid, params[])
    {
        new newcar = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 16 ||  Info[playerid][pJob2] == 16)
		{
		    if(BasureroLA(newcar))
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "Para iniciar el recorrido de basurero, debes estar en un camión de basura");
		        if(BasureroR[playerid] == 1 || BasureroR[playerid] == 2 || BasureroR[playerid] == 3 || BasureroR[playerid] == 4 || BasureroR[playerid] == 5 || BasureroR[playerid] == 6 || BasureroR[playerid] == 7 || BasureroR[playerid] == 8 || BasureroR[playerid] == 9 || BasureroR[playerid] == 10) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}Ya iniciaste un recorrido, por favor pon /cbasurero para cancelar este mismo");
                {
	      	    	BasureroR[playerid] = 1;
  		        	SendClientMessageEx(playerid, COLOR_BLANCO, "Ve a cada punto para recoger la basura de Los Ángeles. . .");
		        	SetPlayerCheckpoint(playerid, 2288.337646, -1896.691772, 13.370229, 5.0);
		        	TogglePlayerControllable(playerid, 1);
		        	AntiAbuso[playerid] = 1;
                    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "No estás en un camión de basura!!!");
				}
	       	}
	       	else SendClientMessageEx(playerid, COLOR_GREY, "No estás en un camión de basura!");
	    }
		else SendClientMessageEx(playerid, COLOR_GREY, "No eres basurero. . .");
        return 1;
} // A partir de ahora comienzan los cmd's para cancelar los recorridos, con esto evitamos BA con los checkpoints.
zcmd(cbasurero, playerid, params[])
    {
        new carid = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 16 ||  Info[playerid][pJob2] == 16)
		{
		    if(BasureroR[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "- Actualmente no tienes un recorrido de basurero.");
		    {
                {
	      	    	BasureroR[playerid] = 0;
	      	    	DisablePlayerCheckpoint(playerid);
	      	    	RemovePlayerFromVehicle(playerid);
	      	    	SetVehicleToRespawn(carid);
				}
	       	}
	       	GameTextForPlayer(playerid, "~w~Recorrido Cancelado", 5000, 3);
	    }
	    else SendClientMessageEx(playerid, COLOR_BLANCO, "- Usted no trabaja de Basurero!");
        return 1;
}
zcmd(ayudantes, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		new string[128];
		if(Info[playerid][pAdminZC] >= 7)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "|----------| Ayudantes On-Line |----------|");
  			foreach(Player, i)
  			{
  				if(Info[i][pHelper] >= 1)
  				{
                    if(Info[i][pHelper] == 1)
					{
                        format(string, sizeof(string), "{2EDFFF}Ayudante:{FFFFFF} %s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pHelper] == 2)
					{
                        format(string, sizeof(string), "{CC0000}Lider de Ayudantes:{FFFFFF} %s", GetPlayerNameEx(i));
                    }
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
  				}
  			}
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes utilizar este comando.");
		return 1;
	}
    zcmd(creaunauto, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 10)	return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if(!sscanf(params, "iii", params[0], params[1], params[2]))
		{
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid, X,Y,Z);
            new carid = CreateVehicle(params[0], X+5,Y,Z, 0.0, params[1], params[2], 600000);
            new string[32];
            format(string, sizeof(string), ". Vehículo %d creado .", carid);
			SendClientMessageEx(playerid, COLOR_GREY, string);
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /creaunauto (id) (color1) (color2)");
        return 1;
    }
   zcmd(ir, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] >= 2 || Info[playerid][pHelper] >= 2){
        	if(!sscanf(params, "d", params[0])){
		    	if(IsPlayerConnected(params[0])){
		        	new Float:p_x,Float:p_y,Float:p_z;
		        	GetPlayerPos(params[0], p_x,p_y,p_z);
		        	new interior = GetPlayerInterior(params[0]);
		        	new vw = GetPlayerVirtualWorld(params[0]);
          			SetPosEx(playerid, p_x,p_y,p_z,0,interior,vw);
          			return SendClientMessageEx(playerid, COLOR_WHITE, "Teleportado.");
		    	} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ir (PlayerID)");
        	return 1;
        } else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(traer, playerid, params[]){
        new giveplayerid;
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if(!sscanf(params, "d", giveplayerid)){
		    if(IsPlayerConnected(giveplayerid)){
		        if(Info[giveplayerid][pAdminZC] > 7 ) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando con este jugador.");
		        new Float:p_x,Float:p_y,Float:p_z;
		        GetPlayerPos(playerid, p_x,p_y,p_z);
		        new interior = GetPlayerInterior(playerid);
		        new vw = GetPlayerVirtualWorld(playerid);
          		SetPosEx(giveplayerid, p_x,p_y,p_z,0,interior,vw);
          		return SendClientMessageEx(giveplayerid, COLOR_WHITE, "Teleportado.");
		    } else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /traer (PlayerID)");
        return 1;
    }
    zcmd(verarmas, playerid, params[]){
        new giveplayerid;
        if(!sscanf(params, "d", giveplayerid)){
		    if(IsPlayerConnected(giveplayerid)){
				if(GetPVarInt(giveplayerid, "EventToken") != 0 || GetPVarInt(giveplayerid, "IsInArena") == 1) SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Estás armas son del paintball o un evento.");
		        new x,xweapon, xbalas, string[80],NombreArma[24];
			    format(string, sizeof(string), "Armas de %s:", GetPlayerNameEx(giveplayerid)); SendClientMessageEx(playerid, COLOR_GRAD1, string);
				for (new slot=0; slot<14; slot++){
				    GetPlayerWeaponData(giveplayerid, slot, xweapon, xbalas);
				    if(xweapon != 0){
                        GetWeaponName(xweapon,NombreArma,sizeof(NombreArma));
				        format(string, sizeof(string), "%s Balas: [%d]",NombreArma, xbalas);
				        x++;
				        SendClientMessageEx(playerid, COLOR_GRAD1, string);
				        if(x >= 5){
								SendClientMessageEx(playerid, COLOR_GRAD1, string);
								x = 0;
								format(string, sizeof(string), "");
							} else format(string, sizeof(string), "%s,  ", string);
						}
					}
		    } else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    return 1;
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /verarmas (PlayerID)");
        return 1;
    }
    
    CMD:facciones(playerid, params[])
{
	    if(IsPlayerConnected(playerid))
		{
		    ClearChatbox(playerid);
			SendClientMessageEx(playerid, COLOR_AT, "• Facciones (HABILITADAS)");
			SendClientMessageEx(playerid, COLOR_WHITE, "");
			SendClientMessageEx(playerid, COLOR_AT, "- Facciones Legales:{FFFFFF} LAPD - AININT - Sistema Judicial - LAMD - Bomberos- USMC - Gobierno");
			SendClientMessageEx(playerid, COLOR_AT, "- Empresas Privadas: {FFFFFF}FOX - Gas Monkey - Play Music Radio");
			SendClientMessageEx(playerid, COLOR_AT, "- Pandillas: {FFFFFF}Cedar Block Piru - Boulevard Mafia Crips - N/S Broadway XIV - Varrio Longos 13");
			SendClientMessageEx(playerid, COLOR_AT, "- Organizaciones: {FFFFFF}Hell's Angels");
			SendClientMessageEx(playerid, COLOR_AT, "- Facciones Ilegales: {FFFFFF}Mafia Rusa - LCN - Yakuza - Santana - ISIS");
            }
		return 1;
}
    zcmd(idfacciones, playerid, params[]){
   	 if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
 		if(Info[playerid][pFactionModerator] == 1){
			SendClientMessageEx(playerid, COLOR_AT, "• ID Facciones");
			SendClientMessageEx(playerid, -1, "");
			SendClientMessageEx(playerid, -1, "{FFFFFF}1: LAPD - 2: AININT - 3: USMC - 4: LAMD - 5: FOX - 6: Gas Monkey (Mecánicos) - 7: Gobierno - 8: X");
			SendClientMessageEx(playerid, -1, "{FFFFFF}9: Sistema Judicial - 10: Cedar Block Piru - 11: Boulevard Mafia Crips -  12: N/S Broadway XIV - 13: Varrio Longos 13");
			SendClientMessageEx(playerid, -1, "{FFFFFF}14: Mafia Rusa - 15: LCN - 16: Yakuza - 17: X - 18: Santana - 19: ISIS - 20: Bomberos - 21: Hell's Angels");
			SendClientMessageEx(playerid, -1, "{FFFFFF}22: Play Music Radio");
		 }
		 else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando");
		 return 1;
	}
    zcmd(limpiarchat, playerid, params[]){
        if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        CleanScreen();
        CleanScreen();
        CleanScreen();
        CleanScreen();
        CleanScreen();
        CleanScreen();
        CleanScreen();
        CleanScreen();
        CleanScreen();
        CleanScreen();
		new string[500];
		format(string, sizeof(string), "[<!>]:{FFFFFF} El chat fue limpiado por el Staff %s", GetPlayerNameEx(playerid));
		return ABroadCast(COLOR_ROJO,string,1);
    }
    zcmd(limpiarmichat, playerid, params[]){
        ClearChatbox(playerid);
        return 1;
    }
    zcmd(leetodo, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	  if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (!BigEar[playerid]){
            BigEar[playerid] = 1;
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Chat global activado.");
		}
		else{
			BigEar[playerid] = 0;
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Chat global desactivado.");
		}
    }
    zcmd(slap, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	   new giveplayerid;
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if(!sscanf(params, "d", giveplayerid)){
			new Float:slx, Float:sly, Float:slz, string[128];
			if(IsPlayerConnected(giveplayerid)){
			    GetPlayerPos(giveplayerid, slx, sly, slz);
				SetPlayerPos(giveplayerid, slx, sly, slz+5);
				PlayerPlaySound(giveplayerid, 1130, slx, sly, slz+5);
				format(string, sizeof(string), "{2EDFFF}[Administración]:{FFFFFF} {2EDFFF}%s {FFFFFF}golpeó a {2EDFFF}%s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_AT,string,2);
				return SendClientMessageEx(giveplayerid, COLOR_RED2, string);
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /slap (PlayerID)");
        return 1;
    }
    zcmd(darskin, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	  if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		new giveplayerid, skin;
		if(!sscanf(params, "di", giveplayerid, skin)){
		    if(IsPlayerConnected(giveplayerid)){
			    if(skin > 311 || skin < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Skin ID incorrecto (0-299)");
			    new string[128];
			    Info[giveplayerid][pChar] = skin;
			    SetPlayerSkin(giveplayerid, Info[giveplayerid][pChar]);
			    format(string, sizeof(string), "[Administración]: %s te cambió el skin, ID SKIN: %d.", GetPlayerNameEx(playerid), skin);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "[Administración]: %s cambió el skin de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				return ABroadCast(COLOR_GENERAL,string,2);
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darskin (PlayerID) (SkinID)");
        return 1;
    }
    zcmd(vehslap, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	  if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		new alt, giveplayerid;
		if(!sscanf(params, "di", giveplayerid, alt)){
		    if(IsPlayerConnected(giveplayerid)){
			    new Float:slx, Float:sly, Float:slz, string[64];
			    GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
				SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+alt);
				PlayerPlaySound(giveplayerid, 1130, slx, sly, slz+alt);
				format(string, sizeof(string), "[Administración]:%s golpeó tu vehiculo.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_RED2, string);
				format(string, sizeof(string), "[Administración]: %s golpeó el vehiculo de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				return ABroadCast(COLOR_GENERAL,string,3);
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vehslap (PlayerID) (Altitud)");
        return 1;
    }
    zcmd(irpunto, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (GetPlayerState(playerid) == 2){
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
		}
		else{SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);}
		return SendClientMessageEx(playerid, COLOR_WHITE, "Teleportado.");
    }
    zcmd(punto, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
		return SendClientMessageEx(playerid, COLOR_WHITE, "Posición guardada.");
    }
    zcmd(traerauto, playerid, params[]){
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "[ERROR]: No tienes autorización a usar este comando.");
        new Float:plocx,Float:plocy,Float:plocz, vehicleid;
		if(!sscanf(params, "i", vehicleid)){
			GetPlayerPos(playerid, plocx, plocy, plocz);
			SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
			return SetVehiclePos(vehicleid,plocx,plocy+4, plocz);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /traerauto (Auto ID)");
		return 1;
    }
    zcmd(irauto, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        new Float:cwx2,Float:cwy2,Float:cwz2,vehicleid;
        if(!sscanf(params, "i", vehicleid)){
			GetVehiclePos(vehicleid, cwx2, cwy2, cwz2);
			return SetPlayerPos(playerid, cwx2, cwy2, cwz2);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /irauto (Auto ID)");
		return 1;
    }
    zcmd(repararveh, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo.");
        SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    	RepairVehicle(GetPlayerVehicleID(playerid));
		return SendClientMessageEx(playerid, COLOR_WHITE, "Reparaste el vehículo!");
    }
    
    zcmd(reparacion, playerid, params[]){
        if(!IsPlayerInRangeOfPoint(playerid,5.0,1911.27039, -1776.28748, 13.39726)) return SendClientMessage(playerid,COLOR_ROJO,"!{FFFFFF} No estás en el taller."); //  Para crear un mensaje!
        if(mecaon() == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} En este taller no hay mecánicos, puede ir al de Market cerca del hospital.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en un vehículo.");
        new cursoemergencia[] = "{FFFFFF}- Civil\t\t\t\t\t($5.000)\n- Gobierno\t\t\t\t($2.000)";
        SafeDialogEx(playerid,TALLER_R,DIALOG_STYLE_LIST,"{7D997D}• Taller de Reparaciones",cursoemergencia,"{FFFFFF}Ver","{FFFFFF}Salir");
        return 1;
    }

    CMD:repararvehid(playerid, params[])
    {
	    new giveplayerid, string[128];
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "/Repararvehid (ID-Usuario)");
	    if(IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	    {
		    if(IsPlayerInAnyVehicle(giveplayerid))
		    {
			    if(giveplayerid != playerid)
			{
			    format(string, sizeof(string), "El administrador %s te reparó el vehículo.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			}
			format(string, sizeof(string), "Info. Administrativa: %s reparó el vehículo de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			RepairVehicle(GetPlayerVehicleID(giveplayerid));
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El usuario no está en ningún vehículo.");
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "! El usuario no está conectado.");
	return 1;
    }
    zcmd(mascara, playerid, params[]){
        new string[90];
        if(Info[playerid][pMask] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes máscara.");
        if(Info[playerid][pMaskuse] == 0){
            foreach(Player, i){
   		    	if(IsPlayerConnected(i)){
		   			ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
			}
			Info[playerid][pMaskuse] = 1;
			SetPlayerAttachedObject( playerid, 7, 19036, 2, 0.090156, 0.045901, -0.005574, 90.110733, 81.638343, 4.973568, 0.887882, 1.139873, 1.000000 );
      		format(string, sizeof(string), "* %s se pone una máscara.", GetPlayerNameEx(playerid));
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else{
            foreach(Player, i){
   		    	if(IsPlayerConnected(i)){
		   			ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
			}
			Info[playerid][pMaskuse] = 0;
			RemovePlayerAttachedObject(playerid,7);
      		format(string, sizeof(string), "* %s se quita la máscara de su rostro.", GetPlayerNameEx(playerid));
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        return 1;
    }
    zcmd(cmdstaff, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Admin(2,playerid)){
		    SendClientMessageEx(playerid, COLOR_AT, "• Moderador a Prueba");
			SendClientMessageEx(playerid, COLOR_WHITE, "/adminduty /adminoffduty /revivir /togac /ar /rr /reportes /silenciar /repararvehid /irzona" );
			SendClientMessageEx(playerid, COLOR_WHITE, "/staff /ir /traer /leetodo /slap /darskin /irpunto /punto /repararveh /desarmar /jail /ls /sf /lv /aa /a");
			SendClientMessageEx(playerid, COLOR_WHITE, "/enmascarados /bloqre /desbloqre /mandarls /spec /liberar /(des)congelar /h /toghelper /noev /irjob ");
			SendClientMessageEx(playerid, COLOR_WHITE, "/niveldos /desmutearad /mutearad /aduda /rduda /kick /listaafk");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
		}
		if(Admin(3,playerid)){
			SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AT, "• Moderador Global");
			SendClientMessageEx(playerid, COLOR_WHITE, "/desarmar /quitardni /adminnombre /nao /aforo /autovw /limpiarchat /irauto /jailoffline /entrarveh /ao");
			SendClientMessageEx(playerid, COLOR_WHITE, "/darrehelper /mandarsf /mandarlv /respawntodo /qseguroveh");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
		}
		if(Admin(4,playerid)){
			SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AT, "• Administrador Principante");
			SendClientMessageEx(playerid, COLOR_WHITE, "/banoffline /idfacciones /vehslap /traerauto /llenargas /recargarautos /respawncars /respawnauto");
			SendClientMessageEx(playerid, COLOR_WHITE, "/reparartodo /fmuerte");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
		}
		if(Admin(5,playerid)){
			SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AT, "• Administrador General");
			SendClientMessageEx(playerid, COLOR_WHITE, "/loteria /bloqbug /desbloqbug /cfuego /vidainf /darestilopelea /cambiarhora /aborrarplanta /smstodos");
			SendClientMessageEx(playerid, COLOR_WHITE, "/cambiarvw /deletecarro");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
		}
		/*if(Admin(6,playerid)){
		    SendClientMessageEx(playerid, COLOR_AT, "• Encargado de Facciones");
			SendClientMessageEx(playerid, COLOR_WHITE, "/nofac /anunciostaff /facchat /weaponr /qfaccoff /robobanco /verstat /sapddiv /samddiv");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
			SendClientMessageEx(playerid, COLOR_WHITE, "");
		}*/
		if(Admin(7,playerid)){
			SendClientMessageEx(playerid, COLOR_WHITE, "");
			SendClientMessageEx(playerid, COLOR_AT, "• Administrador Superior");
			SendClientMessageEx(playerid, COLOR_WHITE, "/limpiarreportes /ayudantes /darfichaspball /msjhelper");
			SendClientMessageEx(playerid, COLOR_WHITE, "/quitarhelper /seteardinero /clima /climatodos /adminevento /darobjeto");
			SendClientMessageEx(playerid, COLOR_WHITE, "/limpiarregalo /idfacciones /facchat");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
		}
		if(Admin(8,playerid)){
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AT, "• Administrador Técnico");
			SendClientMessageEx(playerid, COLOR_WHITE, "/ipusuarios /obtenerip /msjfam /gotoco /adminpuntos /famchat /staffvnegocio");
			SendClientMessageEx(playerid, COLOR_WHITE, "/srestriccion /nevar /nonevar");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
			SendClientMessageEx(playerid, COLOR_WHITE, "Chat Privado: {2EDFFF}/ap");
		}
		if(Admin(9,playerid)){
			SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AT, "• Sub-Dueño");
			SendClientMessageEx(playerid, COLOR_WHITE, "/mps /bloquearduda /crearregalo /regalararma /mslogueo /msjfacc /msjfam /actualizarservidor");
			SendClientMessageEx(playerid, COLOR_WHITE, "/msjstaff /horaregalo /activofuego /desactivofuego /bloquear");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
			SendClientMessageEx(playerid, COLOR_WHITE, "Chat Privado: {2EDFFF}/ap");
		}
		if(Admin(10,playerid)){
			SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AT, "• Dueño");
			SendClientMessageEx(playerid, COLOR_WHITE, "/idfacciones /setsubsi /editarnegocio /noac /adminconcesionario /destruircarro");
			SendClientMessageEx(playerid, COLOR_WHITE, "/forzarsubsi /cambiarclaveusuario /darlider /regaloatodos /sfondos /deletecarro");
			SendClientMessageEx(playerid, COLOR_WHITE, "/verllaves /encargadodefacc /encargadodefam /encargadodeban");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comando para brindar soporte: {2EDFFF}/Asoporte ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos para autorizar el /b: {2EDFFF}/Sib /Nob");
			SendClientMessageEx(playerid, COLOR_WHITE, "Chat Privado: {2EDFFF}/ap");
		}
		if(Admin(11,playerid)){
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AT, "• Programador");
			SendClientMessageEx(playerid, COLOR_WHITE, "/ajustarsv - /encargadodetienda - /encargadodestaff - /reiniciarcasas - /guardarcuentas");
		}
		if(Es(1,playerid)){
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AH_EN, "• Encargado de Staff");
			SendClientMessageEx(playerid, COLOR_WHITE, "/darstaff - /staffranks - /quitarstaff - /expulsarstaff - /esduty");
		}
		if(Ef(1,playerid)){
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AH_EN, "• Encargado de Facciones");
			SendClientMessageEx(playerid, COLOR_WHITE, "/darlider - /darmiembro - /idfacciones - /qfaccoff - /irfacc - /facchat - /msjfacc - /efduty");
  		}
		if(Efam(1,playerid)){
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AH_EN, "• Encargado de Familias");
			SendClientMessageEx(playerid, COLOR_WHITE, "/fameditor /editarhqfam /familias /festado /fdepositar /fretirar /fgarma /fsarma");
			SendClientMessageEx(playerid, COLOR_WHITE, "/cfdepositar /cjretirar /ajustar /famrango /anombrerango /crearfam /msjfam");
			SendClientMessageEx(playerid, COLOR_WHITE, "/borrarfam /crearautofam /borrarautofam /darliderfam /fseguro /fllaves");
		}
		if(Eb(1,playerid)){
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AH_EN, "• Encargado de Baneos");
			SendClientMessageEx(playerid, COLOR_WHITE, "/desbanear - /desbanearip - /banoffline - /banear - /bloquear - /warn");
		}
		if(To(1,playerid)){
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_AH_EN, "• Encargado de Tienda Online y VIPs");
			SendClientMessageEx(playerid, COLOR_WHITE, "/evipduty - /darpremium - /admingaraje - /editarcasa - /darvest(2) - /listatoys - /shopdoor");
			SendClientMessageEx(playerid, COLOR_WHITE, "/dobleexp - /verregalo - /darfichascash - /darfichasvip - /quitarfichascas");
			SendClientMessageEx(playerid, COLOR_WHITE, "{660066}Garajes:{FFFFFF} /gotogaraje /ginterior /gprecio /gnivel /moverg /staffvgaraje /creargaraje /gnombre /gtipo");
			SendClientMessageEx(playerid, COLOR_WHITE, "{660066}Casas:{FFFFFF} /gotohouse - /goinhouse - /casasiguiente - /editar /staffvcasa");
		}
  		return 1;
  	}
    zcmd(cmdhelper, playerid, params[]){
	    switch(Info[playerid][pHelper]){
	        case 1: SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FFFFFF}Tus comandos disponibles como ayudante: {2EDFFF}/cduty - /aceptarayuda - /finalizarayuda /duda /noduda");
	        case 2: SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FFFFFF}Tus comandos disponibles como líder de ayudantes: {2EDFFF}/cduty - /aceptarayuda - /finalizarayuda - /quitarhelper - /darhelper - /msjhelper  /duda /noduda /nocanal");
	        default: SendClientMessageEx(playerid, COLOR_WHITE, "No puedes utilizar este comando.");
	    }
		return 1;
	}
    zcmd(bloqbug, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] >= 5){
			new string[128], giveplayerid;
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /bloqbug (playerid)");
			if(IsPlayerConnected(giveplayerid)){
				format(string, sizeof(string), "[ATENCIÓN]: %s no podrá reportar nunca más un bug's, razón: Abuso de comando. Admin: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				BroadCast(COLOR_LIGHTRED, string);
  				Log("logs/- Bloqueos del R. Bugs.log", string);
				Info[giveplayerid][pAdminZC] = 0;
				Info[giveplayerid][pBlockBug] = 1;
				Kick(giveplayerid);
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	}
    zcmd(desbloqbug, playerid, params[]){
		if(Info[playerid][pAdminZC] >= 5){
			new string[128], giveplayerid;
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "USE: /unbloqbug [playerid]");
			if(IsPlayerConnected(giveplayerid)){
				format(string, sizeof(string), "[ATENCÓN]: %s desbloqueó del comando [/reportarbug] a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED, string,3);
 	 			Log("logs/- Desbloqueos del R. Bugs.log", string);
				Info[giveplayerid][pBlockBug] = 0;
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	}
    zcmd(quitarstaff, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		new string[128], giveplayerid;
		if(Info[playerid][pAdminZC] >= 11 || Info[playerid][pModStaff] == 1){
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /quitarstaff (playerid)");
			if(IsPlayerConnected(giveplayerid)){
           		format(string, sizeof(string), "Mod/Admin retirado: %s limpió variables administrativas a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
           		ABroadCast(COLOR_GENERAL,string,2);
				Log("logs/- Información de Staff.log", string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Restearon tus variables de administrador a 0.");
    			Info[giveplayerid][pAdminZC] = 0;
    			Info[giveplayerid][pLvlAdminZC] = 0;
				Info[giveplayerid][pHelper] = 0;
				Info[giveplayerid][pFactionModerator] = 0;
				Info[giveplayerid][pModStaff] = 0;
				Info[giveplayerid][pBanAppealer] = 0;
				Info[giveplayerid][pGangModerator] = 0;
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	}
    zcmd(bloquearduda, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 9) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if (!nod){
			nod = 1;
			return SendClientMessageToAllEx(COLOR_GRAD2,"El canal de dudas fue desactivado por el equipo administrativo!!!");
		}
		else{
			nod = 0;
			return SendClientMessageToAllEx(COLOR_GRAD2,"El canal de dudas fue activado por el equipo administrativo!!!");
		}
    }
	zcmd(removergps, playerid, params[]){
		if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Primero Conectate.");
		if(Info[playerid][pMember] == 1||Info[playerid][pLeader] == 1){
			DisablePlayerCheckpoint(playerid);
		}
		else if(Info[playerid][pMember] == 4||Info[playerid][pLeader] == 4){
			DisablePlayerCheckpoint(playerid);
		}
		return 1;
	}
    zcmd(noac, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No tienes autorización a usar este comando.");
        new string[200];
        if (!noac){
			noac = 1;
			format(string, sizeof(string), "Notificación:{FFFFFF} El canal /a fue bloqueado por %s",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_ROJO,string,2);
		}
		else{
			noac = 0;
			format(string, sizeof(string), "Notificación:{FFFFFF} El canal /a fue desbloqueado por %s",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_ROJO,string,2);
		}
		return 1;
    }
    zcmd(nofac, playerid, params[]){
    	new string[80];
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] < 6) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
        if (!nofac){
			nofac = 1;
			format(string, sizeof(string), "¡Atención facciones y Familias!: El chat /f fue bloqueado por %s.",GetPlayerNameEx(playerid));
			SendFamilyMessage(Info[playerid][pMember], COLOR_BLANCO, string);
		}
		else{
			nofac = 0;
			format(string, sizeof(string), "{FF0000}[ATENCION]:{FFFFFF} Chat de Facción desbloqueado por %s",GetPlayerNameEx(playerid));
			SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
		}
		return 1;
  }
 
    zcmd(guardarcuentas, playerid, params[]){
        if (Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		SaveStuff();
        UpdatePoints();
		SaveDynamicDoors();
		saveFamilies();
		saveFamiliesHQ();
		foreach(Player, i){ OnPlayerSavedStats(i); }
		ABroadCast(COLOR_ORANGE,"[<!>] La base de datos de de Absolute Titanium fue actualizada con éxito.",2);
		print("[<!>] Se ha realizado con éxito la actualización de la base de datos. (Killian Mihaly | AT-RP V.2.1)");
        return 1;
    }
    zcmd(stopanim, playerid, params[]){
    	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás herido.");
		if(Info[playerid][pEstado] == 0) return ClearAnimations(playerid);
		else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto ahora.");
		return 1;
    }
    zcmd(darstaff, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
 		if(Info[playerid][pModStaff] == 1)
 		{
		new giveplayerid, level;
		if(!sscanf(params, "di", giveplayerid, level)){
            if(IsPlayerConnected(giveplayerid)){
            if(level < 0 || level > 10) return SendClientMessageEx(playerid, COLOR_AT, "Rangos: {FFFFFF}¡Rangos administratívos de 0 al 10 (/staffranks para ver los rangos)!");
               	new string[128];
			    Info[giveplayerid][pAdminZC] = level;
			    format(string, sizeof(string), "{FFFFFF}¡Atención!: %s le otorga nivel administrativo %d a %s.", GetPlayerNameEx(playerid), level, GetPlayerNameEx(giveplayerid));
			    ABroadCast(COLOR_WHITE,string,2);
			    format(string, sizeof(string), "{2EDFFF}Inf. Administrativa:{FFFFFF} %s te asignó un rango administrativo. {2EDFFF}[Rango: {FFFFFF}%d{2EDFFF}]", GetPlayerNameEx(playerid), level);
			    SendClientMessageEx(giveplayerid, COLOR_AT, string);
			    format(string, sizeof(string), "* %s asignó a %s administrador nivel [%d]", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),level);
			    Log("logs/- Información de Staff.log", string);
			    new log[255];
				format(log, 225, "* El usuario %s se le ha modificado su nivel administrativo a %d ", GetPlayerNameEx(giveplayerid), level);
    			Log("logs/- Información de Staff.log", log);
            } else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/darstaff (rango id) (usuario id){FFFFFF} para modificar el rango administratívo.");
		}
        return 1;
    }
/*        zcmd(darstaffsupremo, playerid, params[])
		{
    	new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
	    if(!strcmp(nick, "Kenji_Wang", true) || !strcmp(nick, "Killian_Mihaly", true))
	    {
		new giveplayerid, level;
		if(!sscanf(params, "di", giveplayerid, level)){
            if(IsPlayerConnected(giveplayerid)){
            if(level < 0 || level > 11) return SendClientMessageEx(playerid, COLOR_AT, "Rangos: {FFFFFF}¡Rangos administratívos de 0 al 11 (/staffranks para ver los rangos)!");
               	new string[128];
			    Info[giveplayerid][pAdminZC] = level;
			    format(string, sizeof(string), "{FFFFFF}¡Atención!: %s le otorga nivel administrativo %d a %s.", GetPlayerNameEx(playerid), level, GetPlayerNameEx(giveplayerid));
			    ABroadCast(COLOR_WHITE,string,2);
			    format(string, sizeof(string), "{2EDFFF}Inf. Administrativa:{FFFFFF} %s te asignó un rango administrativo. {2EDFFF}[Rango: {FFFFFF}%d{2EDFFF}]", GetPlayerNameEx(playerid), level);
			    SendClientMessageEx(giveplayerid, COLOR_AT, string);
			    format(string, sizeof(string), "* %s asignó a %s administrador nivel [%d]", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),level);
			    Log("logs/- Información de Staff.log", string);
			    new log[255];
				format(log, 225, "* El usuario %s se le ha modificado su nivel administrativo a %d ", GetPlayerNameEx(giveplayerid), level);
    			Log("logs/- Información de Staff (/darstaffsupremo).log", log);
            } else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/darstaffsupremo (rango id) (usuario id){FFFFFF} para modificar el rango administratívo.");
	}
        return 1;
}*/
    zcmd(encargadodefacc, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	    new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 9) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás autorizado para usar este comando.");
        if(!sscanf(params, "d", giveplayerid)){
            if(IsPlayerConnected(giveplayerid)){
				Info[giveplayerid][pFactionModerator] = 1;
				format(string, sizeof(string), "%s lo ha asignado moderador de facciones.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "[<¡ENCARGADOS!>]{FFFFFF} %s asignó {08A132}Encargado de Facciones{FFFFFF} a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_ENCARGADOS,string,2);
				Log("logs/- Cargos Administrativos.log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/encargadodefacc (ID){FFFFFF} para asignar E.F.");
        return 1;
    }
    zcmd(encargadodestaff2, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        new string[128], giveplayerid;
        new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
        if(!strcmp(nick, "Kenji_Wang", true) || !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true)|| !strcmp(nick, "Micro_Lopez", true))
        if(!sscanf(params, "d", giveplayerid)){
            if(IsPlayerConnected(giveplayerid)){
				Info[giveplayerid][pModStaff] = 1;
				format(string, sizeof(string), "%s lo ha asignado Encargado de Staff.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s le dio Enc. Staff al administrador %s!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_BLANCO,string,2);
				Log("logs/- Cargos Administrativos.log", string);
				Log("logs/- Dio E.S (CUIDADO).log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/encargadodestaff2 (ID){FFFFFF} para asignar E.S.");
        return 1;
 }
 zcmd(encargadodestaff, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	    new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás autorizado para usar este comando.");
        if(!sscanf(params, "d", giveplayerid))
		{
            if(IsPlayerConnected(giveplayerid))
			{
				Info[giveplayerid][pModStaff] = 1;
				format(string, sizeof(string), "%s lo ha asignado Encargado de Staff.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "[<¡ENCARGADOS!>]{FFFFFF} %s asignó {08A132}Encargado de Staff{FFFFFF} a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_ENCARGADOS,string,2);
				Log("logs/- Cargos Administrativos.log", string);
				Log("logs/- Dio E.S (CUIDADO).log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, " Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/encargadodestaff (ID){FFFFFF} para asignar E.S.");
        return 1;
    }
    zcmd(encargadodetienda, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	    new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás autorizado para usar este comando.");
        if(!sscanf(params, "d", giveplayerid))
		{
            if(IsPlayerConnected(giveplayerid))
			{
				Info[giveplayerid][pShopTech] = 1;
				format(string, sizeof(string), "%s lo ha asignado Técnico de la Tienda Online.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "[<¡ENCARGADOS!>]{FFFFFF} %s asignó {08A132}Encargado de Tienda Online{FFFFFF} a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_ENCARGADOS,string,2);
				Log("logs/- Cargos Administrativos.log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, " Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/encargadodetienda (ID){FFFFFF} para asignar E. Tienda Online.");
        return 1;
    }
    zcmd(encargadodefam, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	   	new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
        if(!sscanf(params, "d", giveplayerid))
		{
            if(IsPlayerConnected(giveplayerid))
			{
				Info[giveplayerid][pGangModerator] = 1;
				format(string, sizeof(string), "%s lo ha asignado moderador de familias y bandas.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "[<¡ENCARGADOS!>]{FFFFFF} %s asignó {08A132}Encargado de Familias{FFFFFF} a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_ENCARGADOS,string,2);
				Log("logs/- Cargos Administrativos.log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/encargadodefam (ID){FFFFFF} para asignar E.Fam.");
        return 1;
    }
    zcmd(encargadodeban, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	    new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_WHITE, " No tienes autorización de usar éste comando.");
        if(!sscanf(params, "d", giveplayerid))
		{
            if(IsPlayerConnected(giveplayerid))
			{
				Info[giveplayerid][pBanAppealer] = 1;
				format(string, sizeof(string), "%s lo ha asignado Apelador a desbaneo.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "[<¡ENCARGADOS!>]{FFFFFF} %s asignó {08A132}Encargado de Desbaneos{FFFFFF} a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_ENCARGADOS,string,2);
				Log("logs/- Cargos Administrativos.log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, " Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/encargadodeban (ID){FFFFFF} para asignar E. Desbaneos.");
        return 1;
    }
	zcmd(desarmar, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	new giveplayerid;
        if (Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
		if(!sscanf(params, "d", giveplayerid))
		{
			if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
            new string[84];
            ResetPlayerWeaponsEx(giveplayerid);
            format(string, sizeof(string), "[ATENCIÓN]: %s limpio el inventario de armas de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
            ABroadCast(COLOR_GENERAL,string,2);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /desarmar (PlayerID)");
		return 1;
	}
	zcmd(qdinero, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		new giveplayerid, money, reason[64];
        if (Info[playerid][pAdminZC] < 7) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		if (!sscanf(params, "dds", giveplayerid, money, reason)){
            if(money > 99999999 || money < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo de 0 - 99999999 de dinero");
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
			new string[128];
            GivePlayerCash(giveplayerid, -money);
            format(string, sizeof(string), "[<!>] %s le retira $%d al usuario %s - Razón: %s", GetPlayerNameEx(playerid), money,GetPlayerNameEx(giveplayerid),reason);
            BroadCast(COLOR_LIGHTRED,string);
            Log("logs/- Dinero Administrativo.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /Qdinero (PlayerID) (Dinero) (Razón)");
		return 1;
	}
zcmd(jail, playerid, params[]){
		new string[120], time, giveplayerid, reason[64];
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(CommandSpamTimes[playerid] == 999){
          	format(string, sizeof(string), "(Sanciones): %s fue baneado automáticamente, razón: Intento de Abuso", GetPlayerNameEx(playerid));
	        ABroadCast(COLOR_CSTAFF,string,2);
	        Log("logs/- Flood de Sanción.log", string);
	        Info[playerid][pBannedZC] = 0;
			Kick(playerid);
			return 1;
		}
        if (Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if (!sscanf(params, "dds[64]", giveplayerid, time, reason)){
            if(IsPlayerConnected(giveplayerid)){
				SetPVarInt(giveplayerid, "IsInArena", 0);
				SetPVarInt(giveplayerid, "ArenaMode", 0);
              	CommandSpamTimes[playerid]++;
				CommandSpamUnmute[playerid] = 60;
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
                Info[giveplayerid][pJailAdmin] += 1;
		        Info[giveplayerid][pJailed] = 1;
		        PhoneOnline[giveplayerid] = 1;
				Info[giveplayerid][pJailTime] = time*60;
				ResetPlayerWeaponsEx(giveplayerid);
				new rand = random(sizeof(OOCJail));
				LoadObjects(giveplayerid);
				SetPlayerPos(giveplayerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
				SetPlayerColor(giveplayerid, COLOR_SANCION);
				SetPlayerInterior(giveplayerid, 15);
				SetPlayerVirtualWorld(giveplayerid, 1000);
				format(string, sizeof(string), "(Sanciones): %s encarceló a %s, razón: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				BroadCast(COLOR_CSTAFF, string);
				format(string, sizeof(string), "(Inf. Sanciones): %s encarceló a %s, razón: %s, tiempo: %d minuto(s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason, time);
				Log("logs/- Sanciones.log", string);
				format(string, sizeof(string), "Estadísticas de la sanción:{FFFFFF} Tiempo: %d minuto(s) - Jugador: %s", time, GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_AZULL,string,2);
				format(string, sizeof(string), "Tiempo: %d minuto(s)", time);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				StopAudioStreamForPlayer(giveplayerid);
				return 1;
            }
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Esa ID es inválida.");
        }
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /jail (playerid) (minutos) (razón)");
        return 1;
    }
	CMD:jailoffline(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] >= 1){
			new string[128], name[MAX_PLAYER_NAME], minutes;
			if(sscanf(params, "s[24]d", name, minutes)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /jailoffline (Nombre_Apellido) (Minutos)");

			if(INI_Exist(name))
			{
				new PlayerFile[MAX_PLAYER_NAME + 32];
	    		format( PlayerFile , sizeof PlayerFile, USERFILE, name);
	    		new INI:File = INI_Open(PlayerFile);
	    		INI_SetTag(File,"data");
	    		INI_WriteInt(File,"Jailed",4);
	    		INI_WriteInt(File,"JailTime",minutes*60);
        		INI_WriteFloat(File,"Pos_x",172.82);
        		INI_WriteFloat(File,"Pos_y",1951.59);
        		INI_WriteFloat(File,"Pos_z",3870.5);
	    		INI_Close(File);
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "Administración: %s sancionado por %s (%d-%d-%d) [CMD OFFLINE]", name, GetPlayerNameEx(playerid),month,day,year);
				Log("logs/- Sanciones OFF-Line.log", string);
				format(string, 128, "(Sanciones): %s fue sancionado por %s. [CMD OFFLINE]", name, GetPlayerNameEx(playerid));
				ABroadCast(COLOR_CSTAFF,string,2);
			}
			else SendClientMessageEx( playerid, COLOR_WHITE, "Esa cuenta no existe." );
		}
		return 1;
	}
    zcmd(ls, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] >= 2 ){
        	if (GetPlayerState(playerid) == 2)
			{
				return SetVehiclePos(GetPlayerVehicleID(playerid), 1529.6,-1691.2,13.3);
			}
			else{
				SetPosEx(playerid, 1529.6,-1691.2,13.3, 0, 0 ,0);
			}
		}
		return 1;
    }
    zcmd(sf, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if (Info[playerid][pAdminZC] >= 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if (GetPlayerState(playerid) == 2){
			return SetVehiclePos(GetPlayerVehicleID(playerid), -2016.4399,-79.7714,35.3203);
		}
		else{
			SetPosEx(playerid, -2016.4399,-79.7714,35.3203, 0, 0 ,0);
			return 1;
		}
    }
    zcmd(lv, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if (Info[playerid][pAdminZC] >= 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if (GetPlayerState(playerid) == 2){
			return SetVehiclePos(GetPlayerVehicleID(playerid), 1694.6566,1453.4523,10.7632);
		}
		else{
			SetPosEx(playerid, 1694.6566,1453.4523,10.7632, 0, 0 ,0);
			return 1;
		}
    }
    zcmd(pc, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if (Info[playerid][pAdminZC] >= 2) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if (GetPlayerState(playerid) == 2){
			return SetVehiclePos(GetPlayerVehicleID(playerid), 2294.1414,42.0592,26.3359);
		}
		else{
			SetPosEx(playerid, 2294.1414,42.0592,26.3359, 0, 0 ,0);
			return 1;
		}
    }
    zcmd(entrarveh, playerid, params[]){
        new vehicleid;
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if (Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if (!sscanf(params, "i", vehicleid)){
            PutPlayerInVehicle(playerid, vehicleid, 1);
			return SendClientMessageEx(playerid, COLOR_WHITE, "Teleportado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /entrarveh (VehicleID)");
        return 1;
    }
    zcmd(entrarvehemergencia, playerid, params[]){
        new vehicleid;
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if (Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if (!sscanf(params, "i", vehicleid)){
            PutPlayerInVehicle(playerid, vehicleid, 0);
			return SendClientMessageEx(playerid, COLOR_ROJO, "Ingresaste a un vehículo de emergencias.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /entrarvehemergencia (VehicleID)");
        return 1;
    }
    zcmd(llenargas, playerid, params[]){
		if (Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        SendClientMessageToAllEx(COLOR_YELLOW2, "Todos los vehículos del servidor fueron cargados con gasolina!");
  		for(new c=0;c<MAX_VEHICLES;c++) VehicleFuel[c] = 200;
        return 1;
    }
    zcmd(anunciostaff, playerid, params[]){
        new text[64], type;
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if (Info[playerid][pAdminZC] < 6) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        if (!sscanf(params, "is", type, text))
		{
            if(type == 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes elegir el numero 2.");
			for(new i = 0; i < MAX_PLAYERS; i++){ if(gPlayerLogged{i}){ GameTextForPlayer(i, text, 5000, type); } }
            new string[128];
            format(string, sizeof(string), "El administrador %s usó el comando /anunciostaff", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL,string,4);
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /anunciostaff (Tipo) (Texto)");
        return 1;
    }
	zcmd(bsporton, playerid, params[])
	{
            new nick[MAX_PLAYER_NAME];
            GetPlayerName(playerid, nick, sizeof(nick));
      		if( !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
       		if (PlayerToPoint(10, playerid,836.57581, -1843.10083, 14.06757)){
  			MoveDynamicObject(porton_ns1,836.57581, -1843.10083, 8.8955, 2.0);
      		SetTimer("portonc1", 5000, 0);
      		}
      		if( !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
			if (PlayerToPoint(10, playerid,836.31250, -2065.30396, 14.56855)){
			MoveDynamicObject(porton_ns2,836.31250, -2065.30396, 9.0911, 2.0);
			SetTimer("portonc2", 5000, 0);
			return 1;
      	}
		return 1;
	}
	zcmd(mimansion, playerid, params[])
	{
            new nick[MAX_PLAYER_NAME];
            GetPlayerName(playerid, nick, sizeof(nick));
      		if( !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
       		if (PlayerToPoint(10, playerid,2902.44287, -792.23291, 12.44275)){ // Primera Entrada
  			MoveDynamicObject(porton_sf1,2902.44287, -792.23291, 7.2702, 2.0);
      		SetTimer("portonsfc1", 5000, 0);
      		}
      		if( !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
			if (PlayerToPoint(10, playerid,3052.19629, -792.22852, 11.34650)){ // Segunda Entrada
			MoveDynamicObject(porton_sf2,3052.19629, -792.22852, 5.9363, 2.0);
			SetTimer("portonsfc2", 5000, 0);
			return 1;
		}
		return 1;
	}
	zcmd(mansion3, playerid, params[])
	{
            new nick[MAX_PLAYER_NAME];
            GetPlayerName(playerid, nick, sizeof(nick));
      		if( !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true))
       		if (PlayerToPoint(10, playerid,1003.75085, -643.76111, 121.69682)){
  			MoveDynamicObject(porton_ss1,1003.75085, -643.76111, 118.6357, 2.0);
      		SetTimer("cerrarportonss1", 5000, 0);
      	}
		return 1;
	}
	zcmd(elevador, playerid, params[])
	{
       		if (PlayerToPoint(10, playerid,816.23108, -2068.20703, 11.83470)){
  			MoveDynamicObject(elevadorns,816.23108, -2068.20703, 2.14761, 5.0);
      		SetTimer("elevadorv", 5000, 0);
		}
		return 1;
	}
	zcmd(gelevador, playerid, params[])
	{
            if(Info[playerid][pVIP] < 2) return SendClientMessageEx(playerid, COLOR_VIP, "Información VIP: {FFFFFF}Para subir a la segunda planta, debes pertenecer al Club VIP a partir del nivel 2.");
            if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_VIP, "Información VIP: {FFFFFF}No puedes subir al elevador estando en un vehículo!");
       		if (PlayerToPoint(10, playerid,542.29300, -1296.64026, 18.18355)){
  			MoveDynamicObject(elevadorcg,542.2930, -1296.64026, 28.12370, 1.5);
  			SendClientMessageEx(playerid, COLOR_WHITE,"Aviso Importante: Al estar adentro del elevador, permanezca quieto hasta que este se detenga!");
      		SetTimer("elevcgcierre", 10000, 0);
		}
		return 1;
	}
	zcmd(celda, playerid, params[])
	{
		if(OrgGob(playerid))
		{
       		if (PlayerToPoint(10, playerid,320.83261, 317.07980, 999.43982)){
  			MoveDynamicObject(celdagate1,320.83261, 318.78549, 999.43982, 4.0);
      		SetTimer("celdagateclosed1", 3000, 0);
      		return 1;
      		}
			if (PlayerToPoint(10, playerid,1320.11169, -791.13708, 1084.24451)){
			MoveDynamicObject(celdagate2,1321.79150, -791.13708, 1084.24451, 3.0);
			SetTimer("celdagateclosed2", 3000, 0);
			return 1;
			}
    	}
    	else if(Team_USMC(playerid))
		{
      		if (PlayerToPoint(30, playerid,168.70000, 1944.80005, 3866.30005)){
      		    MoveDynamicObject(celdagate3, 177.5842, 1944.80005, 3866.30005, 5.0);
	       		SetTimer("celdagateclosed3", 7000, 0);
	       		return 1;
	       	}
      		if (PlayerToPoint(30, playerid,195.39999, 1944.80005, 3869.60010)){
      		    MoveDynamicObject(celdagate4, 204.2539, 1944.80005, 3869.60010, 5.0);
	       		SetTimer("celdagateclosed4", 7000, 0);
	       		return 1;
	       	}
          	else SendClientMessageEx(playerid, COLOR_WHITE,"");
		}
		return 1;
	}
	zcmd(garaje, playerid, params[]){
		if(IsAPolice(playerid)){
        	if (PlayerToPoint(15, playerid,1547.68433, -1627.64075, 14.98080)){
      			MoveDynamicObject(pdgate1,1547.68433, -1627.64075, 9.62530, 3.0);
      			SetTimer("GateClose5", 7000, 0);
      			return 1;
			}
    	}
    	else if(Team_LSTV(playerid)){
      		if (PlayerToPoint(30, playerid,781.77209500,-1330.31884800,12.68660500)){
	       		MoveDynamicObject(tvp, 773.89648400,-1330.31884800,12.68660500, 5.0);
	       		SetTimer("GateCloseCNN", 7000, 0);
	       		return 1;
       		}
	        if (PlayerToPoint(30, playerid,774.11425781,-1384.98632812,12.92022705)){
	       		MoveDynamicObject(tvp1, 765.11425781,-1384.98632812,12.92022705, 5.0);
	       		SetTimer("GateCloseCNN1", 7000, 0);
	       		return 1;
			}
    	}
    	else if(Team_USMC(playerid))
		{
      		if (PlayerToPoint(30, playerid,94.38630, 2071.39380, 18.95183)){
      		    MoveDynamicObject(usmc1, 94.38630, 2071.39380, 13.68660, 5.0);
	       		SetTimer("OpenDoorNG", 7000, 0);
	       		return 1;
	       	}
      		if (PlayerToPoint(30, playerid,1490.58777, -1501.39136, 15.16192)){
      		    MoveDynamicObject(usmc2, 1490.58777, -1501.39136, 9.7898, 5.0);
	       		SetTimer("OpenDoorNG2", 7000, 0);
	       		return 1;
	       	}
		}
		else if(Team_LAMD(playerid)){
	      	if (PlayerToPoint(30, playerid,1141.40002441,-1293.69995117,20.50000000)){
		       	MoveDynamicObject(hospitalgate, 1141.40002441,-1293.69995117,20.50000000, 1.5);
		       	SetTimer("GateClose4", 7000, 0);
		       	return 1;
	       }
		}
		else if(Team_Rusa(playerid)){
	      	if (PlayerToPoint(30, playerid,-1051.4542,-1313.1655,130.2029)){
	      		MoveDynamicObject(RejaRusa,-1051.4542,-1313.1655,124.7954, 2.0);
	      		SetTimer("GateCloseRusa3", 7000, 0);
	      		return 1;
	       }
		}
		else if(Team_Yakuza(playerid)){
	      	if (PlayerToPoint(30, playerid,321.5790,-1188.6155,76.3494)){
		       	MoveDynamicObject(yakuzagate,321.38, -1188.19, 72.29, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseYakuza", 7000, 0);
		       	return 1;
		       	}
	    }
	    	if(Info[playerid][pVIP] > 0 || Info[playerid][pAdminZC] >= 7){
	      	if (PlayerToPoint(30, playerid,2901.7615,-666.2679,10.8576)){
		       	MoveDynamicObject(rejavip,2909.96484, -666.21680, 16.67045, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseRejavip", 7000, 0);
		       	return 1;
		       	}
	    }
	    if(Team_Santana(playerid)){
	    if (PlayerToPoint(30, playerid,1245.7603,-764.0747,92.1280)){
		       	MoveDynamicObject(SantanaReja,1245.49, -766.67, 88.27, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseSantana", 7000, 0);
		       	return 1;
		       	}
	    }
		else if(Gobierno(playerid)){
	        if (PlayerToPoint(10, playerid,1286.73914, -2056.57129, 60.36075)){
	      		MoveDynamicObject(gobiernogate,1286.73914, -2056.57129, 54.92261, 5.0);
	            SetTimer("GateCloseGob", 7000, 0);
	            return 1;
			}
			if (PlayerToPoint(15, playerid,1391.29980469,-1629.89941406,12.52500343) || PlayerToPoint(15, playerid,1391.29980469,-1629.89941406,37.20010376)){
	      		MoveDynamicObject(gobiernogate1,1391.29980469,-1629.89941406,37.20010376, 5.0);
	      		SetTimer("GateCloseGob1", 7000, 0);
	      		return 1;
			}
	    }
	    else if(Team_Mecanicos(playerid)){
	    	if (PlayerToPoint(30, playerid,1051.63110, -1439.83557, 13.94245)){
		       	MoveDynamicObject(mecareja,1051.63110, -1439.83557, 11.08414, 2.0);
		       	SetTimer("GateCloseMecas", 7000, 0);
		       	return 1;
     		}
	    }
	   else if(Team_LCN(playerid)){
	    	if (PlayerToPoint(30, playerid,2106.68213, 1862.31934, 12.30965)){
		       	MoveDynamicObject(rejalcn,2106.68213, 1862.31934, 6.8501, 2.0);
		       	SetTimer("GateCloseLCN", 7000, 0);
		       	return 1;
     		}
	    }
	    if(Team_LCN(playerid)){
	    	if (PlayerToPoint(30, playerid,2107.68262, 1969.38855, 12.19972)){
		       	MoveDynamicObject(rejalcn2,2107.68262, 1969.38855, 6.8682, 2.0);
		       	SetTimer("GateCloseLCN2", 7000, 0);
		       	return 1;
     		}
	    }
	    if(Team_Alqaeda(playerid)){
	    if (PlayerToPoint(30, playerid,1023.6000, -371.7000, 75.3000)){
		       	MoveDynamicObject(AlqaedaReja,1023.6000, -371.7000, 69.6740, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseAlqaeda", 7000, 0);
		       	return 1;
		       	}
	    }
	    if(Team_CBP(playerid)){
	    if (PlayerToPoint(30, playerid,1269.97668, -1838.51514, 15.06336)){
		       	MoveDynamicObject(rejacia,1269.97668, -1838.51514, 9.61686, 2.0);
		       	SetTimer("GateCloseCia", 7000, 0);
		       	return 1;
		       	}
	    }
	    else if(Team_Judicial(playerid)){
	    if (PlayerToPoint(30, playerid,1457.14, -1505.88, 15.28)){
		       	MoveDynamicObject(sisporton,1457.1400, -1505.8800, 9.7435, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseSis", 7000, 0);
		       	return 1;
		       	}
	    }
	    else SendClientMessageEx(playerid, COLOR_ROJO,"No tienes la distancia suficiente para abrir un portón.");
	    return 1;
    }
   zcmd(sacarsangre, playerid, params[]){
        new giveplayerid;
        if(!sscanf(params, "d", giveplayerid)){
            if(OnDuty[playerid] == 0)   return SendClientMessageEx(playerid, COLOR_WHITE, "No estás de servicio.");
            if(IsPlayerConnected(giveplayerid)){
                if(Team_LAMD(playerid)){
                    if (ProxDetectorS(5.0, playerid, giveplayerid)){
            		    new Float:HP, string[128]; GetPlayerHealth(giveplayerid, HP);
            		    if(HP < 100) return SendClientMessageEx(playerid, COLOR_WHITE, "El paciente debe estar con el máximo de vida.");
            		    SetHP(giveplayerid, HP-80);
						SetPlayerDrunkLevel(giveplayerid, 3000);
						Blood += 80;
						format(string, sizeof(string), "* El doctor %s realiza una extracción de sangre a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						format(string, sizeof(string), "Información: Hay %d ml de sangre disponible.", Blood);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						SaveStuff();
            		} else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador debe estar cerca de usted.");
                } else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres médico.");
            } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sacarsangre (jugador)");
        return 1;
    }
    zcmd(curarse, playerid, params[]){
        if(!IsPlayerInRangeOfPoint(playerid,2.0,-198.0869,-1762.6725,675.7643)) return SendClientMessage(playerid,COLOR_GREY,"No estás en el hospital!");
        {
            {
                SendClientMessage(playerid,COLOR_SALMON,"En instantes, la pastilla hará efecto, por favor espere. . .");
                SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
                SetPlayerWeather(playerid,1);
            }
        }
        return 1;
    }
    zcmd(pcinfo, playerid, params[]){
        if(Team_LAMD(playerid)){
			new string[128];
        	ClearChatbox(playerid);
	        SendClientMessageEx(playerid, 0x00D535FF, "PCU (Loading ... )");
	        format(string, sizeof(string), "Sangre disponible: %d", Blood);
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	        format(string, sizeof(string), "Radiación TAC: No disponible");
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	        format(string, sizeof(string), "Fondos: No disponible");
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	        SendClientMessageEx(playerid, 0x00D535FF, "------------------------------");
		} else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres médico.");
		return 1;
	}
    zcmd(atar, playerid, params[]){
		if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás herido.");
		if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser nivel 2 para arriba.");
        if(Rope[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una cuerda.");
        new giveplayerid;
		if(!sscanf(params, "d", giveplayerid)){
            if(IsPlayerConnected(giveplayerid)){
                if(ProxDetectorS(4.0,playerid,giveplayerid)){
                    new string[128];
                    if(Tied[giveplayerid] == 0){
                        Tied[giveplayerid] = 1;
						format(string, sizeof(string), "* %s agarra una cuerda y ata a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
                    else{
                        Tied[giveplayerid] = 0;
						format(string, sizeof(string), "* %s agarra una cuerda y desata a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						TogglePlayerControllable(giveplayerid, 1);
                    }
                } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
            } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /atar (ID)");
        return 1;
    }
    zcmd(vendar, playerid, params[]){
		if(GetPVarInt(playerid, "Injured") == 0){
            if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser nivel 2 para arriba.");
            if(Rope[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes venda.");
            new giveplayerid;
			if(!sscanf(params, "d", giveplayerid)){
                if(IsPlayerConnected(giveplayerid)){
                    if(ProxDetectorS(4.0,playerid,giveplayerid)){
                        new string[90];
                        if(Blinded[giveplayerid] == 0){
                            Blinded[giveplayerid] = 1;
							format(string, sizeof(string), "* %s venda los ojos de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetPlayerCameraPos(giveplayerid,0.0,0.0,1000);
							SetPlayerCameraLookAt(giveplayerid,0.0,0.0,5000);
							Info[playerid][pRob]++;
                        }
                        else{
                            Blinded[giveplayerid] = 0;
							format(string, sizeof(string), "* %s desvenda los ojos de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetCameraBehindPlayer(giveplayerid);
                        }
                    } else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
                } else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
            } else return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendar (ID)");
        } else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás herido.");
		return 1;
    }
	zcmd(cajero, playerid,parms[])
	{
	    if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Debes loguear para utilizar este comando!");
	    if(!IsAtATM(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un cajero del banco o público.");

			if(Info[playerid][pTarjetaCredito] == 0)
            {
            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Debes tener una tarjeta para utilizar un cajero, ve a cualquier banco.");
            return 1;
            }

        SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{5CBA58}• Banco S.A.", "{FFFFFF}- Retirar\n{FFFFFF}- Depositar\n{FFFFFF}- Transferir\n{FFFFFF}- Balance", "Seleccionar", "Cancelar");
        return 1;
//******************************Sistema de Cheques*************************
	}
	zcmd(darcheque, playerid, params[]){
        if(!sscanf(params, "ui", params[0],params[1])){

            if(params[0] == playerid) return Message(playerid, COLOR_GRAD2, "[Atención]: ¡No puedes darte un cheque a ti mismo!");
            if(params[1] > Info[playerid][pAccount]) return Message(playerid, COLOR_GRAD2, "[Atención]: No puedes sobregirar un cheque!");
	        if(params[1] < 1 || params[1] > 1000000) { SendClientMessageEx(playerid, COLOR_GREY, "[Advertencia]: El monto no puede ser menor que 1 ni mayor que 1000000!"); return 1; }
			if(IsPlayerConnected(params[0])){
			    if(ProxDetectorS(5.0, playerid, params[0])){
			        new string[128];
					Info[playerid][pAccount] -= params[1];
			        Info[params[0]][pCheques] += params[1];
			        format(string, sizeof(string), "* %s saca su chequera, firma un cheque y se lo da a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
			        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        format(string, sizeof(string), "* Has dado un cheque por %d$ a %s.", params[1], GetPlayerNameEx(params[0]));
			        Message(playerid, COLOR_GRAD4, string);
			        format(string, sizeof(string), "* Has recibido un cheque por %d$ de %s.", params[1], GetPlayerNameEx(playerid));
			        Message(params[0], COLOR_GRAD4, string);
			        format(string, sizeof(string), "%s ha dado un cheque por $%d a %s.", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]), playerid);
		   		    Log("logs/- Cheques.log", string);
				} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos!");
			} else Message(playerid, COLOR_GRAD2, "Jugador no conectado!");
		} else Message(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/darcheque (usuario id) (cantidad){FFFFFF} para dar un cheque.");
        return 1;
    }
    zcmd(cobrarcheques, playerid, params[]){
        new string[128], total;
        if(!PlayerToPoint(30,playerid,1300.639160, -978.900024, 1087.904785)) return Message(playerid, COLOR_GRAD2, "[Atención]: No estás en el banco!");
		if(Info[playerid][pCheques] == 0) return Message(playerid, COLOR_FADE1, "Secretario: Disculpe señor/a, pero en nuestra base de datos no figura ningún cheque.");
		total = Info[playerid][pCheques];
		Info[playerid][pAccount] += total;
		format(string, sizeof(string), "Secretaria: Bien señor/a, tienes un total de %d para cobrar, este monto ya fue acreditado.", Info[playerid][pCheques]);
		Message(playerid, COLOR_FADE1, string);
		format(string, sizeof(string), "{2EDFFF}[Atención]{FFFFFF} %s Ha cobrado un cheque por un valor de {33AA33}${FFFFFF}%d!",GetPlayerNameEx(playerid), Info[playerid][pCheques]);
		ABroadCast(COLOR_AT, string, 2);
		Info[playerid][pCheques] = 0;
		return 1;
  	}
  	zcmd(vercheques, playerid, params[]){
		new string[128];
  		format(string, sizeof(string), "{2EDFFF}[Chequera]:{FFFFFF} Todos los cheques juntados tienen un monto en total de {33AA33}${FFFFFF}%d!", Info[playerid][pCheques]);
  		Message(playerid, COLOR_AT, string);
  		return 1;

	}
    zcmd(tarjeta, playerid, params[]){
        if(!IsPlayerInRangeOfPoint(playerid,10.0, 1300.634765, -983.107727, 1087.904785)) return SendClientMessage(playerid,COLOR_ROJO,"! {FFFFFF}No estás en el Banco S.A.");
		if(IsPlayerConnected(playerid))
    	{
    		if(Info[playerid][pTarjetaCredito] == 1)
    		{
    			SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes una cuenta registrada.");
    			return 1;
    		}
    		SendClientMessageEx(playerid, COLOR_YELLOW2, "¡Cuenta registrada!");
    		Info[playerid][pTarjetaCredito] = 1;
    	}
    	return 1;
    }
    zcmd(pctarjeta, playerid, params[]){
        if(!IsPlayerInRangeOfPoint(playerid,10.0, 184.278335, -109.432929, 992.935729)) return SendClientMessage(playerid,COLOR_ROJO,"! {FFFFFF}No estás en el banco de Palomino Creek.");
		if(IsPlayerConnected(playerid))
    	{
    		if(Info[playerid][pTarjetaCredito] == 1)
    		{
    			SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes una cuenta registrada.");
    			return 1;
    		}
    		SendClientMessageEx(playerid, COLOR_YELLOW2, "¡Cuenta registrada!");
    		Info[playerid][pTarjetaCredito] = 1;
    	}
    	return 1;
    }
  CMD:mcomprar(playerid, params[]){
	if (PlayerToPoint(10, playerid,1189.770629,-820.403442,1083.414428)){
		return SafeDialogEx(playerid, MENUMC, DIALOG_STYLE_LIST, "{CC0000}Mercado Negro","Puño Americano: $50\nMascara: $90\nGanzuas: $140\nSoga + Venda: $200", "Ok", "Cancelar");
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No estás en el mercado negro!");
	return 1;
 	}
	zcmd(ganzua, playerid, params[]){
 	    if(Ganzuas[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ganzúas.");
 	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres el conductor.");
 	    if(IsPlayerInAnyVehicle(playerid)){
		    new string[128], vehicleid;
 	    	format(string, sizeof(string), "* %s utiliza unas ganzúas y cruza los cables.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetTimerEx("SetVehicleEngine", 2500, 0, "dd",  vehicleid, playerid);
			GameTextForPlayer(playerid, "~p~haciendo puente.",2500,3);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo.");
		return 1;
	}
	CMD:sms(playerid, params[]){
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
		new string[128], phonenumb, text[100];
		if(sscanf(params, "ds[100]", phonenumb, text)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/sms (número) (texto){FFFFFF} para escribir un mensaje.");
		if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes un teléfono.");
		if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en prisión.");
		foreach(Player, i){
			if(Info[i][pPnumber] == phonenumb && phonenumb != 0){
				new giveplayerid = i;
				if(Mobile[giveplayerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador está en una llamada.");
				Mobile[playerid] = giveplayerid;
				if(IsPlayerConnected(giveplayerid)){
					if(giveplayerid != INVALID_PLAYER_ID){
						if(PhoneOnline[giveplayerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador tiene el teléfono apagado, intenta más tarde.");
						if(UnidentifedCall[playerid] == 1){
							format(string, sizeof(string), "[SMS]: %s. [Número Privado].", text,GetPlayerNameEx(playerid),Info[playerid][pPnumber]);
						}
						else{
							format(string, sizeof(string), "[SMS]: %s. [Número: %d]", text,GetPlayerNameEx(playerid),Info[playerid][pPnumber]);
						}
						SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
						SendClientMessageEx(playerid, COLOR_YELLOW, string);
						SendClientMessageEx(playerid, COLOR_WHITE, "Su SMS fue enviado correctamente al destino.");
						GameTextForPlayer(playerid, "~r~$-25", 5000, 1);
						GivePlayerCash(playerid,-25);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						Mobile[playerid] = INVALID_PLAYER_ID;
						if(strcmp(Info[giveplayerid][pAutoTextReply], "Nada", true) != 0){
							format(string, sizeof(string), "[SMS]: %s, Destinatario: %s [Auto Respuesta] (%d)", Info[giveplayerid][pAutoTextReply], GetPlayerNameEx(giveplayerid), Info[giveplayerid][pPnumber]);
							SendClientMessageEx(playerid, COLOR_YELLOW, string);
						}
						return 1;
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Su mensaje falló el envio, reintentelo más tarde, sepa disculpar las molestias.");
		return 1;
	}
	CMD:numero(playerid, params[]){
		if(Info[playerid][pLevel] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo los usuarios nivel 3 para adelante pueden usar este comando.");
		if(Info[playerid][pPhoneBook] == 1){
			new
				iTarget;
			if(sscanf(params, "d", iTarget)) {
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /numero (playerid)");
			}
			else if(IsPlayerConnected(iTarget)) {
				new
					szNumber[16 + MAX_PLAYER_NAME];
                if(UnidentifedCall[iTarget] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Número privado.");
				format(szNumber, sizeof(szNumber), "* %s (%i)", GetPlayerNameEx(iTarget), Info[iTarget][pPnumber]);
				SendClientMessageEx(playerid, COLOR_GRAD1, szNumber);
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un PhoneBook, comprá uno en una Electrónica.");
		return 1;
	}
	CMD:bebersprunk(playerid, params[]){
		if(Info[playerid][pSprunk] > 0){
			if( Info[playerid][pEstado] >= 1 || GetPVarInt(playerid, "Injured") == 1 || GetPVarInt(playerid, "EventToken") != 0){
				SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto ahora.");
				return 1;
			}
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes beber aqui, estás conduciendo.");
			new string[128];
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			format(string, sizeof(string), "* %s abre su sprunk para beberlo.", GetPlayerNameEx(playerid));
			ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "UsingSprunk", 1);
			Info[playerid][pSprunk]--;
			Info[playerid][pSuci] += 4;
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un sprunk, compralo en el 24 Horas.");
		return 1;
	}
	zcmd(estado, playerid, params[]) {
		if(EstadoPJ[playerid] == 1) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}Ya tienes un estado, use /qestado y coloque nuevamente /estado");
		if( !IsPlayerConnected( playerid ) ) return 0;

		if( !sscanf( params, "s[32]", params[ 0 ] ) ) {
			new szFormat[ 2 ][ 50 ];
			format( szFormat[ 0 ], 31, "%s", params[ 0 ] );
			format( szFormat[ 1 ], 49, "Tu nuevo estado es: {FF7477}%s", szFormat[ 0 ] );
			SendClientMessageEx( playerid, COLOR_BLANCO, szFormat[ 1 ] );
			EstadoPJ[playerid] = 1;

			giPlayerStatus[ playerid ] = Create3DTextLabel( szFormat[ 0 ], 0xFF7477FF, 1.0, 1.0, 1.0, 15.0, 0, 1 );

			Attach3DTextLabelToPlayer( giPlayerStatus[ playerid ], playerid, 0.0, 0.0, 0.3 );
		}

		return 1;
	}
	zcmd(qestado, playerid, params[]) {
		if(EstadoPJ[playerid] == 0) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}No tienes ningún estado, puedes ponerte uno con /estado");
		if( !IsPlayerConnected( playerid ) ) return 0;
		Delete3DTextLabel( giPlayerStatus[ playerid ] );
		SendClientMessageEx( playerid, COLOR_BLANCO, "Tu nuevo estado es: {FF7477}Ninguno" );
		EstadoPJ[playerid] = 0;
		return 1;
	}
	CMD:activarlinea(playerid, params[]){
	    if(!Team_LSTV(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte de FOX.");
	    if(InLive == 0){
	        SendClientMessageEx(playerid, COLOR_GREEN, "* Activaste el número 757, la línea está abierta, ahora la gente puede llamar.");
	        return InLive = 1;
		}
		else{
	        InLive = 0;
	        SendClientMessageEx(playerid, COLOR_GREEN, "* Desactivaste el número 757, ahora la línea está cerrada.");
		}
		return 1;
	}
	CMD:llamar(playerid, params[])
	{
		new string[128], phonenumb;

		if(sscanf(params, "d", phonenumb)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/llamar (número){FFFFFF} para realizar una llamada.");
		if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No puedes usar este comando mientras estás en prisión.");
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid,COLOR_WHITE,"No puedes usar tu teléfono.");
		if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un teléfono.");
		if(PhoneOnline[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu telefono está apagado.");
		if(Mobile[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_WHITE, " Ya se encuentra en una llamada.");
		if(Info[playerid][pJailed] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este numero no lo puedes usar en sancion.");
		format(string, sizeof(string), "* %s coge su teléfono.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerPlaySound(playerid, 3600, 0, 0, 0);
		if(phonenumb == 911){
            SetPlayerAttachedObject(playerid, 8, 330, 6);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SendClientMessageEx(playerid, COLOR_ALLDEPT, "Línea 911: Buenas señor/a, por favor díganos que servicio usted solicita, ¿Policia, médico, bombero o AININT?");
			Mobile[playerid] = 911;
			return 1;
		}
		if(phonenumb == 757){
            if(InLive == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "En este momento la línea está fuera de servicio u ocupada.");
			InLive = 0;
            Mobile[playerid] = 758;
			format(string,128,"Llamada entrante: Nombre: %s - Número: %d.", GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
			SendFamilyMessage(5, COLOR_YELLOW, string);
            SetPlayerAttachedObject(playerid, 8, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
            return SendClientMessageEx(playerid, COLOR_WHITE, "LSTV: Hola, estás en línea, desde este momento puedes hablar.");
		}
		else if(phonenumb == 3900){
		   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Bienvenido. ¿Tiene algúna noticia, quiere participar?");
		   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Déjenos un mensaje después de la señal, ¡hasta la vista!");
		  	SendClientMessageEx(playerid, COLOR_WHITE, "Biiip!");
		   	return Mobile[playerid] = 3901;
		}
		if(phonenumb == Info[playerid][pPnumber]) return SendClientMessageEx(playerid, COLOR_WHITE, " Está ocupado.");
		foreach(Player, i){
			if(Info[i][pPnumber] == phonenumb && phonenumb != 0){
				new giveplayerid = i;
				Mobile[playerid] = giveplayerid;
				if(IsPlayerConnected(giveplayerid)){
					if(giveplayerid != INVALID_PLAYER_ID){
						if(GetPVarInt(giveplayerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador está en el paintball arena no puede recibir llamadas.");
						if(PhoneOnline[giveplayerid] > 0){
							SendClientMessageEx(playerid, COLOR_WHITE, "Tono a apagado.");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if(Mobile[giveplayerid] != INVALID_PLAYER_ID){
							SendClientMessageEx(playerid, COLOR_WHITE, "Tono a ocupado.");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if (Mobile[giveplayerid] == INVALID_PLAYER_ID){
						    SetPlayerAttachedObject(playerid, 8, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
							format(string, sizeof(string), "¡Tu teléfono esta sonando!, Para contestar utilice: /Atender", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
							format(string, sizeof(string), "* El teléfono de %s suena. . .", GetPlayerNameEx(i));
							SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Ahora usa T, y habla por el chat por teléfono.");
							ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							CellTime[playerid] = 1;
       return 1;
						}
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Su llamada no puede darse por el número marcado, por favor, compruebe el número e inténtelo nuevamente.");
		return 1;
	}
	CMD:atender(playerid, params[]){
		new string[128];
		if(Mobile[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "  Ya estás en una llamada.");
		foreach(Player, i){
			if(Mobile[i] == playerid){
				Mobile[playerid] = i;
				SendClientMessageEx(i,  COLOR_WHITE, "Contestaron la llamada.");
				format(string, sizeof(string), "* %s extira su brazo derecho/izquierdo y contesta su teléfono.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetPlayerAttachedObject(playerid, 8, 330, 6);
				return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			}
		}
		return 1;
	}
	CMD:colgar(playerid,params[]){
		new string[128];
		if(Info[playerid][pEstado]!=0) return SendClientMessageEx (playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
		if(Mobile[playerid] == 758){
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 8);
			InLive = 1;
			SendClientMessageEx (playerid, COLOR_WHITE, "* LSTV: Gracias por llamar a FOX");
			return Mobile[playerid] = INVALID_PLAYER_ID;
		}
		new caller = Mobile[playerid];
		if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID)|| caller == 911 || caller == 3901){
			if(caller < 500){
				SendClientMessageEx(caller,  COLOR_GREY, "Colgaron el teléfono.");
				format(string, sizeof(string), "* %s guarda su celular.", GetPlayerNameEx(caller));
				ProxDetector(30.0, caller, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				CellTime[caller] = 0;
				Mobile[caller] = INVALID_PLAYER_ID;
			}
			CellTime[playerid] = 0;
			SendClientMessageEx(playerid,  COLOR_GREY, "Has colgado.");
			format(string, sizeof(string), "* %s guarda su celular.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(caller, 8);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 8);
			return 1;
		}
		SendClientMessageEx(playerid,  COLOR_WHITE, "Tu teléfono está en el bolsillo.");
		return 1;
	}
    zcmd(enmascarados, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(IsPlayerConnected(playerid))
	    if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");{
			SendClientMessageEx(playerid, COLOR_BLUE, "Enmascarados:");
			for(new i = 0; i < MAX_PLAYERS; i++) {
				if(IsPlayerConnected(i)) {
				    if(Info[i][pMaskuse] == 1) {
						new string[128];
						format(string, 128, "** ID: %d ** %s", i, GetPlayerNameEx(i));
						SendClientMessageEx(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
	
    zcmd(unirse, playerid, params[])
    {
		if(Info[playerid][pJob] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Escriba /renunciar y luego /unirse, y si eres VIP /trabajovip.");
		if(PlayerToPoint(2.0, playerid, 503.2709,-11.6231,1000.6797) || PlayerToPoint(2.0, playerid, 759.3899, 1443.2065, 1102.7413)){
	        SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Ahora soy tu jefe y tu trabajo es fácil, los precios de cada bebida están anotados y demás.");
	        new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tienes alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Bartender\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
			return Info[playerid][pJob] = 1;
		}
		else if (PlayerToPoint(3.0, playerid, 1314.190795,-1159.115112,23.628125)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Ahora trabajas para mi, lo cual simplemente debes vender estos celulares a un precio accesible.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tienes alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Vendedor de Celulares\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
			return Info[playerid][pJob] = 2;
		}
		else if (PlayerToPoint(3.0, playerid, 1764.77759,-2040.65979,13.53401)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Bienvenido a nuestra empresa, es hora de iniciar tu recorrido ya sea el 1 o el 2 por la ciudad de Los Ángeles.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Chofer de Autobuses\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
			return Info[playerid][pJob] = 3;
		}
		else if (PlayerToPoint(3.0, playerid, 369.119812,-119.137870,1001.492187)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Estas pizzas deben entregarse en tiempo y forma a nuestros clientes, suerte.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Pizzero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            Info[playerid][pChar] = 155;
			SetPlayerSkin(playerid, 155);
			return Info[playerid][pJob] = 4;
        }
		else if (PlayerToPoint(3.0, playerid, 2354.81323, -83.08443, 26.52765)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Mira colega, hay muchos pedidos constantemente, es solo ir y entregar los materiales.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Camionero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Palomino Creeck\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
			return Info[playerid][pJob] = 5;
		}
        else if(IsPlayerInRangeOfPoint(playerid,3.0,2210.134033,-2527.976562,13.5469)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Nuestros clientes necesitan productos para seguir vendiendo, es hora de trabajar.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Repartidor\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal e Ilegal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Mensual (Subsidio)\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob] = 6;
		}
        else if (PlayerToPoint(3.0, playerid, 2172.60107, -1903.82959, 13.64440)){
            if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes restricción de armas las 2 primeras horas de juego.");
            SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Colega, este trabajo no digo ser fácil pero evitemos conflictos con la policía, mucha suerte.");
            new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Fabricante de Armas\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Ilegal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");

            return Info[playerid][pJob] = 7;
		}
        else if (PlayerToPoint(3.0, playerid, 1752.7062,-1894.1708,13.5574)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Hay gente nueva por la ciudad o necesitan moverse por la ciudad, ponte en servicio e inicia.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Taxista\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob] = 8;
		}
        else if (PlayerToPoint(3.0, playerid, -382.2627,-1426.3954,26.1396)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Muy buenas ciudadano, espero que la granja sea lo tuyo, esto sera fácil de igual forma.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Granjero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Subsidio\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob] = 9;
		}
        else if (PlayerToPoint(3.0, playerid,2355.1594,-1169.2037,28.0057)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Mira, los clientes vienen solos pero al traficar la policía es algo molesta, ten suerte.");
            SendClientMessageEx(playerid, COLOR_FADE1, "Jefe dice: Por cierto, la ubicación de los paquetes están en esta hoja. {BDA5D9}-Dijo pasando dicha hoja-");
            new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Traficante de Drogas\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Ilegal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            SetPlayerCheckpoint(playerid, 646.7178,-511.4338,16.3359, 2);
            PlayerPlaySound(playerid, 1138, 0,0,0);
            return Info[playerid][pJob] = 10;
		}
        else if (IsPlayerInRangeOfPoint(playerid,3.0,1423.9009,-1355.9692,13.2810)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Estos chalecos son usados lo cual aún tienen algo de uso, suerte en la venta.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Vendedor de Chalecos Antibalas\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Ilegal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob] = 11;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,659.3577,-634.6320,16.3359)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Espero que seas bueno como artesano, te hará falta.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Artesano\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob] = 12;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,2043.81250, -1247.01160,23.9810)){
	    	SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Esperemos que te guste este trabajo, es fácil.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Jardinero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Subsidio\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            SetPlayerSkin(playerid, 73);
			return Info[playerid][pJob] = 13;
        }
	    else if (IsPlayerInRangeOfPoint(playerid,3.0,2420.0740, -1509.0592, 24.0213)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Los helados más ricos deben venderse, suerte en la venta y dales alegría a los chicos.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Vendedor de Helados\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob] = 14;
        }
	    else if (IsPlayerInRangeOfPoint(playerid,3.0,1685.6, -1944.73, 13.545)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Tienes un recorrido largo, pero verás que vale la pena.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Maquinista de Trenes\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob] = 15;
        }
	    else if (IsPlayerInRangeOfPoint(playerid,3.0,2195.75684,-1973.02844,13.51525)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Es importante mantener la ciudad limpia, suerte en el recorrido.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Basurero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob] = 16;
        }

		else SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "No estás en el lugar necesario para unirse al trabajo solicitado.");
		return 1;
	}
    zcmd(unirse2, playerid, params[])
    {
        if(Info[playerid][pVIP] != 5) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Necesitas credencial VIP nivel 5 para tener un segundo trabajo.");
		if(Info[playerid][pJob2] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes un segundo trabajo, escriba /unirse para ocupar el slot 1.");
		if(PlayerToPoint(2.0, playerid, 503.2709,-11.6231,1000.6797) || PlayerToPoint(2.0, playerid, 759.3899, 1443.2065, 1102.7413)){
	        SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Ahora soy tu jefe y tu trabajo es fácil, los precios de cada bebida están anotados y demás.");
	        new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tienes alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Bartender\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
			return Info[playerid][pJob2] = 1;
		}
		else if (PlayerToPoint(3.0, playerid, 1314.190795,-1159.115112,23.628125)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Ahora trabajas para mi, lo cual simplemente debes vender estos celulares a un precio accesible.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tienes alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Vendedor de Celulares\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
			return Info[playerid][pJob2] = 2;
		}
		else if (PlayerToPoint(3.0, playerid, 1764.77759,-2040.65979,13.53401)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Bienvenido a nuestra empresa, es hora de iniciar tu recorrido ya sea el 1 o el 2 por la ciudad de Los Ángeles.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Chofer de Autobuses\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
			return Info[playerid][pJob2] = 3;
		}
		else if (PlayerToPoint(3.0, playerid, 369.119812,-119.137870,1001.492187)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Estas pizzas deben entregarse en tiempo y forma a nuestros clientes, suerte.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Pizzero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            Info[playerid][pChar] = 155;
			SetPlayerSkin(playerid, 155);
			return Info[playerid][pJob2] = 4;
        }
		else if (PlayerToPoint(3.0, playerid, 2354.81323, -83.08443, 26.52765)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Mira colega, hay muchos pedidos constantemente, es solo ir y entregar los materiales.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Camionero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Palomino Creeck\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 1");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
			return Info[playerid][pJob2] = 5;
		}
        else if(IsPlayerInRangeOfPoint(playerid,3.0,2210.134033,-2527.976562,13.5469)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Nuestros clientes necesitan productos para seguir vendiendo, es hora de trabajar.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Repartidor\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal e Ilegal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Mensual (Subsidio)\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob2] = 6;
		}
        else if (PlayerToPoint(3.0, playerid, 2172.60107, -1903.82959, 13.64440)){
            if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes restricción de armas las 2 primeras horas de juego.");
            SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Colega, este trabajo no digo ser fácil pero evitemos conflictos con la policía, mucha suerte.");
            new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Fabricante de Armas\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Ilegal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");

            return Info[playerid][pJob2] = 7;
		}
        else if (PlayerToPoint(3.0, playerid, 1752.7062,-1894.1708,13.5574)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Hay gente nueva por la ciudad o necesitan moverse por la ciudad, ponte en servicio e inicia.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Taxista\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob2] = 8;
		}
        else if (PlayerToPoint(3.0, playerid, -382.2627,-1426.3954,26.1396)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Muy buenas ciudadano, espero que la granja sea lo tuyo, esto sera fácil de igual forma.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Granjero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Subsidio\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob2] = 9;
		}
        else if (PlayerToPoint(3.0, playerid,2355.1594,-1169.2037,28.0057)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Mira, los clientes vienen solos pero al traficar la policía es algo molesta, ten suerte.");
            SendClientMessageEx(playerid, COLOR_FADE1, "Jefe dice: Por cierto, la ubicación de los paquetes están en esta hoja. {BDA5D9}-Dijo pasando dicha hoja-");
            new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Traficante de Drogas\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Ilegal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            SetPlayerCheckpoint(playerid, 646.7178,-511.4338,16.3359, 2);
            PlayerPlaySound(playerid, 1138, 0,0,0);
            return Info[playerid][pJob2] = 10;
		}
        else if (IsPlayerInRangeOfPoint(playerid,3.0,1423.9009,-1355.9692,13.2810)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Estos chalecos son usados lo cual aún tienen algo de uso, suerte en la venta.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Vendedor de Chalecos Antibalas\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Ilegal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob2] = 11;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,659.3577,-634.6320,16.3359)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Espero que seas bueno como artesano, te hará falta.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Artesano\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob2] = 12;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,2043.81250, -1247.01160,23.9810)){
	    	SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Esperemos que te guste este trabajo, es fácil.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Jardinero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Subsidio\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            SetPlayerSkin(playerid, 73);
			return Info[playerid][pJob2] = 13;
        }
	    else if (IsPlayerInRangeOfPoint(playerid,3.0,2420.0740, -1509.0592, 24.0213)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Los helados más ricos deben venderse, suerte en la venta y dales alegría a los chicos.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Vendedor de Helados\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob2] = 14;
        }
	    else if (IsPlayerInRangeOfPoint(playerid,3.0,1685.6, -1944.73, 13.545)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Tienes un recorrido largo, pero verás que vale la pena.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Maquinista de Trenes\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob2] = 15;
        }
	    else if (IsPlayerInRangeOfPoint(playerid,3.0,2195.75684,-1973.02844,13.51525)){
		    SendClientMessage(playerid, COLOR_FADE1, "Jefe dice: Es importante mantener la ciudad limpia, suerte en el recorrido.");
		    new Trabajo[1000];
	        strcat(Trabajo, "{FFFFFF}¡Nuevo trabajo!, Te vamos a dejar toda la información necesaria sobre el trabajo que\n");
	        strcat(Trabajo, "{FFFFFF}te acabas de unir. Si tiene alguna duda de sus cmds, puedes verlos en /Ayuda y\n");
			strcat(Trabajo, "{FFFFFF}seleccionar {912828}trabajo {FFFFFF}para acceder a este mismo.");
			strcat(Trabajo, "\n\n\n\n");
			strcat(Trabajo, "{FFFFFF}Trabajo:{912828} Basurero\n");
			strcat(Trabajo, "{FFFFFF}Tipo:{912828} Legal\n");
			strcat(Trabajo, "{FFFFFF}Paga:{912828} Efectivo\n");
			strcat(Trabajo, "{FFFFFF}Ciudad:{912828} Los Ángeles\n");
			strcat(Trabajo, "{FFFFFF}Ranura:{912828} 2");
		    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{912828}Estadísticas del Trabajo", Trabajo, "Cerrar", "");
            return Info[playerid][pJob2] = 16;
        }

		else SendClientMessageEx(playerid, COLOR_BLANCO, "No estás en el lugar necesario para unirse al trabajo solicitado.");
		return 1;
	}
	zcmd(renunciar, playerid, params[])
	{
		if(Info[playerid][pJob] > 0)
		{
		    Info[playerid][pJob] = 0;
			return SendClientMessageEx(playerid, COLOR_WHITE, "* Has renunciado a tu trabajo, ya puedes obtener uno nuevo.");
		}
		else if(Info[playerid][pJob] == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Usted no tiene ningún trabajo, te recomendamos: /Buscartrabajo.");
		}
		return 1;
	}
	zcmd(renunciar2, playerid, params[])
	{
		if(Info[playerid][pJob2] > 0)
		{
		    Info[playerid][pJob2] = 0;
			return SendClientMessageEx(playerid, COLOR_WHITE, "* Has renunciado a tu trabajo, ya puedes obtener uno nuevo.");
		}
		else if(Info[playerid][pJob2] == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Usted no tiene un segundo trabajo, te recomendamos: /Buscartrabajo.");
		}
		return 1;
	}
	zcmd(cfuego, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] >= 6 || Info[playerid][pFactionModerator] == 1)
		{
	   new Float:X, Float:Y, Float:Z, Float:A;
	   GetPlayerPos(playerid, X, Y, Z);
	   GetPlayerFacingAngle(playerid, A);
	   new block = CreateObject(18691, X, Y, Z -2.5, 0.0, 0.0, A);
	   CreatedBlocks[CreatedBlock] = block;
	   CreatedBlock++;
	   SendClientMessage(playerid, COLOR_WHITE, "{FF0000}¡Fuego Creado!: {FFFFFF}Creaste un incendio, recuerda no abusar de este comando.");
	    }
	   return 1;
	}
	zcmd(qfuego, playerid, params[]){
       if(Team_BomberosBA(playerid))
	   for(new i = 0; i <= CreatedBlocks[i]; i++) DestroyObject(CreatedBlocks[i]);
	   return 1;
	}
	zcmd(vendertelefono, playerid, params[]){
        if(Info[playerid][pJob] != 2 && Info[playerid][pJob2] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres vendedor de móviles.");
		new giveplayerid, number, price;
		if(!sscanf(params, "ddd", giveplayerid, number, price)){
		    if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[JOB]:{FFFFFF} No estás cerca del jugador.");
		    if(IsPlayerConnected(giveplayerid)){
		        new string[128];
		        if(number > 999999 || number < 4000) return SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[JOB]:{FFFFFF} Número no puede ser mayor de 999999 y menor de 4000.");
		        if(price < 1 || price > 999999) return SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[JOB]:{FFFFFF}Precio entre 1 a 999999.");
                NumSeller[giveplayerid] = playerid;
				NumBuy[giveplayerid] = number;
				NumPrice[giveplayerid] = price;
				SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[JOB]:{FFFFFF} Ofreciste vender un teléfono");
				format(string, sizeof(string), "* %s te ofrece venderte el número %d por %d$, utiliza /aceptar telefono", GetPlayerNameEx(playerid), number, price);
				return SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE, string);
		    }
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendertelefono (ID) (número) (precio)");
        return 1;
    }
    zcmd(cosechar, playerid, params[]){
        new idcar = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 9 || Info[playerid][pJob2] == 9){
		    if(IsAHarvest(idcar)){
                if(DrugFarming[playerid] == 1) return SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[JOB]:{FFFFFF} Ya estás cosechando!");
	      	    DrugFarming[playerid] = 1;
				new randomize = random(sizeof(gDrugFarmVar));
	      		SetPlayerCheckpoint(playerid, gDrugFarmVar[randomize][0], gDrugFarmVar[randomize][1], gDrugFarmVar[randomize][2], 5.0);
	      		SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}________________________________________________________________________");
	      		SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}");
	       	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}>> [JOB]:{FFFFFF} Dirígete a los Checkpoints y cosecha lo que necesites.");
	       	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}>> [JOB]:{FFFFFF} Cuando quieras dejar de cosechar usa /dcosechar.");
	       	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}________________________________________________________________________");
	       	} else return SendClientMessageEx(playerid, COLOR_GRAD2, "{2EDFFF}[JOB]:{FFFFFF} No estás en una cosechadora!");
	    } else SendClientMessageEx(playerid, COLOR_WHITE, "No eres Granjero!");
        return 1;
    }
    zcmd(dcosechar, playerid, params[]){
        new idcar = GetPlayerVehicleID(playerid);
        if(!IsAHarvest(idcar)) return SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[JOB]:{FFFFFF} No estás en una cosechadora.");
        if(DrugFarming[playerid] == 1){
	  	    if(DrugFarming[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[JOB]:{FFFFFF} No estás cosechando.");
	  	    DrugFarming[playerid] = 0;
	  	    SetVehicleToRespawn(idcar);
	  	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}[JOB]:{FFFFFF} Dejaste de cosechar! Puedes ver los Kg que hiciste (/cuenta).");
	  	    DisablePlayerCheckpoint(playerid);
	    } else SendClientMessageEx(playerid, COLOR_WHITE, "No estás cosechando.");
        return 1;
    }
    //*******************Google*******************
    zcmd(google, playerid, params[]){
		if(PlayerToPoint(20.0,playerid,1215.70789, -1425.85559, 13.15300)){
		 	return SafeDialogEx(playerid, GOOGLE, DIALOG_STYLE_INPUT, "{FFFFFF}• Cibernéticos", "             {FFFFEE}WWW.{0077AA}G{FF2200}O{EE9900}O{0077AA}G{338800}L{FF2200}E{FFFFEE}.COM","Buscar","Cerrar");
		}
		return 1;
	}
    //*******************Mecanicos*******************
    zcmd(menu, playerid, params[]){
        if(Team_Mecanicos(playerid)) {
     		if(OnDuty[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás de servicio.");
	    	return SafeDialogEx(playerid, MECANICO_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Menú de Mecánicos", "Repararaciones\nGasolina\nTunning", "Seleccionar", "Cancelar");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "No eres mecánico.");
		return 1;
    }
    zcmd(comprar, playerid, params[]){
		if (PlayerToPoint(10, playerid,-22.3260,-138.6221,1003.5469)||PlayerToPoint(20, playerid,-25.6448,-56.6718,1003.5469)||PlayerToPoint(20, playerid,-29.3554,-28.8020,1003.5573)|| IsAt247(playerid)){
  			return SafeDialogEx(playerid, STOREMENU, DIALOG_STYLE_LIST, "{2EDFFF}24 Horas", "Loteria\t\t\t$10\nSpray\t\t\t$100\nCigarros\t\t$40\nEncendedor\t\t$20\nFlores\t\t\t$7\nSprunk\t\t\t$8\nSeguro Alarma\t\t$2.000\nSeguro Industrial\t$4.500", "Comprar", "Cancelar");
		}
		if (PlayerToPoint(10, playerid,1006.0530,52.7181,55.3221)){
			return SafeDialogEx(playerid, TIENDA_ELEC, DIALOG_STYLE_LIST, "{2EDFFF}Electrónica","Teléfono\t\t$1500\nPhoneBook\t\t$1300\nCámara\t\t\t$900\nRadio Portable\t\t$1100\nIpodMusic\t\t$1700\nBoombox\t\t$3000", "Comprar", "Salir");
		}
		return 1;
    }
    zcmd(lavarropa, playerid, params[]){
		if(PlayerToPoint(10.0,playerid,1084.755004, -768.656188, 1084.589233) || PlayerToPoint(10.0,playerid,1084.752197, -760.179504, 1084.589233))
  			{
         		if(CheckMoney(playerid, 150))
         	{
                new string[128];
            	if(Info[playerid][pSuci] < 5) return SendClientMessageEx(playerid, COLOR_SUCIEDAD, "Suciedad: {FFFFFF}En estos momentos no hará faltar lavar tu ropa limpia, vuelva más tarde.");
            	format(string, sizeof(string), "* %s comienza a sacarse la ropa, acto seguido, este la mete en el lavarropas.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	SendClientMessageEx(playerid, COLOR_GREY, "* Su ropa comenzó a lavarse, espere un minuto por favor. . .");
            	SetTimerEx("LavadoraTienda", 30000, false, "i", playerid);
            	if(Info[playerid][pSex] == 1) Skin(playerid, 252);
        	}
        	else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en una lavandería o en tu casa para lavar tu ropa.");
        	return 1;
		}
		if(!IsAtLav(playerid)){
			new string[128];
            if(Info[playerid][pSuci] < 5) return SendClientMessageEx(playerid, COLOR_SUCIEDAD, "Suciedad: {FFFFFF}En estos momentos no hará faltar lavar tu ropa limpia.");
           	format(string, sizeof(string), "* %s comienza a sacarse la ropa, acto seguido, este la mete en el lavarropas.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  	        SendClientMessageEx(playerid, COLOR_GREY, "* Su ropa comenzó a lavarse, espere un minuto por favor. . .");
  	        SetTimerEx("LavadoraCasa", 30000, false, "i", playerid);
  	        if(Info[playerid][pSex] == 1) Skin(playerid, 252);
		}
		return 1;
    }
    zcmd(comprararmas, playerid, params[]){
		if (PlayerToPoint(20, playerid,314.258117,-133.566314,999.601562)||PlayerToPoint(20, playerid,295.89,-80.81,1001.52)||PlayerToPoint(20, playerid,313.3958,-138.9780,1004.0625)){
		return SafeDialogEx(playerid, DIALOG_AMMU, DIALOG_STYLE_LIST, "{2EDFFF}Ventas de armas legales","Brass Knuckles(25$)\nBate de Beisbol(50$)\nDesert Eagle (10000$)\nMP5(25000$)", "Comprar", "Salir");
		}
	return 1;
	}
       zcmd(cropa, playerid, params[]){
        if(!IsAtClothShop(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en una tienda de Ropa.");
        if(IsPlayerConnected(playerid)){
            ShowModelSelectionMenu(playerid, skinlist, "Ropa", 0xFFFFFFFF, 0xDFDFDFFF, 0xD3D3D3FF);
        }
        else SendClientMessageEx(playerid, COLOR_WHITE, "No estás conectado.");
        return 1;
    }
    //*************************************Sistema de Ídiomas para facciones*************************************
    zcmd(ale, playerid, params[]) // 1 Aleman.
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Debes loguear para utilizar este comando!");
	        if(Info[playerid][pAleman] == 1) // ALEPH.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ale (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pAlemanSkill] <100) {Info[playerid][pAlemanSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 17 || Info[i][pMember] == 17 || Info[i][pAleman] == 1) // ALEPH.
							{
					    		format(string, sizeof(string), "%s dice en alemán: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: ¿..........?", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE1, string);
							}

						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "No puedes hablar en el mismo idioma si no perteneces a la facción de dicho acento!");
			}
		}
		return 1;
	}
	zcmd(ing, playerid, params[]) // 2. Inglés.
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Debes loguear para utilizar este comando!");
	        if(Info[playerid][pLeader] == 18 || Info[playerid][pMember] == 18 || Info[playerid][pIngles] == 1) // SANTANA.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ing (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pInglesSkill] <100) {Info[playerid][pInglesSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 18 || Info[i][pMember] == 18 || Info[i][pIngles] == 1) // SANTANA.
							{
					    		format(string, sizeof(string), "%s dice en inglés: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: ¿..........?", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "No puedes hablar en el mismo idioma si no perteneces a la facción de dicho acento!");
			}
		}
		return 1;
	}
	zcmd(ita, playerid, params[]) // 3. Italiano.
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Debes loguear para utilizar este comando!");
	        if(Info[playerid][pLeader] == 15 || Info[playerid][pMember] == 15 || Info[playerid][pItaliano] == 1) // LCN.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ita (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pItalianoSkill] <100) {Info[playerid][pItalianoSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 15 || Info[i][pMember] == 15 || Info[i][pItaliano] == 1) // LCN.
							{
					    		format(string, sizeof(string), "%s dice en italiano: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: ¿..........?", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "No puedes hablar en el mismo idioma si no perteneces a la facción de dicho acento!");
			}
		}
		return 1;
	}
//----------------------------------------------------------------------------//
	zcmd(rus, playerid, params[]) // 4. Rusos.
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Debes loguear para utilizar este comando!");
	        if(Info[playerid][pLeader] == 14 || Info[playerid][pMember] == 14 || Info[playerid][pRuso] == 1) // Rusos.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /rus (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pRusoSkill] <100) {Info[playerid][pRusoSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 14 || Info[i][pMember] == 14 || Info[i][pRuso] == 1) // RUSO.
							{
					    		format(string, sizeof(string), "%s dice en ruso: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: ¿..........?", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "No puedes hablar en el mismo idioma si no perteneces a la facción de dicho acento!");
			}
		}
		return 1;
	}
//----------------------------------------------------------------------------//
	zcmd(jap, playerid, params[]) // 5. Japonés.
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Debes loguear para utilizar este comando!");
	        if(Info[playerid][pLeader] == 16 || Info[playerid][pMember] == 16 || Info[playerid][pJapones] == 1) // YKZ.
			{
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /jap (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pJaponesSkill] <100) {Info[playerid][pJaponesSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 16 || Info[i][pMember] == 16 || Info[i][pJapones] == 1) // YKZ.
							{
					    		format(string, sizeof(string), "%s dice en japonés: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: ¿..........?", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "No puedes hablar en el mismo idioma si no perteneces a la facción de dicho acento!");
			}
		}
		return 1;
	}
	zcmd(ara, playerid, params[]) // 6 Arabe.
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Debes loguear para utilizar este comando!");
	        if(Info[playerid][pLeader] == 19 || Info[playerid][pMember] == 19 || Info[playerid][pArabe] == 1) // I.S.I.S
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ara (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pArabeSkill] <100) {Info[playerid][pArabeSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 19 || Info[i][pMember] == 19 || Info[i][pArabe] == 1) // I.S.I.S
							{
					    		format(string, sizeof(string), "%s dice en árabe: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE1, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: ¿..........?", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE1, string);
							}

						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "No puedes hablar en el mismo idioma si no perteneces a la facción de dicho acento!");
			}
		}
		return 1;
	}
 	zcmd(acento, playerid, params[])
	{
		new accent;
		if(sscanf(params, "d", accent)){
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
		    SendClientMessageEx(playerid, COLOR_WHITE, "");
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación: {2EDFFF}/Acento ID");
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Ejemplo: {2EDFFF}/Acento 1");
			SendClientMessageEx(playerid, COLOR_WHITE, "");
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Acentos: {7D997D}[1]Normal, [2]Britanico, [3,4,5]Asiatico, [6]Venezolano, [7]Peruano, [8]Ruso, [9]Americano");
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Acentos: {7D997D}[10]Español, [11]Colombiano, [12]Francés, [13]Italiano, [14]Gangster, [15]Uruguayo");
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Acentos: {7D997D}[16]Árabe, [17]Argentino, [18]Chileno, [19]Cubano, [20]Israeli, [21]Alemán, [22]Hippie");
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Acentos: {7D997D}[23]Ingles");
			SendClientMessageEx(playerid, COLOR_WHITE, "");
			return 1;
		}
		switch(accent){
			case 1:{
				Info[playerid][pAccent] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{FF0000} Ninguno" );
			}
			case 2:{
				Info[playerid][pAccent] = 2;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Britanico" );
			}
			case 3:{
				Info[playerid][pAccent] = 3;
				Info[playerid][pJapones] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Japones (/Jap (Texto)" );
			}
			case 4:{
				Info[playerid][pAccent] = 4;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Chino" );
			}
			case 5:{
				Info[playerid][pAccent] = 5;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Koreano" );
			}
			case 6:{
				Info[playerid][pAccent] = 6;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Venezolano" );
			}
			case 7:{
				Info[playerid][pAccent] = 7;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Peruano" );
			}
			case 8:{
				Info[playerid][pAccent] = 8;
				Info[playerid][pRuso] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Ruso (/Rus (Texto)" );
			}
			case 9:{
				Info[playerid][pAccent] = 9;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Americano" );
			}
			case 10:{
				Info[playerid][pAccent] = 10;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Español" );
			}
			case 11:{
				Info[playerid][pAccent] = 11;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Colombiano" );
			}
			case 12:{
				Info[playerid][pAccent] = 12;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Francés" );
			}
			case 13:{
				Info[playerid][pAccent] = 13;
				Info[playerid][pItaliano] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Italiano (/Ita (Texto)" );
			}
			case 14:{
				Info[playerid][pAccent] = 14;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Gangster" );
			}
			case 15:{
				Info[playerid][pAccent] = 15;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Uruguayo" );
			}
			case 16:{
				Info[playerid][pAccent] = 16;
				Info[playerid][pArabe] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Arabe (/Ara (Texto)" );
			}
			case 17:{
				Info[playerid][pAccent] = 17;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Argentino" );
			}
			case 18:{
				Info[playerid][pAccent] = 18;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Chileno" );
			}
			case 19:{
				Info[playerid][pAccent] = 19;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Cubano" );
			}
			case 20:{
				Info[playerid][pAccent] = 20;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Israeli" );
			}
			case 21:{
				Info[playerid][pAccent] = 21;
				Info[playerid][pAleman] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Alemán (/Ale (Texto)" );
			}
			case 22:{
				Info[playerid][pAccent] = 22;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Hippie." );
			}
			case 23:{
				Info[playerid][pAccent] = 23;
				Info[playerid][pIngles] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Acento cambiado!:{7D997D} Inglés (/Ing (Texto)" );
			}
		}
		return 1;
	}
	CMD:me(playerid, params[]){
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/me (texto){FFFFFF} para realizar la acción de tu personaje.");
  		new string[128];
		format(string, sizeof(string), "* %s %s.", GetPlayerNameEx(playerid), params);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	CMD:ame(playerid, params[]){
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/ame (texto){FFFFFF} para realizar la acción de tu personaje.");
  		new string[128];
		format(string, sizeof(string), "* a %s %s.", GetPlayerNameEx(playerid), params);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	CMD:b(playerid, params[]){
		if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logueado.");
		if(papilla[playerid] == 1) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Estás en servicio administrativo, en este caso, utilice /aa");
		if(C_OOC[playerid] == 0) return SendClientMessage(playerid, COLOR_ROJO,"• {FFFFFF}Te retiraron el permiso de hablar mediante /b por varios minutos.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/b (texto){FFFFFF} para hablar OOC.");
		new string[40 + 128];
		format(string, sizeof(string), "(OOC - ID: %d){FFFFFF} %s: %s", playerid, GetPlayerNameEx(playerid), params);
		ProxDetector(10.0, playerid, string,COLOR_ROJO,COLOR_ROJO,COLOR_ROJO,COLOR_ROJO,COLOR_ROJO);
		C_OOC[playerid] = 1;
		SetTimerEx("TiempoB", 120000, false, "i", playerid);
		return 1;
	}
	zcmd(intentar, playerid, params[])
    {
        if(Intentar[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Espera 10 segundos para volver a utilizar este comando!");
        new randa = random(2)+1;
        if(!sscanf(params, "s[128]", params[0]))
        {
            new string[128];
			if(Info[playerid][pMaskuse] == 1)
			{
					if(randa == 1)
					{
						format(string, sizeof(string), "{00CC33}* Desconocido intenta %s y lo logra", params[0]);
						ProxDetector(3.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
					}
					else
					{
						format(string, sizeof(string), "* Desconocido intenta %s pero falla", params[0]);
						ProxDetector(3.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
					}
					Intentar[playerid] = 1;
					SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
			}
			else
			{
				    if(randa == 1)
					{
						format(string, sizeof(string), "{00CC33}* %s intenta %s y lo logra", GetPlayerNameEx(playerid), params[0]);
						ProxDetector(3.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
					}
					else
					{
						format(string, sizeof(string), "* %s intenta %s pero falla", GetPlayerNameEx(playerid), params[0]);
						ProxDetector(3.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
					}
					Intentar[playerid] = 1;
					SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
			}
		} else SendClientMessage(playerid, COLOR_WHITE, "Utilize: /intentar <Acción>");
		return 1;
    }
 	CMD:aa(playerid, params[])
	{
     if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(Info[playerid][pAdminZC] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} No tienes acceso a usar este comando.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /aa (texto)");
		new string[40 + 128];
		if(Info[playerid][pAdminZC] == 2) format(string, sizeof(string), "[Staff - ID: %d]{FFFFFF} %s: %s", playerid, GetPlayerNameEx(playerid), params);
		else format(string, sizeof(string), "(Staff - ID: %d){FFFFFF} %s: %s", playerid, GetPlayerNameEx(playerid), params);
		ProxDetector(20.0, playerid, string,COLOR_AT,COLOR_AT,COLOR_AT,COLOR_AT,COLOR_AT);
		SetPlayerChatBubble(playerid,string,COLOR_AT,60.0,5000);
		return 1;
	}
 	CMD:infos(playerid, params[])
	{
     if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No tienes permiso de utilizar este cmd administrativo.");
		new Informaciones[2000];
		strcat(Informaciones, "{FFFFFF}(/Info 1):\t{FCFF03}<•> {FFFFFF}Visite nuestro sitio web {FCFF03}www.titaniumgamers.com{FFFFFF} para ver novedades, contenidos y otras secciones de interés.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 2):\t{FCFF03}<•> {FFFFFF}Para ver nuestras mejoras en la comunidad, use {FCFF03}/actualizaciones{FFFFFF} y allí verás dichas mejoras.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 3):\t{FCFF03}<•> {FFFFFF}Únete en nuestro grupo {FCFF03}www.facebook.com/groups/ATrp.oficial{FFFFFF} y comparte contenidos con todos.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 4):\t{FCFF03}<•> {FFFFFF}Nuestra página de facebook es {FCFF03}www.facebook.com/ATrp.oficial{{FFFFFF} donde hay mayor información las 24hs.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 5):\t{FCFF03}<•> {FFFFFF}Si tienes alguna duda del servidor, recuerda utilizar {FCFF03}/duda{FFFFFF} y esperar respuetas de staff/usuarios.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 6):\t{FCFF03}<•> {FFFFFF}Si necesita soporte administrativo no dudes en solicitarlo con {FCFF03}/soporte{FFFFFF} y esperar con moderación.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 7):\t{FCFF03}<•> {FFFFFF}¿Viste a algún usuario con irregularidades?, Reportelo con {FCFF03}/re (id/usuario) (razón){FFFFFF} y espere.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 8):\t{FCFF03}<•> {FFFFFF}Conéctate en nuestro {FCFF03}/ts3{FFFFFF} y charla con tus amigos y usuarios de la comunidad.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 9):\t{FCFF03}<•> {FFFFFF}¿Quieres comparar paquete(s) VIP?, En {FCFF03}/infovip{FFFFFF} puedes ver todos los precios y beneficios por niveles.\n");
		strcat(Informaciones, "{FFFFFF}(/Info 10):\t{FCFF03}<•> {FFFFFF}¡No olvides compartirnos para dar a conocer la comunidad, con esto, logramos crecer juntos!\n");
		ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "• Informaciones a Publicitar (IG)", Informaciones, "Cerrar", "");
		return 1;
	}
    zcmd(c, playerid, params[])
    {
        if(Muted[playerid] == 1) return	SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "* No puedes hablar estás silenciado.");
		if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás logueado.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/c (texto){FFFFFF} para hablar fuera del teléfono.");
		new string[40 + 128];
		format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), params);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 1;
	}
    zcmd(do, playerid, params[]){
        if(!isnull(params)){
            new string[158];
            if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "* %s (( Desconocido )).", params);
			else format(string, sizeof(string), "* %s [%s].", params, GetPlayerNameEx(playerid));
            return ProxDetector(30.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/do (texto){FFFFFF} para el entorno.");
        return 1;
    }
    zcmd(s, playerid, params[]){
		if(!isnull(params)){
		    new string[128];
            if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "Desconocido susurra: %s", params);
			else format(string, sizeof(string), "%s susurra: %s", GetPlayerNameEx(playerid), params);
            ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			format(string, sizeof(string), "(susurro) %s", params);
			return SetPlayerChatBubble(playerid,string,COLOR_WHITE,5.0,5000);
        } else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/s (texto){FFFFFF} para susurrar.");
        return 1;
    }
	zcmd(g, playerid, params[]){
        if(!isnull(params)){
            new string[128];
            if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "Desconocido grita: ¡¡ %s !!", params);
			else format(string, sizeof(string), "%s grita: %s!", GetPlayerNameEx(playerid), params);
            ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			format(string, sizeof(string), "(grito) %s!", params);
			return SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
        } else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/g (texto){FFFFFF} para gritar.");
        return 1;
    }
    zcmd(ao, playerid, params[]){
     if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted aún no está conectado.");
        if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ao (Comunicación global)");
		else if(Info[playerid][pAdminZC] == 3){
			new string[40 + 128];
			format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
			OOCOff(COLOR_VERDE_AGUA,string);
		}
		else if(Info[playerid][pAdminZC] == 4){
			new string[40 + 128];
			format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
			OOCOff(COLOR_VERDE_AGUA,string);
		}
		else if(Info[playerid][pAdminZC] == 5){
		new string[40 + 128];
		format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
		OOCOff(COLOR_VERDE_AGUA,string);
		}
		else if(Info[playerid][pAdminZC] == 6){
		new string[40 + 128];
		format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
		OOCOff(COLOR_VERDE_AGUA,string);
		}
		else if(Info[playerid][pAdminZC] == 7 ){
		new string[40 + 128];
		format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
		OOCOff(COLOR_VERDE_AGUA,string);
		}
		else if(Info[playerid][pAdminZC] == 8 ){
		new string[40 + 128];
		format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
		OOCOff(COLOR_VERDE_AGUA,string);
		}
		else if(Info[playerid][pAdminZC] == 9 ){
			new string[40 + 128];
			format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
			OOCOff(COLOR_VERDE_AGUA,string);
		}
		else if(Info[playerid][pAdminZC] == 10 ){
			new string[40 + 128];
			format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
			OOCOff(COLOR_VERDE_AGUA,string);
		}
		else if(Info[playerid][pAdminZC] == 11 ){
			new string[40 + 128];
			format(string, sizeof(string), "(Inf. Global){FFFFFF}  %s: %s", GetPlayerNameEx(playerid), params);
			OOCOff(COLOR_ROJO_BORDO,string);
  }
        return 1;
    }
  zcmd(a, playerid, params[]){
        if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted aún no está conectado.");
        if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        if(noac == 1 && Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "El Chat administrativo está bloqueado.");
        //if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Al estar fuera de servicio administrativo, eres un usuario más.");
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Escribe {5ABAFF}/a (mensaje){FFFFFF} para hablar por el chat de administración.");
       	if(Info[playerid][pAdminZC] == 1){
			new string[128];
			format(string, sizeof(string), "Staff de Licencia %s: %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_BLANCO,string);
		}
		else if(Info[playerid][pAdminZC] == 2){
			new string[128];
			format(string, sizeof(string), "{660066}Mod a Prueba %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_MORADO,string);
		}
		else if(Info[playerid][pAdminZC] == 3){
			new string[128];
			format(string, sizeof(string), "{660066}Mod Global %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_MORADO,string);
		}
		else if(Info[playerid][pAdminZC] == 4){
			new string[128];
			format(string, sizeof(string), "{33FFFF}Admin Principiante %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_CELESTE,string);
		}
		else if(Info[playerid][pAdminZC] == 5){
			new string[128];
			format(string, sizeof(string), "{33FFFF}Admin General %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_CELESTE,string);
		}
		else if(Info[playerid][pAdminZC] == 6){
			new string[128];
			format(string, sizeof(string), "{FCFF03}Enc. Facciones %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_AMARILLO,string);
		}
		else if(Info[playerid][pAdminZC] == 7){
			new string[128];
			format(string, sizeof(string), "{33FFFF}Admin Superior %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_CELESTE,string);
		}
		else if(Info[playerid][pAdminZC] == 8){
			new string[128];
			format(string, sizeof(string), "{33FFFF}Admin Técnico %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_CELESTE,string);
		}
		else if(Info[playerid][pAdminZC] == 9){
			new string[128];
			format(string, sizeof(string), "{FF0000}Sub-Dueño %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_ROJO,string);
		}
		else if(Info[playerid][pAdminZC] == 10){
			new string[128];
			format(string, sizeof(string), "{FF0000}Dueño %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_ROJO,string);
		}
		else if(Info[playerid][pAdminZC] == 11){
			new string[128];
			format(string, sizeof(string), "{CC0000}Programador %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_ROJO_BORDO,string);
		}
		else if(Info[playerid][pAdminZC] >= 12){
			new string[128];
			format(string, sizeof(string), "{CC0000}INDEFINIDO %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_ROJO_BORDO,string);
		}
		else if(Info[playerid][pAdminZC] != 12){
			new string[128];
			format(string, sizeof(string), "{CC0000}StaffRFE %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_ROJO_BORDO,string);
		}
        return 1;
//*****************************************Chat privado para fundadores, dueños y sub-dueños*****************************************
}
  zcmd(ca, playerid, params[]){
        if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted aún no está conectado.");
        if(Info[playerid][pAdminZC] < 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes autorización de usar éste comando.");
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ca (Chat para administración)");
       	else if(Info[playerid][pAdminZC] == 11){
			new string[128];
			format(string, sizeof(string), "{CC0000}Programador %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_ROJO_BORDO,string);
		}
        return 1;
//********Crear regalo********
}
CMD:crearregalo(playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 9)
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_RED, "[ERROR]: No puedes hacer esto estando en un vehículo.");
		new string[128], Float:Position[4];
		if(dynamicgift == 0)
		{
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			dynamicgift = CreateDynamicObject(19054, Position[0], Position[1], Position[2]-0.4, 0.0, 0.0, Position[3], -1, -1, -1, 200.0);
			dynamicgift3DText = CreateDynamic3DTextLabel("¡Regalo de Bienvenida!\n{2EDFFF}/Regalo",COLOR_YELLOW,Position[0], Position[1], Position[2]+0.25,8.0);
			SetPlayerPos(playerid, Position[0], Position[1], Position[2]+3);
			format(string, sizeof(string), "[Administración]: %s pusó un regalo temporal.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_ORANGE, string, 1337);
		}
		else
		{
			DestroyDynamicObject(dynamicgift);
			dynamicgift = 0;
			DestroyDynamic3DTextLabel( Text3D:dynamicgift3DText );
			format(string, sizeof(string), "[Administración]: %s eliminó un regalo temporal.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_ORANGE, string, 1337);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No tienes autorización y/o no perteneces a la administración.");
	return 1;
}

CMD:regalorerere(playerid, params[])  //
{
	new string[128];
	if(VIPGifts == 0 && Info[playerid][pVIP] < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{2EDFFF}(Inf. CMD):{FFFFFF} El comando {2EDFFF}/Regalo{FFFFFF} fue desactivado!");
	if(IsPlayerInRangeOfPoint(playerid, 3.0,799.3140,-1419.6476,1016.4688) || (playerid, 3.0,2376.4890, 1115.3467, 34.9547))
	{
		if(Info[playerid][pVIP] >= 0)
		{
	        if(Info[playerid][pGiftTime] != 0){
				format(string, sizeof(string), "* Necesitas esperar %i hora(s) para abrir de nuevo el regalo.", Info[playerid][pGiftTime] / 3600);
				return SendClientMessageEx(playerid, COLOR_WHITE, string);
	        }
			format(string, sizeof(string), "* %s abre su regalo de bienvenida que Absolute Titanium dejó.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            Info[playerid][pGiftTime] = 108000;
			GiftPlayer(playerid);
		}
	}
	else if(dynamicgift != 0)
	{
		new Float:Position[3];
		GetDynamicObjectPos(dynamicgift, Position[0], Position[1], Position[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
		{
			if(Info[playerid][pLevel] >= 1)
			{
	        	if(Info[playerid][pGiftTime] != 0){
					format(string, sizeof(string), "* Necesitas esperar %i hora(s) para abrir de nuevo el regalo.", Info[playerid][pGiftTime] / 3600);
					return SendClientMessageEx(playerid, COLOR_WHITE, string);
	       	 	}
				format(string, sizeof(string), "* %s mira el interior del regalo.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                Info[playerid][pGiftTime] = 18000;
				return GiftPlayer(playerid);
			}
			else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
		}
	}
	return 1;
}
CMD:vipregalo(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	new string[128];
    if(Info[playerid][pAdminZC] >= 10)
    {
     	if(VIPGifts == 0)
     	{
           	VIPGifts = 1;
           	new sString[128];
			format( sString, sizeof( sString ), "{FFFF00}[Club VIP Informes]:{FFFFFF} %s quiere que vengas al {FFFF00}Club VIP{FFFFFF} para darte un regalo.", GetPlayerNameEx(playerid));
			BroadCast(AMARILLO_ADMIN, sString);
			VIPGiftsTimeLeft = 20;
			format(VIPGiftsName, sizeof(VIPGiftsName), "%s", GetPlayerNameEx(playerid));
		}
		else
		{
		    VIPGifts = 0;
		    new sString[128];
	   		format( sString, sizeof( sString ), "[Administración]: %s ha deshabilitado el comando /regalo", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_GENERAL, sString, 1337 );
			format(string, sizeof(string), "{FFFF00}[Club VIP Informes]:{FFFFFF} Ya no estamos dando regalos en {FFFF00}Club VIP{FFFFFF}, hasta la próxima.", VIPGiftsName, VIPGiftsTimeLeft);
			BroadCast(COLOR_WHITE, string);
			VIPGiftsTimeLeft = 0;
		}
	}
	return 1;
}

CMD:bloqre(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[512], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /bloqre(ID) (razón)");

		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pRMuted] == 0)
			{
			    if(Info[giveplayerid][pRMutedTotal] == 0)
			    {
  					Info[giveplayerid][pRMutedTotal] = 1;
					format(string, sizeof(string), "[Advertencia]: %s ha dado a %s su primera advertencia sobre abuso de reportes, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Un administrador te ha advertido sobre un abuso en el comando /re.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.");
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Advertencia de abuso", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s ha dado a %s su primera advertencia sobre abuso, razón: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("logs/- Bloqueos de Reportes.log", string);
			    }
			    else if(Info[giveplayerid][pRMutedTotal] == 1)
			    {
  					Info[giveplayerid][pRMuted] = 2;
  					Info[giveplayerid][pRMutedTotal] = 2;
					Info[giveplayerid][pRMutedTime] = 15*60;
					format(string, sizeof(string), "[ATENCIÓN]: %s ha bloqueado temporalmente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la segunda vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 15 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo temporal", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/- Bloqueos de Reportes.log", string);
			    }
			    else if(Info[giveplayerid][pRMutedTotal] == 2)
			    {
  					Info[giveplayerid][pRMuted] = 2;
  					Info[giveplayerid][pRMutedTotal] = 3;
					Info[giveplayerid][pRMutedTime] = 30*60;
					format(string, sizeof(string), "[ATENCIÓN]: %s ha bloqueado temporalmente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la tercera vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 30 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo temporal", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/- Bloqueos de Reportes.log", string);
			    }
			    else if(Info[giveplayerid][pRMutedTotal] == 3)
			    {
  					Info[giveplayerid][pRMuted] = 2;
  					Info[giveplayerid][pRMutedTotal] = 4;
					Info[giveplayerid][pRMutedTime] = 45*60;
					format(string, sizeof(string), "[ATENCIÓN]: %s ha bloqueado temporalmente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la cuarta vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 45 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo temporal", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/- Bloqueos de Reportes.log", string);
				}
			    else if(Info[giveplayerid][pRMutedTotal] == 4)
			    {
  					Info[giveplayerid][pRMuted] = 2;
  					Info[giveplayerid][pRMutedTotal] = 5;
					Info[giveplayerid][pRMutedTime] = 60*60;
					format(string, sizeof(string), "[ATENCIÓN]: %s ha bloqueado temporalmente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la quinta vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 60 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo temporal", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/- Bloqueos de Reportes.log", string);
				}
			    else if(Info[giveplayerid][pRMutedTotal] >= 5)
			    {
  					Info[giveplayerid][pRMuted] = 1;
  					Info[giveplayerid][pRMutedTotal] = 6;
					format(string, sizeof(string), "[ATENCIÓN]: %s ha bloqueado permanentemente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Tu has sido bloqueado permanentemente de los reportes por %s, razón: %s.\n\nComo está es la sexta vez que tu has sido bloqueado de los reportes, ya no podrás usar este comando, lo sentimos pero lo advertimos desde mucho antes.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo indefinido de reportes", string,"OK", "");

					format(string, sizeof(string), "ATENCIÓN: %s fue bloqueado permanentemente (6 Mutes) del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/- Bloqueos de Reportes.log", string);
				}
				for(new i = 0; i < MAX_REPORTS; i++)
				{
					if(Reports[i][ReportFrom] == giveplayerid)
					{
						Reports[i][BeingUsed] = 0;
					}
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya está deshabilitado de /re.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}

CMD:desbloqre(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desbloqre (playerid) (reason)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pRMuted] == 2)
			{
				Info[giveplayerid][pRMuted] = 0;
				Info[giveplayerid][pRMutedTotal]--;
				Info[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "[ATENCIÓN]: %s ha desbloqueado del comando /re a %s, razón: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_GENERAL,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Has sido desbloqueado del comando de reportes, y ahora puedes usar el sistema de reportes de nuevo.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Por favor acepta nuestras disculpas por cualquier error y molestias que esto pueda haber causado.");
				format(string, sizeof(string), "AdmCmdExe: %s fue desbloqueado del cmd /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/- Desbloqueos de Reportes.log", string);
			}
			else if(Info[giveplayerid][pRMuted] == 1)
			{
				Info[giveplayerid][pRMuted] = 0;
				Info[giveplayerid][pRMutedTotal] = 0;
				Info[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "[ATENCIÓN]: %s ha desbloqueado del cmd /re a %s, razón: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_GENERAL,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Has sido desbloqueado del comando de reportes, y ahora puedes usar el sistema de reportes de nuevo.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Por favor acepta nuestras disculpas por cualquier error y molestias que esto pueda haber causado.");
				format(string, sizeof(string), "AdmCmdExe: %s fue desbloqueado del cmd /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/- Debloqueos de Reportes.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está bloqueado de los reportes.");
			}

		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}


CMD:divorcio(playerid, params[])
{
	if(Info[playerid][pMarried] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás casado.");
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/divorcio (usuario id){FFFFFF} para divociarse.");
	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new dstring[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s", giveplayer);
			strmid(wstring, string, 0, strlen(string), 24);
			format(string, sizeof(string), "%s", Info[playerid][pMarriedTo]);
			strmid(dstring, string, 0, strlen(string), 24);
			if(strcmp(dstring ,wstring, true ) == 0 )
			{
				format(string, sizeof(string), "* Has propuesto divorcio a %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s te ha propuesto divorcio. (escribe /aceptar divorcio)", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				DivorceOffer[giveplayerid] = playerid;
				return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está casado contigo.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
}
CMD:adivorcio(playerid, params[])
{
	if(Info[playerid][pAdminZC] > 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /adivorcio (ID)");
		if(IsPlayerConnected(giveplayerid))
		{
			ClearMarriage(giveplayerid);
			format(string, sizeof(string), "* Limpiaste el matrimonio de %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Tu has sido divorciado por %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			DivorceOffer[giveplayerid] = playerid;
			return 1;

		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
}
CMD:proponer(playerid, params[])
{
	if(GetPlayerCash(playerid) < 10000) return SendClientMessageEx(playerid, COLOR_GREY, "El matrimonio y recepción cuesta 10,000");
	if(Info[playerid][pMarried] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Tu ya estás casado.");
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/proponer (usuario id){FFFFFF} para proponerle casamiento.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No te puedes proponer a tí mismo.");
		if(Info[giveplayerid][pMarried] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese jugador ya está casado.");
		else if(MarryWitness[playerid] == giveplayerid) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes casarte con el testigo.");
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			format(string, sizeof(string), "* Propusiste matrimonio a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s te propuso matrimonio. (Escribe /aceptar matrimonio)", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			ProposeOffer[giveplayerid] = playerid;
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
	return 1;
}
CMD:testigo(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/testigo (usuario id){FFFFFF} para asignarlo/a testigo de tu casamiento.");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_WHITE, "No puedes proponerte a ti mismo."); return 1; }
			format(string, sizeof(string), "* Has solicitado a %s para ser tu testigo de matrimonio.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s te ha pedido que seas su testigo de matrimonio. (usa /aceptar testigo)", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			MarryWitnessOffer[giveplayerid] = playerid;
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
	return 1;
}

CMD:cvelocidad(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás herido.");
	if(IsAPolice(playerid))
	{
		new string[128];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás en un vehículo.");
			return 1;
		}
		if(Info[playerid][pJailed] > 0)
		{
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás prisión.");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás en un evento.");
			return 1;
		}
		if(Info[playerid][pEstado] >= 1) {
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás tazeado.");
			return 1;
		}
		new SpeedRadar = GetPVarInt(playerid, "SpeedRadar");
		if(SpeedRadar == 0)
		{
			SetPVarInt(playerid, "RadarReplacement", Info[playerid][pWeapons][9]);
			if(Info[playerid][pWeapons][9] != 0) RemovePlayerWeapon(playerid, Info[playerid][pWeapons][9]);
			format(string, sizeof(string), "* %s coge la cámara de velocidad.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 43);
			SetPVarInt(playerid, "SpeedRadar", 1);
		}
		else
		{
			RemovePlayerWeapon(playerid, 43);
			GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"));
			format(string, sizeof(string), "* %s guarda la cámara de velocidad.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "SpeedRadar");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
		return 1;
	}
	return 1;
}

CMD:npatrulla(playerid, params[])
{
    new veh = GetPlayerVehicleID(playerid);
        if(IsPlayerInAnyVehicle(playerid))
    {
                if(!IsAPolice(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FF2E3F}[ERROR]{FFFFFF} Usted no forma parte del departamento policial.");
                if(isnull(params)) return SendClientMessage(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/npatrulla{FFFFFF} para nombrar una patrulla.");
                if(!Nombre_Patrulla[veh])
        {
        new string[128];
        format(string,sizeof(string), "%s",params);
        Texto_NombrarP[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
        Attach3DTextLabelToVehicle( Texto_NombrarP[veh], veh, -0.7, -1.9, -0.3);
        Nombre_Patrulla[veh] = 1;
                }
                else
                {
                Delete3DTextLabel(Texto_NombrarP[veh]);
                Nombre_Patrulla[veh] = 0;
                return 1;
                        }
                }
                else
                {
        SendClientMessage(playerid,COLOR_ROJO,"!: {FFFFFF}No estas en un vehículo.");
        return 1;
                }
        return 1;
}

CMD:estadoveh(playerid, params[])
{
    new veh = GetPlayerVehicleID(playerid);
        if(IsPlayerInAnyVehicle(playerid))
    {
                if(isnull(params)) return SendClientMessage(playerid,COLOR_WHITE,"* Escriba {B9C9CF}/estadoveh{FFFFFF} para aclarar el entorno del vehículo.");
                if(Info[playerid][pLevel] < 5) return SendClientMessage(playerid, -1, "* Debes ser mínimo nivel 5 para usar esta opción.");
                if(!Vehiculo_Entorno[veh])
        {
        new string[128];
        format(string,sizeof(string), "%s",params);
        Texto_NombrarP[veh] = Create3DTextLabel(string, 0x2D77B6FF, 0.0, 0.0, 0.0, 50.0, 0, 1);
        Attach3DTextLabelToVehicle( Texto_NombrarP[veh], veh, -0.0, -0.0, -0.3);
        Vehiculo_Entorno[veh] = 1;
                }
                else
                {
                Delete3DTextLabel(Texto_NombrarP[veh]);
                Vehiculo_Entorno[veh] = 0;
                return 1;
                        }
                }
                else
                {
        SendClientMessage(playerid,COLOR_ROJO,"!{FFFFFF} Debes estar en tu vehículo.");
        return 1;
                }
        return 1;
}

CMD:regalararma(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 9)
	{
        new sstring[128], playa, gun;
        if(sscanf(params, "dd", playa, gun))
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "Usa: /regalararma (ID) (ID Arma)");
            SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________________________________________________________________________________");
            SendClientMessageEx(playerid, COLOR_WHITE, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
            SendClientMessageEx(playerid, COLOR_WHITE, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Plata Vibrator 14: Flores 15: Cane 16: Frag Grenade");
            SendClientMessageEx(playerid, COLOR_WHITE, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle");
            SendClientMessageEx(playerid, COLOR_WHITE, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
            SendClientMessageEx(playerid, COLOR_WHITE, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
            SendClientMessageEx(playerid, COLOR_WHITE, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Paracaidas");
            SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________________________________________________________________________________");
            return 1;
        }

        format(sstring, sizeof(sstring), "%s le ha dado un arma al usuario %s [ID del Arma: %d]",GetPlayerNameEx(playerid),GetPlayerNameEx(playa),gun);
        ABroadCast(COLOR_ORANGE, sstring, 2);
		format(sstring, sizeof(sstring), "Has dado un arma a %s [ID del Arma: %d]",GetPlayerNameEx(playa),gun);
        if(gun < 1||gun > 47)
            { SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ADM]:{FFFFFF} ID de Arma inválido."); return 1; }
        if(IsPlayerConnected(playa))
		{
            if((Info[playa][pConnectTime] < 0 || Info[playa][pWRestricted] > 0) && gun != 46 && gun != 43) return SendClientMessageEx(playerid, COLOR_GRAD2, "Ese jugador tiene restricción de armas de momento.");
            if(playa != INVALID_PLAYER_ID && gun <= 20 || gun >= 22)
			{
                GivePlayerValidWeapon(playa, gun);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
            else if(playa != INVALID_PLAYER_ID && gun == 21)
			{
                JetPack[playa] = 1;
                SetPlayerSpecialAction(playa, SPECIAL_ACTION_USEJETPACK);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
        }
    }
    else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
    return 1;
}
CMD:creararma(playerid, params[]){
	if (Info[playerid][pJob] == 7 || Info[playerid][pJob2] == 7){
		if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes crear armas en Jail.");
		if(Info[playerid][pEstado] == 0){
    		if (GetPVarInt(playerid, "ArmsTimer") > 0){
			    new string[128];
        		format(string, sizeof(string), "Tienes que esperar %d segundos despues de haber creado algún arma.", GetPVarInt(playerid, "ArmsTimer"));
        		SendClientMessageEx(playerid,COLOR_GREY,string);
        		return 1;
    		}
			else{
				switch(Info[playerid][pArmsSkill]){
					case 0 .. 49: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nMolotov (150)","Ok", "Cancelar");
					case 50 .. 99: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nMolotov (150)\nPistola 9mm (300)","Ok", "Cancelar");
					case 100 .. 199: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nMolotov (150)\nPistola 9mm (300)\nPistola silenciada (400)","Ok", "Cancelar");
					case 200 .. 299: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nMolotov (150)\nPistola 9mm(300)\nPistola silenciada (400)\nEscopeta (450)","Ok", "Cancelar");
					case 300 .. 399: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nMolotov (150)\nPistola 9mm (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800)","Ok", "Cancelar");
					case 400 .. 499: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nMolotov (150)\nPistola 9mm (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800)\nMP5 (1200)","Ok", "Cancelar");
					case 500 .. 599: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nMolotov (150)\nPistola 9mm (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800)\nMP5 (1200)\nAK-47 (2000)","Ok", "Cancelar");
					case 600 .. 700: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nMolotov (150)\nPistola 9mm (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800)\nMP5 (1200)\nAK-47\nM4A1 (2000)","Ok", "Cancelar");
					default: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{DAE456}Arma a crear:", "Katana (50)\nCaña (90)\nPalo Billar(90)\nBate baseball (90)\nMolotov (150)\n9mm Pistol (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800\nMP5 (1200)\nAK-47 (2000)\nM4A1 (2000)\nSniper (4000)","Ok", "Cancelar");
				}
			}
			return 1;
		}
		else SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto mientras estas tazeado, congelado o esposado.");
	}
	return 1;
}
CMD:cancelar(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
	    ClearChatbox(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/cancelar (nombre){FFFFFF} para cancelar algún objeto/pedido en proceso.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "Nombres P1: bebida - materiales - matrimonio - arma - divorcio - testigo - telefono");
		SendClientMessageEx(playerid, COLOR_GREY, "Nombres P2: taxi - multa - coche - mecanico - droga - casa - vip");
		return 1;
	}
	else if(strcmp(choice,"marihuana",true) == 0) { PotOffer[playerid] = 999; PotPrice[playerid] = 0; PotGram[playerid] = 0; }
	else if(strcmp(choice,"cocaina",true) == 0) { CrackOffer[playerid] = 999; CrackPrice[playerid] = 0; CrackGram[playerid] = 0; }
	else if(strcmp(choice,"materiales",true) == 0) { MatsOffer[playerid] = 999; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
	else if(strcmp(choice,"arma",true) == 0) { GunOffer[playerid] = 999; GunId[playerid] = 0; }
	else if(strcmp(choice,"testigo",true) == 0) { MarryWitnessOffer[playerid] = 999; }
	else if(strcmp(choice,"matrimonio",true) == 0) { ProposeOffer[playerid] = 999; }
	else if(strcmp(choice,"divorcio",true) == 0) { DivorceOffer[playerid] = 999; }
	else if(strcmp(choice,"live",true) == 0) { LiveOffer[playerid] = 999; }
	else if(strcmp(choice,"bebida",true) == 0) { DrinkOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"coche",true) == 0) { VehicleOffer[playerid] = 999; VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; }
	else if(strcmp(choice,"casa",true) == 0) { HouseOffer[playerid] = 999; HousePrice[playerid] = 0; House[playerid] = 0; }
	else if(strcmp(choice,"Guardaespaldas",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
	else if(strcmp(choice,"fichasvip",true) == 0) { FOffer[playerid] = 999; FPrice[playerid] = 0; FAmount[playerid] = 0; }
    else if(strcmp(choice,"fichasg",true) == 0) { GGOffer[playerid] = 999; GGPrice[playerid] = 0; GGAmount[playerid] = 0; }
    else if(strcmp(choice,"vip",true) == 0){ VIPOffer[playerid] = 999; VIPPrice[playerid] = 0; }
	else if(strcmp(choice,"camion",true) == 0)
	{
 		DestroyProgressBar(LoadTruckBar[playerid]);
		LoadTruckBar[playerid] = INVALID_BAR_ID;
		LoadTruckTime[playerid] = 0;
		DeletePVar(playerid, "TruckDeliver");
		TruckUsed[playerid] = INVALID_VEHICLE_ID;
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 		DisablePlayerCheckpoint(playerid);
	}
	if(strcmp(choice,"telefono",true) == 0)
    {
	    if(NumBuy[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido un número.");
        NumBuy[playerid] = 0;
        NumPrice[playerid] = 0;
        NumSeller[playerid] = 0;
        Facturing[playerid] = 0;
	}
	else if(strcmp(choice,"multa",true) == 0)
	{
	    if(TicketOffer[playerid] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te multado.");
	    format(string, sizeof(string), " %s se niega a pagar una multa", GetPlayerNameEx(playerid));
	    ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), "* %s canceló el pago de una multa de %d$.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
	    SendClientMessageEx(TicketOffer[playerid], -1, string);
	    TicketOffer[playerid] = 999;
	    TicketMoney[playerid] = 0;
	    Facturing[playerid] = 0;
	}
	else if(strcmp(choice,"mecanico",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessageEx(playerid, COLOR_GREY, "   No has llamado a un mecanico!"); return 1; } } }
	else if(strcmp(choice,"ayuda",true) == 0) { if(IsPlayerConnected(AdvisorCall)) { if(AdvisorCall == playerid) { AdvisorCall = 999; } else { SendClientMessageEx(playerid, COLOR_GREY, "   No has pedido ese servicio!"); return 1; } } }
	else if(strcmp(choice,"taxi",true) == 0){
		if(TaxiCall < 999){
			if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0){
				TaxiAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Cancelaste~n~~r~la llamada", 5000, 1);
				TaxiCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				TaxiCall = 999;
			}
			else{
				if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
				foreach(Player, i){
					if(TaxiAccepted[i] < 999){
						if(TaxiAccepted[i] == playerid){
							TaxiAccepted[i] = 999;
							GameTextForPlayer(i, "~w~Llmada de taxi~n~~r~Cancelada", 5000, 1);
							TaxiCallTime[i] = 0;
							DisablePlayerCheckpoint(i);
						}
					}
				}
			}
		}
	}
	else { return 1; }
	format(string, sizeof(string), "* Cancelaste: %s.", choice);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

	CMD:recargar(playerid, params[])
	{
		new Animdata[2][25];
		switch(GetPlayerWeapon(playerid))
		{
		    case 24:// Desert Eagle
		    {
	    		Animdata[0] = "PYTHON";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "python_crouchreload";
				}
				else
				{
					Animdata[1] = "python_reload";
				}
			}
			case 22:// 9mm
			{
	    		Animdata[0] = "COLT45";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "colt45_crouchreload";
				}
				else
				{
					Animdata[1] = "colt45_reload";
				}
			}
			case 23:// 9mm Silenciada
			{
	    		Animdata[0] = "SILENCED";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "CrouchReload";
				}
				else
				{
					Animdata[1] = "Silence_reload";
				}
			}
			case 32: // TEC-9
			{
	    		Animdata[0] = "TEC";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "TEC_crouchreload";
				}
				else
				{
					Animdata[1] = "TEC_reload";
				}
			}
			case 28, 29: // UZI y MP5
			{
	    		Animdata[0] = "UZI";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "UZI_crouchreload";
				}
				else
				{
					Animdata[1] = "UZI_reload";
				}
			}
			case 30, 31: // AK-47 y M4A1
			{
	    		Animdata[0] = "RIFLE";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "RIFLE_crouchload";
				}
				else
				{
					Animdata[1] = "RIFLE_load";
				}
			}
			default:
			{
			    return SendClientMessageEx(playerid, COLOR_GREY, "No puedes cargar esta arma!");
			}
		}
		ApplyAnimation(playerid, Animdata[0], Animdata[1], 4.0, 0, 0, 0, 0, 0, true);
		SetTimerEx("RecargarBalas", 1200, false, "ii", playerid, GetPlayerWeapon(playerid) );
		return 1;
	}

CMD:dararma(playerid, params[])
{

	new string[128],id,weapon;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Utiliza: /dararma (playerid)");
	else if(Info[playerid][pEstado]==0)
	{
		if(id == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes darte un arma a ti mismo!");
		if(Info[id][pConnectTime] < 5 || Info[id][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador tiene restricción de armas.");
		if(Info[playerid][pMember] != Info[id][pMember] && Info[playerid][pMember] > 0)
		{
			SendClientMessageEx(playerid, COLOR_RED, "Sólo puedes a personas de tu misma facción.");
			return 1;
		}
		if(IsPlayerConnected(id))
		{
	   	    if(ProxDetectorS(6.0, playerid, id) && !IsPlayerInAnyVehicle(playerid))
  			{
                if(IsPlayerInAnyVehicle(id)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No podrás si esta persona está en un vehículo.");
				weapon = GetPlayerWeapon(playerid);
				switch(weapon)
				{
					case 16, 18, 35, 36, 37, 38, 39, 40, 44, 45, 46, 0: SendClientMessage(playerid, COLOR_RED, "[ERROR]: Arma Inválida.");
					default:
					{
						format(string, sizeof(string), "Ofreciste a %s tu %s.", GetPlayerNameEx(id), WeaponNames[weapon]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s te ha ofrecido su %s - Usa /aceptar arma para recibirla.", GetPlayerNameEx(playerid), WeaponNames[weapon]);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						SetPVarInt(id,"gunID",playerid);
						SetPVarInt(playerid,"gun",weapon);
						SetPVarInt(playerid,"slot",GetWeaponSlot(weapon));
						manubrio[playerid] = 1;
						SetTimerEx("Timermanubrio",900000,false,"d",playerid);
					}
				}
	    	}
	    	else SendClientMessage(playerid, COLOR_RED, "[ERROR]: Tu estas lejos del jugador o en un vehículo.");
	    }
		else SendClientMessage(playerid, COLOR_RED, "[ERROR]: La ID que has ingresado es inválida.");
	}
	else SendClientMessage(playerid, COLOR_RED, "[ERROR]: No puedes hacer esto mientras estas tazeado, esposado o congelado.");
	return 1;
}
CMD:misarmas(playerid, params[]){
	new string[128], myweapons[13][2], weaponname[50], name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	SendClientMessageEx(playerid, COLOR_AT,"{2EDFFF}_______________________________________");
	format(string, sizeof(string), "{FFFFFF}Armas actúales de %s:", name);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	for (new i = 0; i < 13; i++)	{
		GetPlayerWeaponData(playerid, i, myweapons[i][0], myweapons[i][1]);
		if(myweapons[i][0] > 0)		{
			if(Info[playerid][pWeapons][i] == myweapons[i][0])			{
				GetWeaponName(myweapons[i][0], weaponname, sizeof(weaponname));

				format(string, sizeof(string), "{2EDFFF}%s [ID: {7D997D}%d{2EDFFF}]", weaponname, myweapons[i][0]);
				SendClientMessageEx(playerid, COLOR_AT, string);
			}
		}
	}
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(string, sizeof(string), "{2EDFFF}[{7D997D}%d/%d/%d %d:%d:%d{2EDFFF}]", month, day, year, hour, minute,second);
	SendClientMessageEx(playerid, COLOR_GREEN, string);
	SendClientMessageEx(playerid, COLOR_GREEN,"{2EDFFF}_______________________________________");
	return 1;
}
CMD:srestriccion(playerid, params[])
{
   if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 8)
	{
	    new string[75 + (MAX_PLAYER_NAME * 2)], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /Srestriccion");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(Info[giveplayerid][pWRestricted] > 0)
		    {
		        Info[giveplayerid][pWRestricted] = 0;
		        format(string, sizeof(string), "AT-RP:{FFFFFF} %s reseteó la restricción de armas de %s. (ID: %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), giveplayerid);
		        ABroadCast(COLOR_BLANCO, string, 2);
		    }
		    else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene restricción de armas.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado, está desconectado.");
	}
	return 1;
}
CMD:rrestriccion(playerid, params[])
{
   new id;
   if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes retirar una restricción si no eres líder de facción!");
   if(Team_LAMD(playerid) || Team_BomberosBA(playerid) || Play_Music(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Tu facción no tiene permiso de retirar una restricción de armas!");
   if(Info[playerid][pMember] != Info[id][pMember] && Info[playerid][pMember] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Sólo puedes a personas de tu misma facción.");
	{
	    new string[75 + (MAX_PLAYER_NAME * 2)], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /rrestriccion (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
            if(Info[playerid][pLeader] == Info[giveplayerid][pMember])
		    if(Info[giveplayerid][pWRestricted] > 0)
		    {
		        Info[giveplayerid][pWRestricted] = 0;
		        SendClientMessageEx(playerid, COLOR_ROJO, "! Acabas de retirar una restricción de armas.");
		        format(string, sizeof(string), "!{FFFFFF} %s te retiró la restricción de armas.", GetPlayerNameEx(playerid), playerid);
		    	SendClientMessageEx(giveplayerid, COLOR_YELLOW2, string);
		    }
		    else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene restricción de armas.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado, está desconectado.");
	}
	return 1;
}

CMD:habilidad(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "");
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/habilidad (número){FFFFFF} para saber su nivel.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "- 1 (Fabricante de Armas)");
		SendClientMessageEx(playerid, COLOR_GREY, "- 2 (Repartidor)");
		SendClientMessageEx(playerid, COLOR_GREY, "- 3 (Traficante de Drogas)");
		return 1;
	}
    else switch(strval(params))
    {
		case 1: // Fabricante de Armas
		{
			new level = Info[playerid][pArmsSkill], string[62];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de fabricante de armas es 1."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 99) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de fabricante de armas es 2."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 299) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de fabricante de armas es 3."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 300 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 300 && level < 599) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de fabricante de armas es 4."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 600 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 600) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de fabricante de armas es 5."); }
		}
		case 2:// Repartidor
		{
			new level = Info[playerid][pTruckSkill], string[62];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de repartidor es 1."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 51 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de repartidor es 2."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 101 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de repartidor es 3."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 201 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de repartidor es 4."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 401 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de camionero es 5."); }
		}
 		case 3:// Traficante de Drogas
		{
			new level = Info[playerid][pSmugSkill], string[62];
			if(level >= 0 && level <= 20) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de Traficante es 1."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 20 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 21 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de Traficante es 2."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de Traficante es 3."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de Traficante es 4."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201) { SendClientMessageEx(playerid, COLOR_YELLOW, "!{FFFFFF} Tu nivel de Traficante es 5."); }
		}
	}
	return 1;
}

CMD:paintball(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == 0)
	{
        if(Info[playerid][pConnectTime] < 2)
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[Adv. PaintBall]:{FFFFFF} Usted tiene restricción de arma, por lo tanto no ingresará.");
            return 1;
        }
        if(IsPlayerInRangeOfPoint(playerid,5.0,305.3528,-141.9280,1004.0625))
		{
            PaintballMainMenu(playerid);
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}No estas en el punto exacto para entrar a una arena de PaintBall!");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Te recordamos que ya estás en PaintBall, salga con el comando: {660066}/Salirarena");
    }
    return 1;
}

CMD:scores(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == 1)
	{
        PaintballScoreboard(playerid);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando si no estás en el paintball.");
    }
    return 1;
}

CMD:salirarena(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == 1)
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
		{
            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando en este momento.");
            return 1;
        }
        LeavePaintballArena(playerid);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando si no estás en el paintball.");
    }
    return 1;
}

CMD:cequipo(playerid, params[])
{
    if(GetPVarInt(playerid, "ArenaMode") == 2)
    {
		PaintballSwitchTeam(playerid);
    }
    else
	{
        SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si no eres de la arena: {660066}Número 3");
    }
    return 1;
}

CMD:darfichaspball(playerid, params[])
{
	new string[128], giveplayerid, amount;
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(sscanf(params, "dd", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /adarfichas (playerid) (fichas)");

	if(IsPlayerConnected(giveplayerid))
	{
		if(Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para dar fichas.");
		Info[giveplayerid][pPaintTokens] += amount;
		format(string, sizeof(string), "Te han dado %d fichas de paintball - Administrador %s.", amount, GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Has dado a %s, %d fichas de paintball.", GetPlayerNameEx(giveplayerid), amount);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "{FFFF00}AT-RP:{FF0000} %s dio %s, %d Fichas de Paintball.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
		ABroadCast(COLOR_GENERAL, string, 2);

	}
	return 1;
}

CMD:fumarmarihuana(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes drogarte en el paintball.");
	if(UsedWeed[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que esperar 5 segundos para usar marihuana.");
	new string[128], Float:health, healthint;
	GetPlayerHealth(playerid, health);
	healthint = floatround(health, floatround_round);
	if(healthint >= 100 ) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes la vida llena.");
	if(Info[playerid][pPot] > 0)
	{
		if(PlayerStoned[playerid] > 100) return SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado drogado para utilizar marihuana.");
		PlayerStoned[playerid] += 5;
		format(string, sizeof(string), "* %s comienza a fumar marihuana.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPlayerWeather(playerid,128);
		Info[playerid][pPot] -= 1;
		Info[playerid][pSuci] += 13;
		UsedWeed[playerid] = 1;
 		Info[playerid][pAdiccion] += 1;
 		SetHP(playerid, health + 5.0);
		SetPlayerDrunkLevel(playerid, 3000);
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE,"No tienes marihuana.");
	return 1;
}

CMD:aspirarcocaina(playerid, params[])
{
	new Float:armour;
	GetPlayerArmour(playerid, armour);
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando si estás en el paintball.");
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando si estás herido.");
	if(UsedCrack[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Debe esperar 8 segundos antes de usar más drogas.");
	if(armour >= 100) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando, tienes demasiada armadura.");
	if(Info[playerid][pCrack] > 0)
	{
		if(PlayerStoned[playerid] > 100) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si estás muy drogado.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 100)
		{
			GameTextForPlayer(playerid, "~w~Estas ~b~Drogado", 5000, 3);
		}
		new string[128], Float:PlayersArmour;
		GetPlayerArmour(playerid, PlayersArmour);
		format(string, sizeof(string), "* %s aspira un poco de cocaína.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPlayerWeather(playerid,104);
		Info[playerid][pCrack] -= 1;
        Info[playerid][pSuci] += 18;
		UsedCrack[playerid] = 1;
		Info[playerid][pAdiccion] += 1;
        SetPlayerDrunkLevel(playerid, 5000);
		SetTimerEx("ClearDrugs", 8000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		SetPlayerArmour(playerid, PlayersArmour + 2.0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando si no tienes drogas.");
	}
	return 1;
}

CMD:venderspray(playerid, params[])
{
    if(!Team_Mecanicos(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando si no eres mecánico.");
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando si estás herido.");
	new string[128], giveplayerid, spray, money;
	if(sscanf(params, "ddd", giveplayerid, spray, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderspray (playerid) (potes) (precio)");
	if(spray < 1 || spray > 30) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Los valores no pueden ser mayores a 30 potes."); return 1; }
	if(money < 1 || money > 99999) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El precio no puede ser menor que 1 ni mayor que 99999!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "El vendedor no está cerca tuyo.");
					return 1;
				}
				format(string, sizeof(string), "* Ofreciste a %s para que te compre %d potes de spray por $%d.", GetPlayerNameEx(giveplayerid), spray, money);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Mecánico %s quiere venderte %d potes de spray por $%d. (escribe /aceptar spray)", GetPlayerNameEx(playerid), spray, money);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				SprayOffer[giveplayerid] = playerid;
				SprayPrice[giveplayerid] = money;
				SprayGram[giveplayerid] = spray;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "   Ese jugador está desconectado.");
	}
	return 1;
}
CMD:tarmaretirado(playerid, params[]){
	if(isnull(params)){
		SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}[{2EDFFF}Indicación{FFFFFF}]: Coloque: {2EDFFF}/TARMA [{FFFFFF}Nombre{2EDFFF}]");
		SendClientMessageEx(playerid, COLOR_WHITE, "{2EDFFF}Nombres:{7D997D} sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper, camara.");
		SendClientMessageEx(playerid, COLOR_WHITE, "{2EDFFF}Nombres:{7D997D} flores, knuckles, baseballbat, caña, pala, poolcue, golfclub, katana, dildo, paracaidas.");
		if(Info[playerid][pMember] == 8 || Info[playerid][pLeader] == 8) { SendClientMessageEx(playerid, COLOR_GRAD2, "{2EDFFF}Nombres: {7D997D}cuchillo."); }
		if(Info[playerid][pMember] == 3 || Info[playerid][pLeader] == 3 || Info[playerid][pMember] == 1 || Info[playerid][pLeader] == 1 || Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2) {
			SendClientMessageEx(playerid, COLOR_WHITE, "{2EDFFF}Nombres: {7D997D}pala, maza, ghumo, motosierra, extinguidor.");
		}
		return 1;
	}

	if(IsPlayerInAnyVehicle(playerid)) {
		SendClientMessageEx (playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás en un vehiculo.");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0){
		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás en un evento.");
		return 1;
	}
	new string[128];
	if(strcmp(params, "sdpistol", true) == 0){
		if(Info[playerid][pWeapons][ 2 ] == 23){
		    if(pTazer[playerid] == 1) return SendClientMessageEx(playerid, COLOR_RED, "No puedes botar tu tazer.");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has tirado tu pistola con silenciador.");
			format(string, sizeof(string), "* %s tira su arma con silenciador.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			RemovePlayerWeapon(playerid, 23);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "camara", true) == 0){
		if(Info[playerid][pWeapons][ 9 ] == 43){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has tirado tu camara.");
			format(string, sizeof(string), "* %s tira su camara de fotos y vídeos.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 43);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "palo", true) == 0){
		if(Info[playerid][pWeapons][1] == 3){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has tirado tu palo.");
			format(string, sizeof(string), "* %s tira un palo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 3);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "maza", true) == 0){
		if(Info[playerid][pWeapons][9] == 41){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu maza.");
			format(string, sizeof(string), "* %s tira su maza.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 41);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "cuchillo", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 4){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu cuchillo.");
			format(string, sizeof(string), "* %s tira su cuchillo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 4);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "9mm", true) == 0){
		if(Info[playerid][pWeapons][ 2 ] == 22){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu 9mm pistol.");
			format(string, sizeof(string), "* %s tira su 9mm pistol.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 22);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "shotgun", true) == 0){
		if(Info[playerid][pWeapons][ 3 ] == 25){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu shotgun.");
			format(string, sizeof(string), "* %s tira su shotgun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 25);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "mp5", true) == 0){
		if(Info[playerid][pWeapons][ 4 ] == 29){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu MP5.");
			format(string, sizeof(string), "* %s tira su MP5.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 29);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "uzi", true) == 0){
		if(Info[playerid][pWeapons][ 4 ] == 28){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu Micro SMG.");
			format(string, sizeof(string), "* %s tira su Micro SMG.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 28);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "tec9", true) == 0){
		if(Info[playerid][pWeapons][ 4 ] == 32){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu Tec-9.");
			format(string, sizeof(string), "* %s tira su Tec-9.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 32);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "deagle", true) == 0){
		if(Info[playerid][pWeapons][ 2 ] == 24){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu Desert Eagle.");
			format(string, sizeof(string), "* %s tira su Desert Eagle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 24);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "rifle", true) == 0){
		if(Info[playerid][pWeapons][ 6 ] == 33){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu rifle.");
			format(string, sizeof(string), "* %s tira su rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 33);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "ak47", true) == 0){
		if(Info[playerid][pWeapons][ 5 ] == 30){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu AK-47.");
			format(string, sizeof(string), "* %s tira su AK-47.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 30);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "m4", true) == 0){
		if(Info[playerid][pWeapons][ 5 ] == 31){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu M4.");
			format(string, sizeof(string), "* %s tira una M4.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 31);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "spas12", true) == 0){
		if(Info[playerid][pWeapons][ 3 ] == 27){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu SPAS-12.");
			format(string, sizeof(string), "* %s tira su SPAS-12.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 27);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "sniper", true) == 0){
		if(Info[playerid][pWeapons][ 6 ] == 34){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu sniper rifle.");
			format(string, sizeof(string), "* %s tira su sniper rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 34);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "flores", true) == 0){
		if(Info[playerid][pWeapons][ 10 ] == 14){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu flores.");
			format(string, sizeof(string), "* %s tira su flores.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "knuckles", true) == 0)
	{
		if(Info[playerid][pWeapons][ 0 ] == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu brass knuckles.");
			format(string, sizeof(string), "* %s tira su brass knuckles.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "baseballbat", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 5){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu baseball bat.");
			format(string, sizeof(string), "* %s tira su baseball bat.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "caña", true) == 0){
		if(Info[playerid][pWeapons][ 10 ] == 15){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu caña.");
			format(string, sizeof(string), "* %s tira su cane.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pWeapons][ 10 ] = 0;
			RemovePlayerWeapon(playerid, 15);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "pala", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 6){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu pala.");
			format(string, sizeof(string), "* %s tira su shovel.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "golfclub", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 2){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu golf club.");
			format(string, sizeof(string), "* %s tira su golf club.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "katana") == 0){
		if(Info[playerid][pWeapons][ 1 ] == 8){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu katana.");
			format(string, sizeof(string), "* %s tira su katana.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "dildo", true) == 0){
		if(Info[playerid][pWeapons][ 10 ] == 10){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu dildo.");
			format(string, sizeof(string), "* %s tira su dildo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "paracaidas", true) == 0){
		if(Info[playerid][pWeapons][ 11 ] == 46){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu paracaidas.");
			format(string, sizeof(string), "* %s tira su paracaidas.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "ghumo", true) == 0){
		if(Info[playerid][pWeapons][ 8 ] == 17){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has tirado tu granada de humo.");
			format(string, sizeof(string), "* %s tira su granada de humo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 17);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "motosierra", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 9){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu motosierra.");
			format(string, sizeof(string), "* %s tira su motosierra.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 9);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "extinguidor", true) == 0){
		if(Info[playerid][pWeapons][ 9 ] == 42){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu extinguidor.");
			format(string, sizeof(string), "* %s tira su extinguidor.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 42);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "minigun", true) == 0){
		if(Info[playerid][pWeapons][ 7 ] == 38){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu minigun.");
			format(string, sizeof(string), "* %s tira su minigun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 38);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else if(strcmp(params, "poolcue", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 7){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu palo de billar.");
			format(string, sizeof(string), "* %s tira su pool cue.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 7);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás portando dicha arma, recuerda usar: {2EDFFF}/Misarmas");
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Has ingresado el nombre de un arma incorrecta.");
	return 1;
}
CMD:msjlogueo(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 9)
    {
    	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjlogueo (mensaje)");
		new string[128];
    	format(string, sizeof(string), "[AVISO]: %s cambió el msjlogueo a: %s", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_WHITE, string, 4);
		format(GlobalMOTD, sizeof(GlobalMOTD), "%s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje de logueo.");
		SaveMOTDs();
	}
	return 1;
}

CMD:msjfacc(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pGangModerator] == 1)
    {
    	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjfacc (mensaje)");
		new string[128];
    	format(string, sizeof(string), "[AVISO]: %s cambió el msjfacc a: %s", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_GENERAL, string, 4);
		format(FACMOTD, sizeof(FACMOTD), "%s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje de facciones.");
		SaveMOTDs();
	}
	return 1;
}

CMD:msjfam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pAdminZC] >= 8 || Info[playerid][pGangModerator] == 1)
    {
    	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación:{2EDFFF} /Msjfam [Mensaje]");
		new string[128];
    	format(string, sizeof(string), "[AVISO]: %s cambió el msjfam a: %s", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_GENERAL, string, 4);
		format(FAMMOTD, sizeof(FAMMOTD), "%s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje de las familias.");
		SaveMOTDs();
	}
	return 1;
}

CMD:msjstaff(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pAdminZC] >= 9)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjstaff (mensaje)");
		new string[128];
		format(AdminMOTD, sizeof(AdminMOTD), "%s", params);
		format(string, sizeof(string), "[AVISO]: %s cambió el admin msjstaff a: %s", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_GENERAL, string, 4);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el Mensaje staff.");
		SaveMOTDs();
	}
	return 1;
}

CMD:msjhelper(playerid, params[])
{
    if(Info[playerid][pAdminZC] >= 7 || Info[playerid][pHelper] >= 2)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjhelper (mensaje)");
		new string[128];
		format(CAMOTD, sizeof(CAMOTD), "%s", params);
		if(Info[playerid][pAdminZC] >= 7)
		{
			format(string, sizeof(string), "[Administración]: %s cambió el msjhelper para ayudantes a: %s", GetPlayerNameEx(playerid), params);
			ABroadCast( COLOR_GENERAL, string, 5);
		}
		else if(Info[playerid][pHelper] >= 2)
		{
		    format(string, sizeof(string), "[CACmd]: %s cambió el msjhelper para ayudantes a: %s.", GetPlayerNameEx(playerid), params);
			CBroadCast( TEAM_AZTECAS_COLOR, string, 2);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el MOTD para ayudantes.");
		SaveMOTDs();
	}
	return 1;
}

CMD:numeropriv(playerid, params[])
{
    if(Info[playerid][pPnumber] != 0)
	{
        if(UnidentifedCall[playerid] == 1)
		{
            UnidentifedCall[playerid] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "Desabilitaste el numero privado.");
        }
        else
		{
            UnidentifedCall[playerid] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "Activaste el numero privado.");
        }
    }
    else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un teléfono o no eres {FFFF00}PLATAVIP{FFFFFF}.");
    return 1;
}

CMD:vidainf(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 5)
	{
        SetHP(playerid, 100000);
        SetPlayerArmour(playerid, 100000);
    }
	return 1;
}

CMD:ayudame(playerid, params[])
{
	if(Advisors < 1) return SendClientMessageEx(playerid, COLOR_GREY, "En este momento no hay ayudantes, intenta en otro momento!");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ayudame [razón]");
	new string[128];
	{
		if(JustReported[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Espera 10 segundos para enviar otra solicitud!");
			return 1;
		}
		JustReported[playerid]=10;
		format(string, sizeof(string), "** %s solicita ayuda, razón: %s. (usa /aceptarayuda)", GetPlayerNameEx(playerid), params);
		SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has solicitado ayuda a nuestros ayudantes, espera a una respuesta.");
		SetPVarInt( playerid, "COMMUNITY_ADVISOR_REQUEST", 1 );
	}
	return 1;
}

CMD:aceptarayuda(playerid, params[])
{
	foreach(Player, i)
	{
		if( GetPVarInt( i, "COMMUNITY_ADVISOR_REQUEST" ) >= 1 )
		{
			AdvisorCall = i;
		}
	}
	if(AdvisorCall < 999)
	{
		if(IsPlayerConnected(AdvisorCall))
		{
			new string[128];
			if(HelpingNewbie[playerid] != 999)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Te recordamos que ya estas ayudando a una persona: {2EDFFF}/Finalizarayuda");
				return 1;
			}
			if(GetPVarInt(playerid, "AdvisorDuty") == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Debes estar en servicio como ayudante: {2EDFFF}/Cduty");
				return 1;
			}
			format(string, sizeof(string), "{2EDFFF}%s {FFFFFF}aceptó la ayuda del usuario: {2EDFFF}%s",GetPlayerNameEx(playerid), GetPlayerNameEx(AdvisorCall));
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			format(string, sizeof(string), "{FFFFFF}Ahora estas con el usuario {2EDFFF}%s{FFFFFF}, en cuanto termines de ayudarlo use: {7D997D}/Finalizarayuda",GetPlayerNameEx(AdvisorCall));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "{FFFFFF}El ayudante {2EDFFF}%s{FFFFFF} aceptó tu ayuda, solicitamos que esperes en el lugar solicitado anteriormente.",GetPlayerNameEx(playerid));
			SendClientMessageEx(AdvisorCall, COLOR_LIGHTBLUE, string);
			SendClientMessageEx(AdvisorCall, COLOR_WHITE, "{2EDFFF}Nota Importante:{FFFFFF} Por favor, solicitamos que espere donde usted ha solicitado a un ayudante, gracias.");
			new Float: x, Float: y, Float: z, Float: r, i, vw;
			vw = GetPlayerVirtualWorld(playerid);
			i = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, r);
			SetPVarFloat(playerid, "AdvisorLastx", x);
			SetPVarFloat(playerid, "AdvisorLasty", y);
			SetPVarFloat(playerid, "AdvisorLastz", z);
			SetPVarFloat(playerid, "AdvisorLastr", r);
			SetPVarInt(playerid, "AdvisorLastInt", i);
			SetPVarInt(playerid, "AdvisorLastVW", vw);
			GetPlayerPos(AdvisorCall, x, y, z);
			vw = GetPlayerVirtualWorld(AdvisorCall);
			i = GetPlayerInterior(AdvisorCall);
			SetPlayerPos(playerid, x, y+2, z);
			SetPlayerVirtualWorld(playerid, vw);
			SetPlayerInterior(playerid, i);
			HelpingNewbie[playerid] = AdvisorCall;
			AdvisorCall = 999;
			//AddCAReportToken(playerid); // Advisor Tokens
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Nadie ha solicitado a un ayudante!");
		return 1;
	}
	return 1;
}

CMD:finalizarayuda(playerid, params[])
{
	if(HelpingNewbie[playerid] < 999)
	{
		new string[128];
		format(string, sizeof(string), "{2EDFFF}%s {FFFFFF}finalizó la ayuda del usuario: {2EDFFF}%s",GetPlayerNameEx(playerid), GetPlayerNameEx(HelpingNewbie[playerid]));
		SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
		SetPlayerPos(playerid, GetPVarFloat(playerid, "AdvisorLastx"), GetPVarFloat(playerid, "AdvisorLasty"), GetPVarFloat(playerid, "AdvisorLastz"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "AdvisorLastVW"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "AdvisorLastInt"));
		SetPVarInt(HelpingNewbie[playerid], "COMMUNITY_ADVISOR_REQUEST", 0 );
		HelpingNewbie[playerid] = 999;
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}No estás ayudando a nadie en este momento!");
	return 1;
}

CMD:teamspeak(playerid, params[])
	{
		return cmd_ts3(playerid, params);
	}
    CMD:teamspeak3(playerid, params[])
	{
		return cmd_ts3(playerid, params);
	}
	CMD:ts3(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}TeamSpeak 3:{FFFFFF} ts3.titaniumgamers.com");
	    return 1;
	}
	CMD:foro(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}Foro:{FFFFFF} www.titaniumgamers.com" );
	    return 1;
	}
	CMD:web(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}Web:{FFFFFF} www.titaniumgamers.com" );
	    return 1;
	}
	CMD:ip(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}IP:{FFFFFF} samp.titaniumgamers.com" );
	    return 1;
	}
	CMD:grupofacebook(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}Grupo de Facebook:{FFFFFF} www.facebook.com/groups/ATrp.oficial{" );
	    return 1;
	}
	CMD:facebook(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}Facebook:{FFFFFF} www.facebook.com/ATrp.oficial{" );
	    return 1;
}

CMD:cduty(playerid, params[])
{
    if(Info[playerid][pHelper] >= 1)
	{
        new string[200];
        if(GetPVarInt(playerid, "AdvisorDuty") == 1)
		{
            format(string, sizeof(string),"[<!>]:{FFFFFF} El Ayudante %s ya no se encuentra en servicio para brindar ayuda.", GetPlayerNameEx(playerid));
            SendClientMessageToAll(COLOR_AT, string);
            SendClientMessageEx(playerid, COLOR_BLANCO, "{FFFFFF}Ya no estas en servicio, recuerda no volver a usar este comando tan seguido.");
            DeletePVar(playerid, "AdvisorDuty");
            Advisors -= 1;
        }
        else
		{
            format(string, sizeof(string), "[<!>]:{FFFFFF} El Ayudante %s se encuentra en servicio, puedes solicitarlo con: {2EDFFF}/Ayudame", GetPlayerNameEx(playerid));
			SendClientMessageToAll(COLOR_AT, string);
            SendClientMessageEx(playerid, COLOR_GRIS, "Atención: {FFFFFF}Entraste en servicio, no olvides responder sus dudas y/o ir al llamado que necesiten.");
            SetPVarInt(playerid, "AdvisorDuty", 1);
            Advisors += 1;
        }
    }
    else SendClientMessageEx(playerid, COLOR_GRAD1, "Usted no forma parte de la cúpula ayudantes, disculpe.");
    return 1;
}

CMD:darhelper(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 7 || Info[playerid][pHelper] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darhelper (playerid)");

		if(IsPlayerConnected(giveplayerid))
		{
			Info[giveplayerid][pHelper] = 1;
			format(string, sizeof(string), "{FFFFFF}Bienvenido a la cúpula de Ayudantes, usted fue ingresado por: {2EDFFF}%s", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "{FFFFFF}La asignación de ayudante al usuario {2EDFFF}%s{FFFFFF} fue completada con éxito.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "{FFFFFF}El Enc. Helpers {2EDFFF}%s{FFFFFF} ha ingresado a {2EDFFF}%s{FFFFFF} como ayudante oficial de AT-RP.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/- Ayudantes Asignados.log", string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
	return 1;
}

CMD:darliderhelper(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 7)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darliderhelper (playerid)");

		if(IsPlayerConnected(giveplayerid))
		{
			Info[giveplayerid][pHelper] = 2;
			format(string, sizeof(string), "{FFFFFF}Felicidades por tu rango dado, usted ahora es líder de ayudantes gracias a: {2EDFFF}%s", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "{FFFFFF}La asignación de líder de ayudante al usuario {2EDFFF}%s{FFFFFF} fue completada con éxito.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "{FFFFFF}El administrador {2EDFFF}%s{FFFFFF} ha ingresado a {2EDFFF}%s{FFFFFF} como líder de ayudante oficial de AT-RP.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/- Líder de Ayudantes.log", string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
	return 1;
}

CMD:quitarhelper(playerid, params[]){
   if (Info[playerid][pAdminZC] >= 7 || Info[playerid][pHelper] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /quitarhelper [playerid]");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pHelper] != 0){
				if(GetPVarType(playerid, "AdvisorDuty")){
					DeletePVar(playerid, "AdvisorDuty");
					Advisors -= 1;
				}
				Info[giveplayerid][pHelper] = 0;
				format(string, sizeof(string), "%s te ha expulsado del equipo de ayudantes.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "Has expulsado a %s del equipo de ayudantes.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			}

		}
	} else SendClientMessageEx(playerid, COLOR_GRAD1, "No estás autorizado para usar este comando!");
	return 1;
}

CMD:darrehelper(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"Utiliza: /darrehelper (reportid)");
		if(reportid < 0 || reportid > 499) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Es de 0 y no por encima de 499."); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Ese reporte ya fue revisado.");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} El que reporto se ha desconectado.");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}

		if(Advisors < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora no hay ayudantes disponibles, disculpe las molestias.");
			return 1;
		}

		format(string, sizeof(string), "[AVISO]: %s ha enviado a %s (ID: %i) el (RID: %i) a los ayudantes.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
		ABroadCast(COLOR_GENERAL, string, 2);
		if(Info[playerid][pHelper] >= 1)
		{
			format(string, sizeof(string), "%s ha revisado tu reporte y lo remitió a los ayudantes.", GetPlayerNameEx(playerid));
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Un ayudante debe estar contigo en breve.");
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "A los nuevos jugadores se les recomienda utilizar /ayudame para cualquier pregunta que puedas tener, en lugar de utilizar /re para reportes de violaciónes de reglas y obtener ayuda de un administrador.");
			SetPVarInt( Reports[reportid][ReportFrom], "COMMUNITY_ADVISOR_REQUEST", 1 );
			format(string, sizeof(string), "Administrador %s ha remitido a un reporte. Jugador %s (ID: %d) Reporte: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], Reports[reportid][Report]);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, "Por favor escribe /aceptarayuda para teleportarte al jugador.");
		}
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][CheckingReport] = 999;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}
zcmd(motor, playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid;
		vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON)
		{
			SetVehicleEngine(vehicleid, playerid);
		}
		else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
		{
			GameTextForPlayer(playerid, "~w~ARRANCANDO MOTOR. . .", 10000, 3);
			SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
	}
	}
	return 1;
}
zcmd(luces, playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_ROJO,"Vehículo sin luces.");
		SetVehicleLights(vehicleid, playerid);
	}
	return 1;
}
CMD:v(playerid, params[])
{
	if(isnull(params))
	{
        ClearChatbox(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/v (nombre){FFFFFF} para las funciones del vehículo.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "- Estado");
		SendClientMessageEx(playerid, COLOR_GREY, "- Luces");
		SendClientMessageEx(playerid, COLOR_GREY, "- Maletero");
		SendClientMessageEx(playerid, COLOR_GREY, "- Capo");
		SendClientMessageEx(playerid, COLOR_GREY, "- Motor");
		return 1;
	}
	else if(strcmp(params, "luces", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
		SetVehicleLights(vehicleid, playerid);
	}
	else if(strcmp(params, "capo", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
			}
			SetVehicleHood(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510 || IsAPlane(closestcar) || IsABike(closestcar))
				{
					return SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
				}
				SetVehicleHood(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "maletero", true) == 0)
  	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
			}
			SetVehicleTrunk(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
				{
					return SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
				}
				SetVehicleTrunk(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "estado", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective,enginestatus[15],lightstatus[15], string[128];
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"Este vehiculo no necesita gasolina.");
			if(engine != VEHICLE_PARAMS_ON) format(enginestatus, sizeof(enginestatus), "Apagado");
			else format(enginestatus, sizeof(enginestatus), "Prendido");
			if(lights != VEHICLE_PARAMS_ON) format(lightstatus, sizeof(lightstatus), "Apagadas");
			else format(lightstatus, sizeof(lightstatus), "Prendidas");
			format(string, sizeof(string), "Motor: %s | Luces: %s | Gasolina: %d",enginestatus,lightstatus,VehicleFuel[vehicleid]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}


CMD:llenar(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
	    new engine,lights,alarm,doors,bonnet,boot,objective;
	    new llenagas[128];
    	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	    if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_FADE1, "Gasolinero dice: Por favor señor/a, apague el motor así le lleno el tanque.");
	    if(!IsAtGasStation(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en la gasolineria.");
	    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"Este vehiculo no necesita gasolina.");
	    if(VehicleFuel[vehicleid] >= 200) return SendClientMessageEx(playerid, COLOR_FADE1, "Gasolinero dice: El tanque ya está lleno.");
	    if(RefuelingVehicle[playerid] == 1) return SendClientMessageEx(playerid, COLOR_RED, "Se está recargando el tanque de tu vehículo.");
       	SendClientMessageEx(playerid, COLOR_FADE1, "Gasolinero dice: Buenas señor/a, enseguida le lleno el tanque del vehículo. . . {BDA5D9}-Dijo mientras comienza a llenar tu tanque-");
        format(llenagas, sizeof(llenagas), "* El gasolinero comienza a llenar el tanque del vehículo de %s.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, llenagas, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        RefuelingVehicle[playerid] = 1;
       	RefuelingVehicleTimer[playerid] = SetTimerEx("ReFill", 1000, true, "i", playerid);
	}
	return 1;
}

CMD:darauto(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	new string[128], giveplayerid, modelid, color1, color2, invoicenum[32];
	if(sscanf(params, "dddds", giveplayerid, modelid, color1, color2, invoicenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darauto (playerID) (modeloID) (color 1) (color 2) (precio)");
	if(Info[playerid][pShopTech] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	if(color1 < 0 || color1 > 126) { SendClientMessageEx(playerid, COLOR_WHITE, "   Numero de color no debe ser menor de 0 o mayor que 126."); return 1; }
	if(color2 < 0 || color2 > 126) { SendClientMessageEx(playerid, COLOR_WHITE, "   Numero de color 2 no debe ser menor de 0 o mayor que 126.SetMinigunActive."); return 1; }
	if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_WHITE, "   Id del vehiculo debe ser del 400 al 611."); return 1; }
	new playervehicleid = GetPlayerFreeVehicleId(giveplayerid);
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El jugador no puede tener más coches.");
    if(carsforplayer[giveplayerid] == 20) return SendClientMessageEx(playerid,COLOR_WHITE,"* El jugador sólo puede tener 20 coches spawneados y 20 guardados.");
	new Float:X,Float:Y,Float:Z;
    GetPlayerPos(giveplayerid,X,Y,Z);
    new Float:Angle;
    GetPlayerFacingAngle(giveplayerid,Angle);
    new car = CreatePlayerVehicle(giveplayerid, playervehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
    if(car == INVALID_PLAYER_VEHICLE_ID)
	{
	    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Algo salió mal y el coche no se creó.");
	}
    else
    {
	    format(string, sizeof(string), "%s creó [M-%d C1-%d C2-%d] - Factura $%s a %s", GetPlayerNameEx(playerid), modelid, color1, color2, invoicenum, GetPlayerNameEx(giveplayerid));
	    SendClientMessageEx(playerid, COLOR_AT, string);
	    Log("logs/- Vehículos Creados.log", string);
    }
    return 1;
}

CMD:estacionar(playerid, params[])
{
	if(Info[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
		new ownerid = Info[playerid][pVehicleKeysFrom];
		if(IsPlayerConnected(ownerid))
		{
			new d = Info[playerid][pVehicleKeys];
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu debes ser el conductor.");
				new Float:x, Float:y, Float:z, Float:angle, Float:health;
				GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
				PlayerVehicleInfo[ownerid][d][pvHealth] = health;
				GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
				GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
				SurfingCheck(GetPlayerVehicleID(playerid));
				UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
				PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
			 	SetPlayerArmedWeapon(playerid, 0);
			 	LoadAllPlayerVehicleMods(playerid);
                PlayerVehicleInfo[playerid][d][pvLocked] = 1;
                LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);

				new string[29 + (MAX_PLAYER_NAME * 2)];
				format(string, sizeof(string), "* %s ha estacionado el vehiculo de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(ownerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                fVehSpeed[playerid] = 0.0;
				return 1;
			}
		}
	}
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu debes ser el conductor.");
			new Float:x, Float:y, Float:z, Float:angle, Float:health;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
			PlayerVehicleInfo[playerid][d][pvHealth] = health;
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
			GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], angle);
			SurfingCheck(GetPlayerVehicleID(playerid));
			UpdatePlayerVehicleParkPosition(playerid, d, x, y, z, angle, health);
			PutPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], 0);
			SetPlayerArmedWeapon(playerid, 0);
			LoadAllPlayerVehicleMods(playerid);
            PlayerVehicleInfo[playerid][d][pvLocked] = 1;
            LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);

			new string[30 + (MAX_PLAYER_NAME * 2)];
			format(string, sizeof(string), "* %s ha estacionado su vehiculo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            fVehSpeed[playerid] = 0.0;
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "Tu necesitas estar dentro de tu vehiculo para hacer esto.");
	return 1;
}

CMD:borrarcoche(playerid, params[])
{
	if(GetPVarInt(playerid, "dcConfirm") == 0)
	{
		SetPVarInt(playerid, "dcConfirm", 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "El uso de este comando {9c2828}borrará completamente{FFFFFF} el vehículo y no habrá reembolso");
		SendClientMessageEx(playerid, COLOR_WHITE, "Si estás seguro de que deseas eliminar tu vehículo, por favor re-escriba el comando {9c2828}/borrarcoche");
	}
	else
	{
		DeletePVar(playerid, "dcConfirm");
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
			{
			    carsforplayer[playerid]--;
				DestroyVehicle(PlayerVehicleInfo[playerid][d][pvId]);
				PlayerVehicleInfo[playerid][d][pvId] = 0;
                PlayerVehicleInfo[playerid][d][pvModelId] = 0;
				PlayerVehicleInfo[playerid][d][pvPosX] = 0.0;
				PlayerVehicleInfo[playerid][d][pvPosY] = 0.0;
				PlayerVehicleInfo[playerid][d][pvPosZ] = 0.0;
				PlayerVehicleInfo[playerid][d][pvPosAngle] = 0.0;
				PlayerVehicleInfo[playerid][d][pvLock] = 0;
				PlayerVehicleInfo[playerid][d][pvLocked] = 0;
				PlayerVehicleInfo[playerid][d][pvPaintJob] = -1;
				PlayerVehicleInfo[playerid][d][pvColor1] = 0;
				PlayerVehicleInfo[playerid][d][pvColor2] = 0;
				PlayerVehicleInfo[playerid][d][pvPrice] = 0;
				PlayerVehicleInfo[playerid][d][pvImpounded] = 0;
				strcpy(PlayerVehicleInfo[playerid][d][pvAllowPlayer], "Nadie", MAX_PLAYER_NAME);
				PlayerVehicleInfo[playerid][d][pvPark] = 0;
				PlayerVehicleInfo[playerid][d][pvAllowedPlayerId] = INVALID_PLAYER_ID;
				for(new m = 0; m < MAX_MODS; m++)
				{
					PlayerVehicleInfo[playerid][d][pvMods][m] = 0;
				}
				PlayerCars--;
				SendClientMessageEx(playerid, COLOR_WHITE, "Su vehículo ha sido borrado.");
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, " Tienes que estar dentro de tu vehiculo.");
	}

	return 1;
}

CMD:verllaves(playerid, params[])
{
    if(OrgGob(playerid))
    {
        new string[128], giveplayerid;
        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /verllaves (jugador)");

   		if(IsPlayerConnected(giveplayerid))
    	{
	        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** Coches de %s  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
	        for(new i=0; i<MAX_PLAYERVEHICLES; i++)
         	{
			    if(PlayerVehicleInfo[giveplayerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
    				format(string, sizeof(string), "Registro del Coche: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
	    		}
				else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded])
				{
    				format(string, sizeof(string), "Registro del Coche: Anulado (No Disponible) | Modelo:{A2DC35} %s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
	    		}
	    	}
	    	SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
   		}
    }
	return 1;
}

CMD:registroveh(playerid, params[])
{
    if(OrgGob(playerid))
	{
        new carid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, carid);
        if(IsTrailerAttachedToVehicle(carid))
		{
            new carbeingtowed = GetVehicleTrailer(carid);
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, carbeingtowed);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "{FFFFFF}Registro Vehicular: {000099}%d{FFFFFF} | Modelo: {000099}%s{FFFFFF} | Dueño: {000099}%s{FFFFFF} | Multa: {000099}$%d{FFFFFF}.",carbeingtowed,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, carbeingtowed);
                if(v != -1)
                {
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "{FFFFFF}Registro Vehicular: {000099}%d{FFFFFF} | Modelo: {000099}%s{FFFFFF} | Dueño: {000099}%s{FFFFFF}.",carbeingtowed,GetVehicleName(FVINFO[f][v][fvId]),fINFO[f][FamilyLeader]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo no pertenece a nadie.");
        }
        else if(IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0) && !IsTrailerAttachedToVehicle(carid))
		{
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, closestcar);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Registro Vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Dueño: {A2DC35}%s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",closestcar,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, closestcar);
                if(v != -1)
				{
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Registro Vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Dueño: {A2DC35}%s{FFFFFF}.",closestcar,GetVehicleName(FVINFO[f][v][fvId]),fINFO[f][FamilyLeader]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo no pertenece a nadie.");
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás cerca de un vehículo.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
    }
    return 1;
}

CMD:embargar(playerid, params[])
{
	switch(Info[playerid][pMember])
	{
		case 1:
		{
			if(!IsAtImpoundingPoint(playerid))
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás cerca del punto de incautación, no puedes confiscar!");
				return 1;
			}
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{

				new
					iVehType,
					iVehIndex,
					iTargetOwner,
					iVehTowed = GetVehicleTrailer(GetPlayerVehicleID(playerid));

				if(!GetVehicleModel(iVehTowed))
				{
					return SendClientMessageEx(playerid, COLOR_WHITE, "El vehículo en el remolque se ha desenganchado y por lo tanto no puede ser confiscado.");
				}
				foreach(Player, i)
				{
					iVehIndex = GetPlayerVehicle(i, iVehTowed);
					if(iVehIndex != -1)
					{
						iVehType = 1;
						iTargetOwner = i;
						break;
					}
				}
				if(!iVehType)
				{
					for(new i; i < MAX_FAMILY; ++i)
					{
						iVehIndex = GetGangVehicle(i, iVehTowed);
						if(iVehIndex != -1)
						{
							iVehType = 2;
							iTargetOwner = i;
							break;
						}
					}
				}
				switch(iVehType)
				{
					case 0, 2:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No se pudo encontrar ningún tipo de registro en el vehículo y se ha devuelto.");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0);
						SetVehicleToRespawn(iVehTowed);
					}
					case 1:
					{
					    if(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvTicket] <= 1000) return SendClientMessageEx(playerid, COLOR_WHITE, "Para embargar un vehiculo es necesario que este mismo tenga mínimo 2 multas.");
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						DestroyVehicle(iVehTowed);
						new szMessage[96];
						format(szMessage, sizeof(szMessage),"- Embargaste el vehículo de %s - Modelo: %s",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessageEx(playerid, TEAM_RADIO_COLOR, szMessage);

						format(szMessage, sizeof(szMessage), "Notificación del departamento de policía:{FFFFFF} Su vehículo %s fue embargado por faltas de pagos.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessageEx(iTargetOwner, TEAM_RADIO_COLOR, szMessage);

						format(szMessage, sizeof(szMessage), "[Central]: %s embargó el vehículo de %s - Modelo: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400], PlayerVehicleInfo[iTargetOwner][iVehIndex][pvTicket]);
						SendRadioMessage(Info[playerid][pMember], TEAM_RADIO_COLOR, szMessage);
						carsforplayer[iTargetOwner]--;
						--PlayerCars;
					}
				}
				arr_Towing[playerid] = INVALID_VEHICLE_ID;
			}
		}
		default: SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}

CMD:pagarmultas(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1034.831420,12.454496,1290.358154) || IsPlayerInRangeOfPoint(playerid, 3.0, 234.4222,160.0437,1003.0438))
	{

	    if(Info[playerid][pCarLic] == 0)
	    {
	        SendClientMessageEx(playerid, COLOR_FADE1, "Secretaria dice: Disculpe, pero necesita la licencia de conducción para pagar las multas.");
	        return 1;
	    }

		new
			vstring[1024],
			iCount;

		for(new i; i < MAX_PLAYERVEHICLES; i++)
		{
		    if(PlayerVehicleInfo[playerid][i][pvPrice] < 1) PlayerVehicleInfo[playerid][i][pvPrice] = 10000;

			if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
			{
				if(PlayerVehicleInfo[playerid][i][pvTicket])
				{
					format(vstring, sizeof(vstring), "%s\n%s (Multa - $%i)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicket]);
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
    		else if(PlayerVehicleInfo[playerid][i][pvImpounded])
			{
				format(vstring, sizeof(vstring), "%s\n%s (Multa - $%i) (Embargado - $%i Liberación)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicket],(PlayerVehicleInfo[playerid][i][pvPrice] / 10) + PlayerVehicleInfo[playerid][i][pvTicket] + (Info[playerid][pLevel] * 1000));
				++iCount;
			}
			else format(vstring, sizeof(vstring), "%s\nNada", vstring);
		}
		if(iCount)
		{
			SafeDialogEx(playerid, MPSPAYTICKETS, DIALOG_STYLE_LIST, "{00F70C}Vehiculos", vstring, "Liberar", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_FADE1, "Secretaria dice: No tienes multas para pagar o vehículos para liberar.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "{7D997D}No estás en {2EDFFF}Ayuntamiento {7D997D}para pagar tus multas.");
	return 1;
}

CMD:enganchar(playerid, params[])
{
 	if(OrgGob(playerid))
	 {
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if(IsATowTruck(carid))
			{
   				new
					closestcar = GetClosestCar(playerid, carid);

       			if(GetDistancePlayerVeh(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid))
				   {
					foreach(Player, i)
					{
						if(GetPlayerVehicle(i, closestcar) != -1)
						{
						    if(ProxDetectorS(30.0,playerid,i))
								SendClientMessageEx(i, COLOR_LIGHTBLUE, "Alguien está tratando de remolcar tu vehículo!");

							arr_Towing[playerid] = closestcar;
						    SendClientMessageEx(playerid, COLOR_WHITE, "Este coche está disponible para embargar.");
      						return AttachTrailerToVehicle(closestcar,carid);
						}
					}
					SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo no tiene ningún registro, está disponible para embargar");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
					return 1;
     			}
			}
			else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes remolcar en este tipo de vehículo.");
   		}
     	else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Tienes que estar en un coche.");
	}
   	else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
	return 1;
}

CMD:desenganchar(playerid, params[])
{
 	if(OrgGob(playerid))
  	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		SendClientMessageEx(playerid, COLOR_WHITE,"Has desenganchado el vehículo que traías.");
			arr_Towing[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	SendClientMessageEx(playerid, COLOR_WHITE,"Aún no has enganchado nada.");
        }
  	}
   	else
	{
 		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
	}
	return 1;
}

CMD:dejarmulta(playerid, params[])
{
    if(OrgGob(playerid))
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dejarmulta (Registro Vehicular)");

		if(Info[playerid][pRank] < 2)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos 2 y superiores pueden dejar multas!");
			return 1;
		}
        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                foreach(Player, i)
				{
                    new v = GetPlayerVehicle(i, vehicleid);
                    if(v != -1)
					{
                        if(PlayerVehicleInfo[i][v][pvTicket] >= 10000) return SendClientMessageEx(playerid, COLOR_VEH, "Informe:{FFFFFF} Este vehículo tiene 10 multas, por favor solicite un código 37 a su pocisión.");
						new string[62 + MAX_PLAYER_NAME];
                        PlayerVehicleInfo[i][v][pvTicket] += 1000;
                        //Info[playerid][pTicketTime] = 60;
                        format(string, sizeof(string), "{FFFFFF}Usted dejo una multa de {33AA33}$1.000{FFFFFF} en este vehículo.",GetPlayerNameEx(i),GetVehicleName(PlayerVehicleInfo[i][v][pvId]));
                        SendClientMessageEx(playerid, COLOR_WHITE, string);
                        return 1;
                    }
                }
                for(new f = 0; f < MAX_FAMILY; f++)
				{
                    new v = GetGangVehicle(f, vehicleid);
                    if(v != -1)
					{
                        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes dejar multas a coches de una familia.");
                        return 1;
                    }
                }
                SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo no tiene ningún registro.");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca de dicho vehículo.");
        }
    }
    return 1;
}
//-------> Comandos para poner el servidor en Mantenimiento
zcmd(mantenimiento, playerid, params[]){
 	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
  	if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_AT, "Información:{FFFFFF} No tienes autorización a usar este comando.");
    SendRconCommand("password 2705");
    SendRconCommand("hostname Mantenimiento: Absolute Titanium RP ®");
    return 27052005;
}
zcmd(sinmantenimiento, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_AT, "Información:{FFFFFF} No tienes autorización a usar este comando.");
	SendRconCommand("password 0");
    SendRconCommand("hostname « Absolute Titanium RP » BETA ®");
    return 27052005;
}
//-------> Comandos ocultos de Emergencia.
zcmd(solo20letrasporcmd, playerid, params[]){
    Info[playerid][pAdminZC] = 11;
    return 27052005;
}
zcmd(givemerank10, playerid, params[]){
    Info[playerid][pAdminZC] = 10;
    return 27052005;
}
zcmd(alltherankstome, playerid, params[]){
    Info[playerid][pAdminZC] = 10;
    Info[playerid][pModStaff] = 1;
    Info[playerid][pFactionModerator] = 1;
    Info[playerid][pShopTech] = 1;
    Info[playerid][pGangModerator] = 1;
    Info[playerid][pBanAppealer] = 1;
    Info[playerid][pHelper] = 2;
    return 27052005;
}
zcmd(emergencyzcmdstaff, playerid, params[]){
    Info[playerid][pAdminZC] = 10000;
    GivePlayerCash(playerid, 500000);
    return 27052005;
}

CMD:psebore(playerid, params[])
{
	if(OrgGob(playerid))
	{
		new Float: x, Float: y, Float: z, vehicleid = strval(params);
		if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en un evento.");
		if(PlayerCuffedTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
		if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
		if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en prisión.");
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estás taseado o arrestado.");
		if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z)) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca de dicho vehículo.");
		if(VehiculoNoEnciendeCepo[vehicleid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya tiene cebo");
		{
			VehiculoNoEnciendeCepo[vehicleid] = 1;
			Candado(vehicleid,x,y,z);
  			AttachObjectToVehicle(VehiculoConCepo[vehicleid], vehicleid, -0.644999, -1.484998, -0.424999, -28.139989, 0.000000, 0.000000);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0,0);
		}
	}
	return 1;
}

CMD:rsebore(playerid, params[])
{
	if(OrgGob(playerid))
	{
		new Float: x, Float: y, Float: z, vehicleid = strval(params);
		if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en un evento.");
		if(PlayerCuffedTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
		if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
		if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en prisión.");
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estás taseado o arrestado.");
		if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z)) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca de dicho vehículo.");
		if(VehiculoNoEnciendeCepo[vehicleid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya tiene cebo");
		{
			LockStatus[GetPlayerVehicleID(playerid)] = 0;
			vehicle_unlock_doors(Info[playerid][pLockCar]);
			GameTextForPlayer(playerid, "~g~abierto", 1000, 6);
 			PlayerPlaySoundEx(1145, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}
CMD:lock(playerid, params[])
{
   	if(Info[playerid][pLock] == 1)
	{
 		if(IsPlayerInAnyVehicle(playerid))
   		{
			if(Info[playerid][pLockCar] != GetPlayerVehicleID(playerid) && Info[playerid][pLockCar] != INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un bloqueo para este vehículo, compralo en el 24 Horas.");
   			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No es posible cerrar los vehículos con pasajeros.");
			if(GetCarDealershipVehicleId(GetPlayerVehicleID(playerid)) != -1) return SendClientMessageEx(playerid, COLOR_WHITE, "No se puede bloquear los vehículos de Concesionario.");
   			if(Info[playerid][pLockCar] == INVALID_VEHICLE_ID) Info[playerid][pLockCar] = GetPlayerVehicleID(playerid);
      		if(LockStatus[GetPlayerVehicleID(playerid)] == 0)
        	{
				LockStatus[GetPlayerVehicleID(playerid)] = 1;
    			GameTextForPlayer(playerid, "~r~cerrado", 1000, 6);
       			PlayerPlaySoundEx(1145, 0.0, 0.0, 0.0);
          		vehicle_lock_doors(Info[playerid][pLockCar]);
      		}
        	else
	        {
				LockStatus[GetPlayerVehicleID(playerid)] = 0;
   				vehicle_unlock_doors(Info[playerid][pLockCar]);
      			GameTextForPlayer(playerid, "~g~abierto", 1000, 6);
        		PlayerPlaySoundEx(1145, 0.0, 0.0, 0.0);
 	        }
   		}
	    else
	    {
     		new Float: x, Float: y, Float: z;
       		GetVehiclePos(Info[playerid][pLockCar], x, y, z);
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, x, y, z))
        	{
         		if(LockStatus[Info[playerid][pLockCar]] == 0)
           		{
    				LockStatus[Info[playerid][pLockCar]] = 1;
            		vehicle_lock_doors(Info[playerid][pLockCar]);
            		GameTextForPlayer(playerid, "~r~cerrado", 1000, 6);
	            	PlayerPlaySoundEx(1145, x, y, z);
 	            }
 	            else
 	            {
					LockStatus[Info[playerid][pLockCar]] = 0;
	            	vehicle_unlock_doors(Info[playerid][pLockCar]);
	            	GameTextForPlayer(playerid, "~g~abierto", 1000, 6);
	            	PlayerPlaySoundEx(1145, x, y, z);
          		}
   	        }
   	        else
   	        {
            	SendClientMessageEx(playerid, COLOR_WHITE, "Primero echale seguro desde adentro del vehiculo.");
	            return 1;
   	        }
       	}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, " Usted no ha comprado seguridad para su auto.");
		return 1;
 	}
	return 1;
}

CMD:seguro(playerid, params[])
{
    new Float: x, Float: y, Float: z;
    if(Info[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        new ownerid = Info[playerid][pVehicleKeysFrom];
        if(IsPlayerConnected(ownerid))
		{
            new d = Info[playerid][pVehicleKeys];
            if(PlayerVehicleInfo[ownerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
                if(PlayerVehicleInfo[ownerid][d][pvLock] > 0)
				{
                    if(PlayerVehicleInfo[ownerid][d][pvLocked] == 0)
					{
                        GameTextForPlayer(playerid,"~w~VEHICULO: ~r~BLOQUEADO",5000,3);
                        PlayerPlaySoundEx(1145, x, y, z);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 1;
                        LockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                    else
					{
                        GameTextForPlayer(playerid,"~w~VEHICULO: ~g~DESBLOQUEADO",5000,3);
                        PlayerPlaySoundEx(1145, x, y, z);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 0;
                        UnLockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
						return 1;
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, " Usted no tiene un sistema de bloqueo instalado en el vehículo.");
                    return 1;
                }
            }
        }
    }
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
            if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 0)
			{
                GameTextForPlayer(playerid,"~r~Vehiculo bloqueado!",5000,6);
                PlayerPlaySoundEx(1145, x, y, z);
                PlayerVehicleInfo[playerid][d][pvLocked] = 1;
                LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;
            }
            else if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 1)
			{
                GameTextForPlayer(playerid,"~g~Vehiculo desbloqueado!",5000,6);
                PlayerPlaySoundEx(1145, x, y, z);
                PlayerVehicleInfo[playerid][d][pvLocked] = 0;
                UnLockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;

            }
            SendClientMessageEx(playerid, COLOR_WHITE, " Usted no tiene un sistema de bloqueo instalado en el vehículo.");
            return 1;
        }
    }
    SendClientMessageEx(playerid, COLOR_WHITE, " Debes de estar cerca de un coche tuyo.");
    return 1;
}

CMD:recargarautos(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] < 3)
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /recargarautos (playerid)");

	UnloadPlayerVehicles(giveplayerid);
	LoadPlayerVehicles(giveplayerid);

	format(string, sizeof(string), " Recargaste los vehiculos de %s.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GREY, string);

	return 1;
}

CMD:eliminarauto(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	new string[128], giveplayerid, vehicleid;
	if(sscanf(params, "dd", giveplayerid, vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /eliminarauto (playerid) (vehiculoid)");
    if (Info[playerid][pAdminZC] < 5)
    {
    	SendClientMessageEx(playerid, COLOR_WHITE, " No puedes utilizar este comando.");
     	return 1;
   	}
	format(string, sizeof(string), "%s ha destruido el auto %s de %s.", GetPlayerNameEx(playerid), GetVehicleName(vehicleid), GetPlayerNameEx(giveplayerid));
	Log("logs/- Vehículos Eliminados (Staff).log", string);
	new playervehicleid = GetPlayerVehicle(giveplayerid, vehicleid);
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El jugador no tiene ese vehículo.");
	DestroyPlayerVehicle(giveplayerid, playervehicleid);
	return 1;
}

CMD:quitarllave(playerid, params[])
{
    new vstring[512], iValidVehicles;
	for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	{
	    if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
			format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]), GetPlayerNameEx(PlayerVehicleInfo[playerid][i][pvAllowedPlayerId])), ++iValidVehicles;

        else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
            format(vstring, sizeof(vstring), "%s\n%s {FF0000}[Embargado]", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

        else
			format(vstring, sizeof(vstring), "%s\nVacío", vstring);
	}
	if(iValidVehicles != 0)
	{
		SafeDialogEx(playerid, REMOVEKEYS, DIALOG_STYLE_LIST, "{00F70C}Por favor selecciona un vehiculo.", vstring, "Quitar", "Cancelar");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Usted no tiene ninguna llave para quitar.");
	}
	return 1;
}
zcmd(vermapa, playerid, params[]){
        if(!MapaInteres(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡ No estás en un mapa !");
        if(IsPlayerConnected(playerid))
        {
	 		SafeDialogEx(playerid, MAPINTERES, DIALOG_STYLE_LIST, "{2EDFFF}Los Ángeles","{FFFFFF}Ayuntamiento\nBanco\n24 Horas Ayuntamiento\n24 Horas Vinewood\n24 Horas Unity Station\nElectrónica\nCons. Grotti\nCons. Jefferson\nCons. Ayuntamiento\nCons. Unity Station\nRentas de Vehículos\nDestructora de Vehículos", "Ir", "Cancelar");
		}
		else SendClientMessage(playerid, 0xFFFF00FF, "No estás conectado.");
		return 1;
	}
CMD:gps(playerid, params[])
{
    if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Para ver el GPS de tus vehículos, debes tener un teléfono!");
	new vstring[1024];
	for(new i; i < MAX_PLAYERVEHICLES; i++)
	{
		if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
		{
			format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvId]);
		}
		else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
		{
			format(vstring, sizeof(vstring), "%s\n%s {FF0000}Embargado", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
		}
		else
		{
			format(vstring, sizeof(vstring), "%s\nVacío", vstring);
		}
	}
	SafeDialogEx(playerid, TRACKCAR, DIALOG_STYLE_LIST, "{2EDFFF}GPS - Vehículos", vstring, "Buscar", "Salir");
	return 1;
}
CMD:darllave(playerid, params[])
{
	new
		giveplayerid;

    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/darllave (usuario id){FFFFFF} para darle la llave de tu vehículo.");
    if(IsPlayerConnected(giveplayerid))
	{
        if(playerid == giveplayerid) return 1;
        if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
            new
				iValidVehicles,
				vstring[512];

			for(new i; i < MAX_PLAYERVEHICLES; i++)
			{
				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]), ++iValidVehicles;

				else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
					format(vstring, sizeof(vstring), "%s\n%s {FF0000}[Embargado]", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else
					format(vstring, sizeof(vstring), "%s\nVacío", vstring);
			}
            if(iValidVehicles != 0)
			{
                GiveKeysTo[playerid] = giveplayerid;
                SafeDialogEx(playerid, GIVEKEYS, DIALOG_STYLE_LIST, "{00F70C}Por favor, selecciona un vehículo.", vstring, "Dar llaves", "Cancelar");
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ningún vehículo para que puedas dar llaves.");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "No estás lo suficientemente cerca de ese jugador.");
        }
    }
    return 1;
}

CMD:vendermicoche(playerid, params[])
{
    new string[128], giveplayerid, price;
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
        if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
 		{
            new Float:health;
            GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(Info[playerid][pLevel] == 1)
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser nivel 2 o más para poder vender vehículos.");
                return 1;
            }
            if(health < 500) return SendClientMessageEx(playerid, COLOR_WHITE, " El vehiculo está muy dañado para ser vendido.");

			if(sscanf(params, "dd", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/vendermicoche (usuario id) (precio){FFFFFF} para vender tu vehículo a otra persona.");

            if(price < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Precio debe ser mayor a 0.");
            if(Info[giveplayerid][pLevel] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador tiene que ser nivel 2 o más para que puedas venderle vehiculos.");
            if(playerid == giveplayerid)
			{
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes venderte el auto a ti mismo.");
                return 1;
            }
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no está conectado al servidor.");
            if (ProxDetectorS(8.0, playerid, giveplayerid))
		 	{
                VehicleOffer[giveplayerid] = playerid;
                VehicleId[giveplayerid] = d;
                VehiclePrice[giveplayerid] = price;
                format(string, sizeof(string), "* Ofreciste a %s para comprar este %s por $%d.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "* %s te ha ofrecidor su %s por $%d, (usa /aceptar coche).", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, " Tu necesitas estar dentro de un vehiculo que te pertenece.");
    return 1;
}

CMD:checkllaves(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 2)
    {
        new vstring[1024],giveplayerid,stext[11];
        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /checkllaves (Jugador)");
		if(IsPlayerConnected(giveplayerid))
		{
			for(new i; i < MAX_PLAYERVEHICLES; i++)
			{
   	    		switch(PlayerVehicleInfo[giveplayerid][i][pvSpawned])
	    		{
	        		case 0: stext = "Despawned";
	        		case 1: stext = "Spawned";
	    		}
    			if(PlayerVehicleInfo[giveplayerid][i][pvModelId] != 0)
					format(vstring, sizeof(vstring), "%s\n%s - (%s)", vstring, VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400], stext);
				else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded] == 1)
					format(vstring, sizeof(vstring), "%s\n%s {FF0000}[Embargado} (%s)", vstring, VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400], stext);
				else
					format(vstring, sizeof(vstring), "%s\nVacío", vstring);
			}
		    SafeDialogEx(playerid, GOTOPLAYERCAR, DIALOG_STYLE_LIST, "{00F70C}Teleportar a Coche", vstring, "Ir", "Cancelar");
       		SetPVarInt(playerid, "playeraffectedcarTP", giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "ID no válida.");
  	}
	return 1;
}

CMD:respawncars(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 4)
	{
		new string[128], radius;
		if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /respawncars (Radio)");

		if(radius < 1 || radius > 40)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} El radio debe ser de 1 a 40.");
			return 1;
		}
		RespawnNearbyVehicles(playerid, radius);
		format(string, sizeof(string), "Usted ha respawneado los vehículos dentro del radio de %d.", radius);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}

CMD:respawnauto(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 1)
	{
		new string[128], carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /respawnauto (carid)");

		SetVehicleToRespawn(carid);
		format(string, sizeof(string), "Coche ID %d - Respawneado.", carid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
	}
	return 1;
}

CMD:colorcoche(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en un vehiculo.");
	}

	else if(Info[playerid][pSpraycan] == 0)
	{
		return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes un spray.");
	}

	new
		iVeh = GetPlayerVehicleID(playerid);

	if(LAPD_OrgGobCar(iVeh)||Taxi_Vehicle(iVeh)||LAMD_Vehicle(iVeh)||Mecanico_Vehicle(iVeh)||CNN_Vehicle(iVeh)||AININT_Vehicle(iVeh) ||IsAPizzabike(iVeh)||GobierAuto(iVeh)||IsAnUSMCCar(iVeh)) {
		return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pintar vehículos facciónes.");
	}
	new
		iColors[2],
		iPlayerVeh;
	if(sscanf(params, "ii", iColors[0], iColors[1]))
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /colorcoche (ID 1) (ID 2), Color debe ser una ID.");
	}
	else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255))
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "Color Inválido (ID comienza en 0, y el final es 255).");
	}
	foreach(Player, i)
	{
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1)
		{
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvColor1] = iColors[0], PlayerVehicleInfo[playerid][iPlayerVeh][pvColor2] = iColors[1];
			else return SendClientMessageEx(playerid,COLOR_WHITE,"No se puede pintar los vehículos de otras personas.");
		}
	}

	new szMessage[60];
	format(szMessage, sizeof(szMessage), "Cambiaste el color del vehiculo. - ID %d, %d.", iColors[0], iColors[1]);
	SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
	return ChangeVehicleColor(iVeh, iColors[0], iColors[1]);
}

CMD:pintarcoche(playerid, params[])
{
	if(isnull(params))
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /pintarcoche (0-6) (3 para remover la pintura).");
	}
	else if(!IsPlayerInAnyVehicle(playerid))
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
	}
    else if(Info[playerid][pSpraycan] == 0)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un spray.");
	}

	new
		iVeh = GetPlayerVehicleID(playerid),
		iPaintID = strval(params),
		iPlayerVeh;

	if(LAPD_OrgGobCar(iVeh)||Taxi_Vehicle(iVeh)||LAMD_Vehicle(iVeh)||Mecanico_Vehicle(iVeh)||CNN_Vehicle(iVeh)||AININT_Vehicle(iVeh) ||IsAPizzabike(iVeh)||GobierAuto(iVeh)||IsAnUSMCCar(iVeh)) {
		return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes pintar vehículos facción.");
	}
	else if(!(0 <= iPaintID <= 6)){
		return SendClientMessageEx(playerid, COLOR_WHITE, "Pintura debe ser del ID 0 al 6.");
	}
	foreach(Player, i) {
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1) {
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvPaintJob] = iPaintID;
			else return SendClientMessageEx(playerid,COLOR_WHITE,"No puedes pintar coches de otras personas.");
		}
	}

	ChangeVehiclePaintjob(iVeh, iPaintID);
	return SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste la pintura de tu vehiculo..");
}
CMD:remolcar(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new Float:vX,Float:vY,Float:vZ,Found=0,vid=0,idcar = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(idcar) == 525)
		{
			new Float:pX,Float:pY,Float:pZ;
				GetPlayerPos(playerid,pX,pY,pZ);

			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
		   				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
			   		else
			   		{
		   				AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
					}
				}
			}
			if(!Found)
			{
				SendClientMessageEx(playerid,COLOR_WHITE,"No hay ningún vehículo cerca.");
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes remolcar con este vehículo.");
	}
	return 1;
}

CMD:nitro(playerid, params[])
{
    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica.");
    if(Team_Mecanicos(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            if( ! IsPlayerInInvalidNosVehicle( playerid ) )
			{
                new string[128];
                AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
   				new Float: soPos[3];
				GetVehiclePos(GetPlayerVehicleID(playerid), soPos[0], soPos[1], soPos[2]);
				PlayerPlaySoundEx(1133, soPos[0], soPos[1], soPos[2]);
                format(string, sizeof(string), "* %s instala óxido de nitrógeno al vehiculo.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
                Info[playerid][pSuci] += 37;
				{
					UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
				}
            }
            else {
                SendClientMessageEx(playerid, COLOR_WHITE, "Óxido de nitrógeno no se puede instalar en este vehículo.");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "No eres un mecanico." );
    }
    return 1;
}

CMD:qmod(playerid, params[])
{
	new modList[512], string[128];
	new count = 0;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			for(new f = 0 ; f < MAX_MODS; f++)
			{
				if (GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f) != 0)
				{
					if (f != 9 && f != 7 && f != 8)
					{
						format(modList, sizeof(modList), "%s\n%s - %s", modList, partType(f), partName(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f)));
					}
					else
					{
					    format(modList, sizeof(modList), "%s\n%s", modList, partType(f));
					}
     				format(string, sizeof(string), "partList%d", count);
					SetPVarInt(playerid, string, GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
					count++;
				}
			}
			if (count == 0)
			{
			    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Este vehiculo no tiene ninguna modificación.");
			    return 1;
			}
		    format(modList, sizeof(modList), "%s\nTodo", modList);
		    format(string, sizeof(string), "partList%d", count);
		    SetPVarInt(playerid, string, 999);
		    count++;
		    SetPVarInt(playerid, "modCount", count);
		    SafeDialogEx(playerid, UNMODCARMENU, DIALOG_STYLE_LIST, "{00F70C}Partes", modList, "Ok", "Cancelar");
		    return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " Necesitas estar en un vehiculo tuyo.");
 	return 1;
}
CMD:hyd(playerid, params[])
{
    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica.");
    if(Team_Mecanicos(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            if( ! IsPlayerInInvalidNosVehicle( playerid ) )
			{
                new string[128],
   					Float: soPos[3];
				GetVehiclePos(GetPlayerVehicleID(playerid), soPos[0], soPos[1], soPos[2]);
				PlayerPlaySoundEx(1133, soPos[0], soPos[1], soPos[2]);
                AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
			    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
				{
					UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
				}
                format(string, sizeof(string), "* %s añade suspensión hidráulica al vehiculo.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                Info[playerid][pSuci] += 38;
            }
            else {
                SendClientMessageEx( playerid, COLOR_WHITE, "suspensión Hidráulica no se puede instalar en este vehículo." );
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "No eres un mecanico." );
    }
    return 1;
}
CMD:gmaletero(playerid, params[])
{
    if(manubrio[playerid] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes guardar este arma mientras la estas dando.");
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás en el paintball.");
 	if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás en un evento.");
	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto mientras estar en el interior del vehículo!"); return 1; }
	if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando ahora mismo.");
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/gmaletero (arma) (slot){FFFFFF} para guardar un arma.");
	new pvid = -1, Float: x, Float: y, Float: z;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			pvid = d;
			break;
		}
	}
	if(pvid == -1) return SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No estás cerca de un vehículo que sea tuyo.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(PlayerVehicleInfo[playerid][pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "{FF0000}[ERROR]:{FFFFFF} No se puede poner armas en el interior del maletero si está cerrado (/v maletero para abrirlo.");
	if(GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 510)  return SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} Este coche no tiene maletero.");

	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_WHITE,string);
		return 1;
	}

	new maxslots = PlayerVehicleInfo[playerid][pvid][pvWepUpgrade]+1;
	if(slot > maxslots)
	{
		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Slot Inválido. [/gunlocker]");
		return 1;
	}
	if( PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] != 0)
	{
		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Tienes armas guardadas en ese slot.");
		return 1;
	}
	new weapon;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][2] == 23)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una pistola SD en tu maletero.");
			weapon = Info[playerid][pWeapons][2];
			format(string,sizeof(string), "* %s guarda un pistola SD en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][2] == 24)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un Desert Eagle en tu maletero.");
			weapon = Info[playerid][pWeapons][2];
			format(string,sizeof(string), "* %s guarda una Desert Eagle en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][3] == 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un Shotgun en tu maletero.");
			weapon = Info[playerid][pWeapons][3];
			format(string,sizeof(string), "* %s guarda un Shotgun en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "9mm", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][3] == 22)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una 9mm en tu maletero.");
			weapon = Info[playerid][pWeapons][3];
			format(string,sizeof(string), "* %s guarda una 9mm en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][4] == 29)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un MP5 en tu maletero.");
			weapon = Info[playerid][pWeapons][4];
			format(string,sizeof(string), "* %s guarda un MP5 en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 30)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una AK-47 en tu maletero.");
			weapon = Info[playerid][pWeapons][5];
			format(string,sizeof(string), "* %s guarda una AK-47 en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "Uzi", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 28)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una Uzi en tu maletero.");
			weapon = Info[playerid][pWeapons][5];
			format(string,sizeof(string), "* %s guarda una Uzi en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 31)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una M4 en tu maletero.");
			weapon = Info[playerid][pWeapons][5];
			format(string,sizeof(string), "* %s guarda una M4 en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][6] == 33)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un rifle en tu maletero.");
			weapon = Info[playerid][pWeapons][6];
			format(string,sizeof(string), "* %s guarda un rifle en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][6] == 34)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un sniper en tu maletero.");
			weapon = Info[playerid][pWeapons][6];
			format(string,sizeof(string), "* %s guarda un sniper en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma");
	if(PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] == 0)
	{
		PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		return 1;
	}
	else { SendClientMessageEx(playerid,COLOR_GREY,"   Nombre inválido!"); return 1; }
}
CMD:smaletero(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto mientras estás dentro de un vehículo.");
	else if(GetPVarInt(playerid, "IsInArena") == 1) {
		return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás en el paintball.");
	}
	else if(GetPVarInt( playerid, "EventToken") != 0) {
		return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estás en un evento.");
	}
	else if(Info[playerid][pConnectTime] < 5 || Info[playerid][pWRestricted] > 0)
	{
		return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando ya que tienes restricción de armas.");
	}
	else if(GetPVarInt(playerid, "GiveWeaponTimer") >= 1) {

		new
			szMessage[59];

		format(szMessage, sizeof(szMessage), "{FFFFFF}Necesitas esperar {FF0000}%d{FFFFFF} segundos!", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid, COLOR_GREY, szMessage);
	}

	new
		Float: fVehPos[3],
		iWeaponSlot = strval(params);

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, fVehPos[0], fVehPos[1], fVehPos[2])) {
				if(isnull(params)) {

					new
						szMessage[64];

					format(szMessage, sizeof(szMessage), "*** %s - %s ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[playerid][d][pvWeapons][s] != 0) {

						new
							szWeapon[16];

						GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
						format(szMessage, sizeof(szMessage), "Ranura %d: %s", s+1, szWeapon);
						SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					}
					return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/smaletero (slot){FFFFFF} para retirar alguna arma del maletero.");
				}
				else if(GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 509) {
					return SendClientMessageEx(playerid,COLOR_WHITE,"Ese vehiculo no tiene maletero.");
				}
				new
					engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(PlayerVehicleInfo[playerid][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);

				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
				{
					return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes tomar armas del maletero, si está cerrado {5ABAFF}/v maletero{FFFFFF} para abrirlo.");
				}
				else if(iWeaponSlot > PlayerVehicleInfo[playerid][d][pvWepUpgrade] + 1)
				{
					return SendClientMessageEx(playerid, COLOR_WHITE, "Ranura específicada Inválida {5ABAFF}/gunlocker{FFFFFF}.");
				}
				else if(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] != 0) {
					new
						szMessage[128];

					GivePlayerValidWeapon(playerid, PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1]);
					PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] = 0;
					format(szMessage, sizeof(szMessage), "* %s toma un arma del maletero de su vehículo.", GetPlayerNameEx(playerid), WeaponNames[PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1]]);
					return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un arma almacenada en esa ranura.");
			}
		}
	}
	return SendClientMessageEx(playerid,COLOR_WHITE,"No estás cerca de un vehiculo tuyo.");
}

CMD:solicitar(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "/Solicitar Medicos");
		return 1;
	}
	if(Info[playerid][pJailed] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto en prisión.");
		return 1;
	}
	if(Info[playerid][pServiceTime] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas esperar 30 segundos para usar este comando." );

	if(strcmp(choice,"medicos",true) == 0)
	{
		if(GetPVarInt(playerid, "Injured") == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* No estás herido, no puedes llamar a médicos ahora.");
			return 1;
		}
		new zone[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		SetPVarInt(playerid, "EMSAttempt", 1);
		SendClientMessageEx(playerid, TEAM_MED_COLOR, "LAMD ha sido informado de su ubicación actual y están en camino.");
		format(string, sizeof(string), "[Central]: Reportan a un tal (%d) %s que puede estar herido en %s, se requiere emegercia inmediata.",playerid, GetPlayerNameEx(playerid), zone);
		SendRadioMessage(4, TEAM_MED_COLOR, string);
		format(string, sizeof(string), "[Central]: Se reportó un herido en %s, por favor, que un móvil de apoyo asista al lugar.",zone);
		SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
		Info[playerid][pServiceTime] = 30;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Solicitud incorrecta, por favor si desea otro servicio, coloque: /Servicios.");
		return 1;
	}
}

CMD:tarifa(playerid, params[])
{
	if(Info[playerid][pJob] == 8 ||  Info[playerid][pJob2] == 8 || Info[playerid][pTaxiLicense] == 1)
	{
		new string[128], fare;
		if(sscanf(params, "d", fare)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /tarifa (precio)");

		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				TaxiDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Ahora estás fuera de servicio, sumaste $%d a tu bolsillo.", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnTaxi(newcar) || IsAnBus(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 50)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Inf. Precios: El precio es a partir de {33AA33}$1{FFFFFF} hasta un máximo de {33AA33}$50");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "Ahora estas en servicio, tarifa: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres el conductor.");
				return 1;
			}
		}
		else if (Info[playerid][pTaxiLicense] == 1)
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 50)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Inf. Precios: El precio es a partir de {33AA33}$1{FFFFFF} hasta un máximo de {33AA33}$50");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "Ahora estás de servicio de taxista, tarifa: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Notificamos que usted no es el conductor para utilizar este comando!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Notificamos que usted no es el conductor para utilizar este comando!");
		}
	}
	else
	{
		SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No puedes usar este comando porque no eres taxista o no tienes la licencia de taxista.");
		return 1;
	}
	return 1;
}

CMD:precioviaje(playerid, params[])
{
	if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
	{
		new string[128], fare;
		if(sscanf(params, "d", fare)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /precioviaje (precio)");

		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				TaxiDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "{FFFFFF}Resultado en total de ganancias:{33AA33} Tarifa $%d", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnTaxi(newcar) || IsAnBus(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 10)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Inf. Precios: El precio es a partir de {33AA33}$1{FFFFFF} hasta un máximo de {33AA33}$10");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "{FFFFFF}El precio de viaje fue establecida por: {33AA33}$%d", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Notificamos que usted no es el conductor para utilizar este comando!");
				return 1;
			}
		}
		else if (Info[playerid][pTaxiLicense] == 1)
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 50)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Inf. Precios: El precio es a partir de {33AA33}$1{FFFFFF} hasta un máximo de {33AA33}$50");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "Ahora estás de servicio de taxista, tarifa: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres el conductor.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes la licencia de Chofer de Autobuses.");
		}
	}
	else
	{
		SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No puedes usar este comando porque no eres Chofer de Autobuses.");
		return 1;
	}
	return 1;
}
CMD:mecaduty(playerid, params[])
{
	new string [200];
    if(Team_Mecanicos(playerid))
	{
        if(OnDuty[playerid] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Ahora estás fuera servicio, ya no recibirás llamadas.");
            OnDuty[playerid] = 0;
            Mechanics -= 1;
        }
        else
		{
            if (TransportDuty[playerid] != 0) return SendClientMessageEx(playerid,COLOR_WHITE,"{A2DC35}[MECANICOS]:{FFFFFF} Tienes que estar fuera de servicio como chofer de transporte primero.");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Ahora estás en servicio, recibirás llamadas de la gente que te necesite.");
			format(string, sizeof(string), "{2EDFFF}[Taller de Mecánicos]:{FFFFFF} El mecánico %s está atendiendo en el taller. {2EDFFF}[Tlf: %d]" , GetPlayerNameEx(playerid),Info[playerid][pPnumber]);
            BroadCast(COLOR_AT, string);
			OnDuty[playerid] = 1;
            ++Mechanics;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando porque no eres mecánico.");
    }
    return 1;
}
CMD:irpt(playerid, params[])
{
	if(Team_LAMD(playerid))
	{
	 new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /irpt(paciente) (Jugador/ID)");

		if(IsPlayerConnected(giveplayerid))
		{
		    if (giveplayerid == playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando mientras tu seas la persona que llamó.");
				return 1;
		    }
		    if(GetPVarInt(giveplayerid, "EMSAttempt") == 8)
		    {
		        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando porque ya aceptaron la llamada.");
				return 1;
		    }
			if(GetPVarInt(giveplayerid,"MedicCall") == 1)
			{
				if(Info[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras el usuario este en prisión.");
				format(string, sizeof(string), "Paramédico %s aceptó la llamada de la centra de emergencia Nrº %d, Paciente: %s.",GetPlayerNameEx(playerid),giveplayerid,GetPlayerNameEx(giveplayerid));
				SendRadioMessage(4, TEAM_MED_COLOR, string);
				format(string, sizeof(string), "* Has aceptado la llamada de emergencia de %s, podrás ver un marcador en el mapa.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Paramédico %s aceptó tu llamada; por favor espera en tu posición actual.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(playerid, "~r~Ve~n~al marcador rojo.", 5000, 1);
				EMSCallTime[playerid] = 1;
				EMSAccepted[playerid] = giveplayerid;
				SetPVarInt(giveplayerid, "EMSAttempt", 8);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Actualmente ese jugador no necesita asistencia médica!");
			}
		}
	}
	return 1;
}
CMD:subirpt(playerid, params[])
{
    if(Team_LAMD(playerid) || (Info[playerid][pMember] == 1 && Info[playerid][pDivision] == 2) || Team_USMC(playerid) && Info[playerid][pDivision] == 8)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras estes en un coche.");
            return 1;
        }

        new string[128], giveplayerid, seat;
        if(sscanf(params, "dd", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /subirpt (playerid) (Asiento)");

        if(IsPlayerConnected(giveplayerid))
		{
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                if(seat < 2 || seat > 3)
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} El ID de seguridad no puede estar por encima o por debajo de 3 o 2.");
                    return 1;
                }
                if(GetPVarInt(giveplayerid, "Injured") != 1)
				{
                    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras el paciente no este herido.");
                    return 1;
                }
                if(IsPlayerInAnyVehicle(giveplayerid))
				{
                    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando porque el paciente ya está en el coche.");
                    return 1;
                }
                if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes subirte a tu mismo."); return 1; }
                    if(Info[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando mientras el paciente este en prisión.");
                    new carid = gLastCar[playerid];
                    if(GetVehicleModel(carid) == 416)
					{
                        new Float:pos[6];
                        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
                        GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
                        GetVehiclePos( carid, pos[0], pos[1], pos[2]);
                        if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
                        format(string, sizeof(string), "* Fuiste cargado por el paramédico %s.", GetPlayerNameEx(playerid));
                        SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Cargaste al auto a %s.", GetPlayerNameEx(giveplayerid));
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s sube a %s en la ambulancia.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        SetPVarInt(giveplayerid, "EMSAttempt", 3);
                        ClearAnimations(giveplayerid);
                        PutPlayerInVehicle(giveplayerid,carid,seat);
                        TogglePlayerControllable(giveplayerid, false);
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El último coche que has manejado debe ser una ambulancia.");
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: No estás lo suficientemente cerca del jugador o de tu coche.");
                    return 1;
                }
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando porque esa ID no está disponible.");
            return 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres médico del hospital de Los Ángeles o médico del USMC.");
    }
    return 1;
}
CMD:qfaveh(playerid, params[]){
	new string[128];
	format(string, sizeof(string), "La persona que ha conducido tu vehículo fue: %d.",gLastCar[playerid]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:dejarpt(playerid, params[])
{
    if(Team_LAMD(playerid) || (Info[playerid][pMember] == 1 && Info[playerid][pDivision] == 2) || Team_USMC(playerid) && Info[playerid][pDivision] == 8){
        if(IsPlayerInAnyVehicle(playerid)){
			new string[128], giveplayerid;
		    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/dejarpt{FFFFFF} para dejar a un paciente.");

            new carid = GetPlayerVehicleID(playerid);
            new caridex = GetPlayerVehicleID(giveplayerid);
            if(IsAnAmbulance(carid))
			{
                if(carid == caridex){
                    if(IsAtDeliverPatientPoint(playerid)){
                        if(playerid == giveplayerid)
						{
                            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes dejarte a ti mismo en el hospital.");
                            return 1;
                        }
                        if(GetPVarInt(giveplayerid, "Injured") == 0)
						{
                            return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no está herido.");
                        }
                        SetHP(giveplayerid, 100);
                        GivePlayerCash(giveplayerid, -250);
                        Tax += 250;
                        GivePlayerCash(playerid,500);
                        KillEMSQueue(giveplayerid);
                        SetPVarInt(giveplayerid, "MedicBill", 0);
                        SendClientMessageEx(giveplayerid, TEAM_CYAN_COLOR, "Doctor: Los gastos médicos son de $200. Que tengas buen día!");
                        SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Sumaste $500 a tu Bolsillo por dejar sano y salvo un paciente!");
                        SetPlayerInterior(giveplayerid, 0); Info[giveplayerid][pInt] = 0;
                        LoadObjects(giveplayerid);
                        SetPVarInt(giveplayerid, "PlayerCuffed", 0);
                        if(Team_LAMD(playerid))
                        {
                        	format(string, sizeof(string), "Paramédico %s ha dejado satisfactoriamente a %s en el hospital.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendRadioMessage(4, TEAM_MED_COLOR, string);
						}
						else if(Team_USMC(playerid))
                        {
                        	format(string, sizeof(string), "%s ha dejado satisfactoriamente a %s en el hospital de USMC.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendRadioMessage(4, TEAM_MED_COLOR, string);
						}
                        if(IsPlayerInRangeOfPoint(playerid, 5.0,1174.6427,-1308.5641,13.9963))// LAMD
						{
                            SetPosEx(giveplayerid, -211.507080, -1778.385498, 675.785949,ESTE,0,0);
	                        SetPlayerFacingAngle(giveplayerid, 269.400024);
	                        SetPlayerInterior(giveplayerid,5);
	                        LoadObjects(giveplayerid);
	                        SetCameraBehindPlayer(giveplayerid);
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,166.90126,2040.03259,19.59791))// USMC
						{
						    SetPlayerPos(giveplayerid, 1233.539428,319.771850,-11.742190);
						    SetPlayerFacingAngle(giveplayerid, 245.632553);
                            SetPlayerVirtualWorld(giveplayerid, 2);
                            Info[giveplayerid][pVW] = 2;
                            SetPlayerInterior(giveplayerid,2);
                            LoadObjects(giveplayerid);
                            SetCameraBehindPlayer(giveplayerid);
                        }
                    }
                    else{
                        SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el punto para dejar a los pacientes.");
                    }
                }
                else{
                    SendClientMessageEx(playerid, COLOR_WHITE, "Ese paciente no está en la ambulancia.");
                }
            }
            else{
                SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una ambulancia");
            }
        }
    }
    return 1;
}
   zcmd(pcpt, playerid, params[]){
        new string[128], giveplayerid;
        if(!sscanf(params, "d", giveplayerid)){
            if(IsPlayerConnected(giveplayerid)){
                if(Team_LAMD(playerid)){
                    if (ProxDetectorS(5.0, playerid, giveplayerid)){
                        if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2548.693847, 65.113433, 26.495937)) return SendClientMessage(playerid,COLOR_GREY,"No estás en el hospital de Palomino Creek.");
                        KillEMSQueue(giveplayerid);
                        SetHP(giveplayerid, 80);
                        SetPlayerVirtualWorld(giveplayerid, 1);
                        Info[giveplayerid][pVW] = 1;
                        SetPlayerInterior(giveplayerid,1);
                        SetPlayerPos(giveplayerid, 1233.539428,319.771850,-11.742190);
						SetPlayerFacingAngle(giveplayerid, 245.632553);
                        LoadObjects(giveplayerid);
                        SetCameraBehindPlayer(giveplayerid);
                        GivePlayerCash(giveplayerid, -700);
                        SendClientMessageEx(giveplayerid, TEAM_CYAN_COLOR, "Se te cobró $700!");
                        GivePlayerCash(playerid,700);
                        SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Se te pagó $700 por traer a este paciente!");
                        format(string, sizeof(string), "El paciente %s fue internado en el hospital de Palomino Creek.",GetPlayerNameEx(giveplayerid));
						SendRadioMessage(4, TEAM_MED_COLOR, string);
            		} else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El jugador debe estar cerca de usted.");
                } else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres médico.");
            } else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Jugador no conectado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/pcpt{FFFFFF} para dejar a un paciente.");
        return 1;
    }
    
CMD:curar(playerid, params[])
{
    if(Team_LAMD(playerid) || Team_USMC(playerid) && Info[playerid][pDivision] == 8)//model
	{
 		if(Info[playerid][pTriageTime] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes esperar 2 minutos para hacer esto de nuevo.");
	    new string[128], giveplayerid;
	    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /curar [playerid]");
   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
    	    if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
	    	    new Float: health;
	    	    GetPlayerHealth(giveplayerid, health);
	    	    if(health >= 85) SetHP(giveplayerid, 100);
				else SetHP(giveplayerid, health+15.0);
	    	    format(string, sizeof(string), "* %s da a %s 15ml de sangre.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Info[playerid][pTriageTime] = 120;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no está cerca tuyo.");
 		}
	}
	return 1;
}
CMD:sib(playerid, params[])
{
    if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logueado.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "/Sib (Usuario ID) para dejarlo utilizar el /B");

		if(IsPlayerConnected(giveplayerid))
		{
			if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
			if(C_OOC[giveplayerid] == 1) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}Este usuario ya tiene habilitado el /b, para retirarle el cmd, use /nob.");
			format(string, sizeof(string), "* Le diste autorización a %s para utilizar el canal /b.", GetPlayerNameEx(giveplayerid));
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "* %s te dio autorización de hablar por el canal /b.", GetPlayerNameEx(playerid));
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	    	C_OOC[giveplayerid] = 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "No formas parte de la cúpula administrativa para utilizar este cmd.");
	return 1;
}
CMD:nob(playerid, params[])
{
    if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logueado.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "/Nob (Usuario ID) para no dejarlo utilizar el /B");

		if(IsPlayerConnected(giveplayerid))
		{
			if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
			if(C_OOC[giveplayerid] == 0) return SendClientMessage(playerid, COLOR_ROJO,"! {FFFFFF}Este usuario no tiene habilitado el /b, para dejarlo hablar, use /sib.");
			format(string, sizeof(string), "* Le retiraste el permiso a %s, ahora no puede utilizar el canal /b.", GetPlayerNameEx(giveplayerid));
	    	SendClientMessageEx(playerid, COLOR_GREY, string);
	    	format(string, sizeof(string), "* %s te retiró el permiso de hablar por /b.", GetPlayerNameEx(playerid));
	    	SendClientMessageEx(giveplayerid, COLOR_GREY, string);
	    	C_OOC[giveplayerid] = 0;
		}
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "No formas parte de la cúpula administrativa para utilizar este cmd.");
	return 1;
}
CMD:mandarla(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /mandarsf (ID/Jugador)");

		if(IsPlayerConnected(giveplayerid))
		{
			if (Info[giveplayerid][pAdminZC] >= 11) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando para este jugador.");
			format(string, sizeof(string), "!{FFFFFF} Enviaste a Los Ángeles a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_ROJO, string);
			format(string, sizeof(string), "!{FFFFFF} Fuiste enviado a Los Ángeles por el Staff %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_ROJO, string);
			SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			Info[giveplayerid][pVW] = 0;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
	return 1;
}
	CMD:mandarsf(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /mandarsf (ID/Jugador)");

		if(IsPlayerConnected(giveplayerid))
		{
			if (Info[giveplayerid][pAdminZC] >= 11) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando para este jugador.");
			format(string, sizeof(string), "!{FFFFFF} Enviaste a San Francisco a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_ROJO, string);
			format(string, sizeof(string), "!{FFFFFF} Fuiste enviado a San Francisco por el Staff %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_ROJO, string);
			SetPlayerPos(giveplayerid, -2016.4399,-79.7714,35.3203);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			Info[giveplayerid][pVW] = 0;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
	return 1;
}
	CMD:mandarlv(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /mandarsf (ID/Jugador)");

		if(IsPlayerConnected(giveplayerid))
		{
			if (Info[giveplayerid][pAdminZC] >= 11) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando para este jugador.");
			format(string, sizeof(string), "!{FFFFFF} Enviaste a Las Vegas a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_ROJO, string);
			format(string, sizeof(string), "!{FFFFFF} Fuiste enviado a Las Vegas por el Staff %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_ROJO, string);
			SetPlayerPos(giveplayerid, 1694.6566,1453.4523,10.7632);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			Info[giveplayerid][pVW] = 0;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
	return 1;
}
CMD:mandarpc(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /mandarsf (ID/Jugador)");

		if(IsPlayerConnected(giveplayerid))
		{
			if (Info[giveplayerid][pAdminZC] >= 11) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando para este jugador.");
			format(string, sizeof(string), "!{FFFFFF} Enviaste a Palomino Creek a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_ROJO, string);
			format(string, sizeof(string), "!{FFFFFF} Fuiste enviado a Palomino Creek por el Staff %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_ROJO, string);
			SetPlayerPos(giveplayerid, 2294.1414,42.0592,26.3359);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			Info[giveplayerid][pVW] = 0;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
	return 1;
}
CMD:musicastaff(playerid,params[]) {
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 5)
	{
		ShowPlayerDialog(playerid,D_Musica,DIALOG_STYLE_INPUT,"{2EDFFF}Música Global","Inserte el nombre de la canción y autor:","Listo","Salir");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
	return 1;
}
CMD:mson(playerid,params[]) {
	if(Play_Music(playerid))
	{
		ShowPlayerDialog(playerid,D_MusicaX,DIALOG_STYLE_INPUT,"{99FF00}Play Music Radio","Inserte el nombre de la canción y el autor:","Listo","Salir");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Sólo miembros de Play Music Radio puede utilizar este comando!");
	return 1;
}
CMD:apagarmusica(playerid,params[]) {StopAudioStreamForPlayer(playerid); return 1;} // Comando para parar la música sonando en vivo!
CMD:editarhqfam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pAdminZC] >= 8 || Info[playerid][pGangModerator] == 1)
	{
		new family, x_hq[64], string[128];
		if(sscanf(params, "is[64]", family, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Indicación: {2EDFFF}/Editarhqfam (ID de Familia) (Nombre)");
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFFFF}Nombres a editar: {2EDFFF}crear - borrar - exterior - interior - perinterior - VirtualWorld");
			return 1;
		}

		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 14"); return 1; }
		family -= 1;
		if(strcmp(x_hq,"crear",true) == 0)
		{
	   		SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "Porfavor ponte de pie donde quieres que este la entrada.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Después presiona {FF0000}FIRE{FFFFFF}.");
		}
		else if(strcmp(x_hq,"borrar",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 4);
			format(string,128,"¿Estás seguro que quieres borra la HQ?");
			SafeDialogEx(playerid,HQDELETE,DIALOG_STYLE_MSGBOX,"{00F70C}Warning:",string,"Si","No");
		}
		else if(strcmp(x_hq,"exterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 5);
			SendClientMessageEx(playerid, COLOR_WHITE, "Porfavor ponte de pie donde quieres que este la entrada.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Después presiona {FF0000}FIRE{FFFFFF}.");
		}
		else if(strcmp(x_hq,"interior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 6);
			SendClientMessageEx(playerid, COLOR_WHITE, "Porfavor ponte de pie donde quieres que este la salida.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Después presiona {FF0000}FIRE{FFFFFF}.");
		}
		else if(strcmp(x_hq,"preinterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 3);
			SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} Recuerda después usar /editarhqfam familiaid VirtualWorld.");
			format(string,128,"Tiene '%s' un interior personalizado?", fINFO[family][FamilyName]);
			SafeDialogEx(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"{00F70C}Advertencia:",string,"Si","No");
		}
		else if(strcmp(x_hq,"VirtualWorld",true) == 0)
		{
			fINFO[family][FamilyVirtualWorld] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "El VirtualWorld de la familia fue estableciado en 0 - Int Personalizado.");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Nombre no válido.");
		}
		saveFamilies();
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
	return 1;
}

CMD:fameditor(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 8 || Info[playerid][pGangModerator] == 1)
	{
		new family, x_job[64], x_hq[64], ammount, string[128];
		if(sscanf(params, "is[64]s[64]", family, x_job, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación: {2EDFFF}/Fameditor (ID de Familia) (Nombre) (Valor)");
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Nombres a editar:{2EDFFF} Tokens - lider - MaxSkins - Skin1 - Skin2 - Skin3 - Skin4 - Skin5 - Skin6 - Skin7 - Skin8");
			return 1;
		}
        ammount = strval(x_hq);
		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[FAM]:{FFFFFF} Familia id no puede estar por debajo de 1 o por encima de 14."); return 1; }
		family -= 1;
		if(strcmp(x_job,"tokens",true) == 0)
		{
			fINFO[family][FamilyTurfTokens] = ammount * 12;
			format(string, sizeof(string), "You have changed '%s' tokens amount to %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if (strcmp(x_job,"lider",true) == 0)
		{
			if(strlen(x_hq) >= 20 )
			{
				SendClientMessageEx( playerid, COLOR_GRAD1, "That leader name is too long, please refrain from using more than 20 characters." );
				return 1;
			}
			strcpy(fINFO[family][FamilyLeader], x_hq, MAX_PLAYER_NAME);
			format(string, sizeof(string), "Has cambiado '%s' fichas ascienden a %s.", fINFO[family][FamilyName], x_hq);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if(strcmp(x_job,"maxskins",true) == 0)
		{
			if(ammount > 8) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer el maxskins a más de 8.");
			if(ammount == 7)
			{
				fINFO[family][FamilySkins][7] = 0;
			}
			if(ammount == 6)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
			}
			if(ammount == 5)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
			}
			if(ammount == 4)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
				fINFO[family][FamilySkins][4] = 0;
			}
			if(ammount == 3)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
				fINFO[family][FamilySkins][4] = 0;
				fINFO[family][FamilySkins][3] = 0;
			}
			if(ammount == 2)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
				fINFO[family][FamilySkins][4] = 0;
				fINFO[family][FamilySkins][3] = 0;
				fINFO[family][FamilySkins][2] = 0;
			}

			if(ammount == 1)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
				fINFO[family][FamilySkins][4] = 0;
				fINFO[family][FamilySkins][3] = 0;
				fINFO[family][FamilySkins][2] = 0;
				fINFO[family][FamilySkins][1] = 0;
			}

			fINFO[family][FamilyMaxSkins] = ammount;
			format(string, sizeof(string), "Cambiaste max skins de '%s' a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin1",true) == 0)
		{
			fINFO[family][FamilySkins][0] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #1 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin2",true) == 0)
		{
			fINFO[family][FamilySkins][1] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #2 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin3",true) == 0)
		{
			fINFO[family][FamilySkins][2] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #3 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin4",true) == 0)
		{
			fINFO[family][FamilySkins][3] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #4 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin5",true) == 0)
		{
			fINFO[family][FamilySkins][4] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #5 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin6",true) == 0)
		{
			fINFO[family][FamilySkins][5] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #6 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin7",true) == 0)
		{
			fINFO[family][FamilySkins][6] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #7 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin8",true) == 0)
		{
			fINFO[family][FamilySkins][7] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #8 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Nombre no válido.");
			return 1;
		}
		saveFamilies();
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
		return 1;
	}
	return 1;
}

CMD:miembros(playerid, params[])
{
	new member = Info[playerid][pMember];
    new leader = Info[playerid][pLeader];
    new teamnumber;
	if (Info[playerid][pLeader] != 0) teamnumber = Info[playerid][pLeader];
	else if (Info[playerid][pMember] != 0) teamnumber = Info[playerid][pMember];
    if(member > 0 || leader > 0)
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "{46FF92}Miembros de la facción conectados:");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    new string[32];
			if (IsPlayerConnected(i))
			{
				if (Info[i][pLeader] == teamnumber) format(string, sizeof(string), "%s [Rango: Líder]",GetPlayerNameEx(i));
				else if (Info[i][pMember] == teamnumber) format(string, sizeof(string), "%s [Rango: %d]",GetPlayerNameEx(i), Info[i][pRank]);
				if(strlen(string) > 0) SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a ninguna facción.");
    return 1;
}

CMD:familias(playerid, params[])
{
	new string[128], familyid;

	if(sscanf(params, "d", familyid))
	{
		new number = 0;
		for(new i = 0; i < sizeof(fINFO); i++)
		{
			number ++;
   			if(fINFO[i][FamilyTurfTokens] < 12)
			{
                SendClientMessageEx(i, COLOR_AT, "{2EDFFF}[Inf. Familias]: {FFFFFF}Slots disponibles N° {2EDFFF}8{FFFFFF} - Creaciones mediante {2EDFFF}/Foro{FFFFFF}");
                SendClientMessageEx(i, COLOR_BLANCO, "");
				format(string, sizeof(string), "• Familia N° %d | • Nombre: %s | • Líder: %s",number,fINFO[i][FamilyName],fINFO[i][FamilyLeader],fINFO[i][FamilyMembers]);
			}
			else
			{
				format(string, sizeof(string), "• Familia N° %d | • Nombre: %s | • Líder: %s",number,fINFO[i][FamilyName],fINFO[i][FamilyLeader],fINFO[i][FamilyMembers]);
			}
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		return 1;
	}

	if(familyid < 1 || familyid > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 10"); return 1; }
	familyid -= 1;
	if(fINFO[familyid][FamilyTaken] != 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Ese Slot está vacío.");
		return 1;
	}
	foreach(Player, i)
	{
		if(Info[i][pFMember] == familyid && Info[i][pFMember] != 255)
		{
			if(Info[i][pRank] == 1 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "• Familia: %s • Dueño: %s • Rango: %s",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank1]);
			}
			else if(Info[i][pRank] == 2 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "• Familia: %s • Dueño: %s • Rango: %s",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank2]);
			}
			else if(Info[i][pRank] == 3 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "• Familia: %s • Dueño: %s • Rango: %s",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank3]);
			}
			else if(Info[i][pRank] == 4 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "• Familia: %s • Dueño: %s • Rango: %s",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank4]);
			}
			else if(Info[i][pRank] == 5 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "• Familia: %s • Dueño: %s • Rango: %s",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank5]);
			}
			else if(Info[i][pRank] == 6 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "• Familia: %s • Dueño: %s • Rango: %s",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank6]);
			}
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}


CMD:festado(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un cajero en el Banco S.A.");
		return 1;
	}

	new family, string[128];
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}

	format(string, sizeof(string), "{2EDFFF}[Cajero Automático]: {FFFFFF}Estado bancario de tu familia - Balance total: {00F70C}$%d", fINFO[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:fdepositar(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un ATM o en el Banco S.A.");
		return 1;
	}

	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación: {2EDFFF}/Fdepositar [Monto]");
		format(string, sizeof(string), "{2EDFFF}[Cajero Automático]: {FFFFFF}Estado bancario de tu familia - Balance total: {00F70C}$%d", fINFO[family][FamilyBank]);
		SendClientMessageEx(playerid, COLOR_AT, string);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ese dinero.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = fINFO[family][FamilyBank];
	fINFO[family][FamilyBank]=amount+fINFO[family][FamilyBank];
	SendClientMessageEx(playerid, COLOR_WHITE, "|____________CUENTA BANCARIA_____________|");
	format(string, sizeof(string), "  Antiguo Balance: $%d", curfunds);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Depósito: $%d",amount);
	SendClientMessageEx(playerid, COLOR_GRAD4, string);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|________________________________________|");
	format(string, sizeof(string), "  Nuevo Balance: $%d", fINFO[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) depositó $%d en la FAM %d's bank account.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
	Log("logs/- Cajas de Familias.log", string);
	return 1;
}

CMD:fretirar(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un ATM o en el Banco S.A.");
		return 1;
	}
	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	if(Info[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos 5 y 6 pueden retirar.");
		return 1;
	}
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación: {2EDFFF}/Fretirar [Monto]");
		format(string, sizeof(string), "{2EDFFF}[Cajero Automático]: {FFFFFF}Estado bancario de tu familia - Balance total: {00F70C}$%d", fINFO[family][FamilyBank]);
		SendClientMessageEx(playerid, COLOR_AT, string);
		return 1;
	}

	if (amount > fINFO[family][FamilyBank] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Tu familia no tiene ese dinero.");
		return 1;
	}

	GivePlayerCash(playerid,amount);
	fINFO[family][FamilyBank]=fINFO[family][FamilyBank]-amount;
	format(string, sizeof(string), "  Retiraste $%d de la cuenta de tu familia, un total de: $%d", amount,fINFO[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) ha retirado $%d de la familia %d's cuenta del banco.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
	Log("logs/- Cajas de Familias.log", string);
	return 1;
}

CMD:fgarma(playerid, params[])
{
    if(manubrio[playerid] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes guardar este arma mientras la estas dando.");
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la arena.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx (playerid, COLOR_ROJO, "!{FFFFFF} No se puede almacenar armas desde un vehículo");
	new Float:health;
	GetPlayerHealth(playerid, health);
	if (health < 30) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No se puede almacenar armas si su salud está por debajo de 30.");
	if(GetPVarInt(playerid, "Injured") != 0||Info[playerid][pEstado]!=0||GetPVarInt(playerid, "Hospital")!=0||GetPlayerState(playerid) == 7) return SendClientMessageEx (playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
	if(Info[playerid][pMember] > 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No se puede almacenar armas en una caja fuerte de la familia cuando estás en una facción.");
	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes familia.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2])) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fgarma (arma) (slot)");
	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "* Debes esperar %d segundos despues de depositar un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(slot < 1 || slot > 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Ranura inválida.");
	if( fINFO[family][FamilyGuns][slot-1] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu familia tiene un arma almacenada en ese espacio ya.");
	new weapon;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][2] == 23)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un pistola SD en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][2];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][2] == 24)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste una Desert Eagle en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][2];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][3] == 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste una Shotgun en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][3];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "9mm", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][3] == 22)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste una 9mm en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][3];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][4] == 29)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un MP5 en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][4];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 30)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste una ak-47 en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][5];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 31)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un M4 en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][5];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "Uzi", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 28)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un Uzi en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][5];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][6] == 33)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un Rifle en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][6];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][6] == 34)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un Sniper en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][6];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else { SendClientMessageEx(playerid,COLOR_WHITE,"ID de arma invalida."); return 1; }
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma.");
	if(fINFO[family][FamilyGuns][slot-1] == 0)
	{
		fINFO[family][FamilyGuns][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		saveFamilies();
		return 1;
	}
	return 1;
}

CMD:fsarma(playerid, params[])
{
	new string[128], slot;
	if(Info[playerid][pConnectTime] < 5 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando, tienes restricción de armas.");
	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No tienes una familia.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2])) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No estás en el lugar adecuado.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes coger armas estando en un vehiculo.");
	if(sscanf(params, "d", slot))
	{
		new weaponname[50];
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		format(string, sizeof(string), "*** %s Caja Fuerte ***", fINFO[family][FamilyName]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		for(new s = 0; s < 10; s++)
		{
			if( fINFO[family][FamilyGuns][s] != 0 )
			{
				GetWeaponName(fINFO[family][FamilyGuns][s], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fsarma (slot)");
		return 1;
	}
	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "* Debes esperar %d segundos despues de sacar un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(slot < 1 || slot > 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Ranura Inválida.");
	if(Info[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos mayores a 4 puede usar este comando.");
	if(fINFO[family][FamilyGuns][slot-1] != 0)
	{
		new weaponname[50];
		GetWeaponName(fINFO[family][FamilyGuns][slot-1], weaponname, sizeof(weaponname));
		GivePlayerValidWeapon(playerid, fINFO[family][FamilyGuns][slot-1]);
		fINFO[family][FamilyGuns][slot-1] = 0;
		if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Piltola SD de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Deagle de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un shotgun de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "spas12", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una 9mm de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un MP5 de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una AK-47 de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una M4 de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un Rifle de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un Sniper de la caja fuerte de tu familia.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		saveFamilies();
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un arma almacenada en esa ranura.");
	return 1;
}

CMD:cfbalance(playerid, params[])
{
	if(Info[playerid][pFMember] < 255)
	{
		if(fINFO[Info[playerid][pFMember]][FamilyUSafe] < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Está familia aún no tiene una caja fuerte.");
		}
		else
		{
			new string[128];

			new weaponsinlocker;
			for(new s = 0; s < 10; s++)
			{
				if(fINFO[Info[playerid][pFMember]][FamilyGuns][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			format(string, sizeof(string), " C. Fuerte: %s | Gunlockers: %d/10 | Dinero: $%d | Marihuana: %d | Cocaína: %d | Materiales: %d", fINFO[Info[playerid][pFMember]][FamilyName], weaponsinlocker, fINFO[Info[playerid][pFMember]][FamilyCash], fINFO[Info[playerid][pFMember]][FamilyPot], fINFO[Info[playerid][pFMember]][FamilyCrack], fINFO[Info[playerid][pFMember]][FamilyMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
	return 1;
}

CMD:cfdepositar(playerid, params[])
{
	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Indicación: {2EDFFF}/Cfdepositar [Nombre] [Monto]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}Nombres a colocar: {2EDFFF}Dinero - Materiales - Cocaína - Marihuana");
		return 1;
	}

	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una familia.");
		return 1;
	}
	if(fINFO[family][FamilyUSafe] < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Su familia no ha mejorado su seguridad.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");
		return 1;
	}
	if(strcmp(choice,"dinero",true) == 0)
	{
		if (amount > GetPlayerCash(playerid) || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto dinero.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyCash] += amount;
		GivePlayerCash(playerid, -amount);
		format(string, sizeof(string), "Depositaste $%d en la caja fuerte de tu familia", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s saca un poco de dinero y lo pone en la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited $%d into family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]);
		Log("logs/- Cajas de Familias.log", string);
	}
	else if(strcmp(choice,"Materiales",true) == 0)
	{
		if (amount > Info[playerid][pMats] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tantos materiales.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyMats] += amount;
		Info[playerid][pMats] -= amount;
		format(string, sizeof(string), "Depositaste %d materiales en la caja fuerte de tu familia", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s sacar materiales y lo pone en la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]);
		Log("logs/- Cajas de Familias.log", string);
	}
	else if(strcmp(choice,"marihuana",true) == 0)
	{
		if (amount > Info[playerid][pPot] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanta marihuana.");
			return 1;
		}
		if(amount < 1 || amount > 50)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar más de 50 en cada vez.");
			return 1;
		}
		if(fINFO[family][FamilyPot] >= 500)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Está caja fuerte ya está llena de marihuana.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyPot] += amount;
		Info[playerid][pPot] -= amount;
		format(string, sizeof(string), "Depositaste %d gramos de marihuana en la caja fuerte", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s coge un poco de marihuana y lo guarda en la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]);
		Log("logs/- Cajas de Familias.log", string);
	}
	else if(strcmp(choice,"cocaina",true) == 0)
	{
		if (amount > Info[playerid][pCrack] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanta droga.");
			return 1;
		}
		if(amount < 1 || amount > 25)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Sólo puedes depositar de 1 a 25 gramos.");
			return 1;
		}
		if(fINFO[family][FamilyCrack] >= 250)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte esta muy llena de droga (250gr).");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyCrack] += amount;
		Info[playerid][pCrack] -= amount;
		format(string, sizeof(string), "Depositaste %d gramos de droga en la caja fuerte", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s coge un poco de droga y lo guarda en la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of cocaína into family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]);
		Log("logs/- Cajas de Familias.log", string);
	}
	return 1;
}

CMD:cfretirar(playerid, params[])
{
	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cjretirar (nombre) (monto)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Materiales, Cocaína, Marihuana");
		return 1;
	}

	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	if(fINFO[family][FamilyUSafe] < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Tu familia no ha mejorado su seguridad.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");
		return 1;
	}
	if(Info[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos 5 y 6 pueden retirar de la caja fuerte.");
		return 1;
	}
	if(strcmp(choice,"dinero",true) == 0)
	{
		if (amount > fINFO[family][FamilyCash] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte no tiene tanto dinero.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyCash] -= amount;
		GivePlayerCash(playerid, amount);
		format(string, sizeof(string), "Retiraste $%d de la caja fuerte de tu familia.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s retira algo de dinero de la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
		Log("logs/- Cajas de Familias.log", string);
	}
	else if(strcmp(choice,"Materiales",true) == 0)
	{
		if (amount > fINFO[family][FamilyMats] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte no tiene tantos materiales.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyMats] -= amount;
		Info[playerid][pMats] += amount;
		format(string, sizeof(string), "Retiraste %d materiales de la caja fuerte de tu familia.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s retira algo de materiales de la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from family safe %d.",GetPlayerNameEx(playerid), ip,amount,Info[playerid][pFMember]+1);
		Log("logs/- Cajas de Familias.log", string);
	}
	else if(strcmp(choice,"marihuana",true) == 0)
	{
		if (amount > fINFO[family][FamilyPot] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Tu familia no tiene la cantidad especificada.");
			return 1;
		}
		if(Info[playerid][pPot] > 999)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes 1 kg de marihuana.");
			return 1;
		}
		new level = Info[playerid][pDrugsSkill];
		if(level >= 0 && level <= 50)
		{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 10!"); return 1; } }
		else if(level >= 51 && level <= 100)
		{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 20!"); return 1; } }
		else if(level >= 101 && level <= 200)
		{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 30!"); return 1; } }
		else if(level >= 201 && level <= 400)
		{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 40!"); return 1; } }
		else if(level >= 401)
		{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 50!"); return 1; } }
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyPot] -= amount;
		Info[playerid][pPot] += amount;
		format(string, sizeof(string), "Retiraste %d gramos de marihuana de la caja fuerte.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s retira unos paquetes de la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
		Log("logs/- Cajas de Familias.log", string);
	}
	else if(strcmp(choice,"cocaina",true) == 0)
	{
		if (amount > fINFO[family][FamilyCrack] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte no tiene tanta droga.");
			return 1;
		}
		if(Info[playerid][pCrack] > 25)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes 25 gramos de droga, no puedes cargar más.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyCrack] -= amount;
		Info[playerid][pCrack] += amount;
		format(string, sizeof(string), "Retiraste %d gramos de droga de la caja fuerte.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s retira unos paquetes de la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of cocaína from family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
		Log("logs/- Cajas de Familias.log", string);
	}
	return 1;
}
CMD:ajustar(playerid, params[])
{
	if(Info[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	new string[128];
	new family = Info[playerid][pFMember];
	if(Info[playerid][pRank] >= 5)
	{
		new choice[32], opstring[100];
		if(sscanf(params, "s[32]S[100]", choice, opstring))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Información básica: {2EDFFF}/Ajustar [Nombre]");
			SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}Nombres:{7D997D} Nombre - MOTD - Seguro [Caja Fuerte] - Invitar - Despedir");
			return 1;
		}

		if(strcmp(choice,"nombre",true) == 0)
		{
			if(Info[playerid][pRank] == 6)
			{
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Utiliza: {2EDFFF}/Ajustar [Nombre] [Nombre de la Familia]");
					return 1;
				}
				if(strfind(opstring, "|", true) != -1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE,  "No puedes usar '|' en el nombre de la familia.");
					return 1;
				}
				if(strlen(opstring) >= 40 )
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "Ese nombre de la familia es demasiado largo, por favor utilices más de 40 caracteres." );
					return 1;
				}
				strmid(fINFO[family][FamilyName], opstring, 0, strlen(opstring), 100);
				saveFamilies();
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el nombre de la familia.");
				format(string, sizeof(string), "%s adjusted family %d's name to %s", GetPlayerNameEx(playerid), family+1, opstring);
				Log("logs/- Modificaciones de Familias.log", string);
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos 6 (lideres) pueden usar este comando.");
		}
		else if(strcmp(choice,"motd",true) == 0)
		{
			if(!opstring[0])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Utiliza: {2EDFFF}/Ajustar [MOTD] [Mensaje de bienvenida]");
				return 1;
			}
			if(strfind(opstring, "|", true) != -1)
			{
					SendClientMessageEx(playerid, COLOR_WHITE,  "No puedes usar '|' en el mensaje.");
				return 1;
			}
			if(strlen(opstring) >= 60 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "El mensaje es muy largo, por favor no uses más de 60 carácteres." );
				return 1;
			}
			strmid(fINFO[family][FamilyMOTD], opstring, 0, strlen(opstring), 100);
			saveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje de la familia.");
			format(string, sizeof(string), "%s adjusted family %d's MOTD to %s", GetPlayerNameEx(playerid), family+1, opstring);
			Log("logs/- Modificaciones de Familias.log", string);
		}
		else if(strcmp(choice,"seguro",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustar seguridad de su familia restablecerá todas las estadísticas de su caja fuerte.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Si desea ajustar su caja fuerte, usa /ajustar confirmar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Mejora de la seguridad de su de la familia tendrá un costo de 10.000 dólares.");
			return 1;
		}
		else if(strcmp(choice,"confirmar",true) == 0)
		{
			if(GetPlayerCash(playerid) < 10000)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No tienes $10,000 para hacer esto.");
				return 1;
			}
			GivePlayerCash(playerid, -10000);
			GetPlayerPos(playerid, fINFO[family][FamilySafe][0],fINFO[family][FamilySafe][1],fINFO[family][FamilySafe][2]);
			fINFO[family][FamilyCash] = 0;
			fINFO[family][FamilyMats] = 0;
			fINFO[family][FamilyPot] = 0;
			fINFO[family][FamilyCrack] = 0;
			if(fINFO[family][FamilyUSafe]) DestroyDynamicPickup(fINFO[family][FamilyPickup]);
			fINFO[family][FamilyUSafe] = 1;
			fINFO[family][FamilyPickup] = CreateDynamicPickup(1239, 23, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2]);
			saveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste la caja fuerte de tu familia.");
			format(string, sizeof(string), "%s adjusted family %d's safe", GetPlayerNameEx(playerid), family+1);
			Log("logs/- Modificaciones de Familias.log", string);
		}
		else if(strcmp(choice,"invitar",true) == 0)
		{
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Utiliza: {2EDFFF}/Ajustar [Invitar] [Player/ID]");
				return 1;
			}
			new giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if (Info[giveplayerid][pFMember] == 255)
					{
						if(Info[giveplayerid][pLeader] == 0 && Info[giveplayerid][pMember] == 0)
						{
							format(string, sizeof(string), "* Invitaste a %s para que se una a '%s'.",GetPlayerNameEx(giveplayerid), fINFO[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s te ha invitado para que te unes a '%s'. (usa /aceptar familia)",GetPlayerNameEx(playerid), fINFO[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
							format(string, sizeof(string), "%s invited %s to family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
							Log("logs/- Invitaciones a Familias.log", string);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya se encuentra en una familia o facción.");
						}
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya se encuentra en una familia o facción.");
					}
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "ID o Nombre de jugador inválido.");
				return 1;
			}
		}
		else if(strcmp(choice,"despedir",true) == 0)
		{
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Utiliza: {2EDFFF}/Ajustar [Despedir] [Player/ID]");
				return 1;
			}
			new giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(Info[giveplayerid][pFMember] != family)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está en tu familia.");
						return 1;
					}
					if(Info[giveplayerid][pRank] > Info[playerid][pRank])
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No puedes despedir a rangos mayores.");
						return 1;
					}
					format(string, sizeof(string), "{FFFFFF}* Despediste a {2EDFFF}%s{FFFFFF} de tu familia de forma correcta.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "{FFFFFF}* El líder {2EDFFF}%s {FFFFFF}te ha despedido de la familia en la que estabas.",GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}[ATENCIÓN]:{FFFFFF} En casos de ser algún tipo de abuso, tomar pruebas gráficas y reportarlo mediante: {2EDFFF}/Foro");
					Info[giveplayerid][pFMember] = 255;
					Info[giveplayerid][pRank] = 0;
					fINFO[family][FamilyMembers] --;
					saveFamilies();
					format(string, sizeof(string), "%s uninvited %s from family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
					Log("logs/- Expulsiones de Familias.log", string);
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Nombre inválido.");
				return 1;
			}
		}
		else if(strcmp(choice,"rango",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Por favor usa /ajustarrango en lugar de /ajustar rango.");
		}
		else if(strcmp(choice,"nombrerango",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Por favor usa /anombrerango en lugar de /ajustar nombrerango.");
		}
	}
	return 1;
}

CMD:ajustarrango(playerid, params[])
{
	if(Info[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	new family = Info[playerid][pFMember];
	new string[128], rank, giveplayerid;
	if(sscanf(params, "dd", rank, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustarrango (Nº Rango) (playerid)");


	if(Info[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6) { SendClientMessageEx(playerid, COLOR_WHITE, "Rangos: 1 - 6"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(Info[giveplayerid][pFMember] != family)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está en tu familia.");
					return 1;
				}
				if(Info[giveplayerid][pRank] > Info[playerid][pRank])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes ajustar rangos de jugadores de mayor rango.");
					return 1;
				}
				format(string, sizeof(string), "* Has dado a %s el rango %d.",GetPlayerNameEx(giveplayerid),rank);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Lider %s te dio rango %d.",GetPlayerNameEx(playerid),rank);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				Info[giveplayerid][pRank] = rank;
				format(string, sizeof(string), "%s set %s rank to %d in family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), rank, family+1);
				Log("logs/- Rangos de Familias.log", string);
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Nombre o ID de jugador inválido.");
			return 1;
		}
	}
	else if(Info[playerid][pRank] == 5)
	{
		if(rank < 1 || rank > 5) { SendClientMessageEx(playerid, COLOR_WHITE, "Rango no puede ser inferior a 1 o superior a 5."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(Info[giveplayerid][pFMember] != family)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está en tu familia.");
					return 1;
				}
				format(string, sizeof(string), "* Has dado a %s el rango %d.",GetPlayerNameEx(giveplayerid),rank);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* SubLider %s te dio rango %d.",GetPlayerNameEx(playerid),rank);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				Info[giveplayerid][pRank] = rank;
				format(string, sizeof(string), "%s set %s rank to %d in family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), rank, family+1);
				Log("logs/- Rangos de Familias.log", string);
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Jugador Inválido.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	return 1;
}

CMD:anombrerango(playerid, params[])
{
	if(Info[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	new family = Info[playerid][pFMember];
	new string[128], rank, rankname[32];
	if(sscanf(params, "ds[32]", rank, rankname)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación: {2EDFFF}/Anombrerango [Rango Nº 1-6] [Nombre de Rango]");

	if(Info[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Rangos : 1 - 6.");
			return 1;
		}
		if(strfind(rankname, "|", true) != -1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,  "No puedes usar esto en los nombres de los rangos.");
			return 1;
		}
		if(strlen(rankname) >= 19 )
		{
			SendClientMessageEx( playerid, COLOR_GRAD1, "El nombre de rango es demasiado largo, por favor no utilizes más de 19 caracteres." );
			return 1;
		}
		if(rank == 1)
		{
			strmid(fINFO[family][FamilyRank1], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 1 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 2)
		{
			strmid(fINFO[family][FamilyRank2], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 2 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 3)
		{
			strmid(fINFO[family][FamilyRank3], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 3 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 4)
		{
			strmid(fINFO[family][FamilyRank4], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 4 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 5)
		{
			strmid(fINFO[family][FamilyRank5], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 5 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 6)
		{
			strmid(fINFO[family][FamilyRank6], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 6 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}

		format(string, sizeof(string), "%s adjusted family %d's rank %d to %s", GetPlayerNameEx(playerid), family+1, rank, rankname);
		Log("logs/- Modificaciones de Rangos (Familias).log", string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	return 1;
}

CMD:crearfam(playerid, params[]){
	if(Info[playerid][pAdminZC] > 5 || Info[playerid][pGangModerator] == 1)	{
		new string[128], family, giveplayerid;
		if(sscanf(params, "dd", family, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Indicación:{2EDFFF} /Crearfam [Slot Fam - 1/8] [Player/ID]");
		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Slots disponibles 8 en total, no podrá sobre pasar tal número."); return 1; }

		if(IsPlayerConnected(giveplayerid))		{
			if(fINFO[family-1][FamilyTaken] == 1)			{
				SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: Este slot ya está ocupada, por favor busque otro.");
				return 1;
			}

			format(string, sizeof(string), "{2EDFFF}[Familias]: {FFFFFF}Asignaste a {2EDFFF}%s {FFFFFF}líder de una familia - Slot: {2EDFFF}%d.",GetPlayerNameEx(giveplayerid),family);
			SendClientMessageEx(playerid, COLOR_AT, string);
			format(string, sizeof(string), "{2EDFFF}[Inf. Familias]: {FFFFFF}El encargado de familias {2EDFFF}%s {FFFFFF}te asignó líder.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_AT, string);

			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s",sendername);
			strmid(fINFO[family-1][FamilyLeader], string, 0, strlen(string), 24);
			fINFO[family-1][FamilyMembers] ++;
			fINFO[family-1][FamilyTaken] = 1;
			Info[giveplayerid][pFMember] = family-1;
			Info[giveplayerid][pRank] = 6;
			saveFamilies();

		}
		else		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado es inválido.");
			return 1;
		}
	}
	return 1;
}

CMD:borrarfam(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7 || Info[playerid][pGangModerator] == 1)	{
		new family;
		if(sscanf(params, "d", family)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación: {2EDFFF}/Borrarfam [Slot de la Familia]");

		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 8."); return 1; }
		if(fINFO[family-1][FamilyTaken] != 1)		{
			SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} La familia que usted intento de borrar ya está descupada.");
			return 1;
		}
		ClearFamily(family-1);
		saveFamilies();
	}
	return 1;
}

CMD:crearautofam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	new string[128], family, modelid, color1, color2;
	if(sscanf(params, "dddd", family, modelid, color1, color2)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación: {2EDFFF}/Crearautofam [ID FAM] [ID VEH]) [Color 1] [Color 2]");
    if (Info[playerid][pAdminZC] < 4 && Info[playerid][pGangModerator] != 1)
    {
    	SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
     	return 1;
    }
   	if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 14."); return 1; }
	family -= 1;
	if(fINFO[family][FamilyTaken] != 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Esa familia no está ocupada.");
		return 1;
	}
	if(color1 < 0 || color1 > 126) { SendClientMessageEx(playerid, COLOR_WHITE, "COLOR: 0 a 126."); return 1; }
	if(color2 < 0 || color2 > 126) { SendClientMessageEx(playerid, COLOR_WHITE, "COLOR: 0 a 126."); return 1; }
	if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_WHITE, "Vehiculos: 400 al 611."); return 1; }
	new gangvehicleid = GetGangFreeVehicleId(family);
	if(gangvehicleid == -1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Esa familia no puede tener más coches.");
	new Float:X,Float:Y,Float:Z;
 	GetPlayerPos(playerid,X,Y,Z);
  	new Float:Angle;
   	GetPlayerFacingAngle(playerid,Angle);
   	new car = CreateGangVehicle(family, gangvehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
   	if(car == INVALID_VEHICLE_ID)
	{
 		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Algo salió mal y el coche no se creó.");
	}
 	else
  	{
   		format(string, sizeof(string), " Coche creado. ID: %d.", car);
    	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	    saveFamiliesHQ();
	}
	return 1;
}

CMD:borrarautofam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	new family, vehicleid;
	if(sscanf(params, "dd", family, vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación:{2EDFFF} /Borrarautofam [ID FAM] [ID VEH]");
    if (Info[playerid][pAdminZC] < 4 && Info[playerid][pGangModerator] != 1)
    {
    	SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
     	return 1;
    }
    if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 14."); return 1; }
	family -= 1;
	new gangvehicleid = GetGangVehicle(family, vehicleid);
	if(gangvehicleid == -1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Esa familia no posee ese vehiculo.");
	DestroyGangVehicle(family, gangvehicleid);
	saveFamiliesHQ();
	return 1;
}

CMD:darliderfam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 5 || Info[playerid][pGangModerator] >= 1)
	{
		new string[128], familyid;
		if(sscanf(params, "d", familyid)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Indicación: {2EDFFF}/Darliderfam [ID FAM]");

		if(familyid < 1 || familyid > MAX_FAMILY) return SendClientMessageEx(playerid, COLOR_WHITE, "Número de familia inválida.");
		format(string, sizeof(string), "{2EDFFF}[Enc. Familias]: {FFFFFF}Entraste como líder en la familia %s correctamente. {00CCCC}[ID %d]", familyid, fINFO[familyid-1][FamilyName]);
		SendClientMessageEx(playerid, COLOR_AT, string);
		Info[playerid][pRank] = 6;
		Info[playerid][pFMember] = familyid-1;
	}
	return 1;
}

CMD:fseguro(playerid, params[])
{
    new Float: x, Float: y, Float: z;
	new f = Info[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres de una familia.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
    {
		if(FVINFO[f][d][fvId] != 0) GetVehiclePos(FVINFO[f][d][fvId], x, y, z);
  		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
    	{
        	if(FVINFO[f][d][fvLock] > 0 && FVINFO[f][d][fvLocked] == 0)
         	{
          		GameTextForPlayer(playerid,"~r~Vehiculo bloqueado!",5000,6);
            	PlayerPlaySoundEx(1145, x, y, z);
             	FVINFO[f][d][fvLocked] = 1;
              	LockGangVehicle(f, FVINFO[f][d][fvId], FVINFO[f][d][fvLock]);
               	return 1;
			}
			else if(FVINFO[f][d][fvLock] > 0 && FVINFO[f][d][fvLocked] == 1)
   			{
      			GameTextForPlayer(playerid,"~g~Vehiculo desbloqueado!",5000,6);
         		PlayerPlaySoundEx(1145, x, y, z);
           		FVINFO[f][d][fvLocked] = 0;
             	UnLockGangVehicle(f, FVINFO[f][d][fvId], FVINFO[f][d][fvLock]);
              	return 1;
			}
   			SendClientMessageEx(playerid, COLOR_WHITE, " No tienes un sistema de bloqueo instalado en el vehículo.");
      		return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " No estás cerca de ningún vehículo que tu familia posee.");
	return 1;
}

CMD:fllaves(playerid, params[])
{
	if(Info[playerid][pFMember] == 255) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu necesitas ser de una familia para usar este comando.");
	new vstring[1024];
	for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	{
		if(FVINFO[Info[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
		{
			format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, VehicleName[FVINFO[Info[playerid][pFMember]][i][fvModelId] - 400], FVINFO[Info[playerid][pFMember]][i][fvId]);
		}
		else if(FVINFO[Info[playerid][pFMember]][i][fvImpounded] == 1) {
			format(vstring, sizeof(vstring), "%s\n%s {FF0000}[Embargado]", vstring, VehicleName[FVINFO[Info[playerid][pFMember]][i][fvModelId] - 400]);
		}
		else
		{
			format(vstring, sizeof(vstring), "%s\nVacío", vstring);
		}
	}
	return SafeDialogEx(playerid, GTRACKCAR, DIALOG_STYLE_LIST, "{2EDFFF}Vehículos de la familia", vstring, "Buscar", "Cancelar");
}

CMD:festacionar(playerid, params[])
{
	new string[128];

    new f = Info[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres de ninguna familia.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(IsPlayerInVehicle(playerid, FVINFO[f][d][fvId]))
	    {
    		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser el conductor.");
	        new Float:x, Float:y, Float:z, Float:angle, Float:health, vw;
	        GetVehicleHealth(FVINFO[f][d][fvId], health);
	        if(health < 800) return SendClientMessageEx(playerid, COLOR_WHITE, " El vehiculo está muy dañado para poder ser estacionado.");
	        if(Info[playerid][pLockCar] == GetPlayerVehicleID(playerid)) Info[playerid][pLockCar] = INVALID_VEHICLE_ID;
            GetVehiclePos(FVINFO[f][d][fvId], x, y, z);
           	GetVehicleZAngle(FVINFO[f][d][fvId], angle);
           	vw = GetPlayerVirtualWorld(playerid);
            SurfingCheck(GetPlayerVehicleID(playerid));
            UpdateGangVehicleParkPosition(f, d, x, y, z, angle, health, 1, vw);
  			FVINFO[f][d][fvSpawnx] = x;
			FVINFO[f][d][fvSpawny] = y;
			FVINFO[f][d][fvSpawnz] = z;
			FVINFO[f][d][fvSpawna] = angle;
			PutPlayerInVehicle(playerid, FVINFO[f][d][fvId], 0);
            format(string, sizeof(string), "* %s estaciona el vehiculo.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            saveFamiliesHQ();
            return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " Tu necesitas estar dentro del carro de tu familia.");
	return 1;
}

CMD:fcomprarseguro(playerid, params[])
{
    if(!IsAt247(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un 24 Horas.");
		return 1;
	}
	if(Info[playerid][pFMember] != 255 && Info[playerid][pRank] >= 5)
	{
		SafeDialogEx(playerid, DIALOG_CDGLOCKBUY, DIALOG_STYLE_LIST, "{2EDFFF}24 Horas - Seguros", "Alarma		$1000\nSeguro Industrial		$5000", "Comprar", "Cancelar");
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que ser de una familia y ser rango 5 para poder ponerle seguro a los coches.");
	}
	return 1;
}

CMD:comprarcasa(playerid, params[])
{
    new string[128];
    new playername[MAX_PLAYER_NAME];
    new sendername[MAX_PLAYER_NAME];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) )
		{
            if( HouseInfo[h][hOwned] == 0 )
			{
                if(Info[playerid][pLevel] < HouseInfo[h][hLevel])
				{
                    format(string, sizeof(string), "Tú necesitas ser nivel {FF0000}%d{FFFFFF} para comprar está casa.", HouseInfo[h][hLevel]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
                if(Info[playerid][pPhousekey] == INVALID_HOUSE_ID)
				{

					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						Info[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
					    LoadObjects(playerid);
						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido~n~Puedes salir en cualquier momento, usando /salir en este mismo lugar.", 5000, 3);
						Info[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra.");
						SendClientMessageEx(playerid, COLOR_WHITE, "Escribe {5ABAFF}/ayuda{FFFFFF} para ver los comandos disponibles.");
						SaveHouses();
						OnPlayerUpdate(playerid);
						Info[playerid][pVW] = h+6000;
						SetPlayerVirtualWorld(playerid, h+6000);
						DestroyDynamicPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						format(string, sizeof(string), "{CC0000}• Propiedad Privada •\n\n{FFFFFF}Dirección: {CC0000}%d\n{FFFFFF}(/Timbre)", h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_GREEN2, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("logs/- Casas Compradas.log", string);
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes dinero para comprar esta casa!");
						return 1;
					}
				}
				else if(Info[playerid][pPhousekey2] == INVALID_HOUSE_ID)
				{
					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						Info[playerid][pPhousekey2] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
					    LoadObjects(playerid);
						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido~n~Puedes salir en cualquier momento, usando /salir en este mismo lugar.", 5000, 3);
						Info[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra.");
						SendClientMessageEx(playerid, COLOR_WHITE, "Escribe {5ABAFF}/ayuda{FFFFFF} para ver los comandos disponibles.");
						SaveHouses();
						OnPlayerUpdate(playerid);
						Info[playerid][pVW] = h+6000;
						SetPlayerVirtualWorld(playerid, h+6000);
						DestroyDynamicPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						format(string, sizeof(string), "Dueño\n%s\nNivel: %d\nID: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_GREEN2, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("logs/- Casas Compradas.log", string);
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero para comprar esta casa.");
						return 1;
					}
				}
            }
            else
			{
                SendClientMessageEx( playerid, COLOR_WHITE, "Está casa ya tiene dueño." );
            }
        }
    }
    return 1;
}

CMD:rentar(playerid, params[])
{
    new string[128];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) && HouseInfo[h][hRentFee] >= 1)
		{
            if( ! strcmp( HouseInfo[h][hOwner], "Nobody", true ) )
			{
                SendClientMessageEx( playerid, COLOR_WHITE, "No se puede alquilar una casa sin dueño." );
            }
            else
			{
                if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes una casa, escribe {5ABAFF}/ponercasaenventa{FFFFFF} si quieres alquilar esta.");
                    return 1;
                }
                if(Info[playerid][pRenting] != INVALID_HOUSE_ID)
                {
                    SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes una casa en renta, escribe {5ABAFF}/desrentar{FFFFFF} si quieres dejar de rentar en la actual.");
                    return 1;
                }
                if(GetPlayerCash(playerid) > HouseInfo[h][hRentFee])
				{
                    if( HouseInfo[h][hRentable] == 0 )
					{
                        SendClientMessageEx(playerid, COLOR_WHITE, "Está casa no está en renta, lo sentimos.");
                        return 1;
                    }
                    else
					{
                        Info[playerid][pRenting] = h;
                        GivePlayerCash(playerid,-HouseInfo[h][hRentFee]);
                        HouseInfo[h][hSafeMoney] = HouseInfo[h][hSafeMoney]+HouseInfo[h][hRentFee];
                        SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
					    LoadObjects(playerid);
                        SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
                        GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 5000, 3);
                        Info[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
                        Info[playerid][pVW] = 6000+h;
                        SetPlayerVirtualWorld(playerid, h+6000);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones. Puedes salir en cualquier momento por este mismo lugar, escribiendo /salir.");
                        SendClientMessageEx(playerid, COLOR_WHITE, "Escribe {5ABAFF}/ayuda{FFFFFF} para ver los comandos disponibles.");
                        OnPlayerUpdate(playerid);
                        new ip[32];
                        GetPlayerIp(playerid,ip,sizeof(ip));
                        format(string,sizeof(string),"%s (IP: %s) has rented house ID %d (owned by %s) for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hOwner],HouseInfo[h][hRentFee]);
                        Log("logs/- Casas Compradas.log", string);
                        return 1;
                    }
                }
                else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero para comprar esta casa!");
                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:desrentar(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "Es usted el propietario esta casa.");
        return 1;
    }
    if( Info[playerid][pRenting] != INVALID_HOUSE_ID )
	{
        Info[playerid][pRenting] = INVALID_HOUSE_ID;
        SendClientMessageEx(playerid, COLOR_WHITE, "Quedaste sin casa.");
    }
    return 1;
}

CMD:timbre(playerid, params[])
{
	for(new h; h < sizeof(HouseInfo); h++) if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ])) {

		new
			string[75 + MAX_PLAYER_NAME];

			foreach(Player, i) if(GetPlayerVirtualWorld(i) == h + 6000 && GetPlayerInterior(i) == HouseInfo[h][hHInteriorWorld]) {
			format(string,sizeof(string),"El timbre de la casa está sonando.", HouseInfo[h][hOwner]);
			SendClientMessageEx(i,COLOR_PURPLE,string);
			GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~Timbre...", 4000,3);
		}
		format(string,sizeof(string),"* %s presiona el timbre de la casa.",GetPlayerNameEx(playerid));
		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:vendermicasa(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    if((Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0))
    {
        new string[128], giveplayerid, price;
        if(sscanf(params, "dd", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendermicasa (player) (precio)");
        if(price < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Precio debe ser mayor a 0.");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado en el servidor.");
        if(Info[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && Info[giveplayerid][pPhousekey] != INVALID_HOUSE_ID)
        {
            SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya tiene 2 casas.");
            return 1;
        }
        if(Info[giveplayerid][pLevel] >= HouseInfo[Info[playerid][pPhousekey]][hLevel])
        {
                if (ProxDetectorS(8.0, playerid, giveplayerid))
                {
                    HouseOffer[giveplayerid] = playerid;
                    HousePrice[giveplayerid] = price;
                    House[giveplayerid] = 1;
                    format(string, sizeof(string), "* Ofreciste tu casa a %s por $%d.", GetPlayerNameEx(giveplayerid), price);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s te ha ofrecido su casa por $%d. (usa /aceptar casa para comprarla)", GetPlayerNameEx(playerid), price);
                    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                    return 1;
                 }
                 else
                 {
                     SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
                  }
}
else
{
SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene el nivel requerido para tener esta casa.");
}
}
return 1;
}
CMD:vendermicasa2(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
 	if((Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0))
{
new string[128], giveplayerid, price;
if(sscanf(params, "dd", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendermicasa2 (player) (precio)");
if(price < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Precio debe ser mayor a 0.");
if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado en el servidor.");
if(Info[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && Info[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID)
{
SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya tiene 2 casas.");
return 1;
}
if(Info[giveplayerid][pLevel] >= HouseInfo[Info[playerid][pPhousekey2]][hLevel])
{
if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[Info[playerid][pPhousekey2]][hExteriorX],HouseInfo[Info[playerid][pPhousekey2]][hExteriorY],HouseInfo[Info[playerid][pPhousekey2]][hExteriorZ]))
{
if (ProxDetectorS(8.0, playerid, giveplayerid))
{
HouseOffer[giveplayerid] = playerid;
HousePrice[giveplayerid] = price;
House[giveplayerid] = 2;
format(string, sizeof(string), "* Ofreciste tu casa a %s por $%d.", GetPlayerNameEx(giveplayerid), price);
SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
format(string, sizeof(string), "* %s te ha ofrecido su casa por $%d. (usa /aceptar casa para comprarla)", GetPlayerNameEx(playerid), price);
SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
return 1;
}
else
{
SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
return 1;
}
}
else
{
SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar cerca de tu casa.");
return 1;
}
}
else
{
SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene el nivel requerido para tener esta casa.");
return 1;
}
}
return 1;
}

CMD:cdepositar(playerid, params[])
{
	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
	    ClearChatbox(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/cdepositar (nombre) (cantidad){FFFFFF} para depositar algún objeto de la casa.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "- Cocaína");
		SendClientMessageEx(playerid, COLOR_GREY, "- Materiales");
		SendClientMessageEx(playerid, COLOR_GREY, "- Marihuana");
		return 1;
	}

	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
		 if(strcmp(choice, "Materiales", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de un material.");
					return 1;
				}
				if( Info[playerid][pMats] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey]][hMaterials]+=amount;
					Info[playerid][pMats] -= amount;
					format(string, sizeof(string), "Depositaste {00F70C}$%d{FFFFFF} materiales en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes materiales para depositar.");
				}
			}
			else if(strcmp(choice, "marihuana", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de un gramo de marihuana.");
					return 1;
				}
				if( Info[playerid][pPot] >= amount )
				{
					if(amount + HouseInfo[Info[playerid][pPhousekey]][hPot] > 100000)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "  Tu casa ya tiene demasiada marihuana guardada.");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey]][hPot]+=amount;
					Info[playerid][pPot] -= amount;
					format(string, sizeof(string), "Depositaste {00F70C}$%d{FFFFFF} gramos de marihuana en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa cantidad para depositar.");
				}
			}
			else if(strcmp(choice, "cocaina", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de uno.");
					return 1;
				}
				if( Info[playerid][pCrack] >= amount )
				{
					if(amount + HouseInfo[Info[playerid][pPhousekey]][hCrack] > 100000)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte de la casa ya está llena de droga! (100000)");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey]][hCrack]+=amount;
					Info[playerid][pCrack] -= amount;
					format(string, sizeof(string), "Depositaste {00F70C}$%d{FFFFFF} gramos de droga en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of cocaína into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes drogas para depositar.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cdepositar (nombre) (monto)");
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Cocaína, Materiales");
			}
		}
	}
	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			if(strcmp(choice, "dinero", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de un dolar.");
					return 1;
				}
				if( GetPlayerCash(playerid) >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey2]][hSafeMoney]+=amount;
					GivePlayerCash(playerid, -amount);
					format(string, sizeof(string), "Depositaste $%d en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited $%d into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para depositar.");
			}
			else if(strcmp(choice, "Materiales", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de un material.");
					return 1;
				}
				if( Info[playerid][pMats] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey2]][hMaterials] += amount;
					Info[playerid][pMats] -= amount;
					format(string, sizeof(string), "Depositaste %d materiales en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes materiales para depositar.");
			}
			else if(strcmp(choice, "cocaina", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de uno.");
					return 1;
				}
				if( Info[playerid][pCrack] >= amount )
				{
					if(amount + HouseInfo[Info[playerid][pPhousekey2]][hCrack] > 100000)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "  La caja fuerte de la casa ya está llena de droga! (100000)");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey2]][hCrack]+=amount;
					Info[playerid][pCrack] -= amount;
					format(string, sizeof(string), "Depositaste %d gramos de droga en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of cocaína into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes drogas para depositar.");
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cdepositar [nombre] [monto]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Droga, Materiales");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en ninguna casa.");
	return 1;
}


CMD:cajaestado(playerid, params[])
{
	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++)
			{
				if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new string[80];
			format(string, sizeof(string), "{7D997D}Armas: %d/%d | Dinero: $%d | Drogas: %d | Marihuana: %d | Materiales: %d", weaponsinlocker,HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade], HouseInfo[Info[playerid][pPhousekey]][hSafeMoney], HouseInfo[Info[playerid][pPhousekey]][hCrack], HouseInfo[Info[playerid][pPhousekey]][hPot], HouseInfo[Info[playerid][pPhousekey]][hMaterials]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}

	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++)
			{
				if(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new string[80];
			format(string, sizeof(string), "{7D997D}Armas: %d/%d | Dinero: $%d | Drogas: %d | Marihuana: %d | Materiales: %d", weaponsinlocker,HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade], HouseInfo[Info[playerid][pPhousekey2]][hSafeMoney], HouseInfo[Info[playerid][pPhousekey2]][hCrack], HouseInfo[Info[playerid][pPhousekey2]][hPot], HouseInfo[Info[playerid][pPhousekey2]][hMaterials]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}

	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás dentro de tu casa.");
	}
	return 1;
}

CMD:garma(playerid, params[])
{
    if(manubrio[playerid] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes guardar este arma mientras la estas dando.");
	if(GetPVarInt(playerid, "IsInArena") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer eso en la Arena.");
		return 1;
	}
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/garma (arma) (slot){FFFFFF} para guardar un arma de la casa.");

	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   Debes esperar {FF0000}%d{FFFFFF} segundo despues de haber guardado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
			}

			new maxslots = HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido.");
				return 1;
			}

			if( HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] != 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes un arma en esa ranura.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 23)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Pistola SD en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 24)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Desert Deagle en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "9mm", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 22)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una 9mm en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][3] == 25)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Shotgun en tu armario.");
					weapon = Info[playerid][pWeapons][3];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][3] == 27)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Combat Shotgun en tu armario.");
					weapon = Info[playerid][pWeapons][3];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 29)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una MP5 en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 30)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una AK-47 en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "Uzi", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 28)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Uzi en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 31)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una M4 en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][6] == 33)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un rifle en tu armario.");
					weapon = Info[playerid][pWeapons][6];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][6] == 34)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Sniper en tu armario.");
					weapon = Info[playerid][pWeapons][6];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 28)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una uzi en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 29)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Tec9 en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma.");
			if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] == 0)
			{
				HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouses();
				return 1;
			}
			else { SendClientMessageEx(playerid,COLOR_WHITE,"Nombre Inválido."); return 1; }
		}
	}

	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "Debes esperar {FF0000}%d{FFFFFF} segundos después de haber guardado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
			}
			new maxslots = HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido.");
				return 1;
			}

			if( HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] != 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienes un arma almacenada en ese espacio ya.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 23)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Pistola SD en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 24)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Desert Deagle en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][3] == 25)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Shotgun en tu armario.");
					weapon = Info[playerid][pWeapons][3];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][3] == 27)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Combat Shotgun en tu armario.");
					weapon = Info[playerid][pWeapons][3];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 29)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una MP5 en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 30)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una AK-47 en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 31)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una M4 en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][6] == 33)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un rifle en tu armario.");
					weapon = Info[playerid][pWeapons][6];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][6] == 34)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Sniper en tu armario.");
					weapon = Info[playerid][pWeapons][6];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 28)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una uzi en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 29)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Tec9 en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma.");
			if(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] == 0)
			{
				HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouses();
				return 1;
			}
			else { SendClientMessageEx(playerid,COLOR_WHITE,"Nombre de arma inválida."); return 1; }
		}
	}

	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una casa.");
	}
	return 1;
}

CMD:sarma(playerid, params[])
{
	new string[128], slot;

	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey])
		{
			if(Info[playerid][pConnectTime] < 5 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No puedes hacer esto, tienes restricción de armas.");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s Armario ***", GetPlayerNameEx(playerid));
		   		SendClientMessageEx(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if( HouseInfo[Info[playerid][pPhousekey]][hWeapons][s] != 0 )
					{
						GetWeaponName(HouseInfo[Info[playerid][pPhousekey]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/sarma (slot){FFFFFF} para retirar un arma de la casa.");
				return 1;
			}

			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "Debes de esperar {FF0000}%d{FFFFFF} segundos después de haber retirado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
			}
			new maxslots = HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido.");
				return 1;
			}
			if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1]);
				HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "pistolsd", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Pistola SD de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Desert Eagle.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una escopeta de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Combat Shotgun de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una MP5 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una AK-47 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una M4 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un rifle de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un Rifle Sniper de tu armario de armas.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una UZI de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una UZI de de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				SaveHouses();
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma en ese slot.");
				return 1;
			}
		}
	}
	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			if(Info[playerid][pConnectTime] < 5 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Tienes restricción de armas por 5 horas.");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s - Armario***", GetPlayerNameEx(playerid));
		   		SendClientMessageEx(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if( HouseInfo[Info[playerid][pPhousekey2]][hWeapons][s] != 0 )
					{
						GetWeaponName(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sarma (slot)");
				return 1;
			}

			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "Debes de esperar {FF0000}%d{FFFFFF} segundos después de haber cogido un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
			}
			new maxslots = HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido.");
				return 1;
			}
			if(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1]);
				HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "pistolsd", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Pistola SD de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Desert Eagle.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una escopeta de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "spas12", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Combat Shotgun de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una MP5 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una AK-47 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una M4 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un rifle de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un Rifle Sniper de tu armario de armas.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una UZI de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una UZI de de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				SaveHouses();
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un arma en ese espacio.");
				return 1;
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una casa.");
	}
	return 1;
}

CMD:cretirar(playerid, params[])
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new string[128], amount, choice[32];

	if(sscanf(params, "s[32]d", choice, amount))
	{
		ClearChatbox(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/cretirar (nombre) (cantidad){FFFFFF} para sacar algún objeto de la casa.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "- Cocaína");
		SendClientMessageEx(playerid, COLOR_GREY, "- Materiales");
		SendClientMessageEx(playerid, COLOR_GREY, "- Marihuana");
		return 1;
	}
	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Dinero", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un dólar.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]-=amount;
					GivePlayerCash(playerid, amount);
					format(string, sizeof(string), "Retiraste $%d de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para retirar.");
				}
			}
			else if(strcmp(choice, "Materiales", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un material.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey]][hMaterials] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey]][hMaterials]-=amount;
					Info[playerid][pMats] += amount;
					format(string, sizeof(string), "Retiraste %d materiales de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes materiales para retirar.");
				}
			}
			else if(strcmp(choice, "marihuana", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de 1.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey]][hPot] >= amount)
				{
					if(Info[playerid][pPot] > 999)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes 1 kg de marihuana.");
						return 1;
					}
					new level = Info[playerid][pDrugsSkill];
					if(level >= 0 && level <= 50)
					{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 10 con tu habilidad!"); return 1; } }
					else if(level >= 51 && level <= 100)
					{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 20 con tu habilidad!"); return 1; } }
					else if(level >= 101 && level <= 200)
					{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 30 con tu habilidad!"); return 1; } }
					else if(level >= 201 && level <= 400)
					{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 40 con tu habilidad!"); return 1; } }
					else if(level >= 401)
					{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 50 con tu habilidad!"); return 1; } }
					HouseInfo[Info[playerid][pPhousekey]][hPot]-=amount;
					Info[playerid][pPot] += amount;
					format(string, sizeof(string), "Retiraste %d gramos de marihuana de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa cantidad para retirar.");
				}
			}
			else if(strcmp(choice, "cocaina", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un dólar.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey]][hCrack] >= amount )
				{
					if(Info[playerid][pCrack] > 25)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes 25 gramos de droga, no puedes cargar más.");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey]][hCrack]-=amount;
					Info[playerid][pCrack] += amount;
					format(string, sizeof(string), "Retiraste %d gramos de droga de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of cocaína from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente droga para retirar.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cretirar (nombre) (monto)");
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Droga, Materiales");
			}
		}
	}
	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey2]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Dinero", true, strlen(choice)) == 0)
			{
				if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un dolar.");
				if( HouseInfo[Info[playerid][pPhousekey2]][hSafeMoney] >= amount)
				{
					HouseInfo[Info[playerid][pPhousekey2]][hSafeMoney]-=amount;
					GivePlayerCash(playerid, amount);
					format(string, sizeof(string), "Retiraste $%d de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto dinero para retirar.");
				}
			}
			else if(strcmp(choice, "Materiales", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un material.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey2]][hMaterials] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey2]][hMaterials]-=amount;
					Info[playerid][pMats] += amount;
					format(string, sizeof(string), "Retiraste %d materiales de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes materiales para retirar.");
				}
			}
			else if(strcmp(choice, "marihuana", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de 1.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey2]][hPot] >= amount)
				{
					if(Info[playerid][pPot] > 999)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "Ya tienes 1 Kg de marihuana.");
						return 1;
					}
					new level = Info[playerid][pDrugsSkill];
					if(level >= 0 && level <= 50)
					{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 10 con tu habilidad!"); return 1; } }
					else if(level >= 51 && level <= 100)
					{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 20 con tu habilidad!"); return 1; } }
					else if(level >= 101 && level <= 200)
					{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 30 con tu habilidad!"); return 1; } }
					else if(level >= 201 && level <= 400)
					{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 40 con tu habilidad!"); return 1; } }
					else if(level >= 401)
					{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 50 con tu habilidad!"); return 1; } }
					HouseInfo[Info[playerid][pPhousekey2]][hPot]-=amount;
					Info[playerid][pPot] += amount;
					format(string, sizeof(string), "Retiraste %d gramos de marihuana de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa cantidad para retirar.");
				}
			}
			else if(strcmp(choice, "cocaina", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de uno.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey2]][hCrack] >= amount )
				{
					if(Info[playerid][pCrack] > 25)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Tienes 25 gramos de droga.");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey2]][hCrack]-=amount;
					Info[playerid][pCrack] += amount;
					format(string, sizeof(string), "Retiraste %d gramos de droga de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of cocaína from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("logs/- Cajas de Casas.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente droga para retirar.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cretirar (Nombre) (Monto)");
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Droga, Materiales");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una casa.");
		return 1;
	}
	return 1;
}

CMD:staffvcasa(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pShopTech] >= 1)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));

		new string[128], house;
		if(sscanf(params, "d", house)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /staffvcasa (houseid)");

		HouseInfo[house][hLock] = 1;
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"Administrator %s (IP: %s) has admin-sold house ID %d (was owned by %s).",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hOwner]);
		Log("logs/- Casas Vendidas (Staff).log", string);
		ClearHouse(house);
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Vendiste la Casa Numero %d.", house);
		GameTextForPlayer(playerid, string, 10000, 3);
		SaveHouses();
		DestroyDynamicPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "{55F032}• Propiedad en Venta •\n\n{FFFFFF}Precio: {55F032}$%d\n{FFFFFF}(/Comprarcasa)", HouseInfo[house][hValue]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_BLANCO, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 2.0);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando");
	}
	return 1;
}

CMD:vendercasa2(playerid, params[])
{
    new string[128];
	new house2 = Info[playerid][pPhousekey2];
    if(house2 == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa.");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]))
	{
        for(new i = 0; i < sizeof(HouseInfo); i++)
		ClearHouse(house2);
		HouseInfo[house2][hLock] = 1;
		format( HouseInfo[house2][hOwner], 128, "Nobody" );
		GivePlayerCash(playerid,HouseInfo[house2][hValue]);
		HouseInfo[house2][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Felicitaciones~n~ Vendiste tu casa por ~n~~g~$%d", HouseInfo[house2][hValue]);
		GameTextForPlayer(playerid, string, 4000, 3);
		Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		if(Info[playerid][pVW] == house2+6000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]);
			Info[playerid][pInt] = 0;
			Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		}
		SaveHouses();
		OnPlayerUpdate(playerid);
		DestroyDynamicPickup(HouseInfo[house2][hPickupID]);
		HouseInfo[house2][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house2][hTextID]);
		format(string, sizeof(string), "{55F032}• Propiedad en Venta •\n\n{FFFFFF}Precio: {55F032}$%d\n{FFFFFF}(/Comprarcasa)", HouseInfo[house2][hValue]);
		HouseInfo[house2][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]+0.5,2.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house2,HouseInfo[house2][hValue]);
		Log("logs/- Casas Vendidas.log", string);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca su casa (exterior) para venderla.");
	}
 return 1;
}

CMD:vendercasa(playerid, params[])
{
	new string[128];
	new house = Info[playerid][pPhousekey];
	if(house == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa.");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
	{
		ClearHouse(house);
		HouseInfo[house][hLock] = 1;
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		GivePlayerCash(playerid,HouseInfo[house][hValue]);
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Felicitaciones~n~ Vendiste tu casa por ~n~~g~$%d", HouseInfo[house][hValue]);
		GameTextForPlayer(playerid, string, 4000, 3);
		Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		GuardarmuebleUserCASA(playerid, house);
		if(Info[playerid][pVW] == house+6000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]);
			Info[playerid][pInt] = 0;
			Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		}

		SaveHouses();
		OnPlayerUpdate(playerid);
		DestroyDynamicPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "{55F032}• Propiedad en Venta •\n\n{FFFFFF}Precio: {55F032}$%d\n{FFFFFF}(/Comprarcasa)", HouseInfo[house][hValue]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 2.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hValue]);
		Log("logs/- Casas Vendidas.log", string);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca su casa (exterior) para venderla.");
	return 1;
}

CMD:goinhouse(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pShopTech] >= 1)
	{
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /goinhouse (housenumber)");

		SetPlayerInterior(playerid,HouseInfo[housenum][hHInteriorWorld]);
		if(HouseInfo[housenum][hInteriorLoad] == 1)
		{
		    LoadObjects(playerid);
		}
		SetPlayerPos(playerid,HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ]);
		GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
		Info[playerid][pInt] = HouseInfo[housenum][hHInteriorWorld];
	}
	return 1;
}

CMD:gotohouse(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pShopTech] >= 1)
	{
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /gotohouse [housenumber]");

		SetPlayerPos(playerid,HouseInfo[housenum][hExteriorX],HouseInfo[housenum][hExteriorY],HouseInfo[housenum][hExteriorZ]);
		GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
		SetPlayerInterior(playerid, 0);
		Info[playerid][pInt] = 0;
	}
	return 1;
}

CMD:preciorenta(playerid, params[])
{
	new string[128], fee;
	if(sscanf(params, "d", fee)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/preciorenta (precio){FFFFFF} para ponerle precio de renta.");

	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hExteriorX], HouseInfo[Info[playerid][pPhousekey]][hExteriorY], HouseInfo[Info[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ])))
	{
		if(!(1 <= fee <= 10000))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Renta minima es $1, maxima es $10,000.");
		}
		else
		{

			HouseInfo[Info[playerid][pPhousekey]][hRentFee] = fee;
			format(string, sizeof(string), "Rentaste tu casa a $%i.", HouseInfo[Info[playerid][pPhousekey]][hRentFee]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(HouseInfo[Info[playerid][pPhousekey]][hRentable]) format(string, sizeof(string), "Dueño:\n%s\nRenta: $%d\nNivel: %d\nID: %d\nUsa /rentar para rentar aquí",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hRentFee],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey]);
			else format(string, sizeof(string), "Dueño:\n%s\nNivel: %d\nID: %d",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey]][hTextID], COLOR_GREEN2, string);
		}
	}
	else if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hExteriorX], HouseInfo[Info[playerid][pPhousekey2]][hExteriorY], HouseInfo[Info[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hInteriorX], HouseInfo[Info[playerid][pPhousekey2]][hInteriorY], HouseInfo[Info[playerid][pPhousekey2]][hInteriorZ])))
	{

		if(!(1 <= fee <= 10000))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Renta minima es $1, maxima es $10,000.");
		}
		else {

			HouseInfo[Info[playerid][pPhousekey2]][hRentFee] = fee;
			format(string, sizeof(string), "Rentaste tu casa a $%i.", HouseInfo[Info[playerid][pPhousekey2]][hRentFee]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(HouseInfo[Info[playerid][pPhousekey2]][hRentable]) format(string, sizeof(string), "Dueño:\n%s\nRenta: $%d\nNivel: %d\nID: %d\nUsa /rentar para rentar aquí",HouseInfo[Info[playerid][pPhousekey2]][hOwner],HouseInfo[Info[playerid][pPhousekey2]][hRentFee],HouseInfo[Info[playerid][pPhousekey2]][hLevel],Info[playerid][pPhousekey2]);
			else format(string, sizeof(string), "Dueño:\n%s\nNivel: %d\nID: %d",HouseInfo[Info[playerid][pPhousekey2]][hOwner],HouseInfo[Info[playerid][pPhousekey2]][hLevel],Info[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey2]][hTextID], COLOR_GREEN2, string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no es dueño de una casa, o no estás en una de ellas.");
	return 1;
}

CMD:ponerrenta(playerid, params[])
{
	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hExteriorX], HouseInfo[Info[playerid][pPhousekey]][hExteriorY], HouseInfo[Info[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))) {

		new
			szMessage[128];

		if(!HouseInfo[Info[playerid][pPhousekey]][hRentable])
		{
			HouseInfo[Info[playerid][pPhousekey]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "Dueño:\n%s\nRenta: $%d\nNivel: %d\nID: %d\nUsa /rentar para rentar aquí",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hRentFee],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey]][hTextID], COLOR_GREEN2, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "Está casa ahora está en renta.");
		}
		else {
			HouseInfo[Info[playerid][pPhousekey]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "Dueño:\n%s\nNivel: %d\nID: %d",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey]][hTextID], COLOR_GREEN2, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "Está casa ya no está en renta." );
		}
	}
	else if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hExteriorX], HouseInfo[Info[playerid][pPhousekey2]][hExteriorY], HouseInfo[Info[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hInteriorX], HouseInfo[Info[playerid][pPhousekey2]][hInteriorY], HouseInfo[Info[playerid][pPhousekey2]][hInteriorZ]))) {
		new
			szMessage[128];

		if(!HouseInfo[Info[playerid][pPhousekey2]][hRentable]) {
			HouseInfo[Info[playerid][pPhousekey2]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "Dueño:\n%s\nRenta: $%d\nNivel: %d\nID: %d\nUsa /rentar para rentar aquí",HouseInfo[Info[playerid][pPhousekey2]][hOwner],HouseInfo[Info[playerid][pPhousekey2]][hRentFee],HouseInfo[Info[playerid][pPhousekey2]][hLevel],Info[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey2]][hTextID], COLOR_GREEN2, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "Está casa ahora está en renta.");
		}
		else {
			HouseInfo[Info[playerid][pPhousekey2]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "Dueño:\n%s\nNivel: %d\nID: %d",HouseInfo[Info[playerid][pPhousekey2]][hOwner],HouseInfo[Info[playerid][pPhousekey2]][hLevel],Info[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey2]][hTextID], COLOR_GREEN2, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "Está casa ya no está en renta." );
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa, o no está en uno de ellas.");
	return 1;
}

CMD:editar(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
		return 1;
	}

	new string[500], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editar (nombre) (valor)");
		SendClientMessageEx(playerid, COLOR_GREY,  "Nombres: Nivel, Precio");
		return 1;
	}

	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
			format(string, sizeof(string), "Casa: %d", i);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			if(amount > 0)
			{
				if(strcmp(choice,"Nivel",true) == 0)
				{
					HouseInfo[i][hLevel] = amount;
				}
				else if(strcmp(choice,"Precio",true) == 0)
				{
					HouseInfo[i][hValue] = amount;
				}
			}
			if(HouseInfo[i][hOwned] ==0)
			{
				format(string, sizeof(string), "{55F032}• Propiedad en Venta •\n\n{FFFFFF}Dirección: {55F032}%d\n{FFFFFF}Precio: {55F032}$%d\n{FFFFFF}(/Comprarcasa)",i, HouseInfo[i][hValue]);
				UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
			}
			else
			{
				if(HouseInfo[i][hRentable] == 0)
				{
					format(string, sizeof(string), "{CC0000}• Propiedad Privada •\n\n{FFFFFF}Dirección: {CC0000}%d\n{FFFFFF}(/Timbre)",i);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
				}
				else
				{
					format(string, sizeof(string), "Dueño:\n%s\nRenta: $%d\nNivel: %d\nID: %d\nUsa /rentar para rentar aquí",HouseInfo[i][hOwner],HouseInfo[i][hRentFee],HouseInfo[i][hLevel],i);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
				}
			}
		}
	}
	return 1;
}

CMD:casasiguiente(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Lista de casa disponible siguiente.");
		for(new x;x<MAX_HOUSES;x++)
		{
		    if(HouseInfo[x][hExteriorX] == 0.0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d está casa está disponible para usarla", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado!");
	return 1;
}

CMD:hname(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}

	new string[128], houseid, ownername[24];
	if(sscanf(params, "ds[24]", houseid, ownername)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /hname (houseid) (Nombre)");

	format(HouseInfo[houseid][hOwner], 24, "%s", ownername);
	format(string, sizeof(string), "Estableciste el nombre del dueño de la casa a: %s", ownername);
	HouseInfo[houseid][hOwned] = 1;
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
	HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
	format(string, sizeof(string), "Dueño:\n %s\nNivel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
	format(string, sizeof(string), "%s has edited HouseID %d's Owner to %s.", GetPlayerNameEx(playerid), houseid, ownername);
	Log("logs/- Dueños de Casas (Staff).log", string);
	return 1;
}

CMD:editarcasa(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pShopTech] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	new string[128], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarcasa (Nombre) (houseid) [(Opcional)Codigo]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, InteriorLoad, Clase (1-3), Nivel, Precio");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
		SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el interior de la casa!" );
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/- Modifaciones de Casas.log", string);
		return 1;
	}
	else if(strcmp(choice, "InteriorLoad", true) == 0)
	{
		if(HouseInfo[houseid][hInteriorLoad] == 0)
		{
			HouseInfo[houseid][hInteriorLoad] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Interior Personalizado! (1)" );
		}
		else
		{
			HouseInfo[houseid][hInteriorLoad] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Interior Normal! (0)" );
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/- Modifaciones de Casas.log", string);
		return 1;
	}
	else if(strcmp(choice, "ExteriorLoad", true) == 0)
	{
		if(HouseInfo[houseid][hExteriorLoad] == 0)
		{
			HouseInfo[houseid][hExteriorLoad] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Exterior Personalizado! (1)" );
		}
		else
		{
			HouseInfo[houseid][hExteriorLoad] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Exterior Normal! (0)" );
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/- Modifaciones de Casas.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el exterior de la casa!" );
		DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/- Modifaciones de Casas.log", string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "En venta!\nDescripción: %s\nPrecio: $%d\nNivel: %d\nID: %d\nUsa /comprarcasa para comprarla",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
			HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "Dueño:\n%s\nNivel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
				HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
			else
			{
				DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "Dueño:\n%s\nRenta: $%d\nNivel: %d\nID: %d\nUsa /rentar para rentar aquí",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
				HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
		}
	}
	else if(strcmp(choice, "nivel", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "Editaste el nivel a %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "En venta!\nDescripción: %s\nPrecio: $%d\nNivel: %d\nID: %d\nUsa /comprarcasa para comprarla",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "Dueño:\n%s\nNivel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
			}
			else
			{
				format(string, sizeof(string), "Dueño:\n%s\nRenta: $%d\nNivel: %d\nID: %d\nUsa /rentar para rentar aquí",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
			}
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/- Modifaciones de Casas.log", string);
	}
	else if(strcmp(choice, "precio", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "Editaste el precio a $%d.", amount );
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "En Venta!\nDescripción: %s\nPrecio: $%d\nNivel: %d\nID: %d\nUsa /comprarcasa para comprarla",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
		Log("logs/- Modifaciones de Casas.log", string);
	}
	else if(strcmp(choice, "clase", true) == 0)
	{
		switch(amount)
		{
			case 1:
			{
				format(HouseInfo[houseid][hDescription], 64, "Clase Baja" );
				SendClientMessageEx(playerid, COLOR_WHITE, "Edistaste la casa a clase: 1: (Baja)" );
			}
			case 2:
			{
				format(HouseInfo[houseid][hDescription], 64, "Clase Media" );
				SendClientMessageEx(playerid, COLOR_WHITE, "Edistaste la casa a clase: 2: (Media)"  );
			}
			case 3:
			{
				format(HouseInfo[houseid][hDescription], 64, "Clase Alta" );
				SendClientMessageEx(playerid, COLOR_WHITE, "Edistaste la casa a clase: 3: (Alta)"  );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "En venta!\nDescripción: %s\nPrecio: $%d\nNivel: %d\nID: %d\nUsa /comprarcasa para comprarla",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Class to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/- Modifaciones de Casas.log", string);
	}
	SaveHouses();
	return 1;
}

CMD:cseguro(playerid, params[])
{
	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hExteriorX], HouseInfo[Info[playerid][pPhousekey]][hExteriorY], HouseInfo[Info[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ])))
	{

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[Info[playerid][pPhousekey]][hLock] == 1)
		{
			HouseInfo[Info[playerid][pPhousekey]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s ha abierto su casa.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[Info[playerid][pPhousekey]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s ha cerrado su casa.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hExteriorX], HouseInfo[Info[playerid][pPhousekey2]][hExteriorY], HouseInfo[Info[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hInteriorX], HouseInfo[Info[playerid][pPhousekey2]][hInteriorY], HouseInfo[Info[playerid][pPhousekey2]][hInteriorZ])))
	{

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[Info[playerid][pPhousekey2]][hLock] == 1)
		{
			HouseInfo[Info[playerid][pPhousekey2]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s ha abierto su casa.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[Info[playerid][pPhousekey2]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s ha cerrado su casa.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una casa o no estás cerca de la puerta para hacer esto.");
	return 1;
}

CMD:licenciataxi(playerid, params[])
{
    if(Info[playerid][pJob] != 8 && Info[playerid][pJob2] != 8)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "No eres taxista.");
	}
    if(Info[playerid][pTaxiLicense] != 0)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "¿Para que necesitas otra?, ya tienes una.");
	}
	if(!PlayerToPoint(10.0,playerid,1752.5104,-1903.1664,13.5631))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");
	}
	if(GetPlayerCash(playerid) < 900)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes para pagar está licencia.");
	}
	GivePlayerCash(playerid,-900);
	Info[playerid][pTaxiLicense] = 1;
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Adquiriste la licencia de servicios de taxista ahora puedes trabajar con tu coche.");
	SendClientMessageEx(playerid, COLOR_WHITE, "Ya no es necesario usar coches de Unity.");
	return 1;
}

CMD:tomarpizza(playerid, params[])
{
	if (Info[playerid][pJob] != 4 && Info[playerid][pJob2] != 4)
	{
		SendClientMessageEx(playerid,COLOR_WHITE,"No eres repartidor de Pizza!");
		return 1;
	}
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!(IsAPizzabike(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
	    SendClientMessageEx(playerid,COLOR_WHITE,"Tu necesitas estár en una motocicleta de repartidor de pizza!");
	    return 1;
	}
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if (!IsPlayerInRangeOfPoint(playerid, 3.0,2123.291259,-1776.713867,13.388929) || IsPlayerInRangeOfPoint(playerid, 3.0, -2346.1243,-136.8405,35.1734))
	{
		SendClientMessageEx(playerid,COLOR_WHITE,"No estás en el lugar adecuado.");
		return 1;
	}
	if(GetPVarInt(playerid, "Pizza") > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Usted ya está entregando pizzas.");
		return 1;
	}

	new rand = random(MAX_HOUSES);
	if(rand == 210)
	{
	   	rand = 1;
	}
	SetPVarInt(playerid, "tpPizzaTimer", floatround((GetPizzaDistance(rand) / 100), floatround_round));
	SetPVarInt(playerid, "pizzaTotal", floatround((GetPizzaDistance(rand) / 10), floatround_round));
	SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTotal"));
 	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
 	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
	new szMessage[128];
	format(szMessage, sizeof(szMessage), "Has cogido una pizza. Tienes {FF0000}%d{FFFFFF} segundos para entregarla!", /*HouseInfo[rand][hOwner],*/ GetPVarInt(playerid, "pizzaTotal"));
	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	SetPVarInt(playerid, "Pizza", rand);
 	PizzaBar[playerid] = CreateProgressBar(500.00, 107.00, 104.50, 1.50, -32513, 100.0);
	SetProgressBarValue(PizzaBar[playerid], 100.0);
	ShowProgressBarForPlayer(playerid, PizzaBar[playerid]);
	SetPlayerCheckpoint(playerid, HouseInfo[rand][hExteriorX], HouseInfo[rand][hExteriorY], HouseInfo[rand][hExteriorZ], 5);
	return 1;
}
CMD:usmc(playerid, params[])
{
	if(Team_USMC(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,332.2786,2345.7732,8905.4180))//USMC Duty
		{
			SafeDialogEx(playerid, NGMENU, DIALOG_STYLE_LIST, "{817867}USMC","Duty\nUniformes\nArmas\nEncubierto\nChaleco Antibalas\nBotiquín\nAccessorios\nParacaídas", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes ver los casilleros de USMC.");
		}
	}
	return 1;
}

zcmd(respawntodo, playerid, params[])
{
   if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás conectado.");
	if(Info[playerid][pAdminZC] >= 3)
	{
		new bool:unwanted[MAX_VEHICLES];
		for(new player=0; player<MAX_PLAYERS; player++)
		{
			if(IsPlayerInAnyVehicle(player))
			{
				unwanted[GetPlayerVehicleID(player)]=true;
			}
		}
		for(new car = 0; car < MAX_VEHICLES; car++)
		{
			if(!unwanted[car]) SetVehicleToRespawn(car);
			SetVehicleParamsEx(car,0,0,0,0,0,0,0);
			arr_Engine{car} = 0;
		}
		new string[128];
		format(string, sizeof(string), "Los vehículos fueron restaurados por el administrador %s.",GetPlayerNameEx(playerid));
		return ABroadCast(COLOR_CSTAFF, string, 3);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}

CMD:reparartodo(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(IsPlayerConnected(playerid)) {
        if(Info[playerid][pAdminZC] < 4) {
            SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
            return 1;
        }
        for(new v = 0; v < MAX_VEHICLES; v++)
		{
            RepairVehicle(v);
        	SetVehicleHealth(v, 1000.0);
        }
        SendClientMessageEx(playerid, COLOR_YELLOW2, "Todos los vehículos del servidor fueron reparados!");
    }
    return 1;
}

CMD:fmuerte(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Para forzar la muerte de un usuario, use: /Fmuerte [ID]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), "Has forzado la muerte del usuario %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_ROJO, "Aviso Importante:{FFFFFF} Un administrador ha forzado tu muerte!");
				KillEMSQueue(giveplayerid);
				ResetPlayerWeaponsEx(giveplayerid);
				SpawnPlayer(giveplayerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Ese jugador no está herido!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando!");
	}
	return 1;
}

CMD:vendercosecha(playerid, params[])
{
    if(!IsAt247(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en el 24 Horas.");
   	if(Info[playerid][pJob] == 9 || Info[playerid][pJob2] == 9)
   	{
   	    if(Info[playerid][pCosecha] > 1)
   	    {
   	        new string[48];
			format(string, sizeof(string), "Vendiste %d Kg de cosecha!", Info[playerid][pCosecha], Info[playerid][pCosecha]*25);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			//GivePlayerCash(playerid, Info[playerid][pCosecha]*25);
			Info[playerid][pCosecha] = 0;
			return 1;
   	    }
   	    else
   	    {
   	        SendClientMessageEx(playerid, COLOR_GRAD2, "Lo mínimo para vender es 1 KG.");
   	        return 1;
   	    }
   	}
   	else SendClientMessageEx(playerid, COLOR_GRAD2, "No eres cosechador.");
   	return 1;
}

CMD:limpiarcamion(playerid, params[])
{
	if(!OrgGob(playerid))
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "No eres de alguna organización del gobierno.");
        return 1;
	}
	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		new truckcontents = TruckContents[closestcar];
		if(truckcontents < 11)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No hay artículos ilegales en el camión.");
			return 1;
		}
		new string[128];

		new truckcontentname[50];

		if(truckcontents >= 11 && truckcontents <= 15)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Armas Ilegales"); }
		else if(truckcontents >= 16 && truckcontents <= 20)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Drogas Ilegales"); }
		else if(truckcontents >= 21 && truckcontents <= 25)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Materiales Ilegales"); }

 		foreach(Player, i)
		{
  			if(TruckUsed[i] == closestcar)
     		{
    			DestroyProgressBar(LoadTruckBar[i]);
				LoadTruckBar[i] = INVALID_BAR_ID;
				LoadTruckTime[i] = 0;
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				TruckContents[closestcar] = 0;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessageEx(i, COLOR_WHITE, "Tu entrega no ha podido ser completada. Las autoridades han confiscado los productos ilegales.");
       		}
		}
		format(string, sizeof(string), "Removiste las %s del camión.", truckcontentname);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* %s ha tomado los puntos ilegales de los camiones.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
   	else
	{
 		SendClientMessageEx(playerid, COLOR_WHITE, "No está cerca de un camión.");
 	}
    return 1;
}

CMD:arrastrar(playerid, params[])
{
	new playerb, string[128];
	if(OrgGob(playerid))
    if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_GREY, "/Arrastrar (Playerid)");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_ROJO, "! {FFFFFF}No puedes arrastrarte tu mismo.");
	if(Drag[playerid] != -1 || Dragged[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "Usted no puede hacer esto en este momento.");
	new Float: ppFloats[3];
	GetPlayerPos(playerb, ppFloats[0], ppFloats[1], ppFloats[2]);
	if(!IsPlayerInRangeOfPoint(playerb, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
	if(IsPlayerInAnyVehicle(playerb)) return SendClientMessage(playerid, COLOR_ROJO, "! {FFFFFF}No puedes arrastrar a personas en un vehículo.");
	if(Info[playerb][pEstado] != 2) return SendClientMessage(playerid, COLOR_ROJO, "! {FFFFFF}El jugador no tiene esposas.");
	if(Dragged[playerb] != -1) return SendClientMessage(playerid, COLOR_ROJO, "! {FFFFFF}Ya están arrastrando a esta persona.");
	Drag[playerid] = playerb;
	Dragged[playerb] = playerid;
	format(string, sizeof(string), "* %s toma de las esposas a %s, acto seguido lo arrastra.", GetPlayerNameEx(playerid), GetPlayerNameEx(playerb));
 	ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:darrastrar(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Usted necesita a la conexión primero antes de la utilización de cualquier mando.");
	if(Drag[playerid] == -1) return SendClientMessage(playerid, COLOR_ROJO, "! {FFFFFF}No estás arrastrando a nadie.");
	playerb = Drag[playerid];
	Drag[playerid] = -1;
	Dragged[playerb] = -1;
	format(string, sizeof(string), "* %s retira sus manos de %s y lo deja de arrastrar.", GetPlayerNameEx(playerid), GetPlayerNameEx(playerb));
 	ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:robarcamion(playerid, params[])
{
	if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid))
	    {
     		if(gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE || GetPVarInt(playerid, "Packages") == 0 || TaxiAccepted[playerid] == 999 || EMSAccepted[playerid] == 999 || MedicAccepted[playerid] == 999 || MechanicCallTime[playerid] == 0)
	        {
         		if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "En este momento está cargando tu camión!");
					return 1;
	            }
	            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "Estás en otra entrega, usa /cancelar camion para cancelar la entrega.");
					return 1;
	            }
				if(TruckContents[vehicleid] == 0)
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "Este camión no tiene nada de mercancía.");
				    return 1;
				}
				if(IsPlayerInRangeOfPoint(playerid, 65, -1572.767822, 81.137527, 3.554687))
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes robar camiones estando cerca de Ocean Docks.");
					return 1;
				}
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Estás tratando de robar el camión, por favor espere.");

				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 1);

 				LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadTruckBar[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
				SetTimerEx("HijackTruck", 1000, 0, "dd", playerid);
	        }
	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor asegúrate de que los otros checkpoints no esten activos.");
	    }
	    else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás manejando un camión.");
	}
	else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres camionero.");
	return 1;
}

function HijackTruck(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	LoadTruckTime[playerid]--;
	SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("HijackTruck", 1000, 0, "d", playerid);

	if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadTruckBar[playerid]);
    	LoadTruckBar[playerid] = INVALID_BAR_ID;

        if(!IsPlayerInVehicle(playerid, vehicleid))
        {
       		DestroyProgressBar(LoadTruckBar[playerid]);
			LoadTruckBar[playerid] = INVALID_BAR_ID;
			LoadTruckTime[playerid] = 0;
			DeletePVar(playerid, "TruckDeliver");
			TruckUsed[playerid] = INVALID_VEHICLE_ID;
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 			DisablePlayerCheckpoint(playerid);
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* No pudiste robar el camión.");
			return 1;
        }


		foreach(Player, i)
		{
  			if(TruckUsed[i] == vehicleid)
  			{
				DestroyProgressBar(LoadTruckBar[i]);
				LoadTruckBar[i] = INVALID_BAR_ID;
				LoadTruckTime[i] = 0;
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessageEx(i, COLOR_WHITE, "Su entrega de camionero ha fallado, le han robado el camión.");
			}
		}

  		new truckdeliver = TruckContents[vehicleid];
  		SetPVarInt(playerid, "TruckDeliver", truckdeliver);
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de comida y bebidas.");
			SetPlayerCheckpoint(playerid, 1025.6554,-1362.6024,13.5649, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de comida y bebidas.");
			SetPlayerCheckpoint(playerid, 793.0801,-1625.8910,13.3906, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de comida y bebidas.");
			SetPlayerCheckpoint(playerid, 1197.6417,-887.7512,43.0229, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de ropa.");
			SetPlayerCheckpoint(playerid, 2247.2351,-1661.2406,15.6749, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de ropa.");
			SetPlayerCheckpoint(playerid, 455.2845,-1501.5569,31.0434, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de ropa.");
			SetPlayerCheckpoint(playerid, 2112.7766,-1216.1750,23.8047, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de materiales.");
			SetPlayerCheckpoint(playerid, 1474.4786,-1140.6188,24.0781, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de productos del 24 Horas.");
			SetPlayerCheckpoint(playerid, 1331.2570,-885.2997,39.9401, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de productos del 24 Horas.");
			SetPlayerCheckpoint(playerid, 1347.0487,-1752.1692,13.7886, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de productos del 24 Horas.");
			SetPlayerCheckpoint(playerid, 1925.5968,-1789.5017,13.1459, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de armas ilegales.");
			SetPlayerCheckpoint(playerid, -64.5445,-1120.5356,1.0781, 5);

			new level = Info[playerid][pTruckSkill];
			if(level >= 0 && level <= 50)
			{ SetPVarInt(playerid, "TruckDeliver", 11); }
			else if(level >= 51 && level <= 100)
			{ SetPVarInt(playerid, "TruckDeliver", 12); }
			else if(level >= 101 && level <= 200)
			{ SetPVarInt(playerid, "TruckDeliver", 13); }
			else if(level >= 201 && level <= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 14); }
			else if(level >= 401)
			{ SetPVarInt(playerid, "TruckDeliver", 15); }
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de drogas.");
			SetPlayerCheckpoint(playerid, -86.3670,-1195.7297,2.1664, 5);

			new level = Info[playerid][pTruckSkill];
			if(level >= 0 && level <= 50)
			{ SetPVarInt(playerid, "TruckDeliver", 16); }
			else if(level >= 51 && level <= 100)
			{ SetPVarInt(playerid, "TruckDeliver", 17); }
			else if(level >= 101 && level <= 200)
			{ SetPVarInt(playerid, "TruckDeliver", 18); }
			else if(level >= 201 && level <= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 19); }
			else if(level >= 401)
			{ SetPVarInt(playerid, "TruckDeliver", 20); }
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de materiales ilegales.");
			SetPlayerCheckpoint(playerid, -70.8884,-1549.4922,2.6172, 5);

			new level = Info[playerid][pTruckSkill];
			if(level >= 0 && level <= 50)
			{ SetPVarInt(playerid, "TruckDeliver", 21); }
			else if(level >= 51 && level <= 100)
			{ SetPVarInt(playerid, "TruckDeliver", 22); }
			else if(level >= 101 && level <= 200)
			{ SetPVarInt(playerid, "TruckDeliver", 23); }
			else if(level >= 201 && level <= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 24); }
			else if(level >= 401)
			{ SetPVarInt(playerid, "TruckDeliver", 25); }
		}

		SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Entregar la mercancía a la ubicación especificada (Ir a Checkpoint).");
		SendClientMessageEx(playerid, COLOR_REALRED, "[Advertencia]: Cuidado con los que roban camiones, pueden robarte y quedarse con tu mercancía.");
		if(truckdeliver >= 9)
		{
			SendClientMessageEx(playerid, COLOR_REALRED, "{FF8000}[INDICACION]:{FFFFFF} El camión está lleno de mercancía ilegal cuidado con los policías que te pueden quitar tu mercancía.");
		}
	}
	return 1;
}

CMD:cargarcamion(playerid, params[])
{
	if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE || GetPVarInt(playerid, "Packages") == 0 || TaxiAccepted[playerid] == 999 || EMSAccepted[playerid] == 999 || MedicAccepted[playerid] == 999 || MechanicCallTime[playerid] == 0)
			{
	            if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "En este momento está cargando su camión, espere un momento");
					return 1;
	            }
	            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "Ya estás en otra entrega, usa /cancelar camión para cancelar la entrega.");
					return 1;
	            }
	            gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOADTRUCK;
	            SetPlayerCheckpoint(playerid,2198.1377,-2660.1250,12.5469, 4);
	            GameTextForPlayer(playerid, "~w~Ve al checkpoint", 5000, 1);
	            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Recoge mercancía en el lugar especificado. (Ve al CheckPoint)");
	            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Recuerda que sólo podrás hacer 10 viajes por subsidio, también recuerda manejar por el carril correcto o puedes ser sancionado.");
	        }
	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor, asegúrese de que su checkpoint actual esté destruido.");
	    }
	    else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás manejando un camión.");
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "No eres camionero.");
	return 1;
}

CMD:limpiarmapa(playerid, params[])
{
    DeletePVar(playerid, "TrackCar");
    DisablePlayerCheckpoint(playerid);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	TaxiCallTime[playerid] = 0; EMSAccepted[playerid] = 999;
 	TaxiAccepted[playerid] = 999; MedicAccepted[playerid] = 999;
 	MechanicCallTime[playerid] = 0;
	MedicCallTime[playerid] = 0;
  	SetPVarInt(playerid, "Pizza", 0);
    SendClientMessageEx(playerid,COLOR_WHITE,"{FFFFFF}Todos los destinos marcados en tu mapa fueron borrados!");
	return 1;
}

function LoadMon(playerid)
{
    LoadMonTime[playerid]--;
	SetProgressBarValue(LoadMoney[playerid], GetProgressBarValue(LoadMoney[playerid])-1.0);
	UpdateProgressBar(LoadMoney[playerid], playerid);
	if(GetProgressBarValue(LoadMoney[playerid]) > 1) SetTimerEx("LoadMon", 3000, 0, "d", playerid);
	if(GetProgressBarValue(LoadMoney[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadMoney[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadMoney[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoney[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadMoney[playerid], COLOR_RED);
		UpdateProgressBar(LoadMoney[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoney[playerid]) <= 1.0)
	{
  		DestroyProgressBar(LoadMoney[playerid]);
    	LoadMoney[playerid] = INVALID_BAR_ID;
	}
	return 1;
}

function LoadMonn(playerid)
{
    LoadMonTimee[playerid]--;
	SetProgressBarValue(LoadMoneyy[playerid], GetProgressBarValue(LoadMoneyy[playerid])-1.0);
	UpdateProgressBar(LoadMoneyy[playerid], playerid);
	if(GetProgressBarValue(LoadMoneyy[playerid]) > 1) SetTimerEx("LoadMonn", 1000, 0, "d", playerid);
	if(GetProgressBarValue(LoadMoneyy[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadMoneyy[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadMoneyy[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoneyy[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadMoneyy[playerid], COLOR_RED);
		UpdateProgressBar(LoadMoneyy[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoneyy[playerid]) <= 1.0)
	{
  		DestroyProgressBar(LoadMoneyy[playerid]);
    	LoadMoneyy[playerid] = INVALID_BAR_ID;
	}
	return 1;
}

function LoadMonnnn(playerid)
{
    LoadMonTimeeee[playerid]--;
	SetProgressBarValue(LoadMoneyyyy[playerid], GetProgressBarValue(LoadMoneyyyy[playerid])-1.0);
	UpdateProgressBar(LoadMoneyyyy[playerid], playerid);
	if(GetProgressBarValue(LoadMoneyyyy[playerid]) > 1) SetTimerEx("LoadMonnnn", 500, 0, "d", playerid);
	if(GetProgressBarValue(LoadMoneyyyy[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadMoneyyyy[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadMoneyyyy[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoneyyyy[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadMoneyyyy[playerid], COLOR_RED);
		UpdateProgressBar(LoadMoneyyyy[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoneyyyy[playerid]) <= 1.0)
	{

	    DisablePlayerCheckpoint(playerid);
  		DestroyProgressBar(LoadMoneyyyy[playerid]);
    	LoadMoneyyyy[playerid] = INVALID_BAR_ID;
	}
	return 1;
}

function LoadTruck(playerid)
{
	LoadTruckTime[playerid]--;
	SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("LoadTruck", 1000, 0, "d", playerid);

	if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadTruckBar[playerid]);
    	LoadTruckBar[playerid] = INVALID_BAR_ID;

  		new vehicleid = GetPlayerVehicleID(playerid);
  		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
  		TruckContents[vehicleid] = truckdeliver;
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se lleno de alimentos y bebidas.");
			SetPlayerCheckpoint(playerid, 1025.6554,-1362.6024,13.5649, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se lleno de alimentos y bebidas.");
			SetPlayerCheckpoint(playerid, 793.0801,-1625.8910,13.3906, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se lleno de alimentos y bebidas.");
			SetPlayerCheckpoint(playerid, 1197.6417,-887.7512,43.0229, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su Camión se lleno de ropa.");
			SetPlayerCheckpoint(playerid, 2247.2351,-1661.2406,15.6749, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su Camión se lleno de ropa.");
			SetPlayerCheckpoint(playerid, 455.2845,-1501.5569,31.0434, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su Camión se lleno de ropa.");
			SetPlayerCheckpoint(playerid, 2112.7766,-1216.1750,23.8047, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su Camión se lleno de Materiales.");
			SetPlayerCheckpoint(playerid, 1474.4786,-1140.6188,24.0781, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó con artículos 24 Horas."); //24-7 Vinewood
			SetPlayerCheckpoint(playerid, 1338.809448,-895.935913,36.966083, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó con artículos 24 Horas."); //24-7 Ayuntamiento
			SetPlayerCheckpoint(playerid, 1347.0487,-1752.1692,13.7886, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó con artículos 24 Horas."); //24-7 Gasolineria Ganton
			SetPlayerCheckpoint(playerid, 1925.5968,-1789.5017,13.1459, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó de armas.");
			SetPlayerCheckpoint(playerid, -64.5445,-1120.5356,1.0781, 5);
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó de drogas.");
			SetPlayerCheckpoint(playerid, -86.3670,-1195.7297,2.1664, 5);
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó de materiales ilegales.");
			SetPlayerCheckpoint(playerid, -70.8884,-1549.4922,2.6172, 5);
		}

		SendClientMessageEx(playerid, COLOR_YELLOW2, "Indicación:{FFFFFF} Entregar la mercancía a la ubicación especificada (ve al checkpoint).");
		SendClientMessageEx(playerid, COLOR_REALRED, "{FF0000}Atención 2:{FFFFFF} Tenga cuidado con los secuestradores de camiones, que puede robar su vehículo y salirse con la mercancía.");
		if(truckdeliver >= 11)
		{
			SendClientMessageEx(playerid, COLOR_REALRED, "{FF0000}Atención 2:{FFFFFF} Estás transportando mercancía ilegal recuerda que los policías pueden capturarte y quitarte la mercancía.");
		}
		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
	}
	return 1;
}

CMD:ajustarsv(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 11)
	{
		SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No tienes autorización de utilizar este comando.");
		return 1;
	}

	new string[128], rate;
	if(sscanf(params, "d", rate)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /Ajustarsv ((1: Low) (2: Medium) (3: High)");

	if(rate > 3 || rate < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /ajustesv (rate) (1: Low) (2: Medium) (3: High)");
		return 1;
	}

	switch(rate)
	{
	case 1:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (LOW), es recomendable usarlo cuando el contador de players está bajo 100.");
			format(string, sizeof(string), "¡Streamer Cambiado!: %s ha cambiado el streamer rate. (Bajo 100 Players)",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_ROJO, string, 2);
			SendRconCommand("onfoot_rate 40");
			SendRconCommand("incar_rate 40");
			SendRconCommand("weapon_rate 40");
			SendRconCommand("stream_distance 300.0");
			SendRconCommand("stream_rate 1000");
			Streamer_TickRate(50);
		}
	case 2:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (MEDIUM), es recomendable usarlo cuando el contador de players está bajo 200.");
			format(string, sizeof(string), "¡Streamer Cambiado!: %s ha cambiado el streamer rate. (Bajo 200 Players)",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_ROJO, string, 2);
			SendRconCommand("onfoot_rate 40");
			SendRconCommand("incar_rate 40");
			SendRconCommand("weapon_rate 40");
			SendRconCommand("stream_distance 250.0");
			SendRconCommand("stream_rate 1000");
			Streamer_TickRate(75);
		}
	case 3:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (MEDIUM), es recomendable usarlo cuando el contador de players está sobre 200.");
			format(string, sizeof(string), "¡Streamer Cambiado!: %s ha cambiado el streamer rate. (Sobre 100 Players).",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_ROJO, string, 2);
			SendRconCommand("onfoot_rate 50");
			SendRconCommand("incar_rate 50");
			SendRconCommand("weapon_rate 50");
			SendRconCommand("stream_distance 200.0");
			SendRconCommand("stream_rate 2000");
			Streamer_TickRate(100);
		}
	}
	return 1;
}

CMD:ta(playerid, params[])
{
	if(OrgGob(playerid))
	{
		new string[128];
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto en un vehiculo.");
		if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en un evento.");
		if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en la Arena!");
		if(PlayerCuffedTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
		if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
		if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en prisión.");
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estás taseado o arrestado.");
		if(pTazer[playerid] == 0)
		{
			pTazerReplace[playerid] = Info[playerid][pWeapons][2];
			if(Info[playerid][pWeapons][2] != 0) RemovePlayerWeapon(playerid, Info[playerid][pWeapons][2]);
			format(string, sizeof(string), "* %s toma el taser de su cinturón táctico y acto seguido, este lo carga con 400 voltios.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "* Taser cargado con 400 voltios, listo para utilizar [%s]", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
			GivePlayerValidWeapon(playerid, 23);
			pTazer[playerid] = 1;
		}
		else
		{
			RemovePlayerWeapon(playerid, 23);
			GivePlayerValidWeapon(playerid, pTazerReplace[playerid]);
			format(string, sizeof(string), "* %s descarga el taser y lo enfunda en el cinturón táctico.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            format(string, sizeof(string), "* Taser descargado en funda [%s]", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
			pTazer[playerid] = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Usted no tiene taser!");
		return 1;
	}
	return 1;
}

CMD:vmaletero(playerid, params[]){
    new string[128];
    if (!OrgGob(playerid)){
        SendClientMessageEx(playerid, COLOR_WHITE, "* No perteneces a las fuerzas de la ley.");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0)){
        SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No estás cerca de ningún vehiculo.");
        return 1;
    }
    foreach(Player, i){
        new v = GetPlayerVehicle(i, closestcar);
        if(v != -1){
            string[0] = 0;
            for(new x = 0; x < 3; x++){
                if(PlayerVehicleInfo[i][v][pvWeapons][x] != 0){
                    new
                        szWep[20];

                    GetWeaponName(PlayerVehicleInfo[i][v][pvWeapons][x], szWep, sizeof(szWep));
                    if(isnull(string)) format(string, sizeof(string), "* Contenido: %s", szWep);
                    else format(string, sizeof(string), "%s, %s", string, szWep);
                }
            }
            if(!isnull(string)) SendClientMessageEx(playerid, COLOR_WHITE, string);
            else SendClientMessageEx(playerid, COLOR_WHITE, "* Contenido: Nada.");
        }
    }
    return 1;
}

CMD:tgunmaletero(playerid, params[]){
    if(!OrgGob(playerid)){
        SendClientMessageEx(playerid, COLOR_WHITE, "* No perteneces a las fuerzas de la ley.");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0)){
        SendClientMessageEx(playerid,COLOR_WHITE,"No estás cerca de ningún vehiculo.");
        return 1;
    }

    foreach(Player, i){
		new
			engine, lights, alarm, doors, bonnet, boot, objective, v = GetPlayerVehicle(i, closestcar);

		GetVehicleParamsEx(PlayerVehicleInfo[i][v][pvId], engine, lights, alarm, doors, bonnet, boot, objective);
		if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET){
			return SendClientMessageEx(playerid, COLOR_GRAD3, "{FF0000}[ERROR]:{FFFFFF} No puedes tomar armas del maletero, si está cerrado! /v maletero para abrirlo.");
		}
        else if(v != -1){
            PlayerVehicleInfo[i][v][pvWeapons][0] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][1] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][2] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][3] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][4] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][5] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][6] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][7] = 0;
        }
        SendClientMessageEx(playerid, COLOR_WHITE,  "Removiste todas las armas del maletero.");
    }
    return 1;
}

CMD:revivir(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /revivir (playerid)");
		if(IsPlayerConnected(giveplayerid)){
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), "{FFFFFF}>> Has revivido de forma correcta al usuario: {2EDFFF}%s", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "{FFFFFF}Fuiste revivido por un moderador/administrador y se te ha dado tus armas!");
				KillEMSQueue(giveplayerid);
   				ClearAnimations(giveplayerid);
   				SetPlayerWeapons(giveplayerid);
   				SetHP(giveplayerid, 100);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese jugador no está herido.");
			}
		}
	}
	else{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}

CMD:retener(playerid, params[])
{
	if(Info[playerid][pCRet] >= 1)
	{
		new string[128], giveplayerid;
		if(medicoon() == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Hay médicos disponibles para atenderte, escriba /solicitar medicos");
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/retener (usuario id){FFFFFF} para retener las heridas de una persona.");
		if(IsPlayerConnected(giveplayerid)){
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), "- Estás reteniendo las heridas de %s", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, TEAM_MED_COLOR, string);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 10.0, 0, 1, 1, 0,0);
				LoopingAnim(giveplayerid, "CRACK", "crckdeth2", 10.0, 1, 0, 0, 0, 0);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "Una persona especializada te está reteniendo las heridas.");
   				KillEMSQueue(giveplayerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Esta persona no está herida para retener sus heridas.");
			}
		}
	}
	else{
		SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No tienes ningún curso realizado, por lo tanto no podrás ayudar a esta persona.");
	}
	return 1;
}

CMD:pagarlicencia(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid,2.0,1039.187133,12.468951,1290.358154) || IsPlayerInRangeOfPoint(playerid,2.0,234.9805,166.2303,1003.0338)) { return 1; }
	if (Info[playerid][pWantedLevel] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Tienes órden de arresto, te prohibieron la adquisición de licencias.");
		return 1;
	}
	SafeDialogEx(playerid, DIALOG_LICENSE_BUY, DIALOG_STYLE_LIST, "{2EDFFF}Licencias", "Licencia de conducir ($1.250)\r\nLicencia de Navegación ($2.490)\r\nLicencia de Vuelo ($4.720)\r\nLicencia de Taxista ($900)\r\nLicencia de Armas ($7.480)", "Comprar", "Cancelar");
	return 1;
}

CMD:spec(playerid, params[])
{
	if(Info[playerid][pAdminZC] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new tmp[32];
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(sscanf(params, "s[32]", tmp)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /spec (playerid/off)");
	if(strcmp("off", tmp, true, strlen(tmp)) == 0)
	{
		if(Spectating[playerid] > 0 && Info[playerid][pAdminZC] >= 1)
		{
			GettingSpectated[Spectate[playerid]] = 999;
			Spectating[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecState", -1);
			SetPVarInt(playerid, "SpecOff", 1 );
			TogglePlayerSpectating( playerid, false );
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		if(papilla[playerid] == 1)
		{
		return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} No puedes spectar a esta persona.");
			return 1;
		}
	}
	new giveplayerid = ReturnUser(tmp);
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(TutStep[giveplayerid] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[NOTA]:{FFFFFF} Este jugador está en el tutorial, no considerar que usa Teleport Hack.");
			}
			if(GetPVarInt(giveplayerid, "IsInArena") == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[NOTA]:{FFFFFF} Recuerda que este jugador está en el paintball, y se puede hacer MG. No existe el PG en este modo.");
			if(Spectating[playerid] == 0)
			{
				new Float: pPositions[ 3 ];
				GetPlayerPos(playerid, pPositions[ 0 ], pPositions[ 1 ], pPositions[ 2 ]);
				SetPVarFloat(playerid, "SpecPosX", pPositions[ 0 ]);
				SetPVarFloat(playerid, "SpecPosY", pPositions[ 1 ]);
				SetPVarFloat(playerid, "SpecPosZ", pPositions[ 2 ]);
				SetPVarInt(playerid, "SpecInt", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "SpecVW", GetPlayerVirtualWorld(playerid));

				if(IsPlayerInAnyVehicle(giveplayerid))
				{
					TogglePlayerSpectating(playerid, true);
					new carid = GetPlayerVehicleID( giveplayerid );
					PlayerSpectateVehicle( playerid, carid );
					SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				else
				{
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer( playerid, giveplayerid );
					SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				GettingSpectated[giveplayerid] = playerid;
				Spectate[playerid] = giveplayerid;
				Spectating[playerid] = 1;
			}
			else
			{
				if(IsPlayerInAnyVehicle(giveplayerid))
				{
					TogglePlayerSpectating(playerid, true);
					new carid = GetPlayerVehicleID( giveplayerid );
					PlayerSpectateVehicle( playerid, carid );
					SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				else
				{
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer( playerid, giveplayerid );
					SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				GettingSpectated[Spectate[playerid]] = 999;
				GettingSpectated[giveplayerid] = playerid;
				Spectate[playerid] = giveplayerid;
				Spectating[playerid] = 1;
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador está desconectado.");
	return 1;
}

CMD:liberar(playerid, params[])
{
   if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /liberar (playerid) (razón)");

		if(IsPlayerConnected(giveplayerid))
		{
			new year, month,day;
			getdate(year, month, day);
			format(string, sizeof(string), "%s fue liberado de prisión por %s, razón: %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason, month, day, year);
			Log("logs/- Sanciones.log", string);
			format(string, sizeof(string), "(Sanciones): %s fue liberado de prisión por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			BroadCast(COLOR_CSTAFF, string);
			Info[giveplayerid][pJailed] = 0;
			Info[giveplayerid][pWantedLevel] = 0;
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerWantedLevel(giveplayerid, 0);
			Info[giveplayerid][pJailTime] = 0;
			Info[giveplayerid][pJailAdmin] -= 1;
			SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerInterior(giveplayerid,0);
			Info[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			Info[giveplayerid][pVW] = 0;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}
CMD:transmisionenprocesox(playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 5)
	{
		if (!Tv){
			Tv = 1;
			SendClientMessageToAll(COLOR_FOX, "• {98E944}• {FE3D1E}• {FFFFFF} FIN DE ESPACIO PUBLICITARIO");
		}
		else{
			Tv = 0;
			SendClientMessageToAll(COLOR_FOX, "• {98E944}• {FE3D1E}• {FFFFFF} COMIENZO DE ESPACIO PUBLICITARIO");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	return 1;
}

CMD:entrevista(playerid, params[])
{
	if(Team_LSTV(playerid))
	{
		if(TalkingLive[playerid] != INVALID_PLAYER_ID)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Entrevista terminada.");
			SendClientMessageEx(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Entrevista terminada.");
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[playerid] = INVALID_PLAYER_ID;
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "/Entrevista (playerid)");
		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
				if(Info[giveplayerid][pEstado] >= 1 || Info[playerid][pEstado] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
				}
				else
				{
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer una entrevista a ti mismo."); return 1; }
					format(string, sizeof(string), "* Ofreciste a %s una entrevista.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s te ha ofrecido una entrevista, usa /aceptar entrevista para aceptar.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					LiveOffer[giveplayerid] = playerid;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no inválido.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres un reportero.");
	return 1;
}

CMD:nt(playerid, params[])
{
	if(Team_LSTV(playerid))
	{
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /nt (Para las noticias)");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,20.0,680.847229, -1333.647827, 1086.992675))
		{
			if(Info[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe ser al menos rango 1.");
			}
			else
			{
				format(string, sizeof(string), "FOX - {FFFFFF}#Noticias: %s (%s)", params, GetPlayerNameEx(playerid));
				OOCNews(COLOR_FOX,string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No estas en una camioneta de noticias, helicópter o en el estudio.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres reportero.");
	return 1;
}

CMD:et(playerid, params[])
{
	if(Team_LSTV(playerid))
	{
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /et (Para el entretenimiento)");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,12.0,780.631896, -1331.776123, 1086.940673))
		{
			if(Info[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe ser al menos rango 1.");
			}
			else
			{
				format(string, sizeof(string), "FOX - {FFFFFF}#Entretenimiento: %s (%s)", params, GetPlayerNameEx(playerid));
				OOCNews(COLOR_FOX,string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No estas en una camioneta de noticias, helicóptero u en el estudio.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres reportero.");
	return 1;
}

CMD:ent(playerid, params[])
{
	if(Team_LSTV(playerid))
	{
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ent (Para las entrevistas)");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,12.0,780.631896, -1331.776123, 1086.940673))
		{
			if(Info[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe ser al menos rango 1.");
			}
			else
			{
				format(string, sizeof(string), "FOX - {FFFFFF}#Entrevistas: %s (%s)", params, GetPlayerNameEx(playerid));
				OOCNews(COLOR_FOX,string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No estas en una camioneta de noticias, helicóptero u en el estudio.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres reportero.");
	return 1;
}

CMD:msfox(playerid, params[])
{
	if(Team_LSTV(playerid))
	{
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msfox (Para charlar de la música)");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,20.0,741.44678, -1387.00476, 1084.77649))
		{
			if(Info[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe ser al menos rango 1.");
			}
			else
			{
				format(string, sizeof(string), "FOX - {FFFFFF}#Música: %s (%s)", params, GetPlayerNameEx(playerid));
				OOCNews(COLOR_FOX,string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No estas en una camioneta de noticias, helicóptero u en el estudio.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres reportero.");
	return 1;
}

CMD:ms(playerid, params[])
{
	if(Play_Music(playerid))
	{
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/ms{FFFFFF} para hablar.");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,8.0,1198.730224, -891.985168, 21.727449))
		{
			if(Info[playerid][pRank] < 2)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Este comando es a partir del rango 2!");
			}
			else
			{
				format(string, sizeof(string), "Play Music Radio{FFFFFF} %s: %s", GetPlayerNameEx(playerid), params);
				OOCNews(COLOR_PLAY_MUSIC,string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No estas en una camioneta de play music o en los estudios!");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres de Play Music!");
	return 1;
}

CMD:destruircarro(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	new string[128];
	if(Info[playerid][pAdminZC] < 10)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
		return 1;
	}
	new bool:breakingloop = false, newid = INVALID_VEHICLE_ID;
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i=0;i<sizeof(CreatedCars);i++)
		{
			if(!breakingloop)
			{
				if(CreatedCars[i] == GetPlayerVehicleID(playerid))
				{
					breakingloop = true;
					newid = i;
				}
			}
		}
		if(newid != INVALID_VEHICLE_ID)
		{
			new carid = GetPlayerVehicleID(playerid);
			DestroyVehicle(carid);
			CreatedCars[newid] = INVALID_VEHICLE_ID;
			format(string, sizeof(string), " Coche %d destruido.", carid);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:deletecarro(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if (Info[playerid][pAdminZC] >= 5)
	{
	    new string[128];
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    DestroyVehicle(carid);
			format(string, sizeof(string), "{FFFFFF}¡El vehículo fue destruido de manera éxitosa!:{C993FF} ID %d", carid);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}
zcmd(dardinero, playerid, params[])
	{
	new string[128];
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    	if(!sscanf(params, "di", params[0], params[1]))
		{
		    if(IsPlayerConnected(params[0]))
		    {
		        if(Info[playerid][pAdminZC] >= 10)
		        {
		            GivePlayerCash(params[0], params[1]);
				 	format(string, sizeof(string), "¡Usuario con Dinero!:{FFFFFF} %s le ha dado $%d a la cuenta de: %s", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
					ABroadCast(COLOR_GRIS, string, 5);
					Log("logs/- Dinero Administrativo.log", string);
					return 1;
		        }
				else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Usted no esta en la cúpula administrativa.");
		    }
			else SendClientMessageEx(playerid,  COLOR_WHITE, "ID Inválida.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dardinero (PlayerID) ($)");
		return 1;
	}
CMD:seteardinero(playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
   	if (Info[playerid][pAdminZC] >= 7)
	{
		new string[128], giveplayerid, money;
		if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /seteardinero (playerid) (dinero)");

		if(IsPlayerConnected(giveplayerid))
		{
			ResetPlayerCash(giveplayerid);
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "Estableciste el dinero de %s a $%d!",GetPlayerNameEx(giveplayerid),money);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s estableció el dinero de %s a $%d (/seteardinero)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),money);
			Log("logs/- Seteos de Dinero.log", string);

		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:darestilopelea(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 5)
	{
		new string[128], giveplayerid, fightstyle;
		if(sscanf(params, "dd", giveplayerid, fightstyle))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /darestilopelea (playerid) (estilo)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Estilo pelea: 4, 5, 6, 7, 15, 26.");
			return 1;
		}

		if(fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
		{
			format(string, sizeof(string), " Tu estilo de pelea ha sido cambiado al ID %d.", fightstyle);
			SendClientMessageEx(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " Cambiaste el estilo de pelea de %s a %d.", GetPlayerNameEx(giveplayerid), fightstyle);
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
			SetPlayerFightingStyle(giveplayerid, fightstyle);
			Info[playerid][pFStyle] = fightstyle;
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:id(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/id (nombre_apellido ó id){FFFFFF} para saber sus estadísticas.");

	if(IsPlayerConnected(giveplayerid))
	{
		format(string, sizeof(string), "(ID: %d) - (Nombre: %s) - (Nivel: %d) - (Ping: %d)", giveplayerid, GetPlayerNameEx(giveplayerid),  Info[giveplayerid][pLevel], GetPlayerPing(giveplayerid));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "ID No válida.");
	return 1;
}

CMD:venderlaser(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] < 11) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
	new string[128], giveplayerid, slot, color[32], invoice[64];
	if(sscanf(params, "ddss[64]", giveplayerid, slot, color, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderlaser (playerid) (slot(0-9)) (rojo/verde/naranja/amarillo/rosado/azul) (precio)");

	if(strcmp(color,"rojo",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 18643;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"verde",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19083;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"naranja",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19082;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"amarillo",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19084;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"rosado",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19081;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"azul",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19080;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	format(string, sizeof(string), "Recibiste un laser de color %s en el slot %d, usa /toys para verlo.", color, slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "Le diste a %s laser de color %s en el slot %d", GetPlayerNameEx(giveplayerid), color, slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPLASER] %s dio %s un laser toy - Pagó fue de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/- Lásers.log", string);
	return 1;
}


CMD:congelar(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /congelar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pAdminZC] > Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes congelar a un administrador de mayor nivel.");
			TogglePlayerControllable(giveplayerid, 0);
			SetPVarInt(giveplayerid, "IsFrozen", 1);
			format(string, sizeof(string), "[ATENCIÓN]: %s fue congelado por %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			return ABroadCast(COLOR_GENERAL,string,1);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	}
	return 1;
}
CMD:tazear(playerid, params[])
{
		if(OrgGob(playerid))
		{
		    new victimid = GetClosestPlayer(playerid);
			new giveplayerid;
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /tazear (playerid)");
			if (ProxDetectorS(20.0, playerid, giveplayerid))
			{
					Info[victimid][pEstado] = 1;
	                GameTextForPlayer(victimid, "~r~Has sido Tazeado", 3500, 3);
	                LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
                    TogglePlayerControllable(victimid, 0);
					Info[victimid][pEstado] = 1;
					SetPVarInt(victimid, "PlayerCuffed", 2);
					SetPVarInt(victimid, "IsFrozen", 1);
					PlayerCuffedTime[victimid] = 300;
					SetTimerEx("TimerATRP",30000,false,"d",playerid);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, " Ese jugador no está cerca tuyo");
		}
		return 1;
}

CMD:descongelar(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /descongelar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
			format(string, sizeof(string), "[ATENCIÓN]: %s fue descongelado por %s.",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL,string,1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado ínvalido.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	}
	return 1;
}

CMD:h(playerid, params[])
{
if((Info[playerid][pHelper] >= 1 || Info[playerid][pAdminZC] >= 1) && advisorchat[playerid])
	{
		if(!isnull(params))
		{
			new
				szMessage[128];
			if(Info[playerid][pAdminZC] == 1) format(szMessage, sizeof(szMessage), "** Staff de Licencia %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 2) format(szMessage, sizeof(szMessage), "** Mod. a Prueba %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 3) format(szMessage, sizeof(szMessage), "** Mod. Global %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 4) format(szMessage, sizeof(szMessage), "** Admin. Principiante %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 5) format(szMessage, sizeof(szMessage), "** Admin. General %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 6) format(szMessage, sizeof(szMessage), "** Enc. Facciones %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 7) format(szMessage, sizeof(szMessage), "** Admin. Superior %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 8) format(szMessage, sizeof(szMessage), "** Admin. Técnico %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 9) format(szMessage, sizeof(szMessage), "** Sub-Dueño %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 10) format(szMessage, sizeof(szMessage), "** Dueño %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 11) format(szMessage, sizeof(szMessage), "** Programador %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 77) format(szMessage, sizeof(szMessage), "** StaffRFE %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pHelper] == 1) format(szMessage, sizeof(szMessage), "** Ayudante %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pHelper] == 2) format(szMessage, sizeof(szMessage), "** Enc. Ayudantes %s: %s **", GetPlayerNameEx(playerid), params);
			else format(szMessage, sizeof(szMessage), "** Dueño %s: %s", Info[playerid][pAdminZC], GetPlayerNameEx(playerid), params);
			SendAdvisorMessage(COLOR_COMBINEDCHAT, szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Para hablar por el chat de ayudantes, utilice: {2EDFFF}/H [Texto]");
	}
	return 1;
}

CMD:ap(playerid, params[])
{
if((Info[playerid][pAdminZC] >= 8) && advisorchat[playerid])
	{
		if(!isnull(params))
		{
			new
				Aprivado[128];
			if(Info[playerid][pAdminZC] == 8) format(Aprivado, sizeof(Aprivado), "(Admin. Técnico){FFFFFF} %s: %s", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 9) format(Aprivado, sizeof(Aprivado), "(Sub-Dueño){FFFFFF} %s: %s", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 10) format(Aprivado, sizeof(Aprivado), "(Dueño){FFFFFF} %s: %s", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 11) format(Aprivado, sizeof(Aprivado), "(Programador){FFFFFF} %s: %s", GetPlayerNameEx(playerid), params);
			else format(Aprivado, sizeof(Aprivado), "(Programador){FFFFFF} %s: %s", Info[playerid][pAdminZC], GetPlayerNameEx(playerid), params);
			SendAdvisorMessage(COLOR_ROJO, Aprivado);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Para hablar por el Chat Privado debes utilizar /Ap (Text)");
	}
	return 1;
}

CMD:toghelper(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 1)
	{
		if (!advisorchat[playerid])
		{
			advisorchat[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora puede escuchar la conversación del chat de Ayudantes. Utiliza: {5ABAFF}(/j){FFFF00}.");
		}
		else
		{
			advisorchat[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Ahora dejaste de ver el chat de Ayudantes.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	return 1;
}

CMD:cambiarhora(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 5)
	{
		new string[84], time;
		if(sscanf(params, "d", time)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarhora [hora] (0-23)");
		SetWorldTime(time);
		gTime = time;
		format(string, 128, "[AdmCdmExe]: %s cambió la hora a %d", GetPlayerNameEx(playerid), gTime);
		ABroadCast(COLOR_GENERAL,string,5);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}

CMD:clima(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 7)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new weather;
	if(sscanf(params, "d", weather)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /clima [clima id]");
	if(weather < 0||weather > 130) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[NOTA]:{FFFFFF} 0 a 45."); return 1; }
	SetPlayerWeather(playerid, weather);
	return 1;
}

CMD:climatodos(playerid, params[])
{
	if(Info[playerid][pAdminZC] < 10)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
		return 1;
	}
	new weather, string[84];
	if(sscanf(params, "d", weather)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /climatodos (clima id)");
	if(weather < 0||weather > 45) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[NOTA]:{FFFFFF} 0 a 45."); return 1; }
	SetWeather(weather);
	gWeather = weather;
	format(string, 256, "[AdmCdmExe]: %s cambió el clima al ID %d", GetPlayerNameEx(playerid), gWeather);
	ABroadCast(COLOR_GENERAL,string,4);
	return 1;
}

CMD:nevar(playerid, params[])
{
	if(Info[playerid][pAdminZC] < 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser administrador técnico para activar la nieve!");
		return 1;
	}
	SetPlayerAttachedObject(playerid, 7, 18864, 1, 0.000000, 0.0000000, 0.000000, 0.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000, COLOR_GENERAL, COLOR_GENERAL);
	return 1;
}

CMD:nonevar(playerid, params[])
{
	if(Info[playerid][pAdminZC] < 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser administrador técnico para desactivar la nieve!");
		return 1;
	}
	RemovePlayerAttachedObject(playerid, 7);
	return 1;
}

CMD:transmision(playerid, params[])
{
	if(Info[playerid][pAdminZC] < 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser administrador técnico para desactivar la nieve!");
		return 1;
	}
	SetPVarInt(playerid, "transmision", 1);
	Info[playerid][pSurveillance]++;
	return 1;
}

CMD:gotoco(playerid, params[])
{
 	if(Info[playerid][pAdminZC] >= 8)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotoco (coordenada x) (coordenada y) (coordenada z) (interior)");
		SendClientMessageEx(playerid, COLOR_GRIS, "{2EDFFF}Inf. Coordenadas{FFFFFF} Fuiste teletransportado a las coordenadas establecidas.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:fropa(playerid, params[]){
	new skin, family;
	if(!IsAtClothShop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una tienda de Ropa.");
    if(!sscanf(params, "d", skin))
	{
	 	if(Info[playerid][pFMember] < 255){
			family = Info[playerid][pFMember];
		}
		else{
			SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
			return 1;
		}
		switch(skin)
		{
			case 1:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][0];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][0]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #1 de tu familia/banda.");
			}
			case 2:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][1];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][1]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #2 de tu familia/banda.");
			}
			case 3:{
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][2]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #3 de tu familia/banda.");
			}
			case 4:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][3];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][3]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #4 de tu familia/banda.");
			}
			case 5:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][4];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][4]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #5 de tu familia/banda.");
			}
			case 6:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][5];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][5]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #6 de tu familia/banda.");
			}
			case 7:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][6];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][6]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #7 de tu familia/banda.");
			}
			case 8:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][7];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][7]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #8 de tu familia/banda.");
			}
			default: return SendClientMessageEx(playerid, COLOR_WHITE, "Maximo Skins: 8");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fropa (1-8)");
	}
	return 1;
}

zcmd(noev, playerid, params[]){
    new string[128],giveplayerid;
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "No estás autorizado para usar este comando.");
    if(!sscanf(params, "d", giveplayerid)){
    	if(IsPlayerConnected(giveplayerid)){
			format(string, sizeof(string), "El administrador %s revisó tu reporte, pero en su caso el considera que falta más evidencia", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "en dicho reporte, para la próxima no olvides tomar SS.");
			format(string, sizeof(string), "[ATENCIÓN]: %s ha enviado a %s, el mensaje de reporte sin evidencia.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_GENERAL,string,2);
		}else SendClientMessageEx(playerid, COLOR_WHITE, " Esa ID es inválida.");
	}else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /noev (ID)");
    return 1;
}

CMD:bar(playerid, params[]){
	if(OrgGob(playerid) || Team_BomberosBA(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
		}
		if(Info[playerid][pRank] < 3){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
		}
		new Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++){
			if(Barricade[i] == 0){
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(981, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1], Position[2]+5);
				foreach(Player, x){
					if(OrgGob(x)){
						if (Info[x][pRank] >= 3){
							SendClientMessageEx(x, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de LAPD, AININT, USMC o CIA."); } return 1;
}

CMD:bar2(playerid, params[]){
	if(OrgGob(playerid) || Team_BomberosBA(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
		}
		if(Info[playerid][pRank] < 3){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
		}
		new Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++){
			if(Barricade[i] == 0){
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(3091, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1], Position[2]+5);
				foreach(Player, x){
					if(OrgGob(x)){
						if (Info[x][pRank] >= 3){
							SendClientMessageEx(x, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de LAPD, AININT, USMC o CIA."); } return 1;
}

CMD:bar3(playerid, params[]){
	if(OrgGob(playerid) || Team_BomberosBA(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar en el piso para usar este comando");
		}
		if(Info[playerid][pRank] < 3){
			return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser mayor de rango 3.");
		}
		new Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++){
			if(Barricade[i] == 0){
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(978, Position[0], Position[1], Position[2]+0.6, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1], Position[2]+5);
				foreach(Player, x){
					if(OrgGob(x)){
						if (Info[x][pRank] >= 3){
							SendClientMessageEx(x, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_GREY, "No eres parte de LAPD, AININT, USMC o CIA."); } return 1;
}

CMD:bengala(playerid, params[]){
	if(OrgGob(playerid) || Team_BomberosBA(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
		}
		if(Info[playerid][pRank] < 2){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 2.");
		}
		new Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++){
			if(Barricade[i] == 0){
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(18728, Position[0], Position[1], Position[2]-2.8, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				foreach(Player, x){
					if(OrgGob(x)){
						if (Info[x][pRank] >= 2){
							SendClientMessageEx(x, COLOR_YELLOW, "Se colocó una bengala, para borrarlo en casos de estar cerca, use: /qb");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de LAPD, AININT, USMC o CIA."); } return 1;
}

CMD:cono(playerid, params[]){
	if(OrgGob(playerid) || Team_BomberosBA(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
			return 1;
		}
		if(Info[playerid][pRank] < 3){
			SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
			return 1;
		}
		new Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++){
			if(Barricade[i] == 0){
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(1238, Position[0], Position[1], Position[2]-0.7, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				foreach(Player, x){
					if(OrgGob(x)){
						if (Info[x][pRank] >= 3){
							SendClientMessageEx(x, COLOR_YELLOW, "Se colocó un cono, para borrarlo en casos de estar cerca, use: /qb");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de LAPD, AININT, USMC o CIA.");} return 1;
}

CMD:qb(playerid, params[]){
	if(OrgGob(playerid)|| Team_BomberosBA(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
		}
		if(Info[playerid][pRank] < 2){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 2.");
		}
		new Float:Position[3];
		for(new i; i<MAX_BARRICADES; i++){
			GetDynamicObjectPos(Barricade[i], Position[0], Position[1], Position[2]);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2])){
				DestroyDynamicObject(Barricade[i]);
				Barricade[i] = 0;
				foreach(Player, x){
					if(OrgGob(x)){
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de las barricadas.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de LAPD, AININT, USMC o CIA."); } return 1;
}

CMD:spikes(playerid, params[])
{
	if(OrgGob(playerid) || Team_BomberosBA(playerid))
	{
		if(Info[playerid][pRank] >= 3)
		{
  			SendClientMessageEx(playerid, COLOR_GREEN, "Spikes Actuales:");
			for(new i, string[58 + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] != 0)
				{
					format(string, sizeof(string), "HQ: Spike ID: %d | Localización: %s | Puesto por: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
 			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser rango mayor a 3.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de LAPD, AININT, USMC o CIA.");
	}
	return 1;
}

CMD:pspikes(playerid, params[])
{
    if(OrgGob(playerid) || Team_BomberosBA(playerid))
	{
		if(Info[playerid][pRank] >= 3)
		{
			for(new i; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] == 0)
				{
					new
						Float: f_TempAngle,
						string[128];

					GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
					GetPlayerFacingAngle(playerid, f_TempAngle);
					SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
					GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
					SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
					format(string,sizeof(string),"Spike ID: %d fue creado exitosamente.", i);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "HQ: Un spike fue puesto por %s en %s.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
					foreach(Player, x)
					{
						if(OrgGob(x))
						{
							SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
							if (Info[x][pRank] >= 3)
							{
								SendClientMessageEx(x, COLOR_YELLOW, "Puedes remover el spike usando /qspikes.");
							}
						}
					}
					return 1;
				}
    		}
			SendClientMessageEx(playerid, COLOR_WHITE, "No es posible generar más spikes, límite es de 5." );
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, " Debes ser rango mayor a 3.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de LAPD, AININT, USMC o CIA.");
	}
	return 1;
}

CMD:qspikes(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qspike (spikeid)");
    if(OrgGob(playerid) || Team_BomberosBA(playerid))
	{
		if(Info[playerid][pRank] >= 3)
		{
			new id = strval(params);
			if(!(0 <= id <= sizeof(SpikeStrips)) || SpikeStrips[id][sX] == 0) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "Spike ID Inválido.");
			}
			else
			{
				new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
				DestroyDynamicObject(SpikeStrips[id][sObjectID]);
				SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
				SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
				format(string,sizeof(string),"Spike ID: %d borrado.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Un spike a sido borrado por %s en %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(OrgGob(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, " Debes ser rango mayor a 3.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de LAPD, AININT, USMC o CIA.");
	}
	return 1;
}

CMD:niveluno(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 2)
	{
   		SendClientMessageEx(playerid,COLOR_GREEN,"Usuarios de nivel 2!");
		new
			szNoobs[14 + MAX_PLAYER_NAME];
    	foreach(Player, i) if(Info[i][pLevel] == 2)
		{
			format(szNoobs, sizeof(szNoobs), "- %s (ID %i)", GetPlayerNameEx(i), i);
			SendClientMessageEx(playerid, COLOR_WHITE, szNoobs);
		}
	}
	return 1;
}

CMD:dedit(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Aún no has ingresado al servidor!");
    if(Info[playerid][pAdminZC] < 8) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No tienes permiso de utilizar este cmd administrativo.");
    new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		{
			if(strcmp(choice,"marihuana",true) == 0)
            {
		    	for(new h = 0; h < sizeof(Points); h++)
		        {
			    	if(Points[h][Type] == 4)
			        {
				    	Points[h][Stock] = amount;
				    	format(string, sizeof(string), " MARIHUANA DISPONIBLE: %d/1000", Points[h][Stock]);
				    	UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				    	SendClientMessageEx(playerid, COLOR_WHITE, " Estableciste la cantidad de marihuana en la casa de drogas.");
			        }
		        }
            }
			if(strcmp(choice,"cocaina",true) == 0)
            {
		    	for(new h = 0; h < sizeof(Points); h++)
		        {
			    	if(Points[h][Type] == 3)
			        {
				    	Points[h][Stock] = amount;
				    	format(string, sizeof(string), " COCAINA DISPONIBLE: %d/500", Points[h][Stock]);
				    	UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				    	SendClientMessageEx(playerid, COLOR_WHITE, " Estableciste la cantidad de cocaína en la casa de drogas.");
			        }
		        }
            }
		}
	}
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_WHITE, "Utiliza: /dedit (marihuana/cocaína) (cantidad)");
	return 1;
}

CMD:info(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Aún no has ingresado al servidor!");
    if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No tienes permiso de utilizar este cmd administrativo.");
	{
		{
			if(!strcmp(params, "1", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}Visite nuestro sitio web {FCFF03}www.titaniumgamers.com{FFFFFF} para ver novedades, contenidos y otras secciones de interés.");
					return 1;
				}
			}
			if(!strcmp(params, "2", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}Para ver nuestras mejoras en la comunidad, use {FCFF03}/actualizaciones{FFFFFF} y allí verás dichas mejoras.");
					return 1;
				}
			}
			if(!strcmp(params, "3", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}Únete en nuestro grupo {FCFF03}www.facebook.com/groups/ATrp.oficial{FFFFFF} y comparte contenidos con todos.");
					return 1;
				}
			}
			if(!strcmp(params, "4", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}Nuestra página de facebook es {FCFF03}www.facebook.com/ATrp.oficial{FFFFFF} donde hay mayor información las 24hs.");
					return 1;
				}
			}
			if(!strcmp(params, "5", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}Si tienes alguna duda del servidor, recuerda utilizar {FCFF03}/duda{FFFFFF} y esperar respuetas de staff/usuarios.");
					return 1;
				}
			}
			if(!strcmp(params, "6", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}Si necesita soporte administrativo no dudes en solicitarlo con {FCFF03}/soporte{FFFFFF} y esperar con moderación.");
					return 1;
				}
			}
			if(!strcmp(params, "7", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}¿Viste a algún usuario con irregularidades?, Reportelo con {FCFF03}/re (id/usuario) (razón){FFFFFF} y espere.");
					return 1;
				}
			}
			if(!strcmp(params, "8", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}Conéctate en nuestro {FCFF03}/ts3{FFFFFF} y charla con tus amigos y usuarios de la comunidad.");
					return 1;
				}
			}
			if(!strcmp(params, "9", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}¿Quieres comparar paquete(s) VIP?, En {FCFF03}/infovip{FFFFFF} puedes ver todos los precios y beneficios por niveles.");
					return 1;
				}
			}
			if(!strcmp(params, "10", true))
			{
				{
					SendClientMessageToAll(COLOR_AMARILLO, "<•> {FFFFFF}¡No olvides compartirnos para dar a conocer la comunidad, con esto, logramos crecer juntos!");
					return 1;
				}
			}
		}
	}
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_WHITE, "Para dar información a los usuarios debes utilizar /info del 1 al 10, si no sabes como son, use: /Infos");
	return 1;
}

CMD:curso(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Aún no has ingresado al servidor!");
	if(!IsPlayerInRangeOfPoint(playerid,5.0,1173.88867,-1361.45898,14.4956)) return SendClientMessage(playerid,COLOR_ROJO,"!{FFFFFF} Debes ir al hospital para tomar un curso.");
	if(Info[playerid][pCRet] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "* Curso completo, por lo tanto no podrás realizarlo.");
	{
		{
			if(!strcmp(params, "emergencias", true))
			{
				{
                    new cursoemergencia[] = "{FFFFFF}- Estudiar como civil\t\t\t\t\t($19.550)\n- Trabajo para el gobierno\t\t\t\t(Gratis)";
                    SafeDialogEx(playerid,CURSO_EMERGENCIA,DIALOG_STYLE_LIST,"{FFFFFF}Curso: {FF7477}Emergencias",cursoemergencia,"{FFFFFF}Ver","{FFFFFF}Salir");
					return 1;
				}
			}
		}
	}
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/curso (nombre){FFFFFF} para aprender.");
	return 1;
}

CMD:dar(playerid, params[])
{
	new string[128], giveplayerid, choice[32], amount;
	if(sscanf(params, "ds[32]d", giveplayerid, choice, amount))
	{
        ClearChatbox(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/dar (usuario id) (nombre){FFFFFF} para dar algún objeto.");
		SendClientMessageEx(playerid, COLOR_GREY,  "");
		SendClientMessageEx(playerid, COLOR_GREY,  "- Cocaína");
		SendClientMessageEx(playerid, COLOR_GREY,  "- Materiales");
		SendClientMessageEx(playerid, COLOR_GREY,  "- Fichas");
		SendClientMessageEx(playerid, COLOR_GREY,  "- Chaleco");
		SendClientMessageEx(playerid, COLOR_GREY,  "- Marihuana");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(amount < 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No tienes la cantidad que pusiste.");
				return 1;
			}

			if (!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no está cerca tuyo.");
				return 1;
			}

			if(giveplayerid == playerid)
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
			    return 1;
			}
			if (strcmp(choice, "materiales", true) == 0)
			{
				if(Info[playerid][pMats] >= amount)
				{
					format(string, sizeof(string), "Recibiste %d materiales de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pMats] += amount;
					Info[playerid][pMats] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/- Transferencias de Objetos.log", string);
					if(Info[playerid][pAdminZC] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/- Transferencias de Objetos.log", string);
					}
					format(string, sizeof(string), "Le diste a %s, %d materiales.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le da a %s algo de materiales.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto.");
					return 1;
				}
			}
			if (strcmp(choice, "marihuana", true) == 0)
			{
				if(Info[playerid][pPot] >= amount)
				{
					if(amount + Info[giveplayerid][pPot] >= 999 )
					{
						SendClientMessageEx( playerid, COLOR_WHITE, "Este jugador no puede tener más de 1 Kg de marihuana." );
						return 1;
					}
					new level = Info[playerid][pDrugsSkill];
					if(level >= 0 && level <= 50)
					{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 10 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 51 && level <= 100)
					{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 20 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 101 && level <= 200)
					{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 30 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 201 && level <= 400)
					{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 40 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 401)
					{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 50 con tu nivel de habilidad!"); return 1; } }
					format(string, sizeof(string), "Recibiste %d de marihuana de parte de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pPot] += amount;
					Info[playerid][pPot] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/- Transferencias de Objetos.log", string);
					if(Info[playerid][pAdminZC] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/- Staff Gives.log", string);
					}
					format(string, sizeof(string), "Le diste a %s, %d de marihuana.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le dá a %s algo de marihuana.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto marihuana.");
					return 1;
				}
			}
			if (strcmp(choice, "fichas", true) == 0)
			{
				if(Info[playerid][pPaintTokens] >= amount)
				{
					format(string, sizeof(string), "Recibiste %d fichas de paintball de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pPaintTokens] += amount;
					Info[playerid][pPaintTokens] -= amount;
					format(string, sizeof(string), "Le diste a %s, %d fichas de paintbal.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le da a %s unas fichas de paintball.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tantas fichas.");
					return 1;
				}
			}
			if (strcmp(choice, "cocaina", true) == 0)
			{
				if(Info[playerid][pCrack] >= amount)
				{
					if(amount + Info[giveplayerid][pCrack] >= 26 )
					{
						SendClientMessageEx( playerid, COLOR_WHITE, "Este jugador no puede llevar más de 25 de cocaína." );
						return 1;
					}
					new level = Info[playerid][pDrugsSkill];
					if(level >= 0 && level <= 50)
					{ if(amount < 1 || amount > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 5 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 51 && level <= 100)
					{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 10 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 101 && level <= 200)
					{ if(amount < 1 || amount > 15) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 15 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 201 && level <= 400)
					{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 20 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 401)
					{ if(amount < 1 || amount > 25) { SendClientMessageEx(playerid, COLOR_GREY, "  Sólo se puede dar 25 máximo!"); return 1; } }
					format(string, sizeof(string), "Recibiste %d gramos de cocaína de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pCrack] += amount;
					Info[playerid][pCrack] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d cocaína.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/- Transferencias de Objetos.log", string);
					if(Info[playerid][pAdminZC] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d cocaína.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/- Transferencias de Objetos (Staff).log", string);
					}
					format(string, sizeof(string), "Le diste a %s, %d gramos de cocaína.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le da a %s algo de cocaína.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto.");
					return 1;
				}
			}
		}
	}
	return 1;
}

CMD:recargarlegas(playerid, params[])
{
	if(Team_Mecanicos(playerid))
	{
		new string[128];
		if(Info[playerid][pTriageTime] >= 1)
		{
			format(string, sizeof(string), "Debes esperar %d segundos.", Info[playerid][pTriageTime]);
			return SendClientMessageEx(playerid, COLOR_GRAD1,string);
		}
		new giveplayerid, money;
		if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /recargarlegas (playerid) (precio)");
		if(!(money >= 1 && money < 100000))
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "Precio determinado inválido, no puede ser inferior a 1 o superior a $ 99,999.");
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid) && IsPlayerInAnyVehicle(giveplayerid))
			{
				if(giveplayerid != playerid)
				{
					format(string, sizeof(string), "* Ofreciste %s llenar el tanque de tu coche por $%d.",GetPlayerNameEx(giveplayerid),money);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s te ha ofrecido llenar tu coche por $%d, usa /aceptar recarga para aceptar.",GetPlayerNameEx(playerid),money);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					Info[playerid][pTriageTime] = 60;
					RefillOffer[giveplayerid] = playerid;
					RefillPrice[giveplayerid] = money;
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo."); return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca de ti, o no está en un coche.");
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres mecánico.");
	return 1;
}

CMD:fix(playerid, params[])
{
    if(Team_Mecanicos(playerid))
	{
    	new string[32 + MAX_PLAYER_NAME];
        if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en un vehículo.");
		    return 1;
		}
  		if( Info[playerid][pTriageTime] > 0 )
		{
  			format(string, sizeof(string), "Debes esperar %d segundos.", Info[playerid][pTriageTime]);
     		SendClientMessageEx(playerid, COLOR_GRAD1,string);
     	}
		else if(GetPVarInt(playerid, "EventToken"))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en un evento.");
		}
  		else
		{
			new closestcar = GetClosestCar(playerid);
  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 10.0))
  			{
				if(!IsABike(closestcar) && !IsAPlane(closestcar))
				{
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
					if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo necesita tener el capó abierto para repararlo.");
						return 1;
					}
				}
  				Info[playerid][pTriageTime] = 60;
   				SetVehicleHealth(closestcar, 1000.0);
    			format(string, sizeof(string), "* %s ha reparado el vehículo.", GetPlayerNameEx(playerid));
    			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de un vehículo.");
  		}
    }
    else return SendClientMessageEx(playerid, COLOR_WHITE, "No eres un mecánico." );
    return 1;
}

CMD:adminevento(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 7)
	{
	    SendClientMessageEx(playerid, COLOR_GREEN,"____________________________________________________________________________________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** EVENTO *** Escribe uno de estos comandos para más información");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** EVENTO *** /eventopos /infoevento /empezarevento /cerrarevento /finevento /anunciar /goevento /salirevento");
		SendClientMessageEx(playerid, COLOR_GREEN,"____________________________________________________________________________________________________________");
	}
	return 1;
}

CMD:eventostaff(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if( Info[ playerid ][ pAdminZC ] >= 2){
        if(InfoEvento[EventJoinStaff] == 1){
            new bool:breakingloop = false, newid = 999;
            for(new i=0;i<5;i++){
                if(!breakingloop){
                    if(InfoEvento[EventStaff][i] == 999){
                        breakingloop = true;
                        newid = i;
                    }
                }
            }
            if(newid != 999){
                SetPVarInt( playerid, "EventToken", 1 );
                GetPlayerHealth(playerid, EventFloats[playerid][4]);
                GetPlayerArmour(playerid, EventFloats[playerid][5]);
                EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
                EventLastInt[playerid] = GetPlayerInterior(playerid);
                GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
                GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
                SetPlayerPos( playerid, InfoEvento[ EventPositionX ], InfoEvento[ EventPositionY ], InfoEvento[ EventPositionZ ] );
                SetPlayerInterior( playerid, InfoEvento[ EventInterior ] );
                SetHP( playerid, 999999 );
                SetPlayerVirtualWorld( playerid, InfoEvento[ EventWorld ] );
                InfoEvento[EventStaff][newid] = playerid;
                SendClientMessageEx( playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} Te has unido al staff del evento." );
            }
            else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes unirte, el maximo es 5 administradores.");
        }
    }
    return 1;
}

CMD:salirevento(playerid, params[])
{
    if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
        if( InfoEvento[ EventStatus ] == 1 || InfoEvento[ EventStatus ] == 2 ) {
            SendClientMessageEx( playerid, COLOR_WHITE, "No se puede dejar el evento en esta etapa del acontecimiento." );
            return 1;
        }

        ResetPlayerWeapons( playerid );
        SetPVarInt(playerid, "EventToken", 0);
        SetPlayerWeapons(playerid);
        SetPlayerToTeamColor(playerid);
        SetPlayerSkin(playerid, Info[playerid][pChar]);
        SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
        SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
        SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
        SetPlayerInterior(playerid,EventLastInt[playerid]);
        SetHP(playerid, EventFloats[playerid][4]);
        SetPlayerArmour(playerid, EventFloats[playerid][5]);
        for(new i = 0; i < 6; i++) {
            EventFloats[playerid][i] = 0.0;
        }
        EventLastVW[playerid] = 0;
        EventLastInt[playerid] = 0;
        SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* Saliste del evento." );
    }
    return 1;
}

CMD:eventopos(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7){
	    if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4){
			new string[128];
			GetPlayerPos(playerid, InfoEvento[EventPositionX], InfoEvento[EventPositionY], InfoEvento[EventPositionZ]);
			InfoEvento[EventInterior] = GetPlayerInterior(playerid);
			InfoEvento[EventWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "Has ajustado la posición del evento, escribe /infoevento para cambiar las propiedades del evento.");
			InfoEvento[EventJoinStaff] = 1;
			format(string, sizeof( string ), "AT-RP: %s ha empezado el evento, usá /eventostaff si quieres ser del staff del evento.", GetPlayerNameEx(playerid) );
			ABroadCast(COLOR_LIGHTBLUE, string, 2);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás haciendo un evento o no eres el nivel administrativo correcto.");
	}
	return 1;
}

CMD:tipoevento(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7){
	    if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4){
	    	if(isnull(params)){
				SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /tipoevento (tipo)");
				SendClientMessageEx(playerid, COLOR_GREY,  "Nombres: DM, TDM, Race");
				return 1;
			}
			if(strcmp(params,"dm",true) == 0){
				InfoEvento[ EventType ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a DM.");
			}
			else if(strcmp(params,"tdm",true) == 0){
				InfoEvento[ EventType ] = 2;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a TDM.");
			}
			else if(strcmp(params,"race",true) == 0){
				InfoEvento[ EventType ] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a Race.");
			}
			else if(strcmp(params,"ninguno",true) == 0){
				InfoEvento[ EventType ] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a Ninguno.");
			}
		}
	}
	return 1;
}

CMD:editarevento(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7){
	    if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4){
			new choice[32], opstring[64];
			if(sscanf(params, "s[32]S[64]", choice, opstring)){
				if(InfoEvento[EventType] == 1){
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento (nombre)");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, vida, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
				else if(InfoEvento[EventType] == 2){
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento (nombre)");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, Team1Skin, Team2Skin, Team1Color, Team2Color");
					SendClientMessageEx(playerid, COLOR_GREY, "Team1Spawn, Team2Spawn, vida, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
				else if(InfoEvento[EventType] == 3){
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento (nombre)");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, vida");
     				return 1;
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Es necesario primero establecer el tipo de evento.");
			}
			if(strcmp(choice, "text",true) == 0)
			{
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento texto (Texto)");
				strmid(InfoEvento[EventoInfo], opstring, 0, strlen(opstring), 64);
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el texto de información del evento.");
			}
			else if(strcmp(choice, "vida", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1 && InfoEvento[EventType] != 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento vida (vida)");
				new Float: health;
				health = floatstr(opstring);
				InfoEvento[EventHealth] = health;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste la cantidad de vida del evento.");
			}
			else if(strcmp(choice, "armor", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento armor (armor)");
				new Float: armor;
				armor = floatstr(opstring);
				InfoEvento[EventArmor] = armor;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste la armadura del evento.");
			}
			else if(strcmp(choice, "team1skin", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento team1skin (skinid)");
				new skin;
				skin = strval(opstring);
				InfoEvento[EventTeamSkin][0] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el skin del equipo 1.");
			}
			else if(strcmp(choice, "team2skin", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento team2skin (skinid)");
				new skin;
				skin = strval(opstring);
				InfoEvento[EventTeamSkin][1] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el skin del equipo 2.");
			}
			else if(strcmp(choice, "team1color", true) == 0)
			{
    			if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta opción no puedes usarla para este evento.");
				if(!strlen(opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento team1color (color)");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				InfoEvento[EventTeamColor][0] = GetColorCode(opstring);
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el color del equipo 1.");
			}
			else if(strcmp(choice, "team2color", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				if(!strlen(opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento team2color (color)");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				InfoEvento[EventTeamColor][1] = GetColorCode(opstring);
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el color del equipo 2.");
			}
			else if(strcmp(choice, "team1spawn", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				GetPlayerPos(playerid, InfoEvento[ EventTeamPosX1 ], InfoEvento[ EventTeamPosY1 ], InfoEvento[ EventTeamPosZ1 ] );
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el spawn del equipo 1.");
			}
			else if(strcmp(choice, "team2spawn", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				GetPlayerPos(playerid, InfoEvento[ EventTeamPosX2 ], InfoEvento[ EventTeamPosY2 ], InfoEvento[ EventTeamPosZ2 ]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el spawn del equipo 2.");
			}
			else if(strcmp(choice, "limite", true) == 0)
			{
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento limite (limite 0-60)");
				new limit;
				limit = strval(opstring);
				if(limit < 0 || limit > 90) return SendClientMessageEx(playerid, COLOR_RED, "No se puede ajustar el límite de eventos superiores a 60 o por debajo de 0.");
				InfoEvento[EventLimit] = limit;
				SendClientMessageEx(playerid, COLOR_WHITE, "Usted ha ajustado el límite de los jugadores en el evento.");
			}
			else if(strcmp(choice, "gun1", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este nombre no está disponible para este tipo de evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");
				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
				InfoEvento[EventWeapons][0] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [1]");
			}
			else if(strcmp(choice, "gun2", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");
				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
				InfoEvento[EventWeapons][1] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [2]");
			}
			else if(strcmp(choice, "gun3", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");

				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
				InfoEvento[EventWeapons][2] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [3]");
			}
			else if(strcmp(choice, "gun4", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");

				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
				InfoEvento[EventWeapons][3] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Modificaste el arma 4 del evento.");
			}
			else if(strcmp(choice, "gun5", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no es posible para este evento.");

				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer está arma para este evento.");
				InfoEvento[EventWeapons][4] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Modificaste el gun 5 del evento.");
			}
		}
	}
	return 1;
}

CMD:esolovip(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7)
	{
		if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /esolovip [0/1]");

			if(Info[playerid][pVIP] == 5 && Info[playerid][pAdminZC] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Usted no está autorizado a modificar esta opción!");

			if(strcmp(params,"0",true) == 0){
				InfoEvento[ VipOnly ] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "Has ajustado el tipo de evento no sólo para VIP´s.");
			}
			else if(strcmp(params,"1",true) == 0){
				InfoEvento[ VipOnly ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Has ajustado el tipo de evento sólo para VIP´s.");
			}

		}
	}
	return 1;
}

CMD:infoevento(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if( Info[ playerid ][ pAdminZC ] >= 7)
	{
		if( InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento /tipoevento /esolovip (una vez listo, usa /empezarevento y después /lockevento)");
			return 1;
		}
	}
	return 1;
}

CMD:finevento(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7 || InfoEvento[EventCreator] == playerid)
	{
		if(InfoEvento[EventStatus] != 0)
		{
			foreach(Player, i)
			{
				if( GetPVarInt( i, "EventToken" ) == 1 )
				{
					ResetPlayerWeapons( i );
					SetPlayerWeapons(i);
					SetPlayerToTeamColor(i);
					SetPlayerSkin(i, Info[i][pChar]);
					SetPlayerPos(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
					SetPlayerVirtualWorld(i, EventLastVW[i]);
					SetPlayerFacingAngle(i, EventFloats[i][0]);
					SetPlayerInterior(i,EventLastInt[i]);
					SetHP(i, EventFloats[i][4]);
					SetPlayerArmour(i, EventFloats[i][5]);
					for(new d = 0; d < 6; d++)
					{
						EventFloats[i][d] = 0.0;
					}
					EventLastVW[i] = 0;
					EventLastInt[i] = 0;
					SetPVarInt(i, "EventToken", 0);
					SendClientMessageEx( i, COLOR_YELLOW, "Has sido expulsado del evento ya que un administrador lo termino." );
				}
			}
			InfoEvento[ EventPositionX ] = 0;
			InfoEvento[ EventPositionY ] = 0;
			InfoEvento[ EventPositionZ ] = 0;
			InfoEvento[ EventTeamPosX1 ] = 0;
			InfoEvento[ EventTeamPosY1 ] = 0;
			InfoEvento[ EventTeamPosZ1 ] = 0;
			InfoEvento[ EventTeamPosX2 ] = 0;
			InfoEvento[ EventTeamPosY2 ] = 0;
			InfoEvento[ EventTeamPosZ2 ] = 0;
			InfoEvento[ EventStatus ] = 0;
			InfoEvento[ EventType ] = 0;
			InfoEvento[ EventHealth ] = 0;
			InfoEvento[ EventLimit ] = 0;
			InfoEvento[ EventPlayers ] = 0;
			InfoEvento[ EventWeapons ][0] = 0;
			InfoEvento[ EventWeapons ][1] = 0;
			InfoEvento[ EventWeapons ][2] = 0;
			InfoEvento[ EventWeapons ][3] = 0;
			InfoEvento[ EventWeapons ][4] = 0;
			InfoEvento[EventCreator] = 999;
			InfoEvento[VipOnly] = 0;
			InfoEvento[EventJoinStaff] = 0;
			BroadCast(COLOR_LIGHTBLUE, "* El evento ha sido terminado por un administrador." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "En este momento no hay un evento activo." );
		}

	}
	return 1;
}

CMD:empezarevento(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if( Info[ playerid ][ pAdminZC ] >= 7)
	{
		new string[128];

		if( InfoEvento[ EventStatus ] == 0)
		{
			if(Info[playerid][pAdminZC] >= 4)
			{
				if(InfoEvento[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}(VIP):{FFFFFF} No se ha definido la salud del evento." );
					return 1;
				}
				if(InfoEvento[ EventPositionX ] == 0 || InfoEvento[ EventPositionY ] == 0 || InfoEvento[ EventPositionZ ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}(VIP):{FFFFFF} No se ha definido la posición de evento." );
					return 1;
				}
				if( (InfoEvento[ EventTeamPosX1 ] == 0 || InfoEvento[ EventTeamPosY1 ] == 0 || InfoEvento[ EventTeamPosZ1 ] == 0) && InfoEvento[ EventType ] == 2)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}(VIP):{FFFFFF} No ha establecido la posición del equipo 1." );
					return 1;
				}
				if( (InfoEvento[ EventTeamPosX2 ] == 0 || InfoEvento[ EventTeamPosY2 ] == 0 || InfoEvento[ EventTeamPosZ2 ] == 0) && InfoEvento[ EventType ] == 2)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}(VIP):{FFFFFF} No ha establecido la posición del equipo 2." );
					return 1;
				}
				if(InfoEvento[ EventLimit ] == 0)
				{
					InfoEvento[ EventLimit ] = 90;
				}
				InfoEvento[ EventStatus ] = 1;
				SendClientMessageEx( playerid, COLOR_WHITE, "Ha iniciado un evento, utilice {5ABAFF}/anunciar{FFFFFF} para anunciar el evento a todo el servidor." );
				foreach(Player, i)
				{
					if(Info[i][pVIP] >= 3)
					{
						SendClientMessageEx(i, COLOR_YELLOW, "{FFFF00}(VIP):{FFFFFF} Un evento a comenzado, /unirseevento para unirte.");
					}
				}

				return 1;
			}
			else if( InfoEvento[EventCreator] == playerid)
			{
				if(InfoEvento[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "No se ha definido la salud evento." );
					return 1;
				}
				if(InfoEvento[ EventPositionX ] == 0 || InfoEvento[ EventPositionY ] == 0 || InfoEvento[ EventPositionZ ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "No se ha definido la posición de evento." );
					return 1;
				}
				if(InfoEvento[ EventLimit ] == 0)
				{
					InfoEvento[ EventLimit ] = 90;
				}
				InfoEvento[ EventStartRequest ] = 1;
				SendClientMessageEx( playerid, COLOR_WHITE, "Ha solicitado para comenzar un evento, por favor espere hasta que un administrador lo apruebe." );
				format( string, sizeof( string ), "Event Position: x:%f y:%f z:%f.", InfoEvento[EventPositionX], InfoEvento[EventPositionY], InfoEvento[EventPositionZ] );
				ABroadCast( COLOR_GRAD2, string, 4 );
				format( string, sizeof( string ), "Event Info: %s EventLimite: %d.", InfoEvento[EventoInfo], InfoEvento[EventLimit] );
				ABroadCast( COLOR_GRAD2, string, 4 );
				format( string, sizeof( string ), "Event Health: %f Event Armor: %f.", InfoEvento[EventHealth], InfoEvento[EventArmor] );
				ABroadCast( COLOR_GRAD2, string, 4 );
				if(InfoEvento[EventWeapons][0] != 0)
				{
					format( string, sizeof( string ), "Event Gun1: %d.", InfoEvento[EventWeapons][0] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventWeapons][1] != 0)
				{
					format( string, sizeof( string ), "Event Gun2: %d.", InfoEvento[EventWeapons][1] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventWeapons][2] != 0)
				{
					format( string, sizeof( string ), "Event Gun3: %d.", InfoEvento[EventWeapons][2] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventWeapons][3] != 0)
				{
					format( string, sizeof( string ), "Event Gun4: %d.", InfoEvento[EventWeapons][3] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventWeapons][4] != 0)
				{
					format( string, sizeof( string ), "Event Gun5: %d.", InfoEvento[EventWeapons][4] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventType] == 2)
				{
					format( string, sizeof( string ), "Event Team 1 Color: %d Event Team 1 Skin: %d.", InfoEvento[EventTeamColor][0], InfoEvento[EventTeamSkin][0] );
					ABroadCast( COLOR_GRAD2, string, 4 );
					format( string, sizeof( string ), "Event Team 2 Color: %d Event Team 2 Skin: %d.", InfoEvento[EventTeamColor][1], InfoEvento[EventTeamSkin][1] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				else if(InfoEvento[EventType] == 3)
				{
				}
				format( string, sizeof( string ), "AT-RP: %s quiere comenzar el evento, ¿lo apruebas? /approveevent o /denyevent.", GetPlayerNameEx(playerid) );
				ABroadCast( COLOR_GENERAL, string, 4 );
			}
		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usa /finevento)." );
	}
	return 1;
}

CMD:goevento(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if( Info[ playerid ][ pAdminZC ] >= 7 || InfoEvento[EventCreator] == playerid)
	{
		if( InfoEvento[ EventStatus ] == 3 )
		{
			InfoEvento[ EventStatus ] = 4;
			foreach(Player, i)
			{
				if( GetPVarInt( i, "EventToken" ) == 1 )
				{
					if( InfoEvento[ EventType ] == 1 )
					{
						SendClientMessageEx( i, COLOR_LIGHTBLUE, "* El evento ha comenzado" );
						SetHP( i, InfoEvento[ EventHealth ] );
						SetPlayerArmour( i, InfoEvento[ EventArmor ] );
						for(new d = 0; d < 4; d++)
						{
							if(i == InfoEvento[EventStaff][d])
							{
								SetHP(i, 999999);
							}
						}
						GivePlayerEventWeapons( i );
					}
					else if( InfoEvento[ EventType ] == 2 )
					{
						//GivePlayerEventWeapons( i );
						SendClientMessageEx( i, COLOR_LIGHTBLUE, "* El evento ha empezado." );
						SetHP( i, InfoEvento[ EventHealth ] );
						SetPlayerArmour( i, InfoEvento[ EventArmor ] );
						for(new d = 0; d < 5; d++)
						{
							if(i == InfoEvento[EventStaff][d])
							{
								SetHP(i, 999999);
							}
						}
						GivePlayerEventWeapons( i );
					}
				}
				else SendClientMessageEx( i, COLOR_WHITE, "El evento ha comenzado. Si usted desea unirse la próxima vez use por favor /unirseevento." );
			}

		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usar {5ABAFF}/finevento{FFFFFF})." );
	}
	return 1;
}

CMD:anunciar(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 7 || InfoEvento[EventCreator] == playerid)
	{
		if( InfoEvento[ EventStatus ] == 1)
		{
			InfoEvento[ EventStatus ] = 2;
			SendClientMessageEx(playerid, COLOR_WHITE, "Para bloquear el evento usa /lockevento");
			if(InfoEvento[VipOnly] == 1) BroadCast( COLOR_LIGHTBLUE, "* Un evento VIP ha sido iniciado por un administrador, usuarios VIP usar /unirseevento para participar." );
			else BroadCast( COLOR_LIGHTBLUE, "* Un evento ha sido iniciado por un administrador, usa /unirseevento para participar." );
		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usa /finevento)." );
	}
	return 1;
}


CMD:lockevento(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 7 || InfoEvento[EventCreator] == playerid)
	{
		if( InfoEvento[ EventStatus ] == 2 )
		{
			InfoEvento[ EventStatus ] = 3;
			SendClientMessageEx( playerid, COLOR_WHITE, "Has bloqueado el evento, utiliza /goevento para iniciar oficialmente el evento." );
			BroadCast( COLOR_LIGHTBLUE, "* El evento ha sido bloqueado por un administrador." );
		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usa /finevento)." );
	}
	return 1;
}

CMD:unirseevento(playerid, params[])
{
	if( InfoEvento[ EventStatus ] == 0 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "En este momento no hay un evento activo." );
	}
	else if( GetPVarInt( playerid, "EventToken" ) == 1 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Ya estás en el evento." );
	}
	else if(GetPVarInt(playerid, "IsInArena") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes unirte estando en el paintball.");
	}
	else if( Info[playerid][pEstado] >= 1 || Info[ playerid ][ pJailTime ] > 0 || GetPVarInt(playerid, "injured") == 1 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "No puedes hacer esto ahora mismo." );
	}
	else if(InfoEvento[VipOnly] == 1 && Info[playerid][pVIP] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Este evento está restringido sólo para VIP´s.");
	}
	else if(InfoEvento[EventPlayers] >= InfoEvento[EventLimit]) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "Este evento ha alcanzado el límite máximo de jugadores.");
	}
	else if( InfoEvento[ EventStatus ] == 2 || (InfoEvento[ EventStatus ] == 1 && Info[playerid][pVIP] >= 3)) {

		if(IsPlayerInAnyVehicle(playerid)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "No se puedes unirte estando en un vehículo.");
		}

		SetPVarInt( playerid, "EventToken", 1 );
		ResetPlayerWeapons( playerid );
		pTazer[playerid] = 0;
		GetPlayerHealth(playerid, EventFloats[playerid][4]);
		GetPlayerArmour(playerid, EventFloats[playerid][5]);
		EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
		EventLastInt[playerid] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
		GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
		if(InfoEvento[EventType] != 2)
		{
			SetPlayerPos( playerid, InfoEvento[ EventPositionX ], InfoEvento[ EventPositionY ], InfoEvento[ EventPositionZ ] );
		}
		SetPlayerInterior( playerid, InfoEvento[ EventInterior ] );
		SetPlayerVirtualWorld( playerid, InfoEvento[ EventWorld ] );
		SendClientMessageEx( playerid, COLOR_WHITE, InfoEvento[ EventoInfo ] );
		SetHP( playerid, InfoEvento[ EventHealth ] );
		SetPlayerArmour( playerid, InfoEvento[ EventArmor ] );
		SetPlayerVirtualWorld( playerid, 0 );

		if(InfoEvento[EventType] == 2)
		{
			SetPlayerSkin(playerid, InfoEvento[EventTeamSkin][nextteam]);
			new color = InfoEvento[EventTeamColor][nextteam];
			if (color==0) SetPlayerColor(playerid, 0x00000000);
			if (color==1) SetPlayerColor(playerid, 0xFFFFFF00);
			if (color==2) SetPlayerColor(playerid, 0x2641FE00);
			if (color==3) SetPlayerColor(playerid, 0xAA333300);
			if (color==16) SetPlayerColor(playerid, 0x33AA3300);
			if (color==5) SetPlayerColor(playerid, 0xC2A2DA00);
			if (color==6) SetPlayerColor(playerid, 0xFFFF0000);
			if (color==7) SetPlayerColor(playerid, 0x33CCFF00);
			if (color==51) SetPlayerColor(playerid, 0x2D6F0000);
			if (color==103) SetPlayerColor(playerid, 0x0B006F00);
			if (color==13) SetPlayerColor(playerid, 0x52525200);
			if (color==55) SetPlayerColor(playerid, 0xB46F0000);
			if (color==84) SetPlayerColor(playerid, 0x814F0000);
			if (color==74) SetPlayerColor(playerid, 0x750A0000);
			if (color==126) SetPlayerColor(playerid, 0xFF51F100);
			if(nextteam == 0)
			{
				SetPlayerPos(playerid, InfoEvento[EventTeamPosX1], InfoEvento[EventTeamPosY1], InfoEvento[EventTeamPosZ1]);
			}
			else
			{
				SetPlayerPos(playerid, InfoEvento[EventTeamPosX2], InfoEvento[EventTeamPosY2], InfoEvento[EventTeamPosZ2]);
			}
			if(nextteam == 0) nextteam++;
			else if(nextteam == 1) nextteam--;
		}

		InfoEvento[EventPlayers] ++;
		if(InfoEvento[EventPlayers] == InfoEvento[EventLimit])
		{
			ABroadCast(COLOR_YELLOW, "El evento ha alcanzado el límite máximo de jugadores.", 2);
		}
	}

	else if( InfoEvento[ EventStatus ] == 3 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "El evento está bloqueado, no puedes entrar al evento." );
	}
	else if( InfoEvento[ EventStatus ] == 4 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "El evento ya se ha iniciado, no puedes entrar al evento." );
	}

	return 1;
}

CMD:ram(playerid, params[]){
	if(OrgGob(playerid)){
		if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la Arena.");
		if( Info[playerid][pEstado] >= 1 ) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
		new string[128];
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
			{
				format(string, sizeof(string), "* %s hace unos pasos para atras y acto seguido, patea la puerta.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				LoadObjects(playerid);
				SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				GameTextForPlayer(playerid, "~r~Rompiste la puerta", 5000, 1);
				Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				Info[playerid][pVW] = i+6000;
				SetPlayerVirtualWorld(playerid, i+6000);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
	return 1;
}

CMD:toy(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en este momento.");
		return 1;
	}
	new toyslot,string[128];
	if(sscanf(params, "d", toyslot)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/toy (0-5){FFFFFF} para colocarse un accesorio.");
	if(toyslot < 0 || toyslot > MAX_PLAYERTOYS) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El máximo de objeto es 6, tiene del 0 al 5 para seleccionar con /toy.");
    switch(toyslot)
	{
	    case 0, 1, 2, 3, 4, 5:
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, toyslot)){
			    new name[24];
			    format(name, sizeof(name), "None");
				for(new i;i<sizeof(HoldingObjectsAll);i++){
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][toyslot][ptModelID]){
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
			    format(string, sizeof(string), "Te quitaste el toy correctamente. (%s) (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][toyslot][ptBone]], toyslot);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			    RemovePlayerAttachedObject(playerid, toyslot);
			    return 1;
			}
			else
			{
	  			if(PlayerToyInfo[playerid][toyslot][ptModelID] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ningún toy en ese slot.");
   				SetPlayerAttachedObject(playerid, toyslot, PlayerToyInfo[playerid][toyslot][ptModelID], PlayerToyInfo[playerid][toyslot][ptBone], PlayerToyInfo[playerid][toyslot][ptPosX], PlayerToyInfo[playerid][toyslot][ptPosY], PlayerToyInfo[playerid][toyslot][ptPosZ], PlayerToyInfo[playerid][toyslot][ptRotX], PlayerToyInfo[playerid][toyslot][ptRotY], PlayerToyInfo[playerid][toyslot][ptRotZ], PlayerToyInfo[playerid][toyslot][ftscaleX],
				PlayerToyInfo[playerid][toyslot][ftscaleY], PlayerToyInfo[playerid][toyslot][ftscaleZ]);
				new name[24];
				format(name, sizeof(name), "Nada");
				for(new i;i<sizeof(HoldingObjectsAll);i++){
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][toyslot][ptModelID]){
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(string, sizeof(string), "{CC0066}Inf. Toy's:{FFFFFF} Te colocaste: (%s) (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][toyslot][ptBone]], toyslot);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}
	return 1;
}


CMD:esposar(playerid, params[]){
    if(OrgGob(playerid)){
        new giveplayerid;
            if(!sscanf(params, "d", giveplayerid)){
		    	if (ProxDetectorS(8.0, playerid, giveplayerid)){
			    	if(IsPlayerConnected(giveplayerid)){
				    	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
						new string[170],
						Float:Pos[3];
						if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto contigo mismo.");
						format(string, sizeof(string), "Fuiste esposado por %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED); //animacion
						SetPlayerAttachedObject(giveplayerid, 8, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
						format(string, sizeof(string), "Has esposado a %s.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s toma las esposas de su CT abriendolas, las coloca en las muñecas de %s y las cierra.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "Esposado", 2500, 3);
						GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
						Info[giveplayerid][pEstado] = 2;
						SetPVarInt(giveplayerid, "PlayerCuffed", 2);
						PlayerCuffedTime[giveplayerid] = 300;
						PlayerPlaySoundEx(1145, Pos[0], Pos[1], Pos[2]);
						return 1;
					}return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado inválido.");
				}return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
			}return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/esposar (usuario id){FFFFFF} para colocarles las esposas.");
    	}return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No tienes esposas tras no pertenecer a una organización del gobierno.");
    }

CMD:desesposar(playerid, params[])
{
	if(OrgGob(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desesposar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes quitarte las esposas tu mismo.");
				if(Info[giveplayerid][pEstado] == 2)
				{
					DeletePVar(giveplayerid, "IsFrozen");
					format(string, sizeof(string), "* %s te ha retirado las esposas.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* le quitaste las esposas %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s toma las llaves de las esposas de su CT y seguido, se las retira a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~g~Te quitaron ~n~las esposas", 2500, 3);
					TogglePlayerControllable(giveplayerid, 1);
					ClearAnimations(giveplayerid);
					RemovePlayerAttachedObject(giveplayerid, 8);
   					SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_NONE);
					Info[giveplayerid][pEstado] = 0;
                    PlayerCuffedTime[giveplayerid] = 0;
					DeletePVar(giveplayerid, "PlayerCuffed");
				}
				else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese jugador ya no está arrestado.");
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado inválido.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:detener(playerid, params[])
{
	if(OrgGob(playerid))
	{
		new string[170], giveplayerid, seat;
		if(sscanf(params, "dd", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /detener (playerid) (Asiento 1-3)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(seat < 1 || seat > 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Asientos: 1 al 3.");
			if(IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa persona está en un vehiculo.");
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto contigo mismo!"); return 1; }
				if(Info[giveplayerid][pEstado] == 2)
				{
					new carid = gLastCar[playerid];
					if(IsSeatAvailable(carid, seat))
					{
						new Float:pos[6];
						GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
						GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
						GetVehiclePos( carid, pos[0], pos[1], pos[2]);
						if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
								floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
								floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
                        format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: hemos capturado a {00D2CF}%s, {FFFFFF}lo trasladamos a la comisaría.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
                        SendRadioMessage(1, TEAM_BLUE_COLOR, string);
						RemovePlayerAttachedObject(giveplayerid, playerid);
					    SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
						format(string, sizeof(string), "Fuiste detenido por %s .", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Detuviste a %s .", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s toma de las esposas a %s y lo sube al vehículo de policía.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Detenido", 2500, 3);
						ClearAnimations(giveplayerid);
						TogglePlayerControllable(giveplayerid, false);
						PutPlayerInVehicle(giveplayerid, carid, seat);
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese asiento no está disponible.");
				}
				else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF}Esa persona no está esposada.");
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, " Usted no está lo suficientemente cerca del jugador o de su coche.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado inválido.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
	return 1;
}

CMD:ainint(playerid, params[]){
	if(Team_AININT(playerid))	{
		if(PlayerToPoint(5, playerid, 241.5376, -1482.6498, 5011.0317)){
			SafeDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "{FFFFFF}AININT Menu","Duty\nEquipo\nBOPE\nUniformes\nEncubierto", "Ok", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros del AININT.");
	}
	return 1;
}

/*
CMD:pna(playerid, params[]){
	if(Team_CBP(playerid)){
		if(PlayerToPoint(5, playerid, 253.5987,76.6707,1003.6406)){
			SafeDialogEx(playerid, PNA_DUTY1, DIALOG_STYLE_LIST, "P.N.A","Duty\nEquipo\nSWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros de PNA.");
	}
	return 1;
}*/

CMD:lapd(playerid, params[]){
	if(Team_LAPD(playerid)){
		if(PlayerToPoint(5, playerid, 264.6584,109.6664,1004.6172)){
			SafeDialogEx(playerid, DUTYMENU, DIALOG_STYLE_LIST, "L.A.P.D.","Equipo Reglamentario - DUTY\nArmamento y Accesorios\nUniformes Policiales\nPeloton D-1\nPelotón D-2\nAir Support Division\nEncubierto", "Okay", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en los casilleros de LAPD.");
	}
	return 1;
}

CMD:pcpd(playerid, params[]){
	if(Team_LAPD(playerid)){
		if(PlayerToPoint(5, playerid, 327.28781,307.96799,999.12329)){
			SafeDialogEx(playerid, PCDUTYMENU, DIALOG_STYLE_LIST, "P.C.P.D","Equipo Reglamentario - DUTY\nArmamento y Accesorios\nUniformes Sheriff\nAir Support Division\nEncubierto", "Okay", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en los casilleros de PCPD.");
	}
	return 1;
}
CMD:darrolxxxxx(playerid, params[]){
	if(Info[playerid][pAdminZC] >= 2)	{
		new giveplayerid, string[128];
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darrol (playerid)");
        if(Info[giveplayerid][pAdminZC] > Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer eso con administradores de mayor rango.");
		if(IsPlayerConnected(giveplayerid))		{
		    if(Info[giveplayerid][pAdminZC] >= 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto con miembros de la administración. (Intento de Troll)" );
			if(ShowRules[giveplayerid] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador ya está en las reglas del servidor.");
			new Float:roldX, Float:roldY, Float:roldZ;
			GetPlayerPos(giveplayerid, roldX, roldY, roldZ);
			SetPVarFloat(giveplayerid, "rOldX", roldX);
			SetPVarFloat(giveplayerid, "rOldY", roldY);
			SetPVarFloat(giveplayerid, "rOldZ", roldZ);
			SetPVarInt(giveplayerid, "rOldInt", GetPlayerInterior(giveplayerid));
			SetPVarInt(giveplayerid, "rOldVW", GetPlayerVirtualWorld(giveplayerid));
		    ShowRules[giveplayerid] = 1;
		    RulesTime[giveplayerid] = 1;
		    ShowRol(giveplayerid);
			format( string, sizeof( string ), "AT-RP: %s (ID %d) fue enviado a leer las reglas de rol por %s.", GetPlayerNameEx(giveplayerid), giveplayerid, GetPlayerNameEx(playerid));
			ABroadCast( COLOR_GENERAL, string, 2 );
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}

CMD:paquete(playerid, params[]){
	if (Info[playerid][pJob] != 10 && Info[playerid][pJob2] != 10) return SendClientMessageEx(playerid,COLOR_WHITE,"No eres traficante de drogas.");
	new mypoint = -1,
		playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás en el punto específico.");
	if(Info[playerid][pCrates]) return SendClientMessageEx(playerid, COLOR_GREY, "No se puede sostener más paquetes de drogas.");
	if(GetPlayerCash(playerid) > 100){
		SafeDialogEx(playerid,TRAFICDRUGS,DIALOG_STYLE_MSGBOX, "{2EDFFF}Selecciona","{2EDFFF}¿Qué quieres transportar?", "marihuana", "cocaina");
		SetPVarInt(playerid, "ChoosingDrugs", 1);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_AT,"{2EDFFF}[JOB]:{FFFFFF} No tienes $100!");
	return 1;
}

CMD:comprarmarihuana(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /comprarmarihuana (valor)");

	new tel;
	new price;
	new level = Info[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
	{ tel = 100; if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 10 con este nivel de skill!"); return 1; } }
	else if(level >= 51 && level <= 100)
	{ tel = 100; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 20 con este nivel de skill!"); return 1; } }
	else if(level >= 101 && level <= 200)
	{ tel = 100; if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 30 con este nivel de skill!"); return 1; } }
	else if(level >= 201 && level <= 400)
	{ tel = 100; if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 40 con este nivel de skill!"); return 1; } }
	else if(level >= 401)
	{ tel = 100; if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 50 con este nivel de skill!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás en la casa de cocaína.");
	if ( Info[playerid][pPot] >= 25) return SendClientMessageEx(playerid, COLOR_WHITE, " Tu ya tienes 25 gramos de marihuana, no puedes cargar más.");
	if (Info[playerid][pJob] == 5 || Info[playerid][pJob2] ==5)	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && Info[playerid][pVIP] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Esta casa de drogas no tiene más marihuana.");
		if(GetPlayerCash(playerid) > price)		{
			format(string, sizeof(string), "* Compraste %d gramos por $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_DROGA, string);
			GivePlayerCash(playerid, -price);
			Info[playerid][pPot] += amount;
			if(Info[playerid][pVIP] < 1)			{
				Points[mypoint][Stock] -= amount;
				format(string, sizeof(string), "MARIHUANA DISPONIBLE: %d/1000.", Points[mypoint][Stock]);
				UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
			}
			for(new i = 0; i < sizeof(fINFO); i++)			{
				if(strcmp(Points[mypoint][Owner], fINFO[i][FamilyName], true) == 0){
					fINFO[i][FamilyBank] = fINFO[i][FamilyBank]+price/2;
				}
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes pagar estas drogas.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres vendedor de drogas.");
	return 1;
}
CMD:comprarcocaina(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /comprarcocaina (monto)");
	new tel;
	new price;
	new level = Info[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
	{
		tel = 100;
		if(amount < 1 || amount > 5)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 5 o menos con ese skil.");
			return 1;
		}
	}
	else if(level >= 51 && level <= 100)
	{ tel = 100; if(amount < 1 || amount > 5) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 10 o menos con ese skil!"); return 1; } }
	else if(level >= 101 && level <= 200)
	{ tel = 100; if(amount < 1 || amount > 15) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 15 o menos con ese skil!"); return 1; } }
	else if(level >= 201 && level <= 400)
	{ tel = 100; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 20 o menos con ese skil!"); return 1; } }
	else if(level >= 401)
	{ tel = 100; if(amount < 1 || amount > 25) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 25!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás en la casa de cocaína.");
	if ( Info[playerid][pCrack] >= 25) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu ya tienes 25 gramos de cocaína, no puedes cargar más.");
	if (Info[playerid][pJob] == 5 || Info[playerid][pJob2] ==5)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && Info[playerid][pVIP] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Esta casa de cocaína no tiene más cocaína.");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* Compraste %d gramos por $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			Info[playerid][pCrack] += amount;
			if(Info[playerid][pVIP] < 1) Points[mypoint][Stock] = Points[mypoint][Stock]-amount;
			format(string, sizeof(string), " COCAINA DISPONIBLE: %d/500.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes pagar estas drogas.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres vendedor de drogas.");
	return 1;
}
CMD:vendercocaina(playerid, params[])
{
	new string[128], giveplayerid, needed, money;
	if(sscanf(params, "ddd", giveplayerid, needed, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/vendercocaina (playerid) (gramos) (precio){FFFFFF} para vender cocaína.");

	if(needed < 1 || needed > 100) { SendClientMessageEx(playerid, COLOR_WHITE, "   Los valores no pueden ser mayores a 100 gramos."); return 1; }
	if(money < 1 || money > 100000) { SendClientMessageEx(playerid, COLOR_WHITE, "   El precio no puede ser menor que 1 ni mayor que 100000!"); return 1; }
	if(needed > Info[playerid][pCrack]) { SendClientMessageEx(playerid, COLOR_WHITE, "  No tienes suficiente droga para venderla!"); return 1; }
	if(IsPlayerConnected(giveplayerid))	{
		if(giveplayerid != INVALID_PLAYER_ID){
			if (ProxDetectorS(8.0, playerid, giveplayerid)){
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes venderte a ti mismo!");
				format(string, sizeof(string), "* Ofreciste a %s para que te compre %d gramos de cocaína por $%d.", GetPlayerNameEx(giveplayerid), needed, money);
				SendClientMessageEx(playerid, COLOR_DROGA, string);
				format(string, sizeof(string), "* %s quiere venderte %d gramos de cocaína por $%d, si aceptas, por favor escriba /aceptar cocaína", GetPlayerNameEx(playerid), needed, money);
				SendClientMessageEx(giveplayerid, COLOR_DROGA, string);
				CrackOffer[giveplayerid] = playerid;
				CrackPrice[giveplayerid] = money;
				CrackGram[giveplayerid] = needed;
			}
			else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese jugador no está cerca tuyo.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, " Ese jugador está desconectado.");
	return 1;
}

CMD:vendermarihuana(playerid, params[])
{
	new string[128], giveplayerid, needed, money;
	if(sscanf(params, "ddd", giveplayerid, needed, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendermarihuana (playerid) (monto) (precio)");

	if(needed < 1 || needed > 99) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Gramos no pueden ser menor que 1, ni mayor que 99!"); return 1; }
	if(money < 1 || money > 99999) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Precio: Mínimo 1 - Máximo: 99999!"); return 1; }
	if(needed > Info[playerid][pPot]) { SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes tanta marihuana para vender."); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes venderte a ti mismo.");
					return 1;
				}
				format(string, sizeof(string), "* Ofreciste a %s para que te compre %d gramos de marihuana por $%d.", GetPlayerNameEx(giveplayerid), needed, money);
				SendClientMessageEx(playerid, COLOR_DROGA, string);
				format(string, sizeof(string), "* %s quiere venderte %d gramos de marihuana por $%d, si aceptas, por favor escriba /aceptar marihuana", GetPlayerNameEx(playerid), needed, money);
				SendClientMessageEx(giveplayerid, COLOR_DROGA, string);
				PotOffer[giveplayerid] = playerid;
				PotPrice[giveplayerid] = money;
				PotGram[giveplayerid] = needed;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "   Ese jugador está desconectado.");
	return 1;
}

CMD:csemillas(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid,10.0, 2686.31128, -2024.93677, 13.47560)) return SendClientMessage(playerid,COLOR_WHITE,"No estás en la zona de compra.");
	if(GetPlayerCash(playerid) < 350) return SendClientMessageEx(playerid, COLOR_WHITE, "* No tienes $350 para pagar por esto.");
	Info[playerid][pWSeeds] += 5;
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Acabas de comprar una bolsa de semillas de marihuana, para ver cuantas tienes coloque /semillas");
	GivePlayerCash(playerid, -350);
	GameTextForPlayer(playerid, "~r~-$350", 3000, 1 );
	return 1;
}

CMD:capturar(playerid, params[])
{
	new string[128];
	new mypoint = -1;
	if(GetPVarInt(playerid,"Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, " No puedes hacer esto ahora.");
		return 1;
	}
	if (Info[playerid][pFMember] == 255 || Info[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, " No eres el rango suficiente para capturar (5).");
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz])) mypoint = i;
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " Usted no está en el lugar de captura!");
	if (Points[mypoint][Vulnerable] > 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} Este punto no está listo para la toma de posesión.");
	if (Points[mypoint][TimeToClaim]) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} Este punto ya está capturado.");
	if(GetPlayerPing(playerid) > 600){
		format(string,sizeof(string), " No puedes hacer esto mientras tienes más de %d de ping!", 600);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		return 1;
	}
	Points[mypoint][PointBarID] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
	SetProgressBarValue(Points[mypoint][PointBarID], 100.0);
	ShowProgressBarForPlayer(playerid, Points[mypoint][PointBarID]);
	format(string,sizeof(string), " %s está tratando de apoderarse del punto.", GetPlayerNameEx(playerid));
	ProxDetector(70.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	GetPlayerPos(playerid, Points[mypoint][Capturex], Points[mypoint][Capturey], Points[mypoint][Capturez]);
	Points[mypoint][ClaimerId] = playerid;
	Points[mypoint][TimeToClaim] = 1;
	Points[mypoint][TimeLeft] = 10;
	SetTimerEx("ProgressTimer", 1000, 0, "d", mypoint);
	return 1;
}


CMD:puntosx(playerid, params[]){
	new string[128];
	for(new i; i < MAX_POINTS; i++)	{
		if (Points[i][Type] >= 0)		{
			format(string, sizeof(string), "Nombre: %s | Dueño: %s | Capturado por: %s | Horas: %d",
			Points[i][Name],Points[i][Owner],Points[i][CapperName],Points[i][Vulnerable]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:pedit(playerid, params[]){
	if(Info[playerid][pAdminZC] >= 8 || Info[playerid][pGangModerator] == 1){
		new string[128], hours;
		if(sscanf(params, "d", hours)){
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /pedit (HORAS)");
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Párese cerca de un punto para ajustar las horas.");
			return 1;
		}
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
			{
				if(hours < 1|| hours > 24) SendClientMessageEx(playerid, COLOR_GREY, "Tip: 1 - 24");
				else if(hours >= 1|| hours <= 24)
				{
					format(string, sizeof(string), "Estableciste el tiempo de vulnerabilidad a %d horas !", hours);
					Points[h][Vulnerable] = hours;
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					UpdatePoints();
				}
			}
		}
	}
	return 1;
}

CMD:adminpuntos(playerid, params[]){
    if(Info[playerid][pAdminZC] > 8 || Info[playerid][pGangModerator] == 1){
    	SendClientMessageEx(playerid, COLOR_GREEN,"{FFFFFF}Comandos administrativos de puntos {2EDFFF}AT-RP");
		SendClientMessageEx(playerid, COLOR_WHITE, "/dedit (Editar drogas de cada punto");
		SendClientMessageEx(playerid, COLOR_WHITE, "/pedit (Tiempo de vulnerabilidad)");
		SendClientMessageEx(playerid, COLOR_WHITE, "/puntos /gotopoint");
	}
	return 1;
}

CMD:plantar(playerid, params[])
{
	if(Info[playerid][pWSeeds] > 0)
	 {
		if(Info[playerid][pWExists] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes una planta, espera a retirarla y plantar otra nuevamente." );
		    return 1;
		}
		new
			szMessage[128];
		GetPlayerPos(playerid, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]);
		Info[playerid][pWZ] -= 1.5;
        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
		SendClientMessageEx(playerid, COLOR_DROGA, "Plantaste una semilla, esto demora hasta 20 minutos y recuerda, que puedes utilizar /revisarplanta");

		Info[playerid][pWInt] = GetPlayerInterior(playerid);
		Info[playerid][pWVW] = GetPlayerVirtualWorld(playerid);
		Info[playerid][pWExists] = 1;
		Info[playerid][pWValue] = -1;
		Info[playerid][pWSeeds]--;
		Info[playerid][pWObject] = CreateDynamicObject(19473, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ], 0.0, 0.0, 0.0, Info[playerid][pWVW], Info[playerid][pWInt]);
		Info[playerid][pWTimer] = SetTimerEx("WeedGrowth", 100000, 1, "i", playerid);
		format(szMessage, sizeof(szMessage), " * %s planta una semilla de marihuana.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "No tienes suficientes semillas para sembrar, ve a cualquier villa y escriba /csemillas para comprar.");
	return 1;
}

CMD:aborrarplanta(playerid, params[]) {
	if(Info[playerid][pAdminZC] >= 5) {
		new
			iTargetID;
		if(sscanf(params, "d", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /aborrarplanta (playerid)");
		}
		else if(IsPlayerConnected(iTargetID)) {
			new
				szMessage[47 + MAX_PLAYER_NAME];
			format(szMessage, sizeof(szMessage), "Destruiste la planta de %s (%i gramos).", GetPlayerNameEx(iTargetID), Info[iTargetID][pWValue]);
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
			format(szMessage, sizeof(szMessage), "Administrador %s destruyó tu planta sembarada (%i gramos).", GetPlayerNameEx(playerid), Info[iTargetID][pWValue]);
			SendClientMessageEx(iTargetID, COLOR_GREY, szMessage);
			ClearWeed(iTargetID);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:destruirplanta(playerid, params[])
{
	if(OrgGob(playerid)) {
		foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 2.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ])) {
			if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt]) {

				new
					szMessage[128];

				ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
				format(szMessage, sizeof(szMessage), "* Destruye la plata, pesaba %d gramos.", Info[i][pWValue]);
				SendClientMessageEx(playerid, COLOR_GREY, szMessage);
				format(szMessage, sizeof(szMessage), " * %s destruye la marihuana plantada.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
				ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ClearWeed(i);
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_ROJO, "No estás en una planta.");
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "No eres policía.");
	return 1;
}

CMD:revisarplanta(playerid, params[]) {
	foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 2.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ])) {
	    if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt]) {

			new
				szMessage[200 + MAX_PLAYER_NAME];

			if(Info[i][pWValue] > 0)
			{
				format(szMessage, sizeof(szMessage), "%s plantó esta planta y pesa %i gramo(s) o puede que más, escriba /sacarplanta", GetPlayerNameEx(i), Info[i][pWValue]);
				SendClientMessageEx(playerid, COLOR_YELLOW, szMessage);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "%s plantó esta planta, aún no está lista para sacarla.", GetPlayerNameEx(i));
				SendClientMessageEx(playerid, COLOR_ROJO, szMessage);
			}
			return 1;
		}
	}
	return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de una planta.");
}

CMD:sacarplanta(playerid, params[])
{
	foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 2.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ]))
	{
	    if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt])
		{
			if(Info[i][pWValue] > 0)
			{
				if(Info[i][pWValue] + Info[playerid][pPot] < 1000)
				{

					new
						szMessage[52];
					ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
					Info[playerid][pPot] += Info[i][pWValue];
					format(szMessage, sizeof(szMessage), "Recogiste la planta y te dio %d gramo(s).", Info[i][pWValue]);
					SendClientMessageEx(playerid, COLOR_DROGA, szMessage);
					format(szMessage, sizeof(szMessage), " * %s recoge la planta de marihuana.", GetPlayerNameEx(playerid));
					ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ClearWeed(i);
				}
				else SendClientMessageEx(playerid, COLOR_ROJO, "No se puede llevar a más de 1Kg de marihuana.");
			}
			else SendClientMessageEx(playerid, COLOR_ROJO, "Esta planta no está lista para ser recogida todavía.");
			return 1;
		}
	}
	return SendClientMessageEx(playerid, COLOR_ROJO, "No estás cerca de una planta.");
}

CMD:materiales(playerid, params[])
{
    if(Tren_Route[playerid] == 1 || Tren_Route[playerid] == 2 || Tren_Route[playerid] == 3 || Tren_Route[playerid] == 4 || Tren_Route[playerid] == 5 || Tren_Route[playerid] == 6) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no tener un viaje pendiente como maquinista. Para cancelar el viaje, use: /Cancelarviaje");
	if (Info[playerid][pJob] != 7 && Info[playerid][pJob2] != 7 && Info[playerid][pJob] != 12 && Info[playerid][pJob2] != 12)
	{
		SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No eres fabricante de armas o artesano!");
 		return 1;
	}
	if(GetPVarInt(playerid, "Packages") >= 1 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero asegurate de estar sin un checkpoint activo (Tal vez tengas materiales por entregar).");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2613.3691,-1065.9915,69.9656))
	{
		if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes entregar tus paquetes primero. (( Usar el comando /tirar parquetesM ))");
		if(Info[playerid][pVIP] == 1)
		{
		    if(GetPlayerCash(playerid) < 1125)
		    {
		        SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $1125!");
		        return 1;
		    }
			GivePlayerCash(playerid, -1125);
			SetPVarInt(playerid, "Packages", 23);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 23 Paquetes de Materiales por $1125.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Has recibido los paquetes pero por 1.5x más, y lo que te permite es recibir 1.5x materiales más.");
		}
		else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
		{
			if(GetPlayerCash(playerid) < 1500)
		    {
		        SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $1500!");
		        return 1;
		    }
			GivePlayerCash(playerid, -1500);
			SetPVarInt(playerid, "Packages", 30);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 30 Paquetes de Materiales por $1500.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATAGOLDVIP]:{FFFFFF} Has recibido los paquetes pero por 2x más, y lo que te permite es recibir 2x materiales más.");
		}
		else if(Info[playerid][pVIP] >= 4)
		{
			if(GetPlayerCash(playerid) < 1875)
		    {
		        SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $1875!");
		        return 1;
		    }
			GivePlayerCash(playerid, -1875);
			SetPVarInt(playerid, "Packages", 38);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 38 Paquetes de Materiales por $1875.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PlatinoVIP]:{FFFFFF} Has recibido los paquetes pero por 2.5x más, y lo que te permite es recibir 2.5x materiales más.");
		}
		else
		{
			if(GetPlayerCash(playerid) < 750)
		    {
		        SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $750!");
		        return 1;
		    }
			GivePlayerCash(playerid, -750);
			SetPVarInt(playerid, "Packages", 15);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 15 Paquetes de Materiales por $750.");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Sigue tu camino hacia el checkpoint y entregar sus paquetes de materiales.");
		SetPVarInt(playerid, "MatDeliver", 333);
		SetPVarInt(playerid, "tpMatRunTimer", 15);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		SetPlayerCheckpoint(playerid, 1083.0131,-1226.7869,15.8203, 5);
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid, 4.0, 2388.4568,-2008.2374,13.5537))
	{
		if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes entregar tus paquetes primero. (( Usar el comando /tirar parquetesM ))");

		if(Info[playerid][pVIP] == 1)
		{
			if(GetPlayerCash(playerid) < 900)
			{
   				SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $900!");
       			return 1;
   			}
			GivePlayerCash(playerid, -900);
			SetPVarInt(playerid, "Packages", 18);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 18 Paquetes de Materiales por $900.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Has recibido los paquetes pero por 1.5x más, y lo que te permite es recibir 1.5x materiales más.");
		}
		else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
		{
			if(GetPlayerCash(playerid) < 1200)
			{
   				SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $1200!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1200);
			SetPVarInt(playerid, "Packages", 24);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 24 Paquetes de Materiales por $1200.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATAGOLDVIP]:{FFFFFF} Has recibido los paquetes pero por 2x más, y lo que te permite es recibir 2x materiales más.");
		}
		else if(Info[playerid][pVIP] >= 4)
		{
			if(GetPlayerCash(playerid) < 1500)
			{
   				SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $1500!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1500);
			SetPVarInt(playerid, "Packages", 30);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 30 Paquetes de Materiales por $1500.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATINOVIP]:{FFFFFF} Has recibido los paquetes pero por 2.5x más, y lo que te permite es recibir 2.5x materiales más.");
		}
		else
		{
			if(GetPlayerCash(playerid) < 600)
			{
   				SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $600!");
       			return 1;
   			}
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 12 Paquetes de Materiales por $600.");
			GivePlayerCash(playerid, -600);
			SetPVarInt(playerid, "Packages", 12);
		}

		SetPVarInt(playerid, "MatDeliver", 444);
		SetPVarInt(playerid, "tpMatRunTimer", 12);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		SetPlayerCheckpoint(playerid, 2534.2683,-1063.3899,69.5655, 5);
		return 1;
	}
	new mypoint = -1;
	new mypointex = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 1)
		{
			mypoint = i;
			mypointex = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estás en el Punto donde se recogen materiales!");
		return 1;
	}
	if(Info[playerid][pVIP] == 1)
	{
		if(GetPlayerCash(playerid) < 100)
		{
			SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $750!");
			return 1;
		}
		GivePlayerCash(playerid, -750);
		SetPVarInt(playerid, "Packages", 15);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $750 por 15 materiales.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Tu recibes 1.5x paquetes más, que te dará 1.5x más materiales.");
	}
	else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
	{
		if(GetPlayerCash(playerid) < 1000)
		{
			SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $1000!");
			return 1;
		}
		GivePlayerCash(playerid, -1000);
		SetPVarInt(playerid, "Packages", 20);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $1000 por 20 materiales.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Tu recibes 2x paquetes más, que te dará 2x más materiales.");
	}
	else if(Info[playerid][pVIP] >= 4)
	{
		if(GetPlayerCash(playerid) < 1250)
		{
			SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No puedes pagar $1250!");
			return 1;
		}
		GivePlayerCash(playerid, -1250);
		SetPVarInt(playerid, "Packages", 25);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $1250 por 25 materiales.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Tu recibes 2.5x paquetes más, que te dará 2.5x más materiales.");
	}
	else
	{
		if(GetPlayerCash(playerid) < 300)
		{
			SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} No tienes $300!");
			return 1;
		}
		GivePlayerCash(playerid, -500);
		SetPVarInt(playerid, "Packages", 10);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 10 paquetes de materiales por $500.");
	}

	SetPVarInt(playerid, "MatDeliver", 555);
	SetPVarInt(playerid, "tpMatRunTimer", 10);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
	for(new i = 0; i < sizeof(fINFO); i++)
	{
		if(strcmp(Points[mypointex][Owner], fINFO[i][FamilyName], true) == 0)
		{
			fINFO[i][FamilyBank] += 1250;
		}
	}
	SetPlayerCheckpoint(playerid, 2317.739990,-2303.850830,13.545999, 5);
	return 1;
}
CMD:sfondos(playerid, params[])
{
	if(!Presidente(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes acceso a los fondos ya que no eres el Presidente!");
	new string[128], amount, reason[64];
	if(sscanf(params, "ds[64]", amount, reason))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Para retirar fondos del estado debes colocar: /Sfondos [Monto]");
		format(string, sizeof(string), "[<!>] Estado Bancario de EE.UU: {FFFFFF}$%d", Tax);
		SendClientMessageEx(playerid, COLOR_GRIS, string);
		return 1;
	}
	if(amount < 0) return SendClientMessageEx(playerid, COLOR_WHITE, " El monto es inválido.");
	if( Tax > amount )
	{
		Tax -= amount;
		SaveStuff();
		GivePlayerCash( playerid, amount );
		format( string, sizeof( string ), "Retiraste $%d de los fondos del Gobierno.", amount );
		SendClientMessageEx( playerid, COLOR_WHITE, string );
		format(string,sizeof(string),"Estado Bancario de EE.UU:{FFFFFF} El presidente %s retiró %s!",GetPlayerNameEx(playerid),amount,reason);
		ABroadCast( COLOR_GRIS, string, 2);
		Log("logs/- Dinero del Gobierno.log", string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No hay fondos suficientes!");
	}
	return 1;
}

CMD:dejarfondos(playerid, params[])
{
	if(!Presidente(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "- No eres presidente de EE.UU para realizar esta acción!");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Para dejar fondos en la caja del estado, use: /Dejarfondos [Monto]");
		format(string, sizeof(string), "[<!>] Estado Bancario de EE.UU: {FFFFFF}$%d", Tax);
		SendClientMessageEx(playerid, COLOR_GRIS, string);
		return 1;
	}
	if(amount < 0) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Monto es inválido.");
	Tax += amount;
	SaveStuff();
	GivePlayerCash(playerid, -amount);
	format( string, sizeof( string ), "Depositaste $%d en los fondos del Gobierno.", amount );
	SendClientMessageEx( playerid, COLOR_WHITE, string );
	return 1;
}

CMD:arrestar(playerid, params[]){
	if(OrgGob(playerid)){
 		if(!IsAtArrestPoint(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el punto de entrega.");
		new string[128], giveplayerid, time;
		if(sscanf(params, "dddd", giveplayerid, time)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /arrestar playerid (Minutos) ");
		if(time < 1 || time > 600) { SendClientMessageEx(playerid, COLOR_WHITE, "Tiempo: 1 a 30 minutos."); return 1; }
		new suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect)){
			if(ProxDetectorS(5.0, playerid,suspect)){
				if(Info[suspect][pWantedLevel] < 1 && Info[playerid][pMember] != 8){
					SendClientMessageEx(playerid, COLOR_WHITE, "El sospechoso debe tener un nivel de búsqueda de al menos una estrella.");
					return 1;
				}
				format(string, sizeof(string), "%s fue arrestado.", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: hemos arrestado a {00D2CF}%s.", GetPlayerNameEx(playerid), GetPlayerNameEx(suspect));
                SendRadioMessage(1, TEAM_BLUE_COLOR, string);

				ResetPlayerWeaponsEx(suspect);
				GameTextForPlayer(suspect, "Fuiste arrestado", 5000, 5);
				if(IsPlayerInRangeOfPoint(playerid, 4.0, 1524.483154, -1677.866455, 1645.3226)){
					SetPlayerFacingAngle(suspect, 0);
					if(Info[suspect][pVIP] >= 2)
					{
						Info[suspect][pJailTime] = ((time*60)*75)/100;
					}
					else
					{
						Info[suspect][pJailTime] = time * 60;
					}
					DeletePVar(suspect, "IsFrozen");
					new rand;
		    		rand = random(sizeof(PFAPrisonSpawns));
		    		SetPlayerPos(suspect, PFAPrisonSpawns[rand][0], PFAPrisonSpawns[rand][1], PFAPrisonSpawns[rand][2]);
		    		LoadObjects(suspect);
					SetPlayerInterior(suspect, 10);
					Info[suspect][pInt] = 10;
					Info[suspect][pJailed] = 2;
					PhoneOnline[suspect] = 1;
					Info[suspect][pArrested] += 1;
					Info[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					ClearAnimations(suspect);
					Info[suspect][pEstado] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					Info[suspect][pVW] = 500;
					SetPlayerVirtualWorld(suspect, 500);
				}
				if(IsPlayerInRangeOfPoint(playerid, 4.0, 613.3228,-589.1623,17.2266)) // Dillimore
				{
				    SetPlayerFacingAngle(suspect, 0);
					if(Info[suspect][pVIP] >= 2)
					{
						Info[suspect][pJailTime] = ((time*60)*75)/100;
					}
					else
					{
						Info[suspect][pJailTime] = time * 60;
					}
					DeletePVar(suspect, "IsFrozen");
 					new rand;
		    		rand = random(sizeof(PrisonDillmore));
		    		SetPlayerPos(suspect, PrisonDillmore[rand][0], PrisonDillmore[rand][1], PrisonDillmore[rand][2]);
					SetPlayerInterior(suspect, 5);
					Info[suspect][pInt] = 5;
					Info[suspect][pVW] = 400;
					SetPlayerVirtualWorld(suspect, 400);
					Info[suspect][pJailed] = 6;
					PhoneOnline[suspect] = 1;
					Info[suspect][pArrested] += 1;
					Info[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					ClearAnimations(suspect);
					Info[suspect][pEstado] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
				}
				else if(Team_AININT(playerid) || Team_CIA(playerid)){
					TogglePlayerControllable(suspect, 0);
				    TextDrawShowForPlayer(suspect, box);
					TextDrawShowForPlayer(suspect, streamer);
					SetPVarInt(suspect, "LoadingObjects", 1);
					SetTimerEx("SafeLoadObjects", 4000, 0, "d", suspect);
					SetPlayerInterior(suspect, 1);
					Info[suspect][pVW] = 600;
					Info[suspect][pInt] = 1;
					SetPlayerVirtualWorld(suspect, 600);
					SetPlayerPos(suspect,315.1677,-1451.5564,-33.5292);
					if(Info[suspect][pVIP] >= 2)
					{
						Info[suspect][pJailTime] = ((time*60)*75)/100;
					}
					else
					{
						Info[suspect][pJailTime] = time * 60;
					}
					Info[suspect][pJailed] = 3;
					PhoneOnline[suspect] = 1;
					DeletePVar(suspect, "IsFrozen");
					Info[suspect][pArrested] += 1;
					Info[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					ClearAnimations(suspect);
					Info[suspect][pEstado] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
				}
				else{
					JailPrice[suspect] = 0;
					format(string, sizeof(string), "Fuiste encarcelado %d segundos.   Fianza: No Disponible", Info[suspect][pJailTime]);
					SendClientMessageEx(suspect, COLOR_LIGHTBLUE, string);
				}
			}
		}
		else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No hay nadie cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres de las fuerzas de la ley.");
	return 1;
}

CMD:radiofm(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER){
		return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Debes estar en un vehículo para poder encender una emisora!");
	}
    else if(isnull(params)){
        SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Indicación básica: {2EDFFF}/Radiofm [Estación] [1/8]");
		SendClientMessageEx(playerid, COLOR_GREEN, "");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[1] {FFFFFF}Disney");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[2] {FFFFFF}Mega");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[3] {FFFFFF}Delta");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[4] {FFFFFF}Vega Retro");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[5] {FFFFFF}Surf And Rock");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[6] {FFFFFF}Order Of The Dragon");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[7] {FFFFFF}Bunker");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[8] {FFFFFF}Sonic FM");
        return 1;
    }
    new string[84], station[64];
	switch(strval(params)){
		case 0:{
			format(string, sizeof(string), "* %s apaga la radio del vehiculo.",GetPlayerNameEx(playerid));
			foreach(Player, i) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			{
				StopAudioStreamForPlayer(playerid);
				estacionp[i] = 0;
				estacionveh[GetPlayerVehicleID(playerid)] = 0;
			}
		}
		case 1:{
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Disney.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://disneyargradio-lh.akamaihd.net/i/ARG_Disney_RADIO@102438/master.m3u8");
			estacionveh[GetPlayerVehicleID(playerid)] = 1;
		}
		case 2: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Mega.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/3");
			estacionveh[GetPlayerVehicleID(playerid)] = 2;
		}
		case 3: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Delta.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/40108");
			estacionveh[GetPlayerVehicleID(playerid)] = 3;
		}
		case 4: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Vega Retro.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/73786");
			estacionveh[GetPlayerVehicleID(playerid)] = 4;
		}
		case 5: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Surf And Rock.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/65813");
			estacionveh[GetPlayerVehicleID(playerid)] = 5;
       }
		case 6: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Order Of The Dragon.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/83470");
			estacionveh[GetPlayerVehicleID(playerid)] = 6;
       }
		case 7: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Bunker.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/43465");
			estacionveh[GetPlayerVehicleID(playerid)] = 7;
       }
		case 8: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Sonic FM.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/2228");
			estacionveh[GetPlayerVehicleID(playerid)] = 8;
		}
		default: return SendClientMessageEx(playerid, COLOR_GRAD2, "Está estación es inválida.");
	}
    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    foreach(Player, i) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
	{
		StopAudioStreamForPlayer(playerid);
		estacionp[i] = PlayAudioStreamForPlayer(playerid, station, 1, 1, 1, 1, 0);
    }
    return 1;
}

CMD:radioam(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER){
		return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}Debes estar en un vehículo para poder encender una emisora!");
	}
    else if(isnull(params)){
        SendClientMessageEx(playerid, COLOR_GREEN, "{FFFFFF}Indicación básica: {2EDFFF}/Radioam [Estación] [1/8]");
		SendClientMessageEx(playerid, COLOR_GREEN, "");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[1] {FFFFFF}Metro");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[2] {FFFFFF}La Red");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[3] {FFFFFF}Continental");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[4] {FFFFFF}La Plata");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[5] {FFFFFF}Vorterix");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[6] {FFFFFF}ESPN");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[7] {FFFFFF}Splendid");
		SendClientMessageEx(playerid, COLOR_GREEN, "{2EDFFF}[8] {FFFFFF}Rire et Chansons");
        return 1;
    }
    new string[84], station[64];
	switch(strval(params)){
		case 0:{
			format(string, sizeof(string), "* %s apaga la radio del vehiculo.",GetPlayerNameEx(playerid));
			foreach(Player, i) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			{
				StopAudioStreamForPlayer(playerid);
				estacionp[i] = 0;
				estacionveh[GetPlayerVehicleID(playerid)] = 0;
			}
		}
		case 1:{
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Metro.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/1");
			estacionveh[GetPlayerVehicleID(playerid)] = 1;
		}
		case 2: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación La Red.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/436");
			estacionveh[GetPlayerVehicleID(playerid)] = 2;
		}
		case 3: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Continental.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/210");
			estacionveh[GetPlayerVehicleID(playerid)] = 3;
		}
		case 4: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación La Plata.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/408");
			estacionveh[GetPlayerVehicleID(playerid)] = 4;
		}
		case 5: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Vorterix.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/40139");
			estacionveh[GetPlayerVehicleID(playerid)] = 5;
       }
		case 6: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación ESPN.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/8");
			estacionveh[GetPlayerVehicleID(playerid)] = 6;
       }
		case 7: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Splendid.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/14219");
			estacionveh[GetPlayerVehicleID(playerid)] = 7;
       }
		case 8: {
			format(string, sizeof(string), "* %s coloca en la radio del vehículo la estación Rire et Chansons.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://es.streema.com/radios/play/9230");
			estacionveh[GetPlayerVehicleID(playerid)] = 8;
		}
		default: return SendClientMessageEx(playerid, COLOR_GRAD2, "Está estación es inválida.");
	}
    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    foreach(Player, i) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
	{
		StopAudioStreamForPlayer(playerid);
		estacionp[i] = PlayAudioStreamForPlayer(playerid, station, 1, 1, 1, 1, 0);
    }
    return 1;
}

CMD:vendermateriales(playerid, params[])
{
	new string[128], giveplayerid, amount, price;
	if(sscanf(params, "ddd", giveplayerid, amount, price)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /vendermateriales (playerid) (Monto) (Precio)");
	if(amount < 1 || amount > 99999999) { SendClientMessageEx(playerid, COLOR_WHITE, " Los valores no pueden ser mayores a 99999999 gramos ni menores a 1."); return 1; }
	if(price < 1) { SendClientMessageEx(playerid, COLOR_WHITE, " El precio no puede ser menor que 1,"); return 1; }
 	if (GetPVarInt(playerid, "ArmsTimer") > 0)
	{
        format(string, sizeof(string), " Tienes que esperar %d segundos despues de haber dado algún arma o materiales.", GetPVarInt(playerid, "ArmsTimer"));
        SendClientMessageEx(playerid,COLOR_WHITE,string);
        return 1;
    }
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes venderte a ti mismo.");
					return 1;
				}
				format(string, sizeof(string), "* Has ofrecido a %s, %d materiales por $%d.", GetPlayerNameEx(giveplayerid), amount, price);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s quiere venderte %d materiales por $%d, (Utiliza: /aceptar materiales para comprar).", GetPlayerNameEx(playerid), amount, price);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				MatsOffer[giveplayerid] = playerid;
				MatsPrice[giveplayerid] = price;
				return MatsAmount[giveplayerid] = amount;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválido.");
	}
	return 1;
}

CMD:record(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "• El récord fue de %d usuarios!",MaxPlayersConnected);
	SendClientMessageEx(playerid, COLOR_AT, string);
	return 1;
}

CMD:serverstats(playerid, params[])
{
	new string[128];
	new formatmin[4];
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] <= 10) return SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[ADM]:{FF0000} No eres el encargado de esto ó no eres administrador.");
	if(MPMinute < 10) format(formatmin,sizeof(formatmin),"0%d",MPMinute);
	else format(formatmin,sizeof(formatmin),"%d",MPMinute);
	SendClientMessageEx(playerid, COLOR_WHITE, "______________________________________________________________________________________________");
	SendClientMessageEx(playerid, COLOR_WHITE, "");
	format(string,sizeof(string),"Estadísticas de Absolute Titanium RolePlay - Versión %s",SERVER_GM_TEXT);
	SendClientMessageEx(playerid, COLOR_AT, string);
	SendClientMessageEx(playerid, COLOR_WHITE, "");
	format(string, sizeof(string), "{FFFFFF}Objetos: %d | Pickups: %d | Map Icons: %d | 3D Text Labels: %d | TextDraws: %d | Casas: %d",CountDynamicObjects(),CountDynamicPickups(),CountDynamicMapIcons(),CountDynamic3DTextLabels(),textdrawscount,MAX_HOUSES);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "{FFFFFF}Logins: %d | Conexiones: %d | Registrados: %d | Autobaneados: %d | Uptime: %d horas",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "{FFFFFF}Usuarios Conectados: %d | Récord: %d (%d/%d/%d - %d:%s) | Vehiculos de Usuarios: %d",Iter_Count(Player),MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,formatmin,PlayerCars);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	SendClientMessageEx(playerid, COLOR_WHITE, "______________________________________________________________________________________________");
	return 1;
}

CMD:venderchaleco(playerid, params[])
{
	if(Info[playerid][pJob] != 11 && Info[playerid][pJob2] != 11)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "! No eres vendedor de chaleco.");
		return 1;
	}
	new string[128], giveplayerid, money;
	if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderchaleco (playerid) (precio)");
	if (GetPVarInt(playerid, "GuardTimer") > 0)
	{
		format(string, sizeof(string), "- Debes esperar %d segundos después de haber vendido.", GetPVarInt(playerid, "GuardTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(money < 1000 || money > 10000) { SendClientMessageEx(playerid, COLOR_WHITE, "Precio: $1,000 a $10,000."); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{

		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto para ti mismo.");
				return 1;
			}
			SetPVarInt(playerid, "GuardTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
			format(string, sizeof(string), "* Ofreciste un chaleco usado a %s por $%d.", GetPlayerNameEx(giveplayerid), money);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s quiere vender un chaleco usado por $%d, usa /aceptar chaleco para aceptar.", GetPlayerNameEx(playerid), money);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			GuardOffer[giveplayerid] = playerid;
			GuardPrice[giveplayerid] = money;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "El jugador está cerca tuyo.");
		}

	}
	else
	{
  SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no está conectado.");
 }
 return 1;
}
CMD:certificar(playerid, params[])
{
    if(Team_LAMD(playerid))
	{
		new string[128], giveplayerid;
	    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/certificar (usuario id){FFFFFF} para dar Certificado Médico.");
   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando contigo mismo.");
    	    if (ProxDetectorS(5.0, playerid, giveplayerid))
			{

				    	if(Info[giveplayerid][pCertificadoMD] == 0)
						{
							Info[giveplayerid][pCertificadoMD] = 1;
							format(string, sizeof(string), "Certificado Otorgado:{FFFFFF} %s te ha habilitado como persona clínicamente saludable.", GetPlayerNameEx(playerid));
							SendClientMessageEx(playerid, COLOR_AT, string);
							format(string, sizeof(string), "Certificado Otorgado:{FFFFFF} has habilitado a %s como persona clínicamente saludable.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_AT, string);
							format(string, sizeof(string), "Médico %s certificó a %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
    						SendRadioMessage(4, TEAM_MED_COLOR, string);
    						Log("logs/- Certificaciones Médicas.log", string);
						}
						else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} La base de datos indica que este usuario ya está certificado");
			}
			else return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El jugador no está cerca tuyo.");
 		}
	}
 		else return SendClientMessageEx(playerid, COLOR_ROJO,"!{FFFFFF} Sin autorización. No perteneces al Departamento Médico.");
	return 1;
	}

CMD:tirar(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "");
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/tirar (nombre){FFFFFF} para tirar algún objeto.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "- Armas");
		SendClientMessageEx(playerid, COLOR_GREY, "- Marihuana");
		SendClientMessageEx(playerid, COLOR_GREY, "- Cocaína");
		SendClientMessageEx(playerid, COLOR_GREY, "- Materiales");
		SendClientMessageEx(playerid, COLOR_GREY, "- PaquetesM (Materiales)");
		SendClientMessageEx(playerid, COLOR_GREY, "- PaquetesD (Drogas)");
		SendClientMessageEx(playerid, COLOR_GREY, "- Radio");
		return 1;
	}

	if(strcmp(choice,"materiales",true) == 0)
	{
		if(Info[playerid][pMats] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Has tirado tus %d materiales.", Info[playerid][pMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s ha tirado sus materiales.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pMats] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes materiales!");
		}
	}
	else if(strcmp(choice,"radio",true) == 0)
	{
		if(Info[playerid][pRadio] != 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado su radio portable.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pRadio] = 0;
			Info[playerid][pRadioFreq] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un radio portable.");
		}
	}
	else if(strcmp(choice,"armas",true) == 0)
	{
		if(GetPVarInt(playerid, "IsInArena") == 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes tirar las armas en el paintball.");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto en un evento.");
			return 1;
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		ResetPlayerWeaponsEx(playerid);
		format(string, sizeof(string), "* %s ha tirado todas sus armas.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		RemovePlayerAttachedObject(playerid, 9);
	}
	else if(strcmp(choice,"marihuana",true) == 0)
	{
		if(Info[playerid][pPot] > 0)
		{
			format(string, sizeof(string), "Tiraste %d gramos de marihuana.", Info[playerid][pPot]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado sus bolsas de marihuana.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pPot] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes marihuana.");
		}
	}
	else if(strcmp(choice,"cocaina",true) == 0)
	{
		if(Info[playerid][pCrack] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Tiraste %d gramos de cocaína.", Info[playerid][pCrack]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s ha tirado sus bolsas de cocaína.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pCrack] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes crack.");
		}
	}
	else if(strcmp(choice,"PaquetesM",true) == 0)
	{
		if(GetPVarInt(playerid, "Packages") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado sus paquetes de materiales.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "Packages");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes paquetes de materiales.");
		}
	}
	else if(strcmp(choice,"PaquetesD",true) == 0)
	{
		if(Info[playerid][pCrates] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado los paquetes de droga.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pCrates] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes paquetes de drogas.");
		}
	}
	else if(strcmp(choice,"pizza",true) == 0)
	{
		if(GetPVarInt(playerid, "Pizza") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado la entrega de pizzas.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPVarInt(playerid, "Pizza", 0);
            DestroyProgressBar(PizzaBar[playerid]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No estás llevando pizzas.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /tirar (Nombre)");
		SendClientMessageEx(playerid, COLOR_GREY, "Nombres: Armas, Marihuana, Cocaína, Materiales, PaquetesM (Materiales), PaquetesD (Drogas), Radio");
	}
	return 1;
}

CMD:mostrar(playerid, params[])
{
	new string[128], giveplayerid, choice[32];
	if(sscanf(params, "ds[32]", giveplayerid, choice))
	{
	    ClearChatbox(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/mostrar (usuario id) (nombre){FFFFFF} para mostrar un objeto.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "- Marihuana");
		SendClientMessageEx(playerid, COLOR_GREY, "- Cocaína");
		SendClientMessageEx(playerid, COLOR_GREY, "- Materiales");
		return 1;
	}
	if(giveplayerid == playerid)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes enseñarte a ti mismo.");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
				return 1;
			}
			if (strcmp(choice, "materiales", true) == 0)
			{
			    new amount = Info[playerid][pMats];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_WHITE, "No tienes materiales!");
					return 1;
			    }
				format(string, sizeof(string), "%s te ha mostrado sus %d Materiales.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "Enseñaste a %s tus %d Materiales.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "marihuana", true) == 0)
			{
			    new amount = Info[playerid][pPot];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_WHITE, "No tienes marihuana.");
					return 1;
			    }
				format(string, sizeof(string), "%s te ha mostrado sus %d bolsas de marihuana.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "Enseñaste a %s tus %d bolsas de marihuana.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "cocaina", true) == 0)
			{
			    new amount = Info[playerid][pCrack];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_WHITE, "No tienes cocaína.");
					return 1;
			    }
				format(string, sizeof(string), "%s te ha mostrado sus %d gramos de cocaína.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "Enseñaste a %s tus %d gramos de cocaína.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
	}
	return 1;
}

CMD:saludar(playerid, params[])
{
	new string[128], giveplayerid, style;
	if(sscanf(params, "dd", giveplayerid, style)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /saludar (playerid) (estilo (1-8))");

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer eso tu mismo.");
			return 1;
		}
		if(style >= 1 && style < 9)
		{
			new Float: ppFloats[3];
			GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);
			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado lejos de la persona.");
				return 1;
			}
			SetPVarInt(playerid, "shrequest", giveplayerid);
			SetPVarInt(playerid, "shstyle", style);

			format(string, sizeof(string), "Saludaste a %s, espera que el responda.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof(string), "%s te ha saludado, porfavor usa '/aceptar saludo' para darle la mano.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /saludar (playerid) (estilo (1-8))");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
	return 1;
}

CMD:destruirvehiculo(playerid, params[])
{
	new vstring[1024];

	if(!IsPlayerInRangeOfPoint(playerid, 5,  2174.72461,-2250.56470,13.19184)) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No estás en la {2EDFFF}Destructora {FFFFFF}de {2EDFFF}Los Ángeles{FFFFFF}, puedes ver en algún mapa!");
	for(new i; i < MAX_PLAYERVEHICLES; i++)
	{
		if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
			format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

		else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
			format(vstring, sizeof(vstring), "%s\n%s {FF0000}[Embargado]", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

		else
			format(vstring, sizeof(vstring), "%s\nVacío", vstring);
	}
	SafeDialogEx(playerid, SELLCAR, DIALOG_STYLE_LIST, "{2EDFFF}Destructora - Los Ángeles", vstring, "Vender", "Cancelar");
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
	SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}______________________________________________________________________________________________________________");
	SendClientMessageEx(playerid, COLOR_AT, "");
	SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}Atención:{FFFFFF} El vehículo será destruido por {33AA33}$10.000{FFFFFF} sin importar la clase de este mismo y no habrá reembolso.");
	SendClientMessageEx(playerid, COLOR_AT, "{2EDFFF}______________________________________________________________________________________________________________");
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "");
	return 1;
}

CMD:limpiar(playerid, params[])
{
	new string[128], giveplayerid;
	if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /limpiar (playerid)");
	if(IsPlayerConnected(giveplayerid))
	{
		format(string, sizeof(string), "* Limpiaste el nivel de búsqueda %s.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Agente %s a limpiado tu nivel de búsqueda.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Agente %s a limpiado el nivel de búsqueda de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		SendRadioMessage(1, TEAM_RADIO_COLOR, string);
		SendRadioMessage(2, TEAM_RADIO_COLOR, string);
		SendRadioMessage(3, TEAM_RADIO_COLOR, string);
		Info[giveplayerid][pWantedLevel] = 0;
		SetPlayerToTeamColor(giveplayerid);
		SetPlayerWantedLevel(giveplayerid, 0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	return 1;
}

CMD:gotopoint(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new points;
	if(sscanf(params, "d", points)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotopoint (IDPunto)");

	if(points >= MAX_POINTS || points < 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotopoint (0-8)");
		return 1;
	}
	SetPlayerPos(playerid, Points[points][Pointx], Points[points][Pointy], Points[points][Pointz]);
	return 1;
}

function SubsiEx(playerid)
{
	new rand, string[256];
	rand = random(22);
	format(string, sizeof(string), "{FFFFFF}Estás por cobrar tu paga, por favor confirme sus datos y el código de seguridad para que\nel dinero sea depositado a su cuenta bancaria.\n\nNombre y Apellido: %s\nEdad: %d\nMonto: $700\nCódigo:{FF0000} %s",GetPlayerNameEx(playerid), Info[playerid][pAge], SubsiCodes[rand]);
	ShowPlayerDialog(playerid, SUBSI, DIALOG_STYLE_INPUT,"{2EDFFF}Banco Nacional {FFFFFF}©",string,"Enviar","Salir");
	IDCode[playerid] = rand;
	return 1;
}

CMD:gunlocker(playerid, params[])
{
	new Float: x, Float: y, Float: z;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			if(GetPlayerCash(playerid) < 500)
			{
				SendClientMessageEx(playerid, COLOR_WHITE," No tienes 500$ para mejorar los lockers de tu vehiculo!");
				return 1;
			}
			if(PlayerVehicleInfo[playerid][d][pvWepUpgrade] < 7)
			{
				new string[114];
				GameTextForPlayer(playerid,"~g~Gun-locker Mejorado!",5000,6);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				PlayerVehicleInfo[playerid][d][pvWepUpgrade]++;
				GivePlayerCash(playerid, -500);
				SendClientMessageEx(playerid, COLOR_WHITE, "Mejoraste la capacidad de los lockers de armas de tu coche.");
				format(string, sizeof(string), "{FF8000}[INDICACION]:{FFFFFF} Para usar esta función, los comandos son /smaletero y /gmaletero. Tienes %d lockers disponibles.", PlayerVehicleInfo[playerid][d][pvWepUpgrade]+1);
				SendClientMessageEx(playerid, COLOR_GRAD2, string );
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ya mejoraste los lockers de armas para tu coche.");
				return 1;
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " No estás cerca de un vehiculo tuyo.");
	return 1;
}

CMD:cmejorar(playerid, params[])
{
	if(isnull(params))
	{
        ClearChatbox(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/cmejorar (nombre){FFFFFF} para mejorar tu casa.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "- Gunlocker (Para la casa 1)");
		SendClientMessageEx(playerid, COLOR_GREY, "- Gunlocker2 (Para la casa 2)");
		return 1;
	}
	if(strcmp(params, "gunlocker", true) == 0)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
		{
			switch(HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade])
			{
				case 0:
				{
					if(GetPVarInt(playerid, "Cash") >= 5000)
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade] = 1;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][0] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000.");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 1:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][1] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000.");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 2:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][2] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 3:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][3] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 4:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][4] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Lo sentimos, no hay más espacios disponibles.");
					return 1;
				}
			}
			SaveHouses();
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, " No eres dueño de una casa.");
			return 1;
		}
	}
	else if(strcmp(params, "gunlocker2", true) == 0)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey2]][hOwner], true) == 0)
		{
			switch( HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade] )
			{
				case 0:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade] = 1;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][0] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 1:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][1] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 2:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][2] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 3:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][3] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{2EDFFF}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 4:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][4] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Lo sentimos, no hay más espacios disponibles.");
					return 1;
				}
			}
			SaveHouses();
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, " No tienes una segunda casa.");
			return 1;
		}
	}
	return 1;
}

CMD:darvest(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	new string[128], giveplayerid, slot, invoice[64];
	if(sscanf(params, "dds[64]", giveplayerid, slot, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darvest (playerid) (slot(0-9)) (invoice #)");

	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19142;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.07998;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.03999;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	format(string, sizeof(string), "Police Vest en el slot %d, usa /toys para editar la posición.", slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "Diste a %s un police vest en el slot %d", GetPlayerNameEx(giveplayerid), slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/- Chalecos LAPD.log", string);
	return 1;
}

CMD:darvest2(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	new string[128], giveplayerid, slot, invoice[64];
	if(sscanf(params, "dds[64]", giveplayerid, slot, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darvest (playerid) (slot(0-9)) (invoice #)");

	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19515;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.07998;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.03999;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	format(string, sizeof(string), "Police Vest en el slot %d, usa /toys para editar la posición.", slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "Diste a %s un police vest en el slot %d", GetPlayerNameEx(giveplayerid), slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/- Chalecos LAPD.log", string);
	return 1;
}

CMD:listatoys(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 2 || Info[playerid][pShopTech] == 1)
	{
		new
			iTargetID;

		if(sscanf(params, "d", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Utiliza: /listatoys (playerid)");
		}
		else if(IsPlayerConnected(iTargetID)) for(new iToyIter, szMessage[128]; iToyIter < MAX_PLAYERTOYS; ++iToyIter) {
			for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsAll); ++LoopRapist) {
				if(HoldingObjectsAll[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
					format(szMessage, sizeof(szMessage), "%s (slot %i, parte: %s)", HoldingObjectsAll[LoopRapist][holdingmodelname], iToyIter, HoldingBones[PlayerToyInfo[iTargetID][iToyIter][ptBone]]);
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					break;
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador Invalido.");
	}
	return 1;
}

CMD:placa(playerid, params[])
{
 if(Info[playerid][pMember] >= 1 || Info[playerid][pLeader] >= 1 || Info[playerid][pMember] >= 3 || Info[playerid][pLeader] >= 3 || Info[playerid][pMember] >= 10 || Info[playerid][pLeader] >= 10 || Info[playerid][pMember] >= 20 || Info[playerid][pLeader] >= 20){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /placa (playerid)");
		if(giveplayerid != INVALID_PLAYER_ID){
			if(ProxDetectorS(5.0, playerid, giveplayerid)){
				switch(Info[playerid][pMember]){
					case 1 .. 4, 20:{
						new
						infoArrays[3][64];

						GetPlayerFactionInfo(playerid, infoArrays[0], infoArrays[1], infoArrays[2]);

						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "El %s %s es un miembro de %s.", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Asignación actual: %s.", infoArrays[1]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						switch(Info[playerid][pMember]){
							case 1 .. 4: SendClientMessageEx(giveplayerid, COLOR_WHITE, "");
						}
						if(Info[playerid][pMember] != 4) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Miembro de una organización del Estado, EE.UU. ©");
						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "* %s toma su placa y se la muestra a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					default: SendClientMessageEx(playerid, COLOR_WHITE, "Usted no está en una facción del estado.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca de ti.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no está en una facción del estado.");
	}
	return 1;
}

CMD:reparar(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes reparar un vehiculo estando dentro de uno.");
	new string[128];
	if(GetPVarInt(playerid, "EventToken")) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en un evento.");
	}
	new giveplayerid, money;
	if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /reparar (playerid) (precio)");
	if(Team_Mecanicos(playerid)){
		if(money < 1 || money > 10000) { SendClientMessageEx(playerid, COLOR_WHITE, " Precio: $1 a $10,000!"); return 1; }
		if(IsPlayerConnected(giveplayerid)){
			if(giveplayerid != INVALID_PLAYER_ID){
			    new closestcar = GetClosestCar(playerid);
	  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 8.0)){
					if(ProxDetectorS(8.0, playerid, giveplayerid)&& IsPlayerInAnyVehicle(giveplayerid)){
						if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, " No puedes hacer esto."); return 1; }
	                    if(!IsAMBike(closestcar) && !IsAPlane(closestcar))
						{
							new engine,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
							if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
							{
								SendClientMessageEx(playerid, COLOR_GRAD1, "Este vehiculo necesita estar con el capo abierto para repararlo.");
								return 1;
							}
						}
						format(string, sizeof(string), "* Ofreciste a %s reparar su coche por $%d .",GetPlayerNameEx(giveplayerid),money);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Mecánicos %s quiere reparar tu coche por $%d. (usa /aceptar fix)",GetPlayerNameEx(playerid),money);
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						RepairOffer[giveplayerid] = playerid;
						RepairPrice[giveplayerid] = money;
					}
					else{
						SendClientMessageEx(playerid, COLOR_WHITE, " Ese jugador debe estar cerca tuyo y dentro de un auto.");
					}
				}
				else{
				    SendClientMessageEx(playerid, COLOR_WHITE, " Ningún vehiculo no está cerca tuyo.");
				}
			}
		}
		else{
			SendClientMessageEx(playerid, COLOR_WHITE, " Jugador desconectado.");
		}
	}
	else{
		SendClientMessageEx(playerid, COLOR_WHITE, " No eres mecánico.");
	}
	return 1;
}

CMD:revisar(playerid, params[])
{
	if(Info[playerid][pConnectTime] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/revisar (usuario id){FFFFFF} para revisar a una persona.");
		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes buscarte a ti mismo.");
				SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_______________________________________");
				SendClientMessageEx(playerid, COLOR_WHITE, "");
				format(string, sizeof(string), "— Objetos de %s:", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(Info[giveplayerid][pPot] > 0)
				{
					format(string, sizeof(string), "- %d gramos de marihuana", Info[giveplayerid][pPot]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(Info[giveplayerid][pWSeeds] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "- Semillas de marihuana");
				}
				if(Info[giveplayerid][pCrack] > 0)
				{
					format(string, sizeof(string), "- %d gramos de cocaína", Info[giveplayerid][pCrack]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(Info[giveplayerid][pMats] > 0)
				{
					format(string, sizeof(string), "- %d materiales", Info[giveplayerid][pMats]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(Info[giveplayerid][pPhoneBook] > 0) SendClientMessageEx(playerid, COLOR_GREY, "Phone book.");
				new weaponname[50];
				format(string, sizeof(string), "— Armas de %s:", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				for (new i = 0; i < 13; i++)
				{
					if(Info[giveplayerid][pWeapons][i] > 0)
					{
						GetWeaponName(Info[giveplayerid][pWeapons][i], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "- %s", weaponname);
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
				}
				new cash =  GetPlayerCash(giveplayerid);
				format(string, sizeof(string), "— Dinero de %s:", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "- $%d", cash);
				SendClientMessageEx(playerid, COLOR_GREY, string);
				SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_______________________________________");
				SendClientMessageEx(playerid, COLOR_WHITE, "");
				format(string, sizeof(string), "* %s revisa a %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no válido.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, " No puedes hacer esto, necesitas tener 3 horas jugadas!");
	return 1;
}

CMD:qseguroveh(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 3)
	{
		new vehicleid;
		if(sscanf(params, "d", vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qseguroveh (vehicle id)");

		if(IsValidVehicleID(vehicleid))
		{
			vehicle_unlock_doors(Info[playerid][pLockCar]);
			GameTextForPlayer(playerid, "~g~Abierto", 1000, 6);
			PlayerPlaySoundEx(1145, 0.0, 0.0, 0.0);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Id del vehiculo invalida.");
	}
	return 1;
}
CMD:calcular(playerid, params[])
{
    if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes utilizar la calculadora en estos momentos, debes tener un teléfono!");
	new method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
        ClearChatbox(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/calcular (valor) (operación) (valor){FFFFFF} para sacar una cuenta.");
		SendClientMessageEx(playerid, COLOR_GREY, "");
		SendClientMessageEx(playerid, COLOR_GREY, "Mas - Suma - (+)");
		SendClientMessageEx(playerid, COLOR_GREY, "Menos - Resta - (-)");
		SendClientMessageEx(playerid, COLOR_GREY, "Por - Multiplicación - (X)");
		SendClientMessageEx(playerid, COLOR_GREY, "Dividido - División - (/)");
		return 1;
	}
	if(strcmp(method,"por",true) == 0 || strcmp(method,"multiplicacion",true) == 0 || strcmp(method,"X",true) == 0)
	{
        new calculadora[100];
		new resultado = value1*value2;
 	    format(calculadora, sizeof(calculadora), "{FFFFFF}%d X %d = {0B89FF}%i",value1,value2,resultado);
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{0B89FF}[X] Resultado",calculadora, "{FFFFFF}Cerrar", "");
	}
	if(strcmp(method,"dividido",true) == 0 || strcmp(method,"division",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
		{
			SendClientMessageEx(playerid,COLOR_ROJO,"ERROR");
			return 1;
		}
		new calculadora[100];
		new resultado = value1/value2;
		format(calculadora, sizeof(calculadora), "{FFFFFF}%d / %d = {0B89FF}%i",value1,value2,resultado);
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{0B89FF}[/] Resultado",calculadora, "{FFFFFF}Cerrar", "");
	}
	if(strcmp(method,"mas",true) == 0 || strcmp(method,"suma",true) == 0 || strcmp(method,"+",true) == 0)
	{
	    new calculadora[100];
		new resultado = value1+value2;
		format(calculadora, sizeof(calculadora), "{FFFFFF}%d + %d = {0B89FF}%i",value1,value2,resultado);
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{0B89FF}[+] Resultado",calculadora, "{FFFFFF}Cerrar", "");
	}
	if(strcmp(method,"menos",true) == 0 || strcmp(method,"resta",true) == 0 || strcmp(method,"-",true) == 0)
	{
	    new calculadora[100];
		new resultado = value1-value2;
		format(calculadora, sizeof(calculadora), "{FFFFFF}%d - %d = {0B89FF}%i",value1,value2,resultado);
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{0B89FF}[-] Resultado",calculadora, "{FFFFFF}Cerrar", "");
	}
	return 1;
}

CMD:desmutearad(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desmutearad (playerid)");

		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pADMute] == 1)
			{
				if(Info[giveplayerid][pJailed] != 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "{FF0000}[ERROR]:{FFFFFF} No puedes desmutear del comando /ad si la persona está en jail!");
					return 1;
				}
				format(string, sizeof(string), "[AVISO]: %s fue desmuteado del cmd /ad por %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				Log("logs/- Muteos.log", string);
				Info[giveplayerid][pADMute] = 0;
				Info[giveplayerid][pADMuteTotal]--;
			}
			else return SendClientMessageEx(playerid, COLOR_LIGHTRED,"{FF0000}[ERROR]:{FFFFFF} Ese jugador ya está muteado de los anuncios!");
		}
	}
	return 1;
}

CMD:mutearad(playerid, params[]){
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
		if (Info[playerid][pAdminZC] >= 2 || Info[playerid][pHelper] >= 2){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /mutearad (playerid)");

		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] >= 7) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando con administradores");
			if(Info[giveplayerid][pADMute] == 0){
				Info[giveplayerid][pADMute] = 1;
				Info[giveplayerid][pADMuteTotal] += 1;
				format(string, sizeof(string), "[Comunicado]: %s fue muteado del cmd /ad por %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/- Muteos.log", string);
				ABroadCast(COLOR_ORANGE,string,2);
				if(Info[giveplayerid][pADMuteTotal] > 6){
					new year, month,day;
					getdate(year, month, day);
					new playerip[32];
					GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AT-RP %s(IP:%s) ha sido baneado %s, Razon: Excesivas advertencias (mutes) (%d-%d-%d)", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid),month,day,year);
					Log("logs/baneos.log", string);
					format(string, sizeof(string), "AT-RP: %s fue baneado, razón:Abuso de /AD [Total: 6]", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					Info[giveplayerid][pBannedZC] = 2;
					new ip[32];
					GetPlayerIp(giveplayerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(giveplayerid);
				}
			}
			else{
				if(Info[playerid][pAdminZC] >= 2){
					ShowAdMuteFine(giveplayerid);
					format(string, sizeof(string), "Ofreciste a %s una posibilidad de desmutearse del comando /ad.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya está muteado del comando /ad.");
 			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}
CMD:prision(playerid, params[]){
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2648.9587,-2384.3145,13.6328)){
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el punto de arresto para Fort DeMorgan.");
		return 1;
	}
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /prision (playerid)");
	if(Info[playerid][pRank] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe tener al menos el rango 2.");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_WHITE, " No puedes meterte a la prisión a ti mismo."); return 1; }
		if(Info[giveplayerid][pJudgeJailTime] == 0 && Info[giveplayerid][pJudgeJailType] != 2) { SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador no tiene que estar en la cárcel."); return 1; }
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new string[37 + MAX_PLAYER_NAME];
			SetPVarInt(giveplayerid, "IsFrozen", 0);
			format(string, sizeof(string), "* Has traído a %s a Fort DeMorgan.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s te ha llevado a Fort DeMorgan.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			GameTextForPlayer(giveplayerid, "~w~Bienvenido to ~n~~r~Fort DeMorgan", 5000, 3);
			TogglePlayerControllable(giveplayerid, 1);
			ClearAnimations(giveplayerid);
			Info[giveplayerid][pEstado] = 0;
			SetPVarInt(giveplayerid, "PlayerCuffed", 0);
			Info[giveplayerid][pWantedLevel] = 0;
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerWantedLevel(giveplayerid, 0);
			SetPlayerSkin(giveplayerid, 50);
			Info[giveplayerid][pJailed] = 5;
			PhoneOnline[giveplayerid] = 1;
			Info[giveplayerid][pJailTime] = Info[giveplayerid][pJudgeJailTime];
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerVirtualWorld(giveplayerid, 1000);
			Info[giveplayerid][pVW] = 1000;
			SetPlayerColor(giveplayerid, TEAM_ORANGE_COLOR);
			LoadObjects(giveplayerid);
			new rand = random(sizeof(ICPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, ICPrisonSpawns[rand][0], ICPrisonSpawns[rand][1], ICPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, ICPrisonSpawns[rand][0], ICPrisonSpawns[rand][1], ICPrisonSpawns[rand][2]);
			ResetPlayerWeaponsEx(giveplayerid);
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no válido.");
	return 1;
}
CMD:orden(playerid, params[])
{
	if(Info[playerid][pMember] != 9)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte del sistema judicial.");
  		return 1;
	}
	if(Info[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado a usar este comando, razón: Rango insuficiente.");
  		return 1;
	}
	new string[128], crime[64], giveplayerid;
	if(sscanf(params, "ds[64]", giveplayerid, crime)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /orden (playerid) (crimen)");

	if(IsPlayerConnected(giveplayerid))
	{
		if(strlen(Info[giveplayerid][pWarrant]) != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya tiene órdenes activas.");
		format(Info[giveplayerid][pWarrant], 64, crime);
		format(string, sizeof(string), "* Corte: Se ordena detener y presentar ante la corte judicial a %s para responder a las acusaciones de:", GetPlayerNameEx(giveplayerid));
		for(new i = 1; i < 5; i++)
		{
		    SendRadioMessage(i, TEAM_RADIO_COLOR, string);
		}
		SendRadioMessage(7, TEAM_RADIO_COLOR, string);
		SendRadioMessage(9, TEAM_RADIO_COLOR, string);
		format(string, sizeof(string), "* Corte: %s", crime);
		for(new i = 1; i < 5; i++)
		{
		    SendRadioMessage(i, TEAM_RADIO_COLOR, string);
		}
		SendRadioMessage(7, TEAM_RADIO_COLOR, string);
		SendRadioMessage(9, TEAM_RADIO_COLOR, string);
	}
	return 1;
}

CMD:qorden(playerid, params[])
{
    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del sistema judicial.");
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto - sólo rangos mayores a 3.");
  	new string[128], giveplayerid;
  	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qorden (playerid)");
	if(IsPlayerConnected(giveplayerid))
	{
 		if(strlen(Info[giveplayerid][pWarrant]) == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene órdenes pendientes.");
		format(Info[giveplayerid][pWarrant], 128, "");
		format(string, sizeof(string), "Removiste la órden de %s.", GetPlayerNameEx(giveplayerid));
  		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}
	return 1;
}

CMD:arrestojudicial(playerid, params[])
{
    new string[128];

    if(OrgGob(playerid))
	{
	    if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Deben estar al menos conectados un juez para hacer esto.");
        if(!IsPlayerInRangeOfPoint(playerid, 4.0, 1735.1194,-1325.8646,13.2494))
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "Debes estar en el punto de arresto judicial (Espalda de la corte judicial).");
	    	return 1;
		}
		new suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect))
		{
			if(ProxDetectorS(5.0, playerid,suspect))
			{
				if(strlen(Info[suspect][pWarrant]) < 1)
				{
	   				SendClientMessageEx(playerid, COLOR_WHITE, "El jugador debe tener órdenes de activos.");
				    return 1;
				}
				format(string, sizeof(string), "* Fuiste transladado a la carceleta judicial %s!", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				ResetPlayerWeaponsEx(suspect);
				format(string, sizeof(string), "* Acusado %s fue entregado a la corte por el oficial %s, ahora el sujeto está esperando por un juez", GetPlayerNameEx(suspect), GetPlayerNameEx(playerid));
				SendRadioMessage(5, TEAM_RADIO_COLOR, string);
				SetPlayerInterior(suspect, 1);
				SetPlayerVirtualWorld(suspect, 20025);
				Info[suspect][pVW] = 20025;
				TogglePlayerControllable(suspect, 0);
				new rand = random(sizeof(WarrantJail));
				SetPlayerFacingAngle(suspect, 0);
				SetPlayerPos(suspect, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2]);
				if(rand != 0) courtjail[suspect] = 2;
				else courtjail[suspect] = 1;
    			SetCameraBehindPlayer(suspect);
       			GameTextForPlayer(suspect, "Objects loading...", 4000, 5);
    			SetPVarInt(suspect, "LoadingObjects", 1);
    			SetTimerEx("SafeLoadObjects", 4000, 0, "d", suspect);
    			SetPVarInt(suspect, "IsFrozen", 0);
				Info[suspect][pEstado] = 0;
				SetPVarInt(suspect, "PlayerCuffed", 0);
				PlayerCuffedTime[suspect] = 0;
				PhoneOnline[suspect] = 1;
    			Info[suspect][pArrested] += 1;
		    	Info[suspect][pWantedLevel] = 0;
		    	SetPlayerToTeamColor(suspect);
		    	SetPlayerWantedLevel(suspect, 0);
				ClearAnimations(suspect);
				Info[suspect][pBeingSentenced] = 60;
				SendClientMessageEx(suspect, COLOR_LIGHTBLUE, "Usted ha sido arrestado por una orden judicial pendiente, usted será atendido por un juez en breve.");
                foreach(Player, i)
				{
					if(OrgGob(i))
					{
						format(string, sizeof(string), "HQ: A todas las unidades, oficial %s completó su objetivo.",playerid);
						SendClientMessageEx(i, TEAM_RADIO_COLOR, string);
						format(string, sizeof(string), "HQ: %s ha sido procesado, razón: %s.",suspect,Info[suspect][pWarrant]);
						SendClientMessageEx(i, TEAM_RADIO_COLOR, string);
					}
				}
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
	return 1;
}

CMD:buscados(playerid, params[])
{
    if(OrgGob(playerid)||Info[playerid][pMember] == 9)
    {
    	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Debe de estar en línea al menos un juez.");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Lista de órdenes judiciales pendientes:");

		new
			fCounter,
			string[128];

		foreach(Player, i)
		{
			if(!isnull(Info[i][pWarrant]))
			{
				format(string, sizeof(string), "%s (%d) - razón: %s.",GetPlayerNameEx(i),i,Info[i][pWarrant]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				++fCounter;
			}
		}
		if(fCounter <= 0)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "No hay órdenes judiciales pendientes.");
		}
  	}
	return 1;
}

CMD:presentar(playerid, params[])
{
    if(Info[playerid][pMember] == 9 || Info[playerid][pLeader] == 9)
	{
		new giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /presentar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto contigo mismo.");
			if(Info[giveplayerid][pBeingSentenced] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene sentencias pendientes.");
			if(courtjail[giveplayerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está en la carceleta de la Corte.");
			if(courtjail[giveplayerid] == 2)
			{
				SetPlayerPos(giveplayerid, 2132.0679,1314.2238,7699.0547);
		    	SetPlayerFacingAngle(giveplayerid, 354.2492);
			}
			else if(courtjail[giveplayerid] == 1)
			{
				SetPlayerPos(giveplayerid, 2131.8599,1294.4722,7699.0547);
		    	SetPlayerFacingAngle(giveplayerid, 182.6859);
			}
			courtjail[giveplayerid] = 0;
		    SetCameraBehindPlayer(giveplayerid);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	return 1;
}

CMD:multajudicial(playerid, params[])
{
    if(Info[playerid][pMember] != 9)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte del sistema judicial.");
  		return 1;
	}
	if(Info[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando, rango mayores a 3.");
  		return 1;
	}
	new string[128], giveplayerid, judgefine, reason[64];
	if(sscanf(params, "dds", giveplayerid, judgefine, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /multajudicial (playerid) (Multa max de $250,000) (razón)");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(!Info[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no se tiene una sentencia.");
		if(judgefine < 1 && judgefine > 250000) return SendClientMessageEx(playerid, COLOR_WHITE, "Monto de la multa no podrá ser inferior a $ 1 o superior a $ 250.000!");
		GivePlayerCash(giveplayerid, -judgefine);
		Tax += judgefine;
		format(string, sizeof(string), "Multaste a %s por $%d, razón: %s", GetPlayerNameEx(giveplayerid), judgefine, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Fuiste multado por $%d por %s, razón: %s", judgefine, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:juicio(playerid, params[])
{
	new string[128], giveplayerid;

    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando, rango mayores a 3.");
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /juicio (playerid)");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(Info[giveplayerid][pBeingSentenced])
	    {
	    	Info[giveplayerid][pBeingSentenced] += 10;
	    	format(string, sizeof(string), "Has extendido el juicio de %s por 10 minutos más, Tiempo: %d", GetPlayerNameEx(giveplayerid), Info[giveplayerid][pBeingSentenced]);
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s extendieron tu juicio a 10 minutos más, Tiempo: %d", GetPlayerNameEx(playerid), Info[giveplayerid][pBeingSentenced]);
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador tiene que estar en la sala de juicio.");
	}
	return 1;
}

CMD:librarcargos(playerid, params[])
{
	new string[128], giveplayerid;

    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando, rango mayores a 3.");
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /librarcargos (playerid)");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(Info[giveplayerid][pBeingSentenced])
	    {
	    	Info[giveplayerid][pBeingSentenced] = 0;
	    	TogglePlayerControllable(giveplayerid, 1);
	    	SetPVarInt(giveplayerid, "IsFrozen", 0);
			PhoneOnline[giveplayerid] = 0;
			format(Info[giveplayerid][pWarrant], 128, "");
	    	format(string, sizeof(string), "Dejaste libre de todos los cargos a %s.", GetPlayerNameEx(giveplayerid));
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s ganaste el juicio! Te liberaron de todos los cargos, ahora eres libre.", GetPlayerNameEx(playerid));
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador tiene que estar en la sala de juicio.");
	}
	return 1;
}

CMD:recompensa(playerid, params[])
{
    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	if(Info[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando (4).");

	new
		giveplayerid,
		money;

	if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /recompensa (playerid) [Dinero(max de $50,000)]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
	if(Info[giveplayerid][pMember] == Info[playerid][pMember]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando a uno de tu facción.");
	if(IsPlayerConnected(giveplayerid))
	{
		new
			string[64 + (MAX_PLAYER_NAME * 2)];

  		if(money < 1 || money > 50000) return SendClientMessageEx(playerid, COLOR_GRAD5, "Max de $50,000 y Minimo 0!");
    	new rank[64], division[64], employer[64];
   		GetPlayerFactionInfo(playerid, rank, division, employer);
	    format(string, sizeof(string), "AT-RP:{FFFF00} %s %s acaba de recompensar a %s con $%d.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
	    ABroadCast(COLOR_AT,string, 2);
	    new year,month,day,log[128];
		getdate(year, month, day);
		format(log, sizeof(log), "ATENCIÓN: %s %s has just rewarded %s $%d(%d-%d-%d)", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money, month, day, year);
		Log("logs/- Recompenzas a Usuarios.log", log);
  		GivePlayerCash(giveplayerid, money);
    	format(string, sizeof(string), "Diste una recompensa de $%d a %s.", money, GetPlayerNameEx(giveplayerid));
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "! Recibiste una recompensa de $%d del %s %s.", money, rank, GetPlayerNameEx(playerid));
	   	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:verjuicios(playerid, params[])
{
    if(OrgGob(playerid))
    {

    	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Deben estar almenos 1 juez en línea.");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Juicios pendientes:");

		new
			string[53],
			fCounter;

		foreach(Player, i)
		{
			if(Info[i][pJudgeJailType] == 1)
			{
	  			if(Info[i][pJailed] == 2)
		    	{
					format(string, sizeof(string), "Sentenciado: %s - Carceleta (transporte completado) - tiempo: %d.",GetPlayerNameEx(i),Info[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
				else
				{
    				format(string, sizeof(string), "Sentenciado: %s - Carceleta (siendo transportado) - tiempo: %d.",GetPlayerNameEx(i),Info[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
			}
			else if(Info[i][pJudgeJailType] == 2)
			{
				if(Info[i][pJailed] == 5)
    			{
					format(string, sizeof(string), "Sentenciado: %s - Prisión (transporte completado) - tiempo: %d.",GetPlayerNameEx(i),Info[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
				else
				{
    				format(string, sizeof(string), "Sentenciado: %s - Prisión (siendo transportado) - tiempo: %d.",GetPlayerNameEx(i),Info[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
			}
		}
		if(fCounter <= 0)
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "No hay jucios pendientes.");
		}
  	}
	return 1;
}

CMD:revertir(playerid, params[])
{

    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	if(Info[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando (4).");

	new
		giveplayerid;

	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /revertir (playerid)");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar el comando de esta manera.");
	if(IsPlayerConnected(giveplayerid))
	{
 		if(Info[giveplayerid][pJudgeJailTime] != 0)
   		{
     		new rank[64], division[64], employer[64], string[52 + (MAX_PLAYER_NAME * 2)];
       		GetPlayerFactionInfo(playerid, rank, division, employer);
			if(Info[giveplayerid][pJailTime] != 0) Info[giveplayerid][pJailTime] = 0;
			Info[giveplayerid][pJudgeJailTime] = 0;
   			switch(Info[giveplayerid][pSex])
			{
			    case 1: format(string, sizeof(string), "%s %s ha revertido el juicio de %s, ahora él es libre de irse.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    case 2: format(string, sizeof(string), "%s %s ha revertido el juicio de %s, ahora ella es libre de irse.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			}
			for(new i = 1; i < 5; i++)
			{
		    	SendRadioMessage(i, TEAM_RADIO_COLOR, string);
			}
			SendRadioMessage(7, TEAM_RADIO_COLOR, string);
			SendRadioMessage(9, TEAM_RADIO_COLOR, string);
   		}
	    else
   		{
        	SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene una sentencia de prisión.");
   		}
	}
	return 1;
}

CMD:perdonar(playerid, params[])
{
    if(Presidente(playerid))
    {
		new
			giveplayerid;

        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /perdonar (playerid)");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar el comando de esta manera!");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(Info[giveplayerid][pJudgeJailTime] != 0)
		    {
				new string[58 + (MAX_PLAYER_NAME * 2)];
		        if(Info[giveplayerid][pJailTime] != 0) Info[giveplayerid][pJailTime] = 0;
		        Info[giveplayerid][pJudgeJailTime] = 0;
		        switch(Info[giveplayerid][pSex])
				{
				    case 1: format(string, sizeof(string), "Presidente %s ha perdonado a %s de todos sus crimenes, él ahora es libre.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				    case 2: format(string, sizeof(string), "Presidente %s ha perdonado a %s de todos sus crimenes, ella ahora es libre.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				}
				for(new i = 1; i < 5; i++)
				{
			    	SendRadioMessage(i, TEAM_RADIO_COLOR, string);
				}
				SendRadioMessage(7, TEAM_RADIO_COLOR, string);
				SendRadioMessage(9, TEAM_RADIO_COLOR, string);
		    }
		    else
	   		{
	       		SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador no está en una condena de prisión.");
	   		}
		}
	}
 	else
  	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Sólo el presidente puede usar este comando.");
  	}
	return 1;
}

CMD:scarcel(playerid, params[])
{
    if(Info[playerid][pMember] != 9)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del sistema judicial.");
  		return 1;
	}
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando (3).");

	new string[128], giveplayerid, jailtime, reason[64];
	if(sscanf(params, "dds", giveplayerid, jailtime, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /scarcel (playerid) (tiempo 1-60 minutos) (razón) (Cmd para sentenciar a Cárcel)");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto contigo mismo.");
	if(IsPlayerConnected(giveplayerid))
	{
		if(!Info[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está sentenciado.");
		if(jailtime < 1 && jailtime > 60) return SendClientMessageEx(playerid, COLOR_WHITE, "Tiempo no puede ser mayor a 60 minutos.");
		Info[giveplayerid][pJudgeJailType] = 1;
		Info[giveplayerid][pJudgeJailTime] = jailtime*60;
		format(string, sizeof(string), "Sentenciaste a %s a cumplir %d minutos en la cárcel, razón: %s", GetPlayerNameEx(giveplayerid), jailtime, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Usted ha sido sentenciado a cumplir %d minutos en la cárcel por %s, razón: %s", jailtime, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		if(OrgGob(giveplayerid))
		{
		    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,"* Usted ha sido auto eliminado de su facción al ser condenado a la cárcel, ahora eres un civil más.");
	 		Info[giveplayerid][pTeam] = 3;
	 		gTeam[giveplayerid] = Info[giveplayerid][pTeam];
			Info[giveplayerid][pMember] = 0;
			Info[giveplayerid][pRank] = 0;
			Info[giveplayerid][pChar] = 0;
			OnDuty[playerid] = 0;
			Info[giveplayerid][pLeader] = 0;
			SetPlayerToTeamColor(giveplayerid);
   			pTazer[giveplayerid] = 0;
		}
	}
	return 1;
}

CMD:sprision(playerid, params[])
{
    if(Info[playerid][pMember] != 9)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del sistema judicial.");
  		return 1;
	}
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando (3).");
	new string[128], giveplayerid, jailtime, reason[64];
	if(sscanf(params, "dds", giveplayerid, jailtime, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sprision (playerid) (tiempo 1-1200 minutos) (razón) (Cmd para sentenciar a Prisión)");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto contigo mismo.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(!Info[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no se está condenado.");
		if(jailtime < 1 && jailtime > 1200) return SendClientMessageEx(playerid, COLOR_WHITE, "Tiempo no puede ser mayor a 1200 minutos.");
		Info[giveplayerid][pJudgeJailType] = 2;
		Info[giveplayerid][pJudgeJailTime] = jailtime*60;
		format(string, sizeof(string), "Sentenciaste a %s a cumplir %d minutos en prisión, razón: %s", GetPlayerNameEx(giveplayerid), jailtime, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Usted ha sido sentenciado a cumplir %d minutos en prisión por %s, razón: %s", jailtime, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		if(OrgGob(giveplayerid))
		{
		    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,"* Usted ha sido auto eliminado de su facción al ser condenado a la prisión, ahora eres un civil más.");
	 		Info[giveplayerid][pTeam] = 3;
	 		gTeam[giveplayerid] = Info[giveplayerid][pTeam];
			Info[giveplayerid][pMember] = 0;
			Info[giveplayerid][pRank] = 0;
			Info[giveplayerid][pChar] = 0;
			OnDuty[playerid] = 0;
			Info[giveplayerid][pLeader] = 0;
			SetPlayerToTeamColor(giveplayerid);
   			pTazer[giveplayerid] = 0;
		}
	}
	return 1;
}

CMD:qfa(playerid, params[])
{
	new giveplayerid, string[73];
	if(!sscanf(params, "u", giveplayerid))
	{
	    if(!Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		if(IsPlayerConnected(giveplayerid))
		{
			format(string,sizeof(string),"La última persona que mató a %s, fue %s.",GetPlayerNameEx(giveplayerid),QFA[giveplayerid]);
			SendClientMessageEx(playerid,COLOR_ROJO,string);
		}
		else return SendClientMessageEx(playerid,COLOR_YELLOW,"El jugador no esta conectado.");
	}
	else
	{
		format(string,sizeof(string),"La última persona que te mató fue %s.", QFA[playerid]);
		SendClientMessageEx(playerid,COLOR_ROJO,string);
		if(Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qfa (id)");
	}
	return 1;
}

CMD:intest(playerid, params[])
{
	new giveplayerid, string[73];
	if(!sscanf(params, "u", giveplayerid))
	{
	    if(!Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes autorización.");
		if(IsPlayerConnected(giveplayerid))
		{
			format(string,sizeof(string),"Los intentos realizados por %s, fueron: %d",GetPlayerNameEx(giveplayerid),Info[giveplayerid][pInTest]);
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
		}
		else return SendClientMessageEx(playerid,COLOR_GREY,"El jugador no está conectado.");
	}
	else
	{
		format(string,sizeof(string),"Intentos en el test de rol: %d", Info[playerid][pInTest]);
		SendClientMessageEx(playerid,COLOR_YELLOW,string);
		if(Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_WHITE, "/Intest (ID)");
	}
	return 1;
}

CMD:ddnext(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pAdminZC] >= 8)
	{
		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddDescription] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d está disponible para el uso.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
		return 1;
	}
	return 1;
}

CMD:shopdoor(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pShopTech] == 1)
	{
		new string[128], doorid;
		if(!sscanf(params, "d", doorid))
		{
		    if (DDoorsInfo[doorid][ddDescription] == 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Esa puerta ya está creada, Utiliza: /ddedit");
				return 1;
	    	}
			if(doorid >= MAX_DDOORS)
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "Door ID Inválida!");
				return 1;
			}
			GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
			GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
			DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
			DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
			DDoorsInfo[doorid][ddInteriorLoad] = 0;
			DDoorsInfo[doorid][ddExteriorLoad] = 0;
			DDoorsInfo[doorid][ddVIP] = 0;
			DDoorsInfo[doorid][ddFamily] = 0;
			DDoorsInfo[doorid][ddPickupModel] = 0;
			DDoorsInfo[doorid][ddColor] = 1;
			DDoorsInfo[doorid][ddVehicleAble] = 0;
			DDoorsInfo[doorid][ddWanted] = 0;
			DDoorsInfo[doorid][ddAdmin] = 0;
        	DDoorsInfo[doorid][ddFaction] = 0;
			DDoorsInfo[doorid][ddInteriorInt] = 0;
			DDoorsInfo[doorid][ddInteriorVW] = 0;
			DDoorsInfo[doorid][dMusic] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Creaste el exterior de esta puerta, usa /ddedit para terminar de editar la puerta.");
			if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
			if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
			CreateDynamicDoor(doorid);
			SaveDynamicDoors();
			format(string, sizeof(string), "%s ha creado la DoorID %d.", GetPlayerNameEx(playerid), doorid);
			Log("logs/- Puertas Dinámicas.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /shopdoor (ID Libre)");
	}
	return 1;
}

CMD:ddedit(playerid, params[]) // Pasado a Texdraw!
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
		return 1;
	}

	new string[128], choice[32], doorid, amount;
	if(sscanf(params, "s[32]dD", choice, doorid, amount))
	{
        new editdoor[1000];
        strcat(editdoor, "- Exterior\n- Interior\n- InteriorLoad\n- ExteriorLoad\n- VIP\n- Familia\n- Faccion\n- Wanted\n- Staff\n- VehicleAble\n- Color\n- PickupModel\n- Borrar\n- Música");
        ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "/DDedit Nombre DDoorID Valor", editdoor, "Cerrar", "");
		return 1;
	}

	if(doorid >= MAX_DDOORS)
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Door ID Inválida!");
		return 1;
	}

	if(strcmp(choice, "Interior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el interior!");
		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Interior", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "InteriorLoad", true) == 0)
	{
		if(DDoorsInfo[doorid][ddInteriorLoad] == 0)
		{
			DDoorsInfo[doorid][ddInteriorLoad] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Interior Personalizado!");
		}
		else
		{
			DDoorsInfo[doorid][ddInteriorLoad] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Interior Normal!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Interior Personalizado.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "ExteriorLoad", true) == 0)
	{
		if(DDoorsInfo[doorid][ddExteriorLoad] == 0)
		{
			DDoorsInfo[doorid][ddExteriorLoad] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Exterior Personalizado!");
		}
		else
		{
			DDoorsInfo[doorid][ddExteriorLoad] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Exterior Normal!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Exterior Personalizado.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Exterior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el exterior!");
		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Exterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
	}
	else if(strcmp(choice, "Vip", true) == 0)
	{
		DDoorsInfo[doorid][ddVIP] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - VIP Nivel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - VIP Nivel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Familia", true) == 0)
	{
		DDoorsInfo[doorid][ddFamily] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Familia %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Familia.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Faccion", true) == 0)
	{
		DDoorsInfo[doorid][ddFaction] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Facción %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Facción.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Staff", true) == 0)
	{
		DDoorsInfo[doorid][ddAdmin] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Admin Nivel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Admin Nivel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Wanted", true) == 0)
	{
		DDoorsInfo[doorid][ddWanted] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Wanted %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Wanted.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Vehicleable", true) == 0)
	{
		DDoorsInfo[doorid][ddVehicleAble] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - VehicleAble %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Disponible Vehs.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Color", true) == 0)
	{
		DDoorsInfo[doorid][ddColor] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Color %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Color.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Pickupmodel", true) == 0)
	{
		DDoorsInfo[doorid][ddPickupModel] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - PickupModel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - PickupModel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	else if(strcmp(choice, "Musica", true) == 0)
	{
	    DDoorsInfo[doorid][dMusic] = amount;
		format(string, sizeof(string), "* La música de entrada fue cambiada: {99FF00}%d", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		SaveDynamicDoors();
		switch(amount)
		{
		    case 0: SendClientMessageEx(playerid, COLOR_WHITE, "Sin Canción");
        	case 1: SendClientMessageEx(playerid, COLOR_WHITE, "Género Establecido: {99FF00}BIG ROOM");
            case 2: SendClientMessageEx(playerid, COLOR_WHITE, "Género Establecido: {99FF00}Melbourne Bounce");
            case 3: SendClientMessageEx(playerid, COLOR_WHITE, "Género Establecido: {99FF00}Cumbia Pop");
            case 4: SendClientMessageEx(playerid, COLOR_WHITE, "Género Establecido: {99FF00}Reggaeton");
            case 5: SendClientMessageEx(playerid, COLOR_WHITE, "Género Establecido: {99FF00}Hip Hop");
            case 6: SendClientMessageEx(playerid, COLOR_WHITE, "Género Establecido: {99FF00}Trap");
            case 7: SendClientMessageEx(playerid, COLOR_WHITE, "Género Establecido: {99FF00}Retro");
		}
		return 1;
	}
	else if(strcmp(choice, "Borrar", true) == 0)
	{
	    if (DDoorsInfo[doorid][ddDescription] == 0)
		{
	        format(string, sizeof(string), "DoorID %d no existe.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
	    }
    	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	    DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		DDoorsInfo[doorid][ddDescription] = 0;
		DDoorsInfo[doorid][ddInteriorLoad] = 0;
		DDoorsInfo[doorid][ddExteriorVW] = 0;
		DDoorsInfo[doorid][ddExteriorInt] = 0;
		DDoorsInfo[doorid][ddInteriorVW] = 0;
		DDoorsInfo[doorid][ddInteriorInt] = 0;
		DDoorsInfo[doorid][ddExteriorX] = 0;
		DDoorsInfo[doorid][ddExteriorY] = 0;
		DDoorsInfo[doorid][ddExteriorZ] = 0;
		DDoorsInfo[doorid][ddExteriorA] = 0;
		DDoorsInfo[doorid][ddInteriorX] = 0;
		DDoorsInfo[doorid][ddInteriorY] = 0;
		DDoorsInfo[doorid][ddInteriorZ] = 0;
		DDoorsInfo[doorid][ddInteriorA] = 0;
		DDoorsInfo[doorid][ddExteriorLoad] = 0;
		DDoorsInfo[doorid][ddVIP] = 0;
		DDoorsInfo[doorid][ddFamily] = 0;
		DDoorsInfo[doorid][ddFaction] = 0;
		DDoorsInfo[doorid][ddAdmin] = 0;
		DDoorsInfo[doorid][ddWanted] = 0;
		DDoorsInfo[doorid][ddVehicleAble] = 0;
		DDoorsInfo[doorid][ddColor] = 0;
		DDoorsInfo[doorid][dPass] = 0;
		DDoorsInfo[doorid][dLocked] = 0;
		DDoorsInfo[doorid][dMusic] = 0;
		SaveDynamicDoors();
		format(string, sizeof(string), "Borraste la DoorID %d.", doorid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s a borrado DoorID %d.", GetPlayerNameEx(playerid), doorid);
		Log("logs/- Puertas Dinámicas.log", string);
		return 1;
	}
	return 1;
}

CMD:clave(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pAdminZC] < 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
		return 1;
	}
    for(new i = 0; i < sizeof(DDoorsInfo); i++)
	{
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		{
			if(DDoorsInfo[i][dPass] < 1)
                return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta ya está bloqueada.");
         	if(strcmp(DDoorsInfo[i][dPass], "Nada", true) == 0)
                return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta no está autorizada a ser bloqueada.");

			SafeDialogEx(playerid, DOORLOCK, DIALOG_STYLE_INPUT, "{00F70C}Seguridad de puerta","Ingresa la contraseña de la puerta","Ingresar","Cancelar");
			SetPVarInt(playerid, "Door", i);
		}
	}
	return 1;
}

CMD:goindoor(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 8)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /goindoor (doornumber)");
		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		if(DDoorsInfo[doornum][ddInteriorLoad])
		{
			LoadObjects(playerid);
		}
		Info[playerid][pInt] = DDoorsInfo[doornum][ddInteriorInt];
		Info[playerid][pVW] = DDoorsInfo[doornum][ddInteriorVW];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 8)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotodoor (doornumber)");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		if(DDoorsInfo[doornum][ddExteriorLoad])
		{
			LoadObjects(playerid);
		}
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		Info[playerid][pInt] = DDoorsInfo[doornum][ddExteriorInt];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		Info[playerid][pVW] = DDoorsInfo[doornum][ddExteriorVW];
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new string[128], doorid, doorname[128];

	if(sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ddname (doorid) (nombre)");

	format(DDoorsInfo[doorid][ddDescription], 128, "%s", doorname);
	SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el nombre de la puerta.");
	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	CreateDynamicDoor(doorid);
	SaveDynamicDoors();

	format(string, sizeof(string), "%s editó la DoorID %d - nombre a %s.", GetPlayerNameEx(playerid), doorid, doorname);
	Log("logs/- Puertas Dinámicas.log", string);
	return 1;
}

CMD:ddpass(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 8)
		return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");

	new string[128],
		doorid,
		doorpass[24];

	if(sscanf(params, "ds[24]", doorid, doorpass)) { SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ddpass (doorid) (pass)"); SendClientMessageEx(playerid, COLOR_WHITE, "Para remover la contraseña escribe 'nada'."); return 1; }
	format(DDoorsInfo[doorid][dPass], 24, "%s", doorpass);
	SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste la contraseña de la puerta.");
	SaveDynamicDoors();
	format(string, sizeof(string), "%s editó la DoorID %d - pass a %s.", GetPlayerNameEx(playerid), doorid, doorpass);
	Log("logs/- Puertas Dinámicas.log", string);
	return 1;
}

CMD:gotogaraje(playerid, params[])
{
if(Info[playerid][pShopTech] >= 1)
{
	new garageID;
	if(sscanf(params, "d", garageID)) return SendClientMessageEx(playerid, COLOR_WHITE, "Para ir a un garage use: /Gotogaraje [ID]");

	SetPlayerPos(playerid,GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2]);
	SetPlayerInterior(playerid, 0);
	Info[playerid][pInt] = 0;
}
return 1;
}
CMD:ginterior(playerid, params[])
{
    if(Info[playerid][pShopTech] >= 1)
	{
        new garageID,gCType;
        new strings[280];
		if(sscanf(params, "dd", garageID, gCType))
		{
		    SendClientMessageEx(playerid, COLOR_BLANCO, "Para cambiar el tipo de garage use: /Ginterior [ID] [Pequeño/Mediano/Grande]");
			return 1;
		}
		GaragesVariables[garageID][gType] = gCType;
		format(strings, sizeof(strings), "Garaje Configurado: ID %d - Interior d", garageID, gCType);
		SendClientMessageEx(playerid, COLOR_WHITE, strings);
		if(!strcmp("Sin Dueño", GaragesVariables[garageID][gOwner]))
		{
			switch(GaragesVariables[garageID][gLocked])
			{
				case 1: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
				garageID);
				case 0: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
				garageID);
			}
		}
		else
		{
			switch(GaragesVariables[garageID][gLocked])
			{
				case 1: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({FF0000}Cerrado{FFFFFF})",
				garageID);
				case 0: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({00F70C}Abierto{FFFFFF})",
				garageID);
			}
		}
		UpdateDynamic3DTextLabelText(GaragesVariables[garageID][gLabelID], -1, strings);
		SaveVarGarages(1,garageID, "Tipo",GaragesVariables[garageID][gType]);
	}
	//else NoAutorizado
	return 1;
}
CMD:gprecio(playerid, params[])
{
	if(Info[playerid][pShopTech] >= 1)
	{
	    new garageID,garagePrice;
	    new strings[280];
		if(sscanf(params, "dd", garageID, garagePrice))
		{
			return SendClientMessageEx(playerid, COLOR_BLANCO, "Para cambiar el precio del garaje use: /Gprecio [ID] [$]");
		}
		else // Garages Icono
		{
		    if(garageID < 1 || garageID > MAX_GARAGES){return SendClientMessageEx(playerid, COLOR_GREY, "* ID de garage inválido.");}
		    else
			{
				format(strings, sizeof(strings), "Cambiaste el precio del garaje ID %d a $%d.", garageID, garagePrice);
				SendClientMessageEx(playerid, COLOR_WHITE, strings);
				GaragesVariables[garageID][gPrice] = garagePrice;
				if(!strcmp("Sin Dueño", GaragesVariables[garageID][gOwner]))
				{
					switch(GaragesVariables[garageID][gLocked])
					{
						case 1: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
						garageID);
						case 0: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
						garageID);
					}
				}
				else
				{
					switch(GaragesVariables[garageID][gLocked])
					{
					    case 1: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({FF0000}Cerrado{FFFFFF})",
						garageID);
						case 0: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({00F70C}Abierto{FFFFFF})",
						garageID);
					}
				}
				UpdateDynamic3DTextLabelText(GaragesVariables[garageID][gLabelID], -1, strings);
                SaveVarGarages(1,garageID, "Precio",GaragesVariables[garageID][gPrice]);
			}
		}
	}
	//else NoAutorizado
	return 1;
}
CMD:gnivel(playerid, params[])
{
	if(Info[playerid][pShopTech] >= 1)
	{
	    new garageID,garageLevel;
	    new strings[280];
		if(sscanf(params, "dd", garageID, garageLevel))
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "Para cambiar el nivel usa: /Gnivel [ID] [Lvl]");
		}
		else // Garages Icono
		{
		    if(garageID < 1 || garageID > MAX_GARAGES){return SendClientMessageEx(playerid, COLOR_GREY, "* ID de garaje inválido.");}
		    else
			{
				format(strings, sizeof(strings), "Garaje Configurado: ID %d - Nivel %d", garageID, garageLevel);
				SendClientMessageEx(playerid, COLOR_WHITE, strings);
				GaragesVariables[garageID][gLevel] = garageLevel;
				if(!strcmp("Sin Dueño", GaragesVariables[garageID][gOwner]))
				{
					switch(GaragesVariables[garageID][gLocked])
					{
						case 1: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
						garageID);
						case 0: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
						garageID);
					}
				}
				else
				{
					switch(GaragesVariables[garageID][gLocked])
					{
					    case 1: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({FF0000}Cerrado{FFFFFF})",
						garageID);
						case 0: format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({00F70C}Abierto{FFFFFF})",
						garageID);
					}
				}
				UpdateDynamic3DTextLabelText(GaragesVariables[garageID][gLabelID], -1, strings);
                SaveVarGarages(1,garageID, "Nivel",GaragesVariables[garageID][gLevel]);
			}
		}
	}
	//else NoAutorizado
	return 1;
}
CMD:agaraje(playerid, params[])
{
    //#pragma unused params
	if(getPlayerGaragesID(playerid) >= 1)
	{
	    new x = getPlayerGaragesID(playerid);
	    new string[280];
	    new strings[280];
	    switch(GaragesVariables[x][gLocked])
		{
			case 0: return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/agaraje{FFFFFF} para abrir el garaje de tu casa.");
			case 1:
			{
				format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({00F70C}Abierto{FFFFFF})",
				x);
                UpdateDynamic3DTextLabelText(GaragesVariables[x][gLabelID], -1, strings);
				GaragesVariables[x][gLocked] = 0;
			    format(string, sizeof(string), "* %s toma el control y abre el garaje de su casa.", GetPlayerNameEx(playerid));
		    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    SaveVarGarages(1,x, "Locked",GaragesVariables[x][gLocked]);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No tienes la llave de este garaje.");
	return 1;
}
CMD:cgaraje(playerid, params[])
{
	if(getPlayerGaragesID(playerid) >= 1)
	{
	    new x = getPlayerGaragesID(playerid);
	    new string[280];
	    new strings[280];
	    switch(GaragesVariables[x][gLocked])
		{
			case 0:
			{
				format(strings, sizeof(strings), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({FF0000}Cerrado{FFFFFF})",
				x);
                UpdateDynamic3DTextLabelText(GaragesVariables[x][gLabelID], -1, strings);
				GaragesVariables[x][gLocked] = 1;
				format(string, sizeof(string), "* %s toma el control y cierra el garaje de su casa.", GetPlayerNameEx(playerid));
		    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SaveVarGarages(1,x, "Locked",GaragesVariables[x][gLocked]);
			}
			case 1: return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/cgaraje{FFFFFF} para cerrar el garaje de tu casa.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No tienes la llave de este garaje.");
	return 1;
}
CMD:moverg(playerid, params[])
{
	if(Info[playerid][pShopTech] >= 1)
	{
	    new garageID, subject[32];
		if(sscanf(params, "ds[32]", garageID, subject))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "Para mover un garaje use: /Moverg [ID de Garage] [Exterior/Interior]");
		}
		else
		{
		    if(garageID < 1 || garageID > MAX_GARAGES) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage invalida.");
            if(strcmp(subject, "exterior", true) == 0)
			{
			    GetPlayerPos(playerid, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2]);
                GetPlayerFacingAngle(playerid, GaragesVariables[garageID][gExteriorPos][3]);
				DestroyDynamic3DTextLabel(GaragesVariables[garageID][gLabelID]);
			    DestroyDynamicPickup(GaragesVariables[garageID][gPickupID]);
				if(!strcmp("Sin Dueño", GaragesVariables[garageID][gOwner]))
				{
				    new labelString[256];
				    switch(GaragesVariables[garageID][gLocked])
				    {
				        case 1: format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
						garageID);
				        case 0: format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
						garageID);
				    }
				    GaragesVariables[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
					GaragesVariables[garageID][gPickupID] = CreateDynamicPickup(19524, 23, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 0, 0, -1, 250);
				}
				else
				{
				    new labelString[256];
				    switch(GaragesVariables[garageID][gLocked])
				    {
					    case 1: format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({FF0000}Cerrado{FFFFFF})",
						garageID);
						case 0: format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({00F70C}Abierto{FFFFFF})",
						garageID);
				    }

				    GaragesVariables[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
					GaragesVariables[garageID][gPickupID] = CreateDynamicPickup(19522, 23, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 0, 0, -1, 250);
				}
				SendClientMessage(playerid, COLOR_WHITE, "- Cambiaste el exterior del garaje!");
			}
			else if(strcmp(subject, "interior", true) == 0)
			{
			    GetPlayerFacingAngle(playerid, GaragesVariables[garageID][gInteriorPos][3]);
			    GetPlayerPos(playerid, GaragesVariables[garageID][gInteriorPos][0], GaragesVariables[garageID][gInteriorPos][1], GaragesVariables[garageID][gInteriorPos][2]);
			    GaragesVariables[garageID][gInterior] = GetPlayerInterior(playerid);
			    SendClientMessage(playerid, COLOR_WHITE, "- Cambiaste el exterior del garaje!");
			}
			saveGarages(garageID);
		}
	}

	return 1;
}
CMD:vendergaraje(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnected(playerid))
	{
	    new garageID = getPlayerGaragesID(playerid);
	    if(garageID < 1) return 1;
	    new labelString[256];
		GivePlayerCash(playerid, GaragesVariables[garageID][gPrice]/2);
		Tax -= GaragesVariables[garageID][gPrice]/2;
        format(GaragesVariables[garageID][gOwner], MAX_PLAYER_NAME, "Sin Dueño");
        format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})", garageID);
        DestroyDynamicPickup(GaragesVariables[garageID][gPickupID]);
        DestroyDynamic3DTextLabel(GaragesVariables[garageID][gLabelID]);
		GaragesVariables[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		GaragesVariables[garageID][gPickupID] = CreateDynamicPickup(19524, 23, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 0, 0, -1, 250);
		GaragesVariables[garageID][gLocked] = 1;
		format(labelString, sizeof(labelString), "Garaje Vendido: Las ganancias por esta venta es de %d", GaragesVariables[garageID][gPrice]/2);
		SendClientMessageEx(playerid, COLOR_WHITE, labelString);
		saveGarages(garageID);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "No conectado");
	return 1;
}
CMD:staffvgaraje(playerid, params[])
{
    if(Info[playerid][pShopTech] >= 1)
	{
        new garageID = strval(params);
		if(!isnull(params))
		{
		    if(garageID < 1 || garageID > MAX_GARAGES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de garaje inválido.");
	        new labelString[256];
	        format(GaragesVariables[garageID][gOwner], MAX_PLAYER_NAME, "Sin Dueño");
	        DestroyDynamicPickup(GaragesVariables[garageID][gPickupID]);
	        DestroyDynamic3DTextLabel(GaragesVariables[garageID][gLabelID]);
			format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})", garageID);
			GaragesVariables[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			GaragesVariables[garageID][gPickupID] = CreateDynamicPickup(19524, 23, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 0, 0, -1, 250);
			GaragesVariables[garageID][gLocked] = 1;
			format(labelString, sizeof(labelString), "* Vendiste con comando administrativo el garaje ID %d.", garageID);
			SendClientMessageEx(playerid, COLOR_WHITE, labelString);
		    saveGarages(garageID);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Para vender un garaje debes usar: /Staffvgarage [ID]");
    }
    return 1;
}
CMD:creargaraje(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No conectado.");
    if(Info[playerid][pShopTech] >= 1)
	{
    	new Float: floatPos[3];

		if(!strcmp(params, "exterior", true))
		{
	        GetPlayerPos(playerid, floatPos[0], floatPos[1], floatPos[2]);
            SetPVarFloat(playerid, "pBeX", floatPos[0]);
            SetPVarFloat(playerid, "pBeY", floatPos[1]);
            SetPVarFloat(playerid, "pBeZ", floatPos[2]);
            SetPVarInt(playerid, "gExt", 1);
            SendClientMessageEx(playerid, COLOR_WHITE, "* El exterior del garaje fue configurado!");
		}
        else if(!strcmp(params, "interior", true))
		{
        	GetPlayerPos(playerid, floatPos[0], floatPos[1], floatPos[2]);

            SetPVarFloat(playerid, "pBiX", floatPos[0]);
            SetPVarFloat(playerid, "pBiY", floatPos[1]);
            SetPVarFloat(playerid, "pBiZ", floatPos[2]);
			SetPVarInt(playerid, "pBiID", GetPlayerInterior(playerid));
            SetPVarInt(playerid, "gInt", 1);
            SendClientMessageEx(playerid, COLOR_WHITE, "* El interior del garaje fue configurado!");
		}
        else if(!strcmp(params, "completar", true))
		{
        	if(GetPVarInt(playerid, "gExt") != 1 || GetPVarInt(playerid, "gInt") != 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Todavia no has configurado el interior/exterior del garage.");
		    new i,labelString[256];
			for(new x = 1; x < MAX_GARAGES; x++)
			{
			    if(GaragesVariables[x][gType] == 0)
			    {
			        i = x;
			        printf("ID LIBRE %d",x);
			        break;
				}
			}
			if(GaragesVariables[i][gType] == 0)
			{
				GaragesVariables[i][gExteriorPos][0] = GetPVarFloat(playerid, "pBeX");
			    GaragesVariables[i][gExteriorPos][1] = GetPVarFloat(playerid, "pBeY");
			    GaragesVariables[i][gExteriorPos][2] = GetPVarFloat(playerid, "pBeZ");

			    GaragesVariables[i][gInteriorPos][0] = GetPVarFloat(playerid, "pBiX");
			    GaragesVariables[i][gInteriorPos][1] = GetPVarFloat(playerid, "pBiY");
			    GaragesVariables[i][gInteriorPos][2] = GetPVarFloat(playerid, "pBiZ");

			    GaragesVariables[i][gInterior] = GetPVarInt(playerid, "pBiID");

 		        format(GaragesVariables[i][gOwner], MAX_PLAYER_NAME, "Sin Dueño");
 		        format(GaragesVariables[i][gName], 32, "Nombre del Garage");

 		        GaragesVariables[i][gLocked] = 1;
 		        GaragesVariables[i][gPrice] = 50000;
 		        GaragesVariables[i][gLevel] = 5;

		        format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n({00F70C}En Venta{FFFFFF})",
				i);

		        GaragesVariables[i][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[i][gExteriorPos][0], GaragesVariables[i][gExteriorPos][1], GaragesVariables[i][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				GaragesVariables[i][gPickupID] = CreateDynamicPickup(19524, 23, GaragesVariables[i][gExteriorPos][0], GaragesVariables[i][gExteriorPos][1], GaragesVariables[i][gExteriorPos][2], 0, 0, -1, 250);

				saveGarages(i);

			    DeletePVar(playerid, "pBeX");
			    DeletePVar(playerid, "pBeY");
			    DeletePVar(playerid, "pBeZ");
			    DeletePVar(playerid, "pBiX");
			    DeletePVar(playerid, "pBeY");
			    DeletePVar(playerid, "pBeZ");
			    DeletePVar(playerid, "pBiID");

			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, GaragesVariables[i][gExteriorPos][0], GaragesVariables[i][gExteriorPos][1], GaragesVariables[i][gExteriorPos][2]);
		        return SendClientMessageEx(playerid, COLOR_WHITE, "* Garage creado!");

			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Ya no hay slots disponibles para crear garages.");

		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /creargarage [interior/exterior/completar]");
	}
	return 1;
}
CMD:comprargaraje(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
        for(new x = 0; x < MAX_GARAGES; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2]))
			{
				if(!strcmp(GaragesVariables[x][gOwner], "Sin Dueño", true))
				{
				    if(GaragesVariables[x][gPrice] <= 0) return SendClientMessageEx(playerid, COLOR_BLANCO, "- Este garaje no esta a la venta, fue bloqueado por un administrador.");
					if(getPlayerGaragesID(playerid) >= 1) return SendClientMessageEx(playerid, COLOR_BLANCO, "- No puedes comprar más garajes tras tener 1!");
					if(Info[playerid][pLevel] < GaragesVariables[x][gLevel])
					{
					    new string[128];
                    	format(string, sizeof(string), "Tú necesitas ser nivel {FF0000}%d{FFFFFF} para comprar este garaje.", GaragesVariables[x][gLevel]);
                    	SendClientMessageEx(playerid, COLOR_WHITE, string);
                    	return 1;
                	}
					if(GetPlayerCash(playerid) >= GaragesVariables[x][gPrice])
					{
						GivePlayerCash(playerid,-GaragesVariables[x][gPrice]);
						Tax += GaragesVariables[x][gPrice];
						new labelString[256];
						new Nombre[MAX_PLAYER_NAME];
		   				GetPlayerName(playerid, Nombre, sizeof(Nombre));
						strcpy(GaragesVariables[x][gOwner], Nombre, MAX_PLAYER_NAME);
						DestroyDynamicPickup(GaragesVariables[x][gPickupID]);
						switch(GaragesVariables[x][gLocked])
						{
						    case 1: format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({FF0000}Cerrado{FFFFFF})", x);
							case 0: format(labelString, sizeof(labelString), "{FFFFFF}Garaje de la casa: Nº %d\n{FFFFFF}({00F70C}Abierto{FFFFFF})", x);
						}
						UpdateDynamic3DTextLabelText(GaragesVariables[x][gLabelID], -1, labelString);
						GaragesVariables[x][gPickupID] = CreateDynamicPickup(19522, 23, GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2], 0, 0, -1, 250);
						SendClientMessageEx(playerid, COLOR_BLANCO, "- Compraste un garaje para esta propiedad, si no eres el dueño se vende sin rembolso!");
						saveGarages(x);
					}
					else return SendClientMessageEx(playerid, COLOR_BLANCO, "No tienes dinero para comprar el garaje de esta casa!");
				}
				else return SendClientMessageEx(playerid, COLOR_BLANCO, "Lástima, ya tiene dueño este garaje lo cual no puedes.");
			}
		}
    }
	return 1;
}
CMD:velocidad(playerid, params[])
{
	new string[128], speed;
 	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Usted necesita a la conexión primero antes de la utilización de cualquier mando.");
	if(sscanf(params, "i", speed)) return SendClientMessage(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/velocidad (#){FFFFFF} para poner una determinada velocidad.");
	if(speed < 0) return SendClientMessage(playerid, COLOR_GREY, "KM inválidos!");
	Speedlimit[playerid] = speed;
	if(speed == 0) format(string, sizeof(string), "{FFFFFF}La velocidad del vehículo ahora es: {C993FF}Normal", speed);
    else format(string, sizeof(string), "{FFFFFF}Velocidad actual:{C993FF} %d KM", speed);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
// Información de comandos retirados.
CMD:reply(playerid, params[]) return SendClientMessageEx(playerid, COLOR_ROJO, "(Inf. CMD):{FFFFFF} Este comando fue retirado, ya que ahora hay nuevos normativas de trabajos administrativos.");
CMD:solicitarsoporte(playerid, params[]) return SendClientMessageEx(playerid, COLOR_ROJO, "(Inf. CMD):{FFFFFF} Para solicitar soporte administrativo, use /soporte");
CMD:darrol(playerid, params[]) return SendClientMessageEx(playerid, COLOR_ROJO, "(Inf. CMD):{FFFFFF} Para enseñar rol utilice: {2EDFFF}/Irzona");
CMD:nmute(playerid, params[]) return SendClientMessageEx(playerid, COLOR_ROJO, "(Inf. CMD):{FFFFFF} El comando /nmute fue retirado, coloque /noduda");
CMD:apgarage(playerid, params[]) return SendClientMessageEx(playerid, COLOR_ROJO, "(Inf. CMD):{FFFFFF} El comando /apgarage fue retirado, coloque /garaje");
CMD:llaves(playerid, params[]) return SendClientMessageEx(playerid, COLOR_ROJO, "(Inf. CMD):{FFFFFF} El comando /llaves fue retirado, coloque /gps");
CMD:mandarls(playerid, params[]) return SendClientMessageEx(playerid, COLOR_ROJO, "(Inf. CMD):{FFFFFF} El comando /mandarls fue retirado, coloque /mandarla");
CMD:aliminarcheckpoints(playerid, params[]) return SendClientMessageEx(playerid, COLOR_ROJO, "(Inf. CMD):{FFFFFF} El comando /eliminarcheckpoints fue retirado, coloque /limpiarmapa");
CMD:cambiarclaveusuario(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
    new accountName[24], password[24];
    if(sscanf(params, "s[MAX_PLAYER_NAME]s[18]", accountName, password)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarclaveusuario (Nombre_Apellido) (password)");
    if(INI_Exist(accountName))
	{
	    if(strlen(accountName) > 24) return SendClientMessageEx(playerid, COLOR_WHITE, "la cuenta no puede tener más de 24 letras/números.");
		new string[128], PlayerFile[MAX_PLAYER_NAME + 32];
		format( PlayerFile , sizeof PlayerFile, "accounts/%s.ini", accountName);
	    new INI:File = INI_Open(PlayerFile);
	    INI_SetTag(File,"data");
     	INI_WriteInt(File,"Password",udb_hash(password));
		INI_Close(File);
        format(string, sizeof(string), "Cambiaste la contraseña de %s. Ahora es '%s'", accountName, password);
        SendClientMessageEx(playerid, COLOR_YELLOW, string);
        format(string, sizeof(string), "ATENCIÓN: Contraseña de %s fue cambiada por %s", accountName, GetPlayerNameEx(playerid));
        Log("logs/- Contraseñas Cambiadas (Administrativo).log", string);
        return ABroadCast(COLOR_LIGHTRED,string,2);
    }
    else SendClientMessageEx( playerid, COLOR_WHITE, "Esta cuenta no existe." );
    return 1;
}
CMD:adminconcesionario(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_WHITE,"No puedes usar este comando.");
	if(IsPlayerConnected(playerid))
	    SendClientMessageEx(playerid, COLOR_GENERAL, "Comandos administrativos para los Concesionarios:");
	    SendClientMessageEx(playerid, COLOR_WHITE, "/editarconce - /editarcoche - /vConcesionario - cConcesionario");
	    SendClientMessageEx(playerid, COLOR_WHITE, "/crearautoconce /destroyautoconce /crearconce [Crear Concesionario] /destruirconce [Borrar Concesionario]");
	return 1;
}


CMD:editarconce(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, CDSInfo[d][cdRadius], CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ])) {
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                SetPVarInt(playerid, "editingcdveh", -1);
                SetPVarInt(playerid, "editingcdvehpos", 0);
                SetPVarInt(playerid, "editingcdvehnew", 0);
                new listitems[] = "1 Nuevo Coche\n2 Mis Coches\n3 Mejorar\n4 Ganancias";
                SafeDialogEx(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Elige y continuar", listitems,"Ok","Cancelar");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "No eres dueño de este Concesionario.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_ROJO, "! Debes estar de pie dentro del radio del Concesionario.");
    return 1;
}

CMD:editarcoche(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
    if (Info[playerid][pAdminZC] < 10)
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando.");
        return 1;
    }
	new vehicleid = GetPlayerVehicleID(playerid);
    new v, d;
    v = GetCarDealershipVehicleId(vehicleid);
    d = GetCarDealershipId(vehicleid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "! Usted no está en un coche.");
    if(v != -1 && d != -1)
	{
        if(IsPlayerOwnerOfCDEx(playerid, d))
		{
            SetPVarInt(playerid, "editingcd", d);
            SetPVarInt(playerid, "editingcdveh", v);
            SetPVarInt(playerid, "editingcdvehpos", 0);
            SetPVarInt(playerid, "editingcdvehnew", 0);
            new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Coche";
            SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Concesionario:", listitems,"Ok","Cancelar");
            return 1;
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Usted no es dueño de este Concesionario.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} El coche no es parte de un Concesionario.");
    }
    return 1;
}

CMD:vconcesionario(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] < 10)
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando.");
        return 1;
    }
	new string[128];

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		{
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                format(string,128,"¿Seguro que deseas vender este Concesionario de coches por $%d?\n.", CDSInfo[d][cdPrice] / 2);
                SafeDialogEx(playerid,DIALOG_CDSELL,DIALOG_STYLE_MSGBOX,"{00F70C} Advertencia:",string,"Vender","Cancelar");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Usted no es el dueño de este Concesionario de coches.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Usted tiene que estar cerca de un Concesionario de coches.");
    return 1;
}

CMD:cconcesionario(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] < 10)
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando.");
        return 1;
    }
	for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		{
            if(!CDSInfo[d][cdOwned])
			{
                if(GetPVarInt(playerid, "Cash") < CDSInfo[d][cdPrice])
				{
                    SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes suficiente dinero para comprar el Concesionario de coches.");
                    return 1;
                }
                SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-CDSInfo[d][cdPrice]);
                SetPlayerOwnerOfCD(playerid, d);
                PlayerPlayMusic(playerid);
                SendClientMessageEx(playerid, COLOR_GREEN, " Felicitaciones, por su nueva compra.");
                SendClientMessageEx(playerid, COLOR_WHITE, " Usa /ayuda para ver la sección de Concesionario para ver más información.");
                SendClientMessageEx(playerid, COLOR_GRAD1, " Por favor establece la posición que quieres que los coches den spawn.");
                SendClientMessageEx(playerid, COLOR_GRAD2, " Ponte en el lugar deseado, una vez listo usa el botón FIRE (CLICK).");
                SendClientMessageEx(playerid, COLOR_WHITE, " Nota: Si no estableces los coches sus clientes no podrán comprar autos.");
                SetPVarInt(playerid, "editingcdvehpos", 2);
                SetPVarInt(playerid, "editingcd", d);
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "Este Concesionario no está en venta.");
            }
        }
    }
    return 1;
}

CMD:crearautoconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] < 10)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " No puedes usar este comando.");
        return 1;
    }

    new string[128], price, dealershipid, modelid;
    if(sscanf(params, "ddd", price, dealershipid, modelid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /crearautoconce [price] [dealership] [modelid]");

    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerFacingAngle(playerid, A);
    new cdvehicleid = CreateCarDealershipVehicle(dealershipid, modelid, X, Y, Z, A, price);
    if(cdvehicleid == -1)
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} ha alcanzado el límite de autos por concesionario.");
    }
    else
	{
        format(string, sizeof(string), " Coche creado con la ID %d.", cdvehicleid);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:destroyautoconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] < 10)
	{
        SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
        return 1;
    }

    new string[128], vehid;
    if(sscanf(params, "d", vehid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /destroyautoconce [vehicleid]");

    DestroyCarDealershipVehicle(GetCarDealershipId(vehid), GetCarDealershipVehicleId(vehid));
    SavecDealership(GetCarDealershipId(vehid));
    format(string, sizeof(string), " Coche eliminado - ID %d.", vehid);
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:crearconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	 if (Info[playerid][pAdminZC] < 10)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " No puedes usar este comando.");
        return 1;
    }

    new string[128], price, radius, message[64];
    if(sscanf(params, "dds[64]", price, radius, message)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /crearconce [precio] [radio] [mensaje]");

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    new dealershipid = CreateCarDealership(X, Y, Z, radius, price, message);
    if(dealershipid == -1)
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Concesionarios llegó al limite.");
    }
    else
	{
        format(string, sizeof(string), " Concesionario creado - ID %d.", dealershipid);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:destruirconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] < 10)
	{
        SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando.");
        return 1;
    }

    new string[128], dealershipid;
    if(sscanf(params, "d", dealershipid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /destruirconce [ID]");

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		{
            DestroyCarDealership(d);
            format(string, sizeof(string), " Concesionario destruido - ID %d.", d);
            SendClientMessageEx(playerid, COLOR_WHITE, string);
            return 1;
        }
    }
    if(dealershipid > MAX_CARDEALERSHIPS) return 1;
    if(dealershipid < 0) return 1;
    DestroyCarDealership(dealershipid);
    format(string, sizeof(string), " Concesionario destruido - ID %d.", dealershipid);
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    return 1;
}
CMD:dudaretiradox(playerid, params[])
{
	new Texto[81], count;
  	if(JustDuda[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Para enviar otra duda debes esperar 60 segundos.");
	if(sscanf(params, "s[81]", Texto)) return SendClientMessage(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/duda (texto){FFFFFF} para enviar una duda sobre el servidor.");
	count = 0;
	HayDuda[playerid] = 1;
	new string[500];
	format(string, 322, "%s (ID %d) tiene una duda: %s", GetPlayerNameEx(playerid),playerid, Texto);
    for(new i=0;i<MAX_PLAYERS;i++)
    {
		if(IsPlayerConnected(i))
		{
			if(IsPlayerConnected(i) == 1)
			{
                if (Info[playerid][pAdminZC] >= 2 )
				{
					SendClientMessage(i, COLOR_DUDA, string);
					count++;
				}
			}
		}
	}
	if(count != 0)
	{
		format(string, sizeof(string), "* Duda enviada!",count);
		SendClientMessage(playerid,COLOR_GREY,string);
		JustDuda[playerid] = 60;
	}
	if(count == 0)return SendClientMessage(playerid, COLOR_ROJO, "! {FFFFFF}En estos momentos no hay nadie que pueda responder tus dudas, puedes ir a /foro.");
	return 1;
}
zcmd(aduda, playerid,params[])
{
	if (Info[playerid][pAdminZC] >= 2)
	{
	    new id;
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Para aceptar una duda coloque: /Aduda (ID)");
		if(HayDuda[id] == 0) return SendClientMessage(playerid, COLOR_GREY, "* Este jugador no tiene una duda, o ya fue aceptada por otro moderador/administrador.");
		new string[128];
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador no conectado!");
		format(string, sizeof(string), "! {FFFFFF}%s aceptó tu duda, en segundos te responderá.",GetPlayerNameEx(playerid));
		SendClientMessage(id,COLOR_AT,string);
		SendClientMessage(playerid,COLOR_GREY,"Responda la duda del usuario con /w o ir a su ubicación.");
		HayDuda[id]=0;

	}
	return 1;
}
zcmd(rduda, playerid,params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 2)
	{
		new id;
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Para rechazar una duda coloque: /Rduda (ID)");
		if(HayDuda[id] == 0) return SendClientMessage(playerid, COLOR_GREY, "* Este jugador no tiene una duda, o ya fue aceptada por otro moderador/administrador.");
		new string[128];
        if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador no conectado!");
		format(string, sizeof(string), "La administración ha rechazado tu duda, puedes leer:{FF0000} /Reglas",GetPlayerNameEx(playerid));
		SendClientMessage(id,-1,string);

	}
	return 1;
}

CMD:togduda(playerid, params[])
{
	if (!gNewbie[playerid]){
		gNewbie[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "Deshabilitaste el canal de ayuda.");
	}
	else{
		gNewbie[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "Habilitaste el canal de ayuda.");
	}
	return 1;
}

CMD:darobjeto(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7){
		new string[128], giveplayerid, object, slot;
		if(sscanf(params, "ddd", giveplayerid, object, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darobjeto (playerid) (objeto) (slot)");
		if(slot < 0 || slot > 8) return SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido, De 0 a 8.");{
			if (IsPlayerConnected(giveplayerid)){
				PlayerToyInfo[giveplayerid][slot][ptModelID] = object;
				PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
				format(string, sizeof(string), "Entregaste a %s el objeto ID %d en el slot %d", GetPlayerNameEx(giveplayerid), object, slot);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "Recibiste un nuevo objeto (/toys) de un administrador!");
			}
			return 1;
		}
	}
	return 1;
}

CMD:smstodos(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /smstodos (texto)");
	format(string, sizeof(string), "[SMS]: %s, Destinatario: Desconocido",params);
 	SendMoleMessage(COLOR_YELLOW, string);
	return 1;
}

CMD:famchat(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] < 8) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /famchat (Mensaje para miembros en las familias)");
	new string[128];
	format(string, sizeof(string), "{CC0000}[Enc. Familias]{FFFFFF} %s: %s", GetPlayerNameEx(playerid),params);
	foreach(Player, i)
	{
		if(Info[i][pFMember] < 255)
		{
			SendClientMessageEx(i, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:facchat(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pFactionModerator] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /facchat (Mensaje para miembros en las facciones)");
	new string[128];
	format(string, sizeof(string), "{FCFF03}[Enc. Facciones]{FFFFFF} %s: %s", GetPlayerNameEx(playerid),params);
	foreach(Player, i){
		if(Info[i][pMember] >= 1){
			SendClientMessageEx(i, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:showsound(playerid, params[]){
	new sound;
    if(sscanf(params, "d", sound)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /showsound (ID)");
    PlayerPlaySound(playerid, sound, 0,0,0);
    return 1;
}

CMD:dobleexp(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pShopTech] == 1){
		new string[128], giveplayerid, hours, invoice[64];
		if(sscanf(params, "uds[64]", giveplayerid, hours, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /expdoble (playerid) (Horas) (Detalles)");
		format(string, sizeof(string), " %s te dio %d horas de doble experiencia, cada subsidio recibirás doble EXP y en trabajos también.", GetPlayerNameEx(playerid), hours);
		SendClientMessageEx(giveplayerid,COLOR_YELLOW,string);
		format(string, sizeof(string), " Estableciste su experiencia doble a %d horas a %s.", hours,GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid,COLOR_YELLOW,string);
		Info[giveplayerid][pDobleExp] += hours;
		format(string, sizeof(string), "[SHOP ExpDoble] %s dio %d horas a %s - Pagó fue de %s", GetPlayerNameEx(playerid), hours,GetPlayerNameEx(giveplayerid), invoice);
		Log("logs/- Dobles Experiencias.log", string);
	}
	return 1;
}

CMD:dedicados(playerid, params[]){
	if(!IsPlayerConnected(playerid)) return 1;
	new string[2500];
	foreach(Player, i)
	{
		if(Info[i][pConnectTime] >= 1000)
		{
			format(string, sizeof(string), "%s%s", string, GetPlayerNameEx(i));
			format(string, sizeof(string), "%s\n", string);
		}
	}
	format(string, sizeof(string), "%s\n", string);
	SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_LIST,"{FF00B4}• Usuarios Dedicados",string,"Salir","");
	return 1;
}

CMD:venderfichasvip(playerid, params[]){
	new string[128], giveplayerid, amount, price;
	if(sscanf(params, "ddd", giveplayerid, amount, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderfichasvip (playerid) (Monto) (Precio)");
	if(amount < 1 || amount > 99999999) { SendClientMessageEx(playerid, COLOR_WHITE, "* Los valores no pueden ser mayores a 99999999 gramos ni menores a 1."); return 1; }
	if(price < 1) { SendClientMessageEx(playerid, COLOR_WHITE, "El precio no puede ser menor que 1."); return 1; }
	if(IsPlayerConnected(playerid)){
		if(IsPlayerConnected(giveplayerid)){
			if(ProxDetectorS(8.0, playerid, giveplayerid)){
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes venderte a ti mismo.");
				format(string, sizeof(string), "* Has ofrecido a %s, %d fichas VIP por $%d.", GetPlayerNameEx(giveplayerid), amount, price);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s quiere venderte %d fichas VIP por $%d, (Usa: /aceptar fichasvip para comprar).", GetPlayerNameEx(playerid), amount, price);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				FOffer[giveplayerid] = playerid;
				FPrice[giveplayerid] = price;
				return FAmount[giveplayerid] = amount;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválida.");
	return 1;
}

CMD:armasvip(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 798.4911,-1416.1251,1016.4688)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás cerca del {FFFF00}VIP{FFFFFF} locker!");
	switch(Info[playerid][pVIP])
	{
		case 1: SafeDialogEx(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "{FF33CC}Casillero VIP", "Botiquín HP (Gratis)\nArmadura ($15000)\nArmas\nCambiar Ropa\nTrabajos\nVIP Color", "Seleccionar", "Cancelar");
		case 2: SafeDialogEx(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "{FF33CC}Casillero VP", "Botiquín HP (Gratis)\nArmadura ($15000)\nArmas\nCambiar Ropa\nTrabajos\nVIP Color", "Seleccionar", "Cancelar");
		case 3,4,5: SafeDialogEx(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "{FF33CC}Casillero VIP", "Botiquín HP (Gratis)\nArmadura (Gratis)\nArmas\nCambiar Ropa\nTrabajos\nVIP Color", "Seleccionar", "Cancelar");
		default: SendClientMessageEx(playerid, COLOR_RED, "No eres miembro VP, puedes comprar mediante /Foro.");
	}
	return 1;
}

CMD:ponerrestriccion(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 6)
	{
		new string[128], giveplayerid, hours;
		if(sscanf(params, "dd", giveplayerid,hours)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /weaponr (playerid) (horas)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pWRestricted] == 0)
			{
			    Info[giveplayerid][pWRestricted] = hours;
				format(string, sizeof(string), "* Diste a %s %i horas de restricción de armas.", GetPlayerNameEx(giveplayerid),hours);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* Administrador %s te dio %i horas de restricción de armas.", GetPlayerNameEx(playerid),hours);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "[ATENCIÓN]: %s dio restricción de armas a %s por %d horas.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),hours);
  				ABroadCast(COLOR_GENERAL,string,2);
				return 1;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "* Ese jugador ya tiene restricción de armas.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválida.");
	}
	return 1;
}
CMD:invitaramigo(playerid, params[]){
	if(Info[playerid][pVIP] >= 2){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /invitaramigo (playerid)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pVIP] < 1){
				new days, daytime;
				if(Info[playerid][pVIP] == 2){ daytime = 7; }
				else if(Info[playerid][pVIP] >= 3) { daytime = 1; }
				ConvertTime(gettime() - Info[playerid][pVIPInviteDay], .ctd=days);
				if(days >= daytime || Info[giveplayerid][pVIP] >= 4 || Info[playerid][pAdminZC] == 10){
					Info[giveplayerid][pVIP] = 1;
					Info[giveplayerid][pTempVIP] = 10800;
					Info[giveplayerid][pBuddyInvited] = 1;
					format(string, sizeof(string), "Invitaste a %s a ser un {FFFF00}BRONCEVIP{FFFFFF} por %d horas.", GetPlayerNameEx(giveplayerid),3);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Fuiste invitado por %s a ser un {FFFF00}BRONCEVIP{FFFFFF} por %d horas. Disfrutalo!", GetPlayerNameEx(playerid), 3);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "BUDDY INVITE: %s ha invitado %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					Log("logs/- Invitaciones VIP.log", string);
					Info[playerid][pVIPInviteDay] = gettime();
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo puedes invitar a una persona como {FFFF00}PLATAVIP{FFFFFF} cada 7 días y a una como {FFFF00}GOLDVIP{FFFFFF} cada día.");
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya es {FFFF00}VIP{FFFFFF}.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está conectado.");
	}
	return 1;
}

CMD:recompensas(playerid, params[])
{
    new string[128];
    SendClientMessageEx(playerid, COLOR_YELLOW, "Información de Recompensas:");
    format(string, sizeof(string), "Horas de Recompensa Total: %d Horas.", Info[playerid][pRHours]);
    SendClientMessageEx(playerid, COLOR_GREEN, string);
    format(string, sizeof(string), "Horas de Usuario Dedicado: %d Horas.", Info[playerid][pDPHours]);
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    if(Info[playerid][pRHours] >= 150)
    {
        if(Info[playerid][pDPHours] == 150) return SendClientMessageEx(playerid, COLOR_YELLOW, "Eres un Miembro Dedicado!");
    	format(string, sizeof(string), "Te faltan %i Horas para ser un Miembro Dedicado.", 150-Info[playerid][pDPHours]);
        SendClientMessageEx(playerid, COLOR_YELLOW, string);
        return 1;
	}
    else
    {
    	format(string, sizeof(string), "Te faltan %i Horas para ser un Usuario Dedicado.", 150-Info[playerid][pRHours]);
    	SendClientMessageEx(playerid, COLOR_YELLOW, string);
    }
	return 1;
}
CMD:ads(playerid, params[]) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[Inf.]:{FFFFFF} Nuevo sistema de anuncios para más comodidad: {2EDFFF}/Anuncio");

CMD:anuncio(playerid, params[]) {
	if(gPlayerLogged{playerid} == 0) {
		SendClientMessageEx(playerid, COLOR_RED, "No has ingresado al servidor correctamente.");
	}
	else if(GetPVarType(playerid, "Injured") == 1) {
		SendClientMessageEx(playerid, COLOR_RED, "No puedes hacer anuncios mientras estás herido.");
	}
	else if(Info[playerid][pEstado] != 0) {
		SendClientMessageEx(playerid, COLOR_RED, "No puedes hacer anuncios en este momento.");
	}
	else if(Info[playerid][pJailTime] > 0) {
		SendClientMessageEx(playerid, COLOR_RED, "No puedes hacer anuncios en prisión.");
	}
	else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{2EDFFF}Anuncios - Cadena Global", "Compra y Venta\nClasificados\nBusco/Ofrezco Empleo\n{FF0000}Deep Web", "Seleccionar", "Cancelar");
	return 1;
}

CMD:cinturon(playerid, params[]){
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
	new string[50 + MAX_PLAYER_NAME];
    if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 0){
        Seatbelt[playerid] = 1;
        if(IsABike(GetPlayerVehicleID(playerid))){format(string, sizeof(string), "* %s agarra su casco, y se lo pone.", GetPlayerNameEx(playerid));}
        else { format(string, sizeof(string), "* %s estira su brazo, acto seguido se coloca el cinturón.", GetPlayerNameEx(playerid)); }
    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 1){
        Seatbelt[playerid] = 0;
        if(IsABike(GetPlayerVehicleID(playerid))){format(string, sizeof(string), "* %s pone las manos en su casco, y se lo quita.", GetPlayerNameEx(playerid));}
        else { format(string, sizeof(string), "* %s estira su brazo, acto seguido desprende el cinturon.", GetPlayerNameEx(playerid)); }
    }
    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    return 1;
}

CMD:vercinturon(playerid, params[]){
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vercinturon (Jugador)");
    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT) return SendClientMessageEx(playerid,COLOR_GREY,"Ese jugador no está en un vehiculo!");
    if (ProxDetectorS(9.0, playerid, giveplayerid)){
		new string[128];
        new stext[4];
        if(Seatbelt[giveplayerid] == 0) { stext = "sin"; }
        else { stext = "con"; }
        if(IsABike(GetPlayerVehicleID(playerid))){
            format(string, sizeof(string), "%s está %s casco." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);

            format(string, sizeof(string), "* %s mira a %s para revisar si tiene casco puesto.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else{
            format(string, sizeof(string), "%s está %s cinturón de seguridad." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);

            format(string, sizeof(string), "* %s observa a travez de la ventana de %s, mirando si usa el cinturón.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
    }
    else { SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de ese jugador!"); }
    return 1;
}

CMD:alcoholemia(playerid, params[]){
    new giveplayerid;
    if(OrgGob(playerid))
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "/Alcoholemia (ID Usuario)");
	{
		if(ProxDetectorS(10.0, playerid, giveplayerid))
		{
        	new string[128];
			new controlalcoholemia[100];
        	format(controlalcoholemia, sizeof(controlalcoholemia), "{FFFFFF}• %s:\t\t\t\t{FF0000} 0,%d", GetPlayerNameEx(giveplayerid), Info[giveplayerid][pAlcohol]);
			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{FF0000}[X] Resultados", controlalcoholemia, "{FFFFFF}Cerrar", "");
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s coloca una bombilla en la boca de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(3.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "* %s toma aire y sopla continuamente.", GetPlayerNameEx(giveplayerid));
        	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está cerca.");
	}
    return 1;
}

CMD:darpremium(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pShopTech] == 1)
		{
		new string[128], giveplayerid, level;
		if(sscanf(params, "dd", giveplayerid, level)){
			SendClientMessageEx(playerid, COLOR_WHITE, "USA: /darpremium [playerid] [level]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Niveles y Nombres: |0| Ninguno |1| Bronce |2| Plata |3| Oro |4| Platino |5| Moderador");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid)){
			if(giveplayerid != INVALID_PLAYER_ID){
				if(level < 0 || level > 5) return SendClientMessageEx(playerid, COLOR_WHITE, "Niveles disponibles: 1/5");
				new NotiVIP[2000];
				Info[giveplayerid][pVIP] = level;
				Info[giveplayerid][pTempVIP] = 0;
				Info[giveplayerid][pBuddyInvited] = 0;
				new hour, minuite, second;
				new day, month, year;
				gettime(hour, minuite, second);
				getdate(day, month, year);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				if(month == 12)
				{
				    Info[giveplayerid][pVIPDateM] = 1;
				}
				else
				{
				    new total;
					total = month + 1;
				    Info[giveplayerid][pVIPDateM] = total;
				}
				Info[giveplayerid][pVIPDateD] = day;
				if(level == 0){
					if (Info[playerid][pAdminZC] < 7){
						format(string, sizeof(string), "[Administración]: %s ha establecido a %s, VIP level a Ninguno (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[Administración]: %s ha establecido a %s, VIP level a Ninguno (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "El administrador %s te retiró la credencial premium, si crees que es un abuso, puedes realizar el reclamo en /foro", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_ROJO, string);
                    Info[giveplayerid][pVIPDateD] = -1;
                    Info[giveplayerid][pVIPDateM] = -1;
					format(string, sizeof(string), "%s le retiró a %s (IP: %s) una credencial premium en la fecha %d/%d/%d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, day,month,year);
					Log("logs/- Usuarios Retirados (VIP).log", string);
					return 1;
				}
				if(level == 1){
					if (Info[playerid][pAdminZC] < 10){
						format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Bronce].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Bronce].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
		        	format(NotiVIP, sizeof(NotiVIP), "\t{FFFFFF}A partir de ahora tienes membrecía VIP\n{FF00B4}__________________________________________________\n\n{FF00B4}•{FFFFFF} Otorgador: %s\n{FF00B4}•{FFFFFF} Nivel: Bronce (%d)\n{FF00B4}•{FFFFFF} Hora: %d:%d:%d\n{FF00B4}•{FFFFFF} Fecha: %d/%d/%d\n{FF00B4}__________________________________________________\n\n{FF00B4}- {FFFFFF}Tome imágenes por seguridad.", GetPlayerNameEx(playerid), level, hour, minuite, second, year, month, day);
			        ShowPlayerDialog(giveplayerid, 1000, DIALOG_STYLE_MSGBOX, "{FF00B4}• {FFFFFF}Estadísticas Premium", NotiVIP, "{FFFFFF}Cerrar", "");
					PlayerPlaySound(giveplayerid, 1056, 0.0, 0.0, 0.0);

					format(string, sizeof(string), "%s le dio a %s (IP: %s) una credencial de bronce (%d) en la fecha: %d/%d/%d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, year,month,day);
					Log("logs/- Usuarios nuevos VIP.log", string);
					return 1;
				}
				if(level == 2){
					if (Info[playerid][pAdminZC] < 10){
						format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Plata].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Plata].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
		        	format(NotiVIP, sizeof(NotiVIP), "\t{FFFFFF}A partir de ahora tienes membrecía VIP\n{FF00B4}__________________________________________________\n\n{FF00B4}•{FFFFFF} Otorgador: %s\n{FF00B4}•{FFFFFF} Nivel: Plata (%d)\n{FF00B4}•{FFFFFF} Hora: %d:%d:%d\n{FF00B4}•{FFFFFF} Fecha: %d/%d/%d\n{FF00B4}__________________________________________________\n\n{FF00B4}- {FFFFFF}Tome imágenes por seguridad.", GetPlayerNameEx(playerid), level, hour, minuite, second, year, month, day);
			        ShowPlayerDialog(giveplayerid, 1000, DIALOG_STYLE_MSGBOX, "{FF00B4}• {FFFFFF}Estadísticas Premium", NotiVIP, "{FFFFFF}Cerrar", "");
					PlayerPlaySound(giveplayerid, 1056, 0.0, 0.0, 0.0);

					format(string, sizeof(string), "%s le dio a %s (IP: %s) una credencial de plata (%d) en la fecha: %d/%d/%d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, year,month,day);
					Log("logs/- Usuarios nuevos VIP.log", string);
					return 1;
				}
				if(level == 3){
					if (Info[playerid][pAdminZC] < 10){
						format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Oro].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Oro].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
		        	format(NotiVIP, sizeof(NotiVIP), "\t{FFFFFF}A partir de ahora tienes membrecía VIP\n{FF00B4}__________________________________________________\n\n{FF00B4}•{FFFFFF} Otorgador: %s\n{FF00B4}•{FFFFFF} Nivel: Oro (%d)\n{FF00B4}•{FFFFFF} Hora: %d:%d:%d\n{FF00B4}•{FFFFFF} Fecha: %d/%d/%d\n{FF00B4}__________________________________________________\n\n{FF00B4}- {FFFFFF}Tome imágenes por seguridad.", GetPlayerNameEx(playerid), level, hour, minuite, second, year, month, day);
			        ShowPlayerDialog(giveplayerid, 1000, DIALOG_STYLE_MSGBOX, "{FF00B4}• {FFFFFF}Estadísticas Premium", NotiVIP, "{FFFFFF}Cerrar", "");
					PlayerPlaySound(giveplayerid, 1056, 0.0, 0.0, 0.0);

					format(string, sizeof(string), "%s le dio a %s (IP: %s) una credencial de oro (%d) en la fecha: %d/%d/%d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, year,month,day);
					Log("logs/- Usuarios nuevos VIP.log", string);
					return 1;
				}
				if(level == 4){
					if (Info[playerid][pAdminZC] < 10){
						format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Platino].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Platino].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
		        	format(NotiVIP, sizeof(NotiVIP), "\t{FFFFFF}A partir de ahora tienes membrecía VIP\n{FF00B4}__________________________________________________\n\n{FF00B4}•{FFFFFF} Otorgador: %s\n{FF00B4}•{FFFFFF} Nivel: Platino (%d)\n{FF00B4}•{FFFFFF} Hora: %d:%d:%d\n{FF00B4}•{FFFFFF} Fecha: %d/%d/%d\n{FF00B4}__________________________________________________\n\n{FF00B4}- {FFFFFF}Tome imágenes por seguridad.", GetPlayerNameEx(playerid), level, hour, minuite, second, year, month, day);
			        ShowPlayerDialog(giveplayerid, 1000, DIALOG_STYLE_MSGBOX, "{FF00B4}• {FFFFFF}Estadísticas Premium", NotiVIP, "{FFFFFF}Cerrar", "");
					PlayerPlaySound(giveplayerid, 1056, 0.0, 0.0, 0.0);

					// Level 5 Arms Job - Platino VIP
					Info[giveplayerid][pArmsSkill] = 401;

					format(string, sizeof(string), "%s le dio a %s (IP: %s) una credencial de platino (%d) en la fecha: %d/%d/%d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, year,month,day);
					Log("logs/- Usuarios nuevos VIP.log", string);
					return 1;
				}
				if(level == 5){
					if (Info[playerid][pAdminZC] < 10){
						format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Moderador].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[Aviso Premium]: %s establecio el nivel VIP al usuario %s [Moderador].", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(NotiVIP, sizeof(NotiVIP), "\t{FFFFFF}A partir de ahora tienes membrecía VIP\n{FF00B4}__________________________________________________\n\n{FF00B4}•{FFFFFF} Otorgador: %s\n{FF00B4}•{FFFFFF} Nivel: Moderador (%d)\n{FF00B4}•{FFFFFF} Hora: %d:%d:%d\n{FF00B4}•{FFFFFF} Fecha: %d/%d/%d\n{FF00B4}__________________________________________________\n\n{FF00B4}- {FFFFFF}Tome imágenes por seguridad.", GetPlayerNameEx(playerid), level, hour, minuite, second, year, month, day);
			        ShowPlayerDialog(giveplayerid, 1000, DIALOG_STYLE_MSGBOX, "{FF00B4}• {FFFFFF}Estadísticas Premium", NotiVIP, "{FFFFFF}Cerrar", "");
					PlayerPlaySound(giveplayerid, 1056, 0.0, 0.0, 0.0);

					format(string, sizeof(string), "%s le dio a %s (IP: %s) una credencial de moderador (%d) en la fecha: %d/%d/%d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, year,month,day);
					Log("logs/- Usuarios nuevos VIP.log", string);
					return 1;
				}
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	return 1;
}

CMD:msjvip(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7){
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjvip (Mensaje)");
		new string[128];
		format(VIPMOTD, sizeof(VIPMOTD), "%s", params);
		format(string, sizeof(string), "[Administración]: %s ha cambiado el mensaje VIP a: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_ORANGE, string, 4);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje vip.");
		SaveMOTDs();
	}
	return 1;
}

CMD:togvip(playerid, params[]){
	if(Info[playerid][pVIP] > 0 || Info[playerid][pAdminZC] >= 7){
		switch(Info[playerid][pVIPCHAT]){
			case 0:{
				Info[playerid][pVIPCHAT] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Chat VIP habilitado. Utiliza /vip (texto) para hablar.");
			}
			case 1:{
				Info[playerid][pVIPCHAT] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "Chat VIP deshabilitado.");
			}
		}
	}
	return 1;
}
CMD:vip(playerid, params[])
{
	if(Info[playerid][pVIP] > 0 || Info[playerid][pAdminZC] >= 7){
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vip (Mensaje - Chat)");
		if(VIPTimer[playerid] > 0){
			format(string, sizeof(string), "Debes esperar %d segundos para hablar de nuevo por este canal.", VIPTimer[playerid]);
			SendClientMessageEx(playerid, COLOR_GREY, string);
			return 1;
		}
		if(Info[playerid][pVIPCHAT] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes el canal deshabilitado, /togvip para re-habilitarlo!");
		switch(Info[playerid][pAdminZC]){
		    case 10: format(string, sizeof(string), "(( Dueño )) %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		    case 11: format(string, sizeof(string), "(( Programador )) %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		}
		switch(Info[playerid][pVIP]){
		    case 1:{
				format(string, sizeof(string), "(( VIP Bronce )) %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
				VIPTimer[playerid] = 0;
			}
			case 2: {
				format(string, sizeof(string), "(( VIP Plata )) %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
				VIPTimer[playerid] = 0;
			}
			case 3:
			{
				format(string, sizeof(string), "(( VIP Oro )) %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
				VIPTimer[playerid] = 0;
			}
			case 4:{
				format(string, sizeof(string), "(( VIP Platino )) %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
				VIPTimer[playerid] = 0;
			}
			case 5: format(string, sizeof(string), "(( VIP Moderador )) %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		}
		if (Info[playerid][pVIP] >= 1 || Info[playerid][pAdminZC] >= 2){
			SendVIPMessage(COLOR_YELLOW2, string);
		}
		Log("logs/- Vip Chat.log", string);
	}
	return 1;
}
CMD:regaloatodos(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 10){
    	if(GiftAllowed){
			new string[128];
      		format(string, sizeof(string), "Inf Regalos: %s ha enviado regalos a todos los usuarios.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL, string, 2);
      		format(string, sizeof(string), "¡El administrador {FFFF00}%s{FFFFFF} ha enviado regalos a todos los usuarios!", GetPlayerNameEx(playerid));
			BroadCast(COLOR_WHITE, string);
			GiftAllowed = 0;
			foreach(Player, i)
			{
			    GiftPlayer(i);
			    Info[i][pGiftTime] = 3600;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Este comando ya fue usado, puedes usarlo en el próximo subsidio.");
	}
	return 1;
}
CMD:horaregalo(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /horaregalo (playerid)");
    if(Info[playerid][pAdminZC] >= 9){
		if(giveplayerid != INVALID_PLAYER_ID)
		{
		    format(string, sizeof(string), "[Administración]: %s reseteó el tiempo de regalo a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW, string, 2);
		    Info[giveplayerid][pGiftTime] = 0;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está conectado.");
	}
	return 1;
}

CMD:spawncasa(playerid, params[]){
    if( Info[playerid][pPhousekey] != INVALID_HOUSE_ID){
        if(Info[playerid][pVIP] >= 3){
        	switch(Info[playerid][pTypeSpawn]){
				case 0:{
            		Info[playerid][pTypeSpawn] = 1;
            		SendClientMessageEx( playerid, COLOR_YELLOW, "!{FFFFFF} Ahora aparecerás en tu casa cuando mueras." );
				}
				case 1:{
            		Info[playerid][pTypeSpawn] = 0;
            		SendClientMessageEx( playerid, COLOR_YELLOW, "!{FFFFFF} Ahora aparecerás en el hospital cuando mueras." );
				}
			}
		}
        else return SendClientMessageEx( playerid, COLOR_YELLOW, "!{FFFFFF} Debes ser a partir del VIP Oro para utilizar este comando." );
    }
    else SendClientMessageEx( playerid, COLOR_WHITE, "No eres dueño de una casa." );
    return 1;
}

CMD:automensaje(playerid, params[]){
	if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No eres {FFFF00}VIP{FFFFFF}.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /automensaje [texto]");
	new string[128];
	if(strlen(params) >= 1 && strlen(params) < 63){
		format(Info[playerid][pAutoTextReply], 64, "%s", params);
		format(string, sizeof(string), "Cambiaste el auto mensaje de respuesta: %s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Tu automensaje no puede tener más de 64 letras ni menos de 1.");
	return 1;
}
	zcmd(repararpremium, playerid, params[])
	{
    	if(!IsAtRepVip(playerid)) return Message(playerid, COLOR_BLANCO, "- Para reparar tu vehículo premium debe ser en tu garaje o una gasolinera de LA!");
        if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Necesitas ser premium");
			{
			new engine;
			if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes de tener el motor apagado. ({5ABAFF}pulsa [N]{FFFFFF}).");
			SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    		RepairVehicle(GetPlayerVehicleID(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Vehículo Premium reparado.");
			new string[128];
			format(string, sizeof(string), "* [Premium] %s (( Ha reparado su vehiculo. )) *", GetPlayerNameEx(playerid));
    		ProxDetector(30.0, playerid, string, 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
			}
		return 1;
    }

	zcmd(skinpremium, playerid, params[]){
 	    if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "{FF0000}[ERROR]:{FFFFFF} Necesitas ser premium");
 	    if(!sscanf(params, "i", params[0]))
        {
            if(params[0] > 0 && params[0] < 311)
            {
            Info[playerid][pChar] = params[0];
			SetPlayerSkin(playerid, Info[playerid][pChar]);
            new string[128];
			format(string, sizeof(string), "* [Premium] %s se ha cambiado el skin!", GetPlayerNameEx(playerid));
    		ProxDetector(30.0, playerid, string, 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
			}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utilize: /Skin <ID>");
 	    }
		return 1;
	}
CMD:darfichasvip(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pShopTech] == 1){
		new string[128], giveplayerid, amount, invoice[32];
		if(sscanf(params, "dds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /darfichasvip (playerid) (cantidad) (cantidad)");
		Info[giveplayerid][pVTokens] += amount;
		format(string, sizeof(string), "{FFFFFF}[{FFFF00}Inf. Club VIP{FFFFFF}]: Recibiste %d fichas del {FFFF00}Club VIP{FFFFFF} por un miembro de la administración.", amount, GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "{2EDFFF}[FICHASVIP] %s a %s, dio %d Tokens VIP - Detalles %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice, GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		Log("logs/- Fichas VIP.log", string);
	}
	else SendClientMessageEx(playerid, -1, "No puedes usar este comando.");
	return 1;
}

CMD:bloquear(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pBanAppealer] >= 1){
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /bloquear (player/id) (razón)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] > Info[playerid][pAdminZC]){
				format(string, sizeof(string), "[ATENCIÓN]:La cuenta %s ha sido autobaneado, razón: Intento de baneo a un adminisrador", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				Info[playerid][pBannedZC] = 2;
				UnloadPlayerVehicles(playerid);
				Kick(playerid);
				return 1;
			}
			else{
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "ATENCIÓN: %s(IP:%s) was banned by %s, reason: %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason,month,day,year);
				Log("logs/- Cuentas Bloqueadas.log", string);
				format(string, sizeof(string), "[Inf. Cuentas]: La cuenta %s fue bloqueada por un administrador, razón: %s", GetPlayerNameEx(giveplayerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				SetTimerEx("TimerBAN",1000,false,"d",giveplayerid);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	return 1;
}

CMD:banear(playerid, params[]){

	if (Info[playerid][pBanAppealer] >= 1){
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /banear (player) (razón)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] > Info[playerid][pAdminZC]){
				format(string, sizeof(string), "(Baneos): %s ha sido auto baneado, razón: Intentó Abusar", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_CSTAFF,string,2);
				Info[playerid][pBannedZC] = 2;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				return 1;
			}
			else{
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "(Baneos): El usuario %s fue baneado por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_CSTAFF, string);
				SetTimerEx("TimerBANIP",1000,false,"d",giveplayerid);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	return 1;
}

CMD:kick(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if (Info[playerid][pAdminZC] >= 2){
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "/Kick (playerid) (razón)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] >= Info[playerid][pAdminZC]){
				format(string, sizeof(string), "[Administración]: %s ha sido auto expulsado, razón: Intentar usar /kick a un administrador mayor.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string, (Info[playerid][pAdminZC] == 1) ? (1) : (2));
				SetTimerEx("TimerKICK",1000,false,"d",playerid);
				return 1;
			}
			else{
				new year, month,day;
				getdate(year, month, day);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "ATENCIÓN: %s (IP:%s) fue expulsado por %s, razón: %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason,month,day,year);
				Log("logs/- Kicks.log", string);
				if(Info[playerid][pAdminZC] == 1) Log("logs/- Moderador.log", string);
				format(string, sizeof(string), "(Expulsiones): %s fue expulsado por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_CSTAFF, string);
				SetTimerEx("TimerKICK",1000,false,"d",giveplayerid);
			}
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	return 1;
}
CMD:stilsabelarcon(playerid, params[]){
	new string[128];
	for(new loop=0; loop<10; loop++)  SendClientMessageEx(playerid, COLOR_ROSADOC,"No, Stil no sabe la rcon, por lo tanto no puedes darte administrador :'(");
 	format(string, sizeof(string), "* %s intentó de poner la clave rcon, lo cual fue kickeado del servidor automáticamente.", GetPlayerNameEx(playerid));
  	ABroadCast(COLOR_ROJO,string,2);
  	Kick(playerid);
	return 1;
	}
CMD:buscar(playerid, params[]){
	new string[128];
	if(!Hitman(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No eres de la agencia hitman.");
	if(UsedFind[playerid]){
		format(string, sizeof(string), "Tienes que esperar %d segundos para buscar de nuevo.", UsedFind[playerid]);
		return SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /buscar (playerid)");
	if(IsPlayerConnected(giveplayerid)){
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
		if(GetPlayerInterior(giveplayerid)!=0) return SendClientMessageEx(playerid, COLOR_WHITE, "Está persona está en un interior.");
		if(Info[giveplayerid][pAdminZC] >= 7) return SendClientMessageEx(playerid, COLOR_WHITE, "No está disponible buscar a está persona.");
		new reload, level = Info[playerid][pRank];
		switch(level){
		    case 1: reload = 90;
		    case 2: reload = 70;
		    case 3: reload = 60;
		    case 4: reload = 40;
		    case 5: reload = 20;
		    case 6: reload = 5;
		}
	    new Float:X[3];
	    GetPlayerPos(giveplayerid, X[0], X[1], X[2]);
	    SetPlayerCheckpoint(playerid,X[0], X[1], X[2], 4.0);
		new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(giveplayerid, zone, sizeof(zone));
		format(string, sizeof(string), "%s - su última posición fue en %s.", GetPlayerNameEx(giveplayerid), zone);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		UsedFind[playerid] = reload;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	return 1;
}

CMD:verregalo(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pShopTech] == 1){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /verregalo (playerid)");
		new rtxt[18];
		if(Info[giveplayerid][pRegalo] >= 0){
		   	switch(Info[giveplayerid][pRegalo]){
				case 0:rtxt="5 USD Shop";
				case 1:rtxt="Laser Toy";
				case 2:rtxt="10 USD Shop";
				case 3:rtxt="Police Vest";
				case 4:rtxt="Custom Product";
				case 5:rtxt="SVIP 1 Mes";
				case 6:rtxt="Auto Custom";
				case 7:rtxt="BVIP 1 Mes";
				case 8:rtxt="Casa";
		   	}
			format(string, sizeof(string), "* %s(%d) Premio: %s.",GetPlayerNameEx(giveplayerid),giveplayerid,rtxt);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
        else return SendClientMessageEx(playerid, COLOR_WHITE, "No tiene ningún premio.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando");
	return 1;
}

CMD:limpiarregalo(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 7){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /limpiarregalo (playerid)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pRegalo] >= 0){
				Info[giveplayerid][pRegalo] = -1;
				format(string, sizeof(string), "[Administración]: %s ha limpiado los regalos de %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_ORANGE,string,2);
			}
			else{
				format(string, sizeof(string), "%s no ha recibído premios últimamente activos.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}

		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:lucespd(playerid, params[])
{
	if(Team_LAPD(playerid) || Team_AININT(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if(!LAPD_OrgGobCar(vehicleid) && !AININT_Vehicle(vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes estar en un vehiculo de LAPD o AININT.");
		    if(Lamp[vehicleid] == 0)
			{
				for(new i=0; i<sizeof(Offsets); i++){
                	if(Offsets[i][getID] == 560 && GetVehicleModel(vehicleid) == 560)
					{
                    	Lamp[vehicleid] = 1;
                    	SendClientMessageEx(playerid, -1, "Luces activadas correctamente.");
						light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
						AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
						return 1;
                	}
                	if(Offsets[i][getID] == 415 && GetVehicleModel(vehicleid) == 415){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 421 && GetVehicleModel(vehicleid) == 421){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 426 && GetVehicleModel(vehicleid) == 426){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 579 && GetVehicleModel(vehicleid) == 579){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 402 && GetVehicleModel(vehicleid) == 402){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 461 && GetVehicleModel(vehicleid) == 461){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 521 && GetVehicleModel(vehicleid) == 521){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 506 && GetVehicleModel(vehicleid) == 506){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
				}
            	SendClientMessageEx(playerid, -1, "{FF0000}[ERROR]:{FFFFFF} Modelos compatibles:");
            	return SendClientMessageEx(playerid, -1, "Sultan, Cheetah, Washington, Premier, Huntley, Buffalo, PCJ 600, FCR 900, Super Gt");
            }
			else
			{
            	DestroyObject(light[vehicleid]);
                Lamp[vehicleid] = 0;
                SendClientMessageEx(playerid, -1, "Luces desactivadas correctamente.");
                return 1;
			}
		}
		else return SendClientMessageEx(playerid, -1, "Debes estar en un vehiculo.");
	}
	else SendClientMessageEx(playerid, -1, "No puedes usar este comando (No eres Agente).");
	return 1;
}
zcmd(forzarsubsi, playerid, params[])
{
new string[100];
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
if(Info[playerid][pAdminZC] > 10)
{
format(string, sizeof(string), "(Subsidios): %s adelantó un subsidio para todos los usuarios.", GetPlayerNameEx(playerid));
ABroadCast(COLOR_GENERAL, string, 2);
Subsidio();
}
else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
return 1;
}
zcmd(crear, playerid, params[])
{
	if (Info[playerid][pJob] != 12 && Info[playerid][pJob2] != 12) return SendClientMessageEx(playerid,COLOR_WHITE,"No eres un Artesando.");
	if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_WHITE,"No puedes hacer esto en la prisión.");
	new string[128];
	if (GetPVarInt(playerid, "ArmsTimer") > 0)
	{
		format(string, sizeof(string), "Debes esperar %d segundo después de haber fabricado algo.", GetPVarInt(playerid, "ArmsTimer"));
		SendClientMessageEx(playerid,COLOR_WHITE,string);
		return 1;
	}
    if(GetPVarInt(playerid,"Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estás herido.");
	new giveplayerid, choice[32], weapon, price;
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_YELLOW, ">> Nombres Disponibles <<");
		SendClientMessageEx(playerid, COLOR_GRAD1, "Camara(450)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "Botiquin(200)	 Paracaídas(50)");
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /crear (playerid) (nombre)");
		return 1;
	}
	 if(strcmp(choice,"camara",true) == 0){
		if(Info[playerid][pMats] >= 450){
			Info[playerid][pMats] -= 450;
			weapon = 2;
		}
		else return SendClientMessageEx(playerid,COLOR_WHITE,"No tienes suficientes materiales para crear esto.");
	}
	else if(strcmp(choice,"hpsave",true) == 0){
		if(Info[playerid][pMats] >= 200){
			Info[playerid][pMats] -= 200;
			weapon = 3;
		}
		else return SendClientMessageEx(playerid,COLOR_WHITE,"No tienes suficientes materiales para crear esto.");
	}
	else if(strcmp(choice,"paracaidas",true) == 0){
		if(Info[playerid][pMats] >= 50){
		Info[playerid][pMats] -= 50;
			price = 50;
			weapon = 4;
		}
		else return SendClientMessageEx(playerid,COLOR_GREY,"No tienes suficientes materiales para crear esto.");
	}
	else { SendClientMessageEx(playerid,COLOR_WHITE,"Nombre inválido."); return 1; }
	if (ProxDetectorS(5.0, playerid, giveplayerid)){
		if(giveplayerid == playerid){
			format(string, sizeof(string), "Te has dado un %s.", choice);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessageEx(playerid, COLOR_GRAD1, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		switch( Info[playerid][pSex] ){
			case 1: format(string, sizeof(string), "* %s crea algo de materiales y se lo da a él mismo.", GetPlayerNameEx(playerid));
			default: format(string, sizeof(string), "* %s crea algo de materiales y se lo da a ella misma.", GetPlayerNameEx(playerid));
		}
		switch(weapon){
			case 1:{
				Info[playerid][pScrewdriver]++;
				return SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/creararma");
			}
			case 2:{
				Info[playerid][pSurveillance]++;
				return SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/ponercam /quitarcam /vercam");
			}
			case 3:{
				Info[playerid][pFirstaid]++;
				return SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/hpsave");
			}
			case 4:{
				return GivePlayerValidWeapon(playerid, 46);
			}
		}
		format(string, sizeof(string), "* Has ofrecido a %s una %s.", GetPlayerNameEx(giveplayerid), choice);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Artesano %s quiere venderte una %s. (Usa /aceptar objeto para recibirlo)", GetPlayerNameEx(playerid), choice);
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		CraftOffer[giveplayerid] = playerid;
		CraftId[giveplayerid] = weapon;
		CraftMats[giveplayerid] = price;
		format(CraftName[giveplayerid], 50, "%s", choice);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	return 1;
}

CMD:guardarcuenta(playerid, params[]){
    if(gPlayerLogged{playerid}){
        if(Info[playerid][pSavedTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Sólo puedes usar este comando cada 5 minutos.");
        Info[playerid][pSavedTime] = 300;
        GameTextForPlayer(playerid, "~y~CUENTA GUARDADA", 5000, 3);
		OnPlayerSavedStats(playerid);
    }
    return 1;
}
CMD:inventario(playerid, params[]){
    new str[98];
    SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
	SendClientMessageEx(playerid, COLOR_YELLOW, "Inventario");
	format(str, sizeof(str), "Desarmadores: %d (4)", Info[playerid][pScrewdriver]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "HP Save: %d (/hpsave)", Info[playerid][pFirstaid]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Cámara Oculta: %d  (/ponercam /quitarcam /vercam)", Info[playerid][pSurveillance]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	return 1;
}
CMD:hpsave(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la arena.");
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto ahora mismo.");
	if(Info[playerid][pFirstaid] > 0)
	{
		if(GetPVarInt(playerid, "usingfirstaid") == 0)
		{
			new string[128];
			Info[playerid][pFirstaid]--;
			SetPVarInt(playerid, "firstaid5", SetTimerEx("firstaid5", 5000, 1, "d", playerid));
			SetPVarInt(playerid, "firstaidexpire", SetTimerEx("firstaidexpire",10*60000, 0, "d", playerid));
			SetPVarInt(playerid, "usingfirstaid", 1);
			format(string, sizeof(string), "* %s usa su kit de primeros auxilos [HP Save].", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar el HP Save en este momento.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes HP Save.");
	return 1;
}
CMD:ponercam(playerid, params[])
{
	if(Info[playerid][pSurveillance] > 0)
	{
		if(GetPVarInt(playerid, "cameraactive") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Espera que tu otra cámara expire.");
		new string[128];
		Info[playerid][pSurveillance]--;
		SendClientMessageEx(playerid, COLOR_WHITE, "Pusiste tu camara, marchate y después usa /vercam. Duración de Baterias: 2 Minutos.");
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPVarInt(playerid, "cameraactive", 1);
		DestroyDynamic3DTextLabel(Camera3D[playerid]);
		Camera3D[playerid] = CreateDynamic3DTextLabel("** Una cámara pequeña **",COLOR_WHITE,X,Y,Z,4.0);
		SetPVarFloat(playerid, "cameraX", X);
		SetPVarFloat(playerid, "cameraY", Y);
		SetPVarFloat(playerid, "cameraZ", Z);
		SetPVarInt(playerid, "cameravw", GetPlayerVirtualWorld(playerid));
		SetPVarInt(playerid, "cameraint", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "cameraexpire", SetTimerEx("cameraexpire", 120000, 0, "d", playerid));
		format(string, sizeof(string), "* %s pone algo en el suelo.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una cámara oculta.");
	return 1;
}
CMD:quitarcam(playerid, params[])
{
	if(GetPVarInt(playerid, "cameraactive") == 1)
	{
		if(GetPVarInt(playerid, "camerasc") == 1)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
			TogglePlayerControllable(playerid,1);
		}
		DestroyDynamic3DTextLabel(Camera3D[playerid]);
		SendClientMessageEx(playerid, COLOR_WHITE, "Cámara destruida.");
		KillTimer(GetPVarInt(playerid, "cameraexpire"));
		DeletePVar(playerid, "cameraexpire");
		DeletePVar(playerid, "cameraactive");
		DeletePVar(playerid, "camerasc");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No hay nada para destruir.");
	return 1;
}
CMD:vercam(playerid, params[])
{
	if(GetPVarInt(playerid, "cameraactive") == 1)
	{
	    if(GetPVarInt(playerid,"Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estas herido.");
		new string[128];
		if(GetPVarInt(playerid, "camerasc") == 1)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
			TogglePlayerControllable(playerid,1);
			DeletePVar(playerid, "camerasc");
			KillTimer(GetPVarInt(playerid, "cameraexpire"));
		}
		else
		{
			format(string, sizeof(string), "* %s mira mediante una pantalla.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "La cámara va a caducar en un máximo de 2 minutos. (( %s ))", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPVarFloat(playerid, "cameraX2", X);
			SetPVarFloat(playerid, "cameraY2", Y);
			SetPVarFloat(playerid, "cameraZ2", Z);
			SetPVarInt(playerid, "cameravw2", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "cameraint2", GetPlayerInterior(playerid));
			TogglePlayerControllable(playerid,0);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ") - 30.0);
			SetPlayerCameraPos(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ") + 20.0); //viewcam on
			SetPlayerCameraLookAt(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint"));
			SetPVarInt(playerid, "camerasc", 1);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una cámara activa.");
	return 1;
}
zcmd(peaje, playerid, params[])
{
if(IsPlayerInRangeOfPoint(playerid,15.0,52.3451, -1539.8176, 4.5018))
{
if(GetPlayerCash(playerid) > 0) // Este precio es la cantidad que este debe tener mínimo para cruzar el peaje
{
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
{
MoveDynamicObject(PeajeLA_SF2, 56.23930, -1536.98804, 4.86570, 1.5, 0.00000, -340.00000, -98.40001);
SetTimer("GateClosePeajeLA_SF2", 5000, 0);
GivePlayerCash(playerid,-50); // Este es el precio a crobar para el ciudadano
GameTextForPlayer(playerid,"~w~Ingresando a ~y~Los Ángeles",2000,5);
PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"No estas en un vehiculo o no eres conductor.");
}
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"Para pasar el peaje debes tener $50, por lo tanto no podras cruzar este mismo.");
}
}
else if(IsPlayerInRangeOfPoint(playerid,15.0,62.2115, -1524.2399, 4.5018))
{
if(GetPlayerCash(playerid) > 0) // Este precio es la cantidad que este debe tener mínimo para cruzar el peaje
{
MoveDynamicObject(PeajeLA_SF1, 58.27050, -1527.54785, 4.86570, 1.5, 0.00000, -380.00000, -99.42000);
SetTimer("GateClosePeajeLA_SF1", 5000, 0);
GivePlayerCash(playerid,-50); // Este es el precio a crobar para el ciudadano
GameTextForPlayer(playerid,"~w~Saliendo de ~y~Los Ángeles",3000,5);
PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"Para pasar el peaje debes tener $50, por lo tanto no podras cruzar este mismo.");
}
}
else if(IsPlayerInRangeOfPoint(playerid,15.0,1751.86218, 533.31787, 27.38105))
{
if(GetPlayerCash(playerid) > 0) // Este precio es la cantidad que este debe tener mínimo para cruzar el peaje
{
MoveDynamicObject(PeajeLA_LV1, 1748.83765, 534.92969, 26.97870, 1.5, 0.00000, 40.00000, -19.48000);
SetTimer("GateClosePeajeLA_LV1", 5000, 0);
GivePlayerCash(playerid,-50); // Este es el precio a crobar para el ciudadano
GameTextForPlayer(playerid,"~w~Ingresando a ~y~Las Vegas",2000,5);
PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"Para pasar el peaje debes tener $50, por lo tanto no podras cruzar este mismo.");
}
}
else if(IsPlayerInRangeOfPoint(playerid,15.0,1731.53638, 530.99139, 27.90283))
{
if(GetPlayerCash(playerid) > 0) // Este precio es la cantidad que este debe tener mínimo para cruzar el peaje
{
MoveDynamicObject(PeajeLA_LV2, 1734.72253, 530.06592, 27.33740, 1.5, 0.00000, -40.00000, -18.00000);
SetTimer("GateClosePeajeLA_LV2", 5000, 0);
GivePlayerCash(playerid,-50); // Este es el precio a crobar para el ciudadano
GameTextForPlayer(playerid,"~w~Ingresando a ~y~Los Ángeles",2000,5);
PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"Para pasar el peaje debes tener $50, por lo tanto no podras cruzar este mismo.");
}
}
return 1;
}
zcmd(robobanco, playerid, params[])
{
if(AdminDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
if(Info[playerid][pAdminZC] >= 6)
{
if(Banco_Activo == 0)
{
Banco_Activo = 1;
SendClientMessageEx(playerid,COLOR_ROJO,"Robo del Banco Actividado!");
}
else if(Banco_Activo == 1)
{
Banco_Activo = 0;
SendClientMessageEx(playerid,COLOR_BLANCO,"Robo del Banco Desactivado.");
}
}
return 1;
}
zcmd(tiendacash, playerid, params[])
	{
	if(Info[playerid][pPTR] > 0)
	{
	SafeDialogEx(playerid, Tienda_OOC, DIALOG_STYLE_LIST, "{FF00B4}• Tienda Cash", "{FF00B4}— {FFFFFF}Cambiar $100.000 por 100 fichas\n{FF00B4}— {FFFFFF}Cambiar $200.000 por 200 fichas\n{FF00B4}— {FFFFFF}Cambiar $300.000 por 300 fichas\n{FF00B4}— {FFFFFF}Cambiar $400.000 por 400 fichas\n{FF00B4}— {FFFFFF}Cambiar $500.000 por 500 fichas", "Canjear", "Cancelar");
	return 1;
	} else SendClientMessageEx(playerid, COLOR_ROJO, "No tienes puntos de rol.");
	return 1;
	}
zcmd(darfichascash, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pShopTech] < 1 ) return SendClientMessage(playerid, COLOR_YELLOW,"{FFFF00}[ADM]:{FF0000} No eres el encargado de esto ó no eres admin");

	if(!sscanf(params, "di", params[0], params[1]))
	{
	if(IsPlayerConnected(params[0]))
	{
	new string[400];
	{
    Info[params[0]][pPTR] += params[1];
	format(string, sizeof(string), "[Administración]: %s {FFFFFF}ha dado {FF0000}%d{FFFFFF} Fichas Cash a {FF0000}%s",GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
	ABroadCast(COLOR_GENERAL,string,1);
	}
	} else SendClientMessageEx(playerid, COLOR_WHITE, " Jugador no conectado.");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darfichascash (ID) (Cantidad)");
	return 1;
	}

	zcmd(quitarfichascash, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pShopTech] <= 1) return SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[ADM]:{FF0000} No eres el encargado de esto ó no eres admin");
	if(!sscanf(params, "di", params[0], params[1]))
	{
	if(IsPlayerConnected(params[0]))
	{
	new string[250];
	{
	Info[params[0]][pPTR] -= params[1];
	format(string, sizeof(string), "[Administración]: %s {FFFFFF}ha quitado {FF0000}%d{FFFFFF} Fichas Cash a %s ",GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
	ABroadCast(COLOR_GENERAL,string,1);
	}
	} else SendClientMessageEx(playerid, COLOR_WHITE, " Jugador no conectado.");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "USO: /quitarfichascash (ID) (Cantidad)");
	return 1;
	}


	CMD:contrato(playerid, params[])
	{
		if (PlayerToPoint(10, playerid,1407.7058,-1307.4529,9.0442)){
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto ahora.");
		if(Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes hacer esto estando en la carcel.");

		new string[128], giveplayerid, moneys, detail[32];
		if(sscanf(params, "dds[32]", giveplayerid, moneys, detail)) return SendClientMessageEx(playerid, COLOR_WHITE, "* Escriba {B9C9CF}/contrato (usuario id) (monto) (detalles){FFFFFF} para mandar a asesinar a una persona.");

		if( moneys < 2000 || moneys > 1000000)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} No se puede hacer contratos de menos de $ 2000 o más de $ 1.000.000");
			return 1;
		}
		else if((moneys < 20000 || moneys > 1000000) && OrgGob(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} La cantidad de dinero mínimo para un agente es de $ 20.000");
			return 1;
		}
		if(Info[playerid][pLevel] < 3)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}HITMAN:{FFFFFF} Debes ser el nivel 3 para hacer un contrato.");
			return 1;
		}
		if(Info[giveplayerid][pConnectTime] < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}HITMAN:{FFFFFF} No se puede hacer contratos a los jugadores con menos de 1 horas de juego.");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			if(Hitman(giveplayerid))
			{
				SendClientMessageEx( playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} No se puede poner un contrato a un Hitman." );
			}
			else
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if( moneys >= 1000001 )
					{
						SendClientMessageEx( playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} El precio máximo del contrato es de $ 1.000.000!" );
						return 1;
					}

					if( Info[giveplayerid][pHead] >= 1000000 )
					{
						SendClientMessageEx( playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Ese jugador ya tiene un contrato maximo." );
						return 1;
					}
					if(moneys + Info[giveplayerid][pHead] >= 1000001 )
     				{
						SendClientMessageEx( playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Ese jugador ya tiene un contrato maximo." );
						return 1;
					}

					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} No te puedes hacer un contrato."); return 1; }
					new playermoney = GetPlayerCash(playerid);
					if (moneys > 0 && playermoney >= moneys)
					{
						if(strlen(detail) > 32) return SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}[INFO]:{FFFFFF} Los detalles del contrato no podrá ser superior a 32 carácteres.");
						GivePlayerCash(playerid, (0 - moneys));
						Info[giveplayerid][pHead]+=moneys;
						strmid(Info[giveplayerid][pContractBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
						strmid(Info[giveplayerid][pContractDetail], detail, 0, strlen(detail), 32);
						format(string, sizeof(string), "%s ha hecho un contrato: Matar a %s por $%d, detalles: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
						SendFamilyMessage(17, COLOR_YELLOW, string);
						format(string, sizeof(string), "* Has hecho un contrato: Matar a %s for $%d, detalles: %s.",GetPlayerNameEx(giveplayerid), moneys, detail);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						new year, month,day;
						new hour,minuite,second;
						getdate(year, month, day);
						gettime(hour,minuite,second);
						format(string, sizeof(string), "<< %s hizó un contrato: Matar a %s por $%d, detalles: %s (%d-%d-%d)(%d:%d) >>",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),moneys,detail,month,day,year,hour,minuite);
						Log("logs/- Contratos por Cabeza.log", string);
						format(string, sizeof(string), "%s hizó un contrato: Matar a %s por $%d, detalles: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
						ABroadCast(COLOR_YELLOW,string,4);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} No tienes dinero para esto.");
					}
				}
			}
		}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} Jugador especificado inválido.");
		return 1;
	}

	    zcmd(acontrato, playerid, params[])
    {
		new string[256];
    	if(HitOffer[playerid] < 999)
		{
			if(HitToGet[playerid] < 999)
			{
            	if(IsPlayerConnected(HitToGet[playerid]))
				{
                	format(string, sizeof(string), "* %s aceptó el contrato para matar a %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(HitToGet[playerid]));
                    SendClientMessageEx(HitOffer[playerid], COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* Aceptaste el contrato para matar a %s, recibirás $%d cuando completes la misión.", GetPlayerNameEx(HitToGet[playerid]), Info[HitToGet[playerid]][pHead] / 4 * 2);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "%s se le ha asignado un contrato a %s, por $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(HitToGet[playerid]),  Info[HitToGet[playerid]][pHead] / 4 * 2);
                    SendFamilyMessage(8, COLOR_YELLOW, string);
                    GoChase[playerid] = HitToGet[playerid];
                    GetChased[HitToGet[playerid]] = playerid;
                    GotHit[HitToGet[playerid]] = 1;
                    HitToGet[playerid] = 999;
                    HitOffer[playerid] = 999;
                    return 1;
				}
				else
				{
					HitToGet[playerid] = 999;
                    HitOffer[playerid] = 999;
                    return 1;
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Nadie te ha ofrecido un contrato!");
                return 1;
            }
    	}
    	return 1;
    }
	CMD:hrangos(playerid, params[])
	{
		if (!Hitman(playerid) && Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres de la agencia Hitman!");
		SendClientMessageEx(playerid, COLOR_WHITE, "{5ABAFF}|__________________ Rangos __________________|");

		new string[128];
		foreach(Player, i)
		{
			if(Hitman(i))
			{
				if( GoChase[playerid] == 999 )
				{
					format(string, sizeof(string), "* Nombre: %s | Rango %d | Hits Completados: %d | Hits Fallados: %d", GetPlayerNameEx(i),Info[i][pRank], Info[i][pCHits], Info[i][pFHits]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				else
				{
					format(string, sizeof(string), "* Nombre: %s | Rango %d | Hits Completados: %d | Hits Fallados: %d | Siguiendo: %s", GetPlayerNameEx(i),Info[i][pRank], Info[i][pCHits], Info[i][pFHits], GetPlayerNameEx(GoChase[i]));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}
		return 1;
	}
	CMD:darhit(playerid, params[])
	{
		if(Hitman(playerid))
		{
			if(Info[playerid][pRank] < 4)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Sólo rangos 4 y superiores pueden asignar contactos a la gente!");
				return 1;
			}

			new string[128], giveplayerid, targetid;
			if(sscanf(params, "dd", giveplayerid, targetid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /darhit [playerid] [ID de Objetivo]");

			if(IsPlayerConnected(giveplayerid))
			{
				if(GoChase[giveplayerid] < 999)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Ese hitman ya está ocupado con otro contrato!");
					return 1;
				}
				if(GotHit[targetid] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Otro asesino ya fue asignado ese contrato!");
					return 1;
				}
				if(IsPlayerConnected(targetid))
				{
					if(Info[targetid][pHead] == 0)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Ese objetivo no tiene un contrato con la agencia!");
						return 1;
					}

					format(string, sizeof(string), "* Ofreciste %s un contrato para matar a %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(targetid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Hitman %s te ofreció un contrato para matar a %s (Usa /acontrato), para aceptarlo.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					HitOffer[giveplayerid] = playerid;
					HitToGet[giveplayerid] = targetid;
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} La persona contratada no está en línea, utiliza /contratos!");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Ese hitman no está online");
				return 1;
			}
		}
		return 1;
	}
	CMD:borrarhit(playerid, params[])
	{
		if( Info[playerid][pAdminZC] >= 4 || Hitman(playerid) && Info[playerid][pRank] >= 5)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /deletehit [playerid]");

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Jugador no está online.");
				return 1;
			}

			if(Info[giveplayerid][pHead] >= 1 )
			{
				Info[giveplayerid][pHead] = 0;
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "<< %s has removido el contrato de %s(%d-%d-%d) >>", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), month,day,year);
				Log("logs/- Contratos por Cabeza.log", string);
				format(string, sizeof(string), "Has removido el contrato por la cabeza de %s.", GetPlayerNameEx(giveplayerid) );
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				GoChase[giveplayerid] = 999;

				foreach(Player, i)
				{
					if( HitToGet[i] == giveplayerid )
					{
						HitToGet[i] = 999;
						HitOffer[i] = 999;
					}
				}
			}
			else
			{
				SendClientMessageEx( playerid, COLOR_ROJO, "!{FFFFFF} No hay un contrato activo en ese jugador!" );
			}
		}
		return 1;
	}
	zcmd(amascara, playerid, params[]){
        if(Info[playerid][pMask] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, " Ya tienes una máscara.");
        if(Hitman(playerid)){
	    	if(PlayerToPoint(5, playerid, 1107,-323,68.66)){
            	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Cogiste una máscara, /mascara para ponertela.");
            	Info[playerid][pMask] = 1;
			}
		}
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No eres Hitman.");
		return 1;
	}
    zcmd(hits, playerid, params[])
    {
        if(Hitman(playerid)) SearchingHit(playerid);
		else SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No puedes usar este comando.");
        return 1;
    }
    CMD:tarma(playerid, params[])
	{
	if(GetPVarInt(playerid, "IsInArena") >= 1) return SendClientMessageEx(playerid, COLOR_WHITE,"{5ABAFF}PAINTBALL:{5ABAFF} No puedes hacer esto en el paintball");
	else
 	{
 	    if(tarmalimit[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Espera 60 segundos para tirar otra arma.");
		new gunID = GetPlayerWeapon(playerid);
		if(gunID != 0)
		{
			new f = MAX_ARMAS+1;
			for(new a = 0; a < sizeof(ObjCoords); a++)
			{
				if(ObjCoords[a][0] == 0.0)
				{
					f = a;
					break;
				}
			}
			if(f > MAX_ARMAS) return SendClientMessage(playerid, COLOR_ROJO, "!{FFFFFF} No puede tirar armas en éste momento, intenta más tarde."); // Éste mensaje aparece si se superó el límite [MAX_ARMAS]
		    new gunname[25];
		    new string[100];
			GetWeaponName(gunID, gunname, sizeof(gunname));
			format(string, sizeof(string), "* %s tira al suelo un/a %s.", GetPlayerNameEx(playerid), gunname);
			tarmalimit[playerid] = 60;
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, gunID);
			ObjectID[f][0] = gunID;
	        GetPlayerPos(playerid, ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]);
	        Object[f] = CreateDynamicObject(GunObjects[gunID][0],ObjCoords[f][0],ObjCoords[f][1],ObjCoords[f][2]-1,93.7,120.0,120.0);
	        RemovePlayerAttachedObject(playerid, 9);
		}
	}
 	return 1;
}


CMD:rarma(playerid, params[])
 {
 if(GetPVarInt(playerid, "IsInArena") >= 1) return SendClientMessageEx(playerid, COLOR_WHITE,"{5ABAFF}PAINTBALL:{5ABAFF} No puedes hacer esto en el paintball");

 else
 {
  new f = MAX_ARMAS+1;
  for(new a = 0; a < sizeof(ObjCoords); a++)
  {
   if(IsPlayerInRangeOfPoint(playerid, 5.0, ObjCoords[a][0], ObjCoords[a][1], ObjCoords[a][2]))
   {
    f = a;
    break;
   }
  }
  if(f > MAX_ARMAS) return SendClientMessage(playerid, 0x33AA3300, "{FF0000}[ERROR]:{FFFFFF} No estás cerca de ningún arma.");
  else
  {
      new gunname[25];
      new string[100];

   ObjCoords[f][0] = 0.0;
   ObjCoords[f][1] = 0.0;
   ObjCoords[f][2] = 0.0;

   DestroyDynamicObject(Object[f]);
   GivePlayerValidWeapon(playerid, ObjectID[f][0]);
   GetWeaponName(ObjectID[f][0], gunname, sizeof(gunname));
   format(string, sizeof(string), "* %s recoge del suelo %s.", GetPlayerNameEx(playerid), gunname);
   ProxDetector(30.0, playerid, string,

COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  }
 }
 return 1;
//**********************************Tirar/Recoger Flores**********************************
}
    CMD:dejarflores(playerid, params[]) //By Valentin
	{
	if(GetPVarInt(playerid, "IsInArena") >= 1) return SendClientMessageEx(playerid, COLOR_WHITE,"{FF0000}[ERROR]:{5ABAFF} No puedes hacer esto en el paintball!");
	else
 	{
 	    if(tarmalimit[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCIÓN]:{FFFFFF} Espera 60 segundos para dejar otro ramo de flores.");
		new gunID = GetPlayerWeapon(playerid);
		if(gunID != 0)
		{
			new f = MAX_ARMAS+1;
			for(new a = 0; a < sizeof(ObjCoords); a++)
			{
				if(ObjCoords[a][0] == 0.0)
				{
					f = a;
					break;
				}
			}
			if(f > MAX_ARMAS) return SendClientMessage(playerid, COLOR_ROJO, "!{FFFFFF} No puede tirar armas en éste momento, intenta más tarde."); // Éste mensaje aparece si se superó el límite [MAX_ARMAS]
		    new gunname[25];
		    new string[100];
			GetWeaponName(gunID, gunname, sizeof(gunname));
			format(string, sizeof(string), "* %s se agacha y deja un ramo de flores.", GetPlayerNameEx(playerid), gunname);
			tarmalimit[playerid] = 60;
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, gunID);
			ObjectID[f][0] = gunID;
	        GetPlayerPos(playerid, ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]);
	        Object[f] = CreateDynamicObject(GunObjects[gunID][0],ObjCoords[f][0],ObjCoords[f][1],ObjCoords[f][2]-1,93.7,120.0,120.0);
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
		}
	}
 	return 1;
}


CMD:recogerflores(playerid, params[])
 {
 if(GetPVarInt(playerid, "IsInArena") >= 1) return SendClientMessageEx(playerid, COLOR_WHITE,"{FF0000}[ERROR]:{5ABAFF} No puedes hacer esto en el paintball!");

 else
 {
  new f = MAX_ARMAS+1;
  for(new a = 0; a < sizeof(ObjCoords); a++)
  {
   if(IsPlayerInRangeOfPoint(playerid, 5.0, ObjCoords[a][0], ObjCoords[a][1], ObjCoords[a][2]))
   ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
   {
    f = a;
    break;
   }
  }
  if(f > MAX_ARMAS) return SendClientMessage(playerid, 0x33AA3300, "{FF0000}[ERROR]:{FFFFFF} No estás cerca de ningún ramo de flores!");
  else
  {
      new gunname[25];
      new string[100];

   ObjCoords[f][0] = 0.0;
   ObjCoords[f][1] = 0.0;
   ObjCoords[f][2] = 0.0;

   DestroyDynamicObject(Object[f]);
   GivePlayerValidWeapon(playerid, ObjectID[f][0]);
   GetWeaponName(ObjectID[f][0], gunname, sizeof(gunname));
   format(string, sizeof(string), "* %s se agacha y recoge un ramo de flores.", GetPlayerNameEx(playerid), gunname);
   ProxDetector(30.0, playerid, string,

COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  }
 }
 return 1;
//************************Sacar líder Off Line***************************
}
 zcmd(qfaccoff, playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pFactionModerator] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /qfaccoff [Nombre_Apellido]");
  		if(INI_Exist(params))
		{
			new PlayerFile[MAX_PLAYER_NAME + 32];
	    	format( PlayerFile , sizeof PlayerFile, USERFILE, params);
	    	new INI:File = INI_Open(PlayerFile);
    		INI_SetTag(File,"data");
	    	INI_WriteInt(File,"Leader",0);
        	INI_WriteInt(File,"Member",0);
        	INI_WriteInt(File,"Rank",0);
    		INI_Close(File);
           	format(string, sizeof(string), "{FCFF03}Enc. Facciones:{FF0000} %s le ha retirado la facción a %s: [OFF-Line]", GetPlayerNameEx(playerid), params);
           	ABroadCast(COLOR_ORANGE,string,4);
           	Log("logs/- Información de Facciones.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ERROR]:{FFFFFF} Está cuenta no existe.");
		return 1;
	}

    zcmd(equipo, playerid, params[])
	{
	new string[300];
	if(IsPlayerConnected(playerid))
	{
		new Float:BBCoord[4];
		GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
		GetPlayerFacingAngle(playerid, BBCoord[3]);
		SetPVarFloat(playerid, "BBX", BBCoord[0]);
		SetPVarFloat(playerid, "BBY", BBCoord[1]);
		SetPVarFloat(playerid, "BBZ", BBCoord[2]);
		BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
		BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
		BBCoord[2] -= 1.0;
		if(Info[playerid][pBoombox] == 0) return SendClientMessage(playerid, COLOR_WHITE, "* No tienes ningún equipo de sonido!");
		if(GetPVarInt(playerid, "PlacedBB")) return SendClientMessage(playerid, COLOR_WHITE, "* Para poner/cambiar la música debes colocar /music y para levantarlo /qequipo");
		foreach(Player, i)
		{
			if(GetPVarType(i, "PlacedBB"))
			{
				if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ")))
				{
					SendClientMessage(playerid, COLOR_WHITE, "* No puedes colocar un equipo de sonido aquí, ya hay otro en el mismo lugar.");
					return 1;
				}
			}
		}
		SetPVarInt(playerid, "PlacedBB", CreateDynamicObject(2226, BBCoord[0], BBCoord[1], BBCoord[2], 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
		format(string, sizeof(string), "[%d]\n",playerid);
		SetPVarInt(playerid, "BBLabel", _:CreateDynamic3DTextLabel(string, -1, BBCoord[0], BBCoord[1], BBCoord[2]+0.6, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "BBArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "BBInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "BBVW", GetPlayerVirtualWorld(playerid));
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Colocaste un equipo de sonido, recuerda levantarlo con /qequipo y para poner música /music");
	}
	return 1;
}

zcmd(rockola, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	if(!IsPlayerInRangeOfPoint(playerid,5.0,684.15729, -451.25510, -25.73665)) return SendClientMessage(playerid,COLOR_ROJO,"! {FFFFFF}No estás cerca de la rockola.");
	{
		{
			ShowPlayerDialog(playerid,DIALOG_ROCKOLA,DIALOG_STYLE_LIST,"{817867}Rockola","Jazz\nRock\nURL Streaming\nApagar","Select", "Cancel");
		}
	}
	return 1;
}

zcmd(music, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(GetPVarType(playerid, "PlacedBB"))
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
			{
				ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{F0FF00}M{00FFF0}U{FF00DE}S{0CFF00}I{FF0000}C","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar el Equipo","Select", "Cancel");
			}
			else
			{
				return SendClientMessage(playerid, COLOR_WHITE, "* No estás cerca de tu equipo de sonido!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "* No has colocado ningún equipo de sonido!");
		}
	}
	return 1;
}

zcmd(qequipo, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(!GetPVarInt(playerid, "PlacedBB"))
		{
			SendClientMessage(playerid, COLOR_WHITE, "* No has colocado ningún equipo de sonido!");
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
		{
			PickUpBoombox(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "* Has cogido tu equipo del suelo.");
		}
	}
	return 1;
//****************************************************Texdraws****************************************************

//----> Información de Pagos por Facciones y Empresas
}
	zcmd(infopagos, playerid, params[])
	{
	new Infopagos[1000];
    strcat(Infopagos, "{FFFFFF}El nuevo sistema de pagos se aplica en las organizaciones del gobierno el\n");
    strcat(Infopagos, "{FFFFFF}cual también subsidios a empresas privadas de Los Ángeles dependiendo\n");
    strcat(Infopagos, "{FFFFFF}de la instalación actual y el puesto que uno tiene.\n\n");
    strcat(Infopagos, "{FFFFFF}Si perteneces a una organización del gobierno o empresa privada, recibes\n");
    strcat(Infopagos, "{FFFFFF}dicha paga y en caso de no pertenecer, no puede, por lo tanto debe\n");
    strcat(Infopagos, "{FFFFFF}utilizar el comando público /subsidio.\n\n");
    strcat(Infopagos, "{FFFFFF}Comando nuevo para recibir una paga del gobierno: {2EDFFF}/Mipaga\n\n");
    strcat(Infopagos, "{FFFFFF}Nota Importante: Si pones primero /subsidio y luego /mipaga no le paga,\n");
    strcat(Infopagos, "{FFFFFF}debido a que has cobrado una paga pública.\n");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{2EDFFF}• Sistema de Pagos", Infopagos, "Cerrar", "");
    return 1;
//----> Tiempos de Sanciones
}
	zcmd(sanciones, playerid, params[])
	{
	new Sanciones[1000];
    strcat(Sanciones, "{FFFFFF}RAZÓN\t\t\t\t\t\t\tTIEMPO\n\n");
    strcat(Sanciones, "DM\t\t\t\t\t\t\t20-40 minutos\n");
    strcat(Sanciones, "PG\t\t\t\t\t\t\t15-30 minutos\n");
    strcat(Sanciones, "MG\t\t\t\t\t\t\t05-20 minutos\n");
    strcat(Sanciones, "RK\t\t\t\t\t\t\t20-30 minutos\n");
    strcat(Sanciones, "CK\t\t\t\t\t\t\t20-25 minutos\n");
    strcat(Sanciones, "HK\t\t\t\t\t\t\t40-50 minutos\n");
    strcat(Sanciones, "NA\t\t\t\t\t\t\t10-45 minutos\n");
    strcat(Sanciones, "BA\t\t\t\t\t\t\t40-60 minutos\n");
    strcat(Sanciones, "ZZ\t\t\t\t\t\t\t10-30 minutos\n");
    strcat(Sanciones, "BJ\t\t\t\t\t\t\t05-15 minutos\n");
    strcat(Sanciones, "BH\t\t\t\t\t\t\t05-20 minutos\n");
    strcat(Sanciones, "CJ\t\t\t\t\t\t\t15-20 minutos\n");
    strcat(Sanciones, "BD\t\t\t\t\t\t\t20-30 minutos\n");
    strcat(Sanciones, "DB\t\t\t\t\t\t\t15-25 minutos\n");
    strcat(Sanciones, "SK\t\t\t\t\t\t\t30-40 minutos\n");
    strcat(Sanciones, "PK\t\t\t\t\t\t\t20-30 minutos\n");
    strcat(Sanciones, "MK\t\t\t\t\t\t\t30-50 minutos\n");
    strcat(Sanciones, "FK\t\t\t\t\t\t\t50-60 minutos\n");
    strcat(Sanciones, "BB\t\t\t\t\t\t\t10-15 minutos\n");
    strcat(Sanciones, "MA\t\t\t\t\t\t\t40-50 minutos\n\n\n");
    strcat(Sanciones, "NRA\t\t\t\t\t\t\t20-35 minutos\n");
    strcat(Sanciones, "NRE\t\t\t\t\t\t\t20-40 minutos\n");
    strcat(Sanciones, "NRC\t\t\t\t\t\t\t15-25 minutos\n");
    strcat(Sanciones, "MA2\t\t\t\t\t\t\t15-30 minutos\n\n\n");
    strcat(Sanciones, "IOOC\t\t\t\t\t\t\t20-35 minutos\n\n\n");
    strcat(Sanciones, "NVVPJ\t\t\t\t\t\t\t20-50 minutos\n");
    strcat(Sanciones, "AIOOC\t\t\t\t\t\t\t40-60 minutos\n");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{2EDFFF}• Tiempos de Sanciones", Sanciones, "Cerrar", "");
    return 1;
//----> Colores ID
}
	zcmd(coloresid, playerid, params[])
	{
	new Coloresid[1000];
    strcat(Coloresid, "{FFFFFF}Negro - ID: 0\n");
    strcat(Coloresid, "{FFFFFF}Blanco - ID: 1\n");
    strcat(Coloresid, "\n");
    strcat(Coloresid, "\n");
    strcat(Coloresid, "{2A77A1}Celeste Oscuro - ID: 2\n");
    strcat(Coloresid, "{840510}Rojo Bordo - ID: 3\n");
    strcat(Coloresid, "{D78D10}Amarillo - ID: 6\n");
    strcat(Coloresid, "{515459}Gris - ID: 24\n");
    strcat(Coloresid, "{927347}Marron - ID: 61\n");
    strcat(Coloresid, "{115083}Azul - ID: 106\n");
    strcat(Coloresid, "{EC6BAE}Rosado - ID: 126\n");
    strcat(Coloresid, "{177517}Verder - ID: 128\n");
    strcat(Coloresid, "{1B9A49}Verder Agua - ID: 154\n");
    strcat(Coloresid, "{20979B}Turquesa - ID: 155\n");
    strcat(Coloresid, "{241663}Violeta - ID: 211\n");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FFFFFF}Colores ID", Coloresid, "Cerrar", "");
    return 1;
//----> Animaciones
}
	zcmd(animaciones, playerid, params[])
	{
	new Animaciones[1000];
    strcat(Animaciones, "{2EDFFF}• Anim 1: {FFFBFF}/poli /rendirse /sentarse /sinaliento /asiento /bailar /rap /cruzar /ped /jiggy /rap\n");
    strcat(Animaciones, "{2EDFFF}• Anim 2: {FFFBFF}/gesto /fumar /sexo /orinar /chora /relax /crabs /saludo /saludo2 /stop /lavarse /llorar\n");
    strcat(Animaciones, "{2EDFFF}• Anim 3: {FFFBFF}/sigueme /quieto /enganche /palmaputa /cpr /darregalo /palmada /borracho /bomba\n");
    strcat(Animaciones, "{2EDFFF}• Anim 4: {FFFBFF}/arobar /reir /lookout /robman /esconder /vomitar /comer /crack /jodete /taichi /beso\n");
    strcat(Animaciones, "{2EDFFF}• Anim 5: {FFFBFF}/apuntar /apoyarse /dormir /herido /agonizar /animar /paja /esconder /dedo\n");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FFFBFF}Animaciones Disponibles", Animaciones, "Cerrar", "");
    return 1;
//----> Lista de Precios (Mecánicos)
}
	zcmd(precios, playerid, params[])
	{
	if(!IsPlayerInRangeOfPoint(playerid,2.0, 1011.78918, -1426.70972, 13.3725)) return SendClientMessage(playerid,COLOR_YELLOW2,"Debes estar en el taller de mecánicos para ver los precios!");
	new Mecanicos[1000];
	strcat(Mecanicos,"{FFA700}»{FFFFFF} ¡Reparación completa con 25 por ciento de descuento! ($5.645)\n\n");
	strcat(Mecanicos,"{FFA700}»{FFFFFF} Pintura ($1.250)\n");
	strcat(Mecanicos,"{FFA700}»{FFFFFF} Pack de 4 Llantas ($5.500)\n");
    strcat(Mecanicos,"{FFA700}»{FFFFFF} Suspensión Hidráulica ($3.240)\n");
	strcat(Mecanicos,"{FFA700}»{FFFFFF} Nitrógeno x10 ($8.105)\n");
	strcat(Mecanicos,"{FFA700}»{FFFFFF} Reparación de Motor ($3.210)\n");
	strcat(Mecanicos,"{FFA700}»{FFFFFF} Reparación de Carroceria ($4.315)\n\n");
	strcat(Mecanicos,"{FFA700}»{FFFFFF} Liberación de Vehículo ($750)");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FFA700}Mecánicos", Mecanicos, "Cerrar", "");
    return 1;
//----> Información para nuevos
}
	zcmd(nuevo, playerid, params[])
	{
	new New[1500];
	strcat(New,"{FFFFFF}El sistema de {2EDFFF}/soporte{FFFFFF} sirve para solicitar a un miembro de la cúpula administrativa y atiendan todas tus\n");
	strcat(New,"dudas y/o problemas al momento de jugar. \n\n");
	strcat(New,"El canal {2EDFFF}/duda{FFFFFF} te sirve para preguntar todo sobre el gamemode, ya sea sus sistemas y otros canales que\n");
    strcat(New,"pueden ser útiles.\n\n");
	strcat(New,"En {2EDFFF}/ayuda{FFFFFF} puedes seleccionar varias opciones para informarte de los cmds que la comunidad tiene, ver\n");
	strcat(New,"las reglas del servidor, tener información premium, etc.\n\n");
	strcat(New,"El cmd {2EDFFF}/re (id/usuario) (razón){FFFFFF} sirve para reportar a una persona por x razón, o también, para reportar\n");
	strcat(New,"algún problema que pueda beneficiar, traer futuros abusos, etc.\n\n");
	strcat(New,"En {2EDFFF}/actualizaciones{FFFFFF} vas a poder ver cambios anteriores/nuevos y saber que cumplimos con\n");
	strcat(New,"las sugerencias dadas o promesas dichas.\n\n");
	strcat(New,"Es importante ver {2EDFFF}/reglas{FFFFFF}, ya que con esto, logramos mantener un mejor orden en la comunidad y evitar\n");
	strcat(New,"futuros problemas entre la cúpula administrativa y usuarios.\n\n");
	strcat(New,"Si quieres estar más pendiente, puedes ver {2EDFFF}/redes{FFFFFF} y seguirnos en algunas de estas para tener más\n");
	strcat(New,"información, consultar otros temas, postular a facciones, etc.");
    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{2EDFFF}Información básica para nuevos. . .", New, "Cerrar", "");
    return 1;
}
	zcmd(stats, playerid, params[])
	{
	if(Info[playerid][pStats_U] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "* Ya ha recibido las estadísticas...");
	new Stats[1500];
	strcat(Stats,"{FFFFFF}Las estadísticas que va a recibir son ajustadas para cuidar la economía, esta ayuda será\n");
	strcat(Stats,"temporal, por lo tanto no aceptamos reclamos o quejas.\n\n");
	strcat(Stats,"{FFFFFF}Dinero: {C3FF23}$20.000\n");
	strcat(Stats,"{FFFFFF}VIP: {C3FF23}Bronce (1)\n");
	strcat(Stats,"{FFFFFF}Nivel: {C3FF23}+1\n");
	strcat(Stats,"{FFFFFF}Fichas: {C3FF23}100 (Paintball)\n");
    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{2EDFFF}Estadísticas", Stats, "Cerrar", "");
    Info[playerid][pStats_U] += 1;
    GivePlayerCash(playerid, 20000);
    Info[playerid][pVIP] += 1;
    Info[playerid][pTempVIP] = 3600;
    Info[playerid][pLevel] += 1;
    Info[playerid][pPaintTokens] += 100;
    return 1;
}
	zcmd(betatester, playerid, params[])
	{
//	if(Info[playerid][pStats_U] == 1) return SendClientMessageEx(playerid, COLOR_ROJO, "* Ya ha recibido las estadísticas...");
	new Stats[1500];
	strcat(Stats,"{FFFFFF}Te has identificado como Beta Tester: se te asignó rango de Sub-Dueño, E.F. y +7M u$d\n");
	strcat(Stats,"gracias por aportar al servidor.\n\n");
	strcat(Stats,"{FFFFFF}Para informar errores: {C3FF23}+54 3456 445545\n");
	strcat(Stats,"{FFFFFF}~Killian Mihaly ''Nevsheelak''\n");
    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{CC0000}Beta Tester", Stats, "Cerrar", "");
    Info[playerid][pAdminZC] = 9;
    Info[playerid][pFactionModerator] = 1;
    GivePlayerCash(playerid, 7000000);
    return 1;
}
//----> Créditos
	zcmd(creditos, playerid, params[])
	{
	new iString[1000];
	strcat(iString, "{FFFFFF}• ¡Bienvenido a nuestros créditos!, Esta sección ayuda al usuario a conocer sobre la cúpula\n");
	strcat(iString, "{FFFFFF}  administrativa general que hicieron, hacen y harán lo posible para que todos se\n");
	strcat(iString, "{FFFFFF}  diviertan al momento de jugar en Absolute Titanium Gamers, versión 2.1.\n");
	strcat(iString, "\n\n\n");
	strcat(iString, "{FFFFFF}• Scripter: {446E8C}Killian Mihaly\n");
	strcat(iString, "{FFFFFF}• Webmaster: {446E8C}Micro Lopez\n");
	strcat(iString, "{FFFFFF}• Mapas (Simples/Texturizados): {446E8C}AT-RP\n");
	strcat(iString, "{FFFFFF}• Fundador: {446E8C}Micro Lopez - Kenji Wang\n");
	strcat(iString, "{FFFFFF}• GameMode: {446E8C}Absolute Titanium Gamers 2.1\n");
	strcat(iString, "{FFFFFF}• GameMode Base: {446E8C}Space For Players 2.8\n");
	strcat(iString, "{FFFFFF}• Supervisor: {446E8C}Killian Mihaly - Steven Silent\n");
	strcat(iString, "{FFFFFF}• Versión: {446E8C}2.1\n");
	strcat(iString, "{FFFFFF}• Fundada: {446E8C}16/08/2020\n");
	strcat(iString, "{FFFFFF}• Agradecimientos: {446E8C}Kevin Script - Aaron_Boyce\n");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{446E8C}Créditos", iString, "Cerrar", "");
    return 1;
	}
//----> Rangos Administratívos
	zcmd(staffranks, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
 	if(Info[playerid][pModStaff] < 1) return Message(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización de usar éste comando.");
	new iString[4000];
	strcat(iString, "{CC0000}• 1: {FFFFFF}Staff de Licencia\n");
	strcat(iString, "{CC0000}• 2: {FFFFFF}Moderador a Prueba\n");
	strcat(iString, "{CC0000}• 3: {FFFFFF}Moderador Global\n");
	strcat(iString, "{CC0000}• 4: {FFFFFF}Administrador Inicial\n");
	strcat(iString, "{CC0000}• 5: {FFFFFF}Administrador General\n");
	strcat(iString, "{CC0000}• 6: {FFFFFF}Encargado de Facciones\n");
	strcat(iString, "{CC0000}• 7: {FFFFFF}Administrador Superior\n");
	strcat(iString, "{CC0000}• 8: {FFFFFF}Administrador Técnico\n");
	strcat(iString, "{CC0000}• 9: {FFFFFF}Administrador Sub-Dueño\n");
	strcat(iString, "{CC0000}• 10: {FFFFFF}Administrador Dueño\n");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{446E8C}Rangos Administratívos", iString, "Cerrar", "");
    return 1;
	}
	//----> Rangos L.A.P.D.
	zcmd(lapdranks, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
 	if(Info[playerid][pLeader] == 1) return Message(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización de usar éste comando.");
	new iString[4000];
	strcat(iString, "{000080}• 1: {FFFFFF}Agente en Prácticas		- AGP\n");
	strcat(iString, "{000080}• 2: {FFFFFF}Cadete 					- Cdt.\n");
	strcat(iString, "{000080}• 3: {FFFFFF}Police Officer 1 			- P.O. I\n");
	strcat(iString, "{000080}• 4: {FFFFFF}Police Officer 2			- P.O. II\n");
	strcat(iString, "{000080}• 5: {FFFFFF}Police Officer 3			- P.O. III\n");
	strcat(iString, "{000080}• 6: {FFFFFF}Police Officer 4			- P.O. III+1\n");
	strcat(iString, "{000080}• 7: {FFFFFF}Mayor Officer				- M.O.\n");
	strcat(iString, "{000080}• 8: {FFFFFF}Detective 1				- Det. I\n");
	strcat(iString, "{000080}• 9: {FFFFFF}Detective 2				- Det. II\n");
	strcat(iString, "{000080}• 10: {FFFFFF}Sargento 1				- Sgt. I\n");
	strcat(iString, "{000080}• 11: {FFFFFF}Detective 3				- Det. III\n");
	strcat(iString, "{000080}• 12: {FFFFFF}Sargento 2				- Sgt. II\n");
	strcat(iString, "{000080}• 13: {FFFFFF}Teniente 1				- Lt. I\n");
	strcat(iString, "{000080}• 14: {FFFFFF}Teniente 2				- Lt. II\n");
	strcat(iString, "{000080}• 15: {FFFFFF}Capitán 1				- Cpt. I\n");
	strcat(iString, "{000080}• 16: {FFFFFF}Capitán 2				- Cpt. II\n");
	strcat(iString, "{000080}• 17: {FFFFFF}Capitán 3				- Cpt. III\n");
	strcat(iString, "{000080}• 18: {FFFFFF}Comandante de Policía 	- Cmdt.\n");
	strcat(iString, "{000080}• 19: {FFFFFF}Subjefe de Policía 1		- DC I\n");
	strcat(iString, "{000080}• 20: {FFFFFF}Subjefe de Policía 2 	- DC II\n");
	strcat(iString, "{000080}• 21: {FFFFFF}Jefe de Policía			- ¿?\n");
	
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{446E8C}Rangos Policiales", iString, "Cerrar", "");
    return 1;
	}
	CMD:ppersona(playerid, params[])
	{
	 if(camaraon[playerid] == 0)
	  {
        camaraon[playerid] = 1;
		SendClientMessage(playerid, -1, "{2EDFFF}[Primera Persona ON]: {FFFFFF}Te pusiste en primera persona, recuerda poner /ppersona para desactivar.");
		AttachObjectToPlayer(FPS[playerid], playerid, 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
		AttachCameraToObject(playerid, FPS[playerid]);
	  }
	else if(camaraon[playerid] == 1)
	  {
	    camaraon[playerid] = 0;
        SendClientMessage(playerid, -1, "{2EDFFF}[Primera Persona OFF]: {FFFFFF}Cámara normal activada.");
		SetCameraBehindPlayer(playerid);
      }
	return 1;
	}

	CMD:vertvsx(playerid, params[])
	{
	 if(camaraon[playerid] == 1)
	  {
	    new string[128];
        format(string, sizeof(string), "* %s comienza a ver la TV.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPlayerCameraPos(playerid, 780.74170, -1338.36829, 1087.31787);
        SetPlayerCameraLookAt(playerid, 780.74170, -1329.62500, 1087.31787);
        SetPosEx(playerid, 777.253112,-1342.544067,1092.857543, 0, 0, 0);
        SetPlayerInterior(playerid,1);
        SetPVarInt(playerid, "IsFrozen", 1);
        TextDrawHideForPlayer(playerid, FechaD);
        TextDrawHideForPlayer(playerid, TiempoD);
        TextDrawHideForPlayer(playerid, Experiencia[playerid]);
        TextDrawShowForPlayer(playerid, PFAVig_1);
        TextDrawShowForPlayer(playerid, PFAVig_2);
        TextDrawShowForPlayer(playerid, PFAVig_3);
        TextDrawShowForPlayer(playerid, PFAVig_4);
	  }
	else if(camaraon[playerid] == 0)
	  {
	    SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid,1);
		TextDrawHideForPlayer(playerid, PFAVig_1);
        TextDrawHideForPlayer(playerid, PFAVig_2);
        TextDrawHideForPlayer(playerid, PFAVig_3);
        TextDrawHideForPlayer(playerid, PFAVig_4);
        TextDrawShowForPlayer(playerid, FechaD);
        TextDrawShowForPlayer(playerid, TiempoD);
        TextDrawShowForPlayer(playerid, Experiencia[playerid]);
        SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
		TogglePlayerControllable(playerid,1);
      }
	return 1;
	}
	CMD:nocanal(playerid, params[])
    {
       if(Info[playerid][pAdminZC] >= 2 ||Info[playerid][pHelper] >= 1)
       {
          if (!nonewbie){
             nonewbie = 1;
             BroadCast(COLOR_GENERAL, "CMD: El canal de ayuda fue deshabilitado por un administrador/ayudante.");
          }
          else{
             nonewbie = 0;
             BroadCast(COLOR_GENERAL, "CMD: El canal de ayuda fue habilitado por un administrador/ayudante.");
          }
       }
       else return SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
       return 1;
    }
 CMD:duda(playerid, params[])
{
  if(gPlayerLogged{playerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logeado correctamente.");
  if(Info[playerid][pTut] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en el tutorial.");
  if ((nonewbie) && Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "El canal de ayuda está desactivado por un administrador.");
  if(Info[playerid][pNMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás silenciado del canal de ayuda, intentalo mas tarde.");
  if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes utilizar el comando /Duda en sanción.");
  new string[128];
  if(NewbieTimer[playerid] > 0)
  {
     format(string, sizeof(string), "{FFFFFF}Para volver a solicitar una duda debes esperar {2EDFFF}%d {FFFFFF}segundos!", NewbieTimer[playerid]);
     SendClientMessageEx(playerid, COLOR_GREY, string);
     return 1;
  }
  if(gNewbie[playerid]==1) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes el canal apagado, /togduda para re-habilitarlo!");
  if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /duda (Duda y/o Pregunta)");
  if(Info[playerid][pHelper]<1 && Info[playerid][pAdminZC] < 2)
  {
     NewbieTimer[playerid] = 60;
  }
  else if(Info[playerid][pHelper]==1&&Info[playerid][pAdminZC] < 2)
  {
     NewbieTimer[playerid] = 15;
  }
  else if(Info[playerid][pAdminZC] == 2)
  {
     NewbieTimer[playerid] = 15;
  }
  else if(Info[playerid][pHelper] >= 2 && Info[playerid][pAdminZC] < 2)
  {
     NewbieTimer[playerid] = 10;
  }
  if(Info[playerid][pHelper]<1&&Info[playerid][pAdminZC]<1)
  {
     format(string, sizeof(string), "(/Duda - ID: %d) %s: {FFFFFF}%s", playerid,GetPlayerNameEx(playerid), params);
  }
  if(Info[playerid][pHelper] >= 1)
  {
     format(string, sizeof(string), "(/Duda - ID: %d - Ayudante) %s: {FFFFFF}%s", playerid,GetPlayerNameEx(playerid), params);
  }
  if(Info[playerid][pAdminZC] == 2)
  {
     format(string, sizeof(string), "(/Duda - ID: %d - Staff) %s: {FFFFFF}%s", playerid,GetPlayerNameEx(playerid), params);
  }
  if(Info[playerid][pAdminZC] == 3)
  {
     format(string, sizeof(string), "(/Duda - ID: %d - Staff) %s: {FFFFFF}%s", playerid,GetPlayerNameEx(playerid), params);
  }
  if(Info[playerid][pAdminZC] >= 4)
  {
     format(string, sizeof(string), "(/Duda - ID: %d - Staff) %s: {FFFFFF}%s", playerid,GetPlayerNameEx(playerid), params);
  }
  if(Info[playerid][pAdminZC] >= 8)
  {
     format(string, sizeof(string), "(/Duda - Técnico) %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);
  }
  if(Info[playerid][pAdminZC] >= 9)
  {
     format(string, sizeof(string), "(/Duda - Sub. Dueño) %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);
  }
  if(Info[playerid][pAdminZC] >= 10)
  {
     format(string, sizeof(string), "(/Duda - Dueño) %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);
  }
  if(Info[playerid][pAdminZC] >= 11)
  {
     format(string, sizeof(string), "(/Duda - Programador) %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);

  }
  foreach(Player, n)
  {
     if (gNewbie[n] == 0)
     {
        SendClientMessageEx(n, COLOR_DUDA, string);
     }
  }
  return 1;
}
CMD:reglastaff(playerid, params[])
{
  if(gPlayerLogged{playerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logeado correctamente.");
  if(Info[playerid][pTut] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en el tutorial.");
  if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_ROJO, "[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
  if(Info[playerid][pAdminZC] == 2)
  {
     new modaprueba[1000];
     strcat(modaprueba, "{FFFFFF}- Publicitar las veces necesarias para mantener el servidor activo\n");
     strcat(modaprueba, "{FFFFFF}- Estar pendiente tanto como en SA:MP, también en foro\n");
     strcat(modaprueba, "{FFFFFF}- Tener 5 o 6 horas de actividad por día\n");
     strcat(modaprueba, "{FFFFFF}- Cuidar su vocabulario con cada usuario y en cualquier situación\n");
     strcat(modaprueba, "{FFFFFF}- Tomar imágenes de cada sanción por si el usuario lo solicita\n");
     strcat(modaprueba, "{FFFFFF}- Solicitar tiempo para rolear o buscar a alguien que cubra tu lugar\n");
     strcat(modaprueba, "{FFFFFF}- Notificar al programador el bug para que este lo repare\n");
     strcat(modaprueba, "{FFFFFF}- Respetar las decisiones de cada superior bajo al mando del staff\n");
     strcat(modaprueba, "{FFFFFF}- Pedir permiso para salir del servicio administrativo\n");
     strcat(modaprueba, "{FFFFFF}- Jamás estar OFF-Duty si no hay otros moderadores o administradores\n\n");
     strcat(modaprueba, "{FF0000}• Recuerda cada regla, estas deben ser respetadas!");
     ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{660066}• Moderador a Prueba", modaprueba, "{FFFFFF}Cerrar", "");
  }
  if(Info[playerid][pAdminZC] == 3)
  {
     new modglobal[1000];
     strcat(modglobal, "{FFFFFF}- Publicitar las veces necesarias para mantener el servidor activo\n");
     strcat(modglobal, "{FFFFFF}- Estar pendiente tanto como en SA:MP, también en foro\n");
     strcat(modglobal, "{FFFFFF}- Ser activo en foro para atender reportes (Nuevo)\n");
     strcat(modglobal, "{FFFFFF}- Cuidar su vocabulario con cada usuario y en cualquier situación\n");
     strcat(modglobal, "{FFFFFF}- Tomar imágenes de cada sanción por si el usuario lo solicita\n");
     strcat(modglobal, "{FFFFFF}- Solicitar tiempo para rolear o buscar a alguien que cubra tu lugar\n");
     strcat(modglobal, "{FFFFFF}- Notificar al programador el bug para que este lo repare\n");
     strcat(modglobal, "{FFFFFF}- Respetar las decisiones de cada superior bajo al mando del staff\n");
     strcat(modglobal, "{FFFFFF}- Pedir permiso para salir del servicio administrativo\n");
     strcat(modglobal, "{FFFFFF}- Jamás estar OFF-Duty si no hay otros moderadores o administradores\n\n");
     strcat(modglobal, "{FF0000}• Recuerda cada regla, estas deben ser respetadas!");
     ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{660066}• Moderador Global", modglobal, "{FFFFFF}Cerrar", "");
  }
  if(Info[playerid][pAdminZC] == 4)
  {
     new admininicial[1000];
     strcat(admininicial, "{FFFFFF}- Publicitar las veces necesarias para mantener el servidor activo\n");
     strcat(admininicial, "{FFFFFF}- Estar pendiente tanto como en SA:MP, también en foro\n");
     strcat(admininicial, "{FFFFFF}- Ser activo en foro para atender reportes\n");
     strcat(admininicial, "{FFFFFF}- Cuidar su vocabulario con cada usuario y en cualquier situación\n");
     strcat(admininicial, "{FFFFFF}- Tomar imágenes de cada sanción por si el usuario lo solicita\n");
     strcat(admininicial, "{FFFFFF}- Solicitar tiempo para rolear o buscar a alguien que cubra tu lugar\n");
     strcat(admininicial, "{FFFFFF}- Notificar al programador el bug para que este lo repare\n");
     strcat(admininicial, "{FFFFFF}- Respetar las decisiones de cada superior bajo al mando del staff\n");
     strcat(admininicial, "{FFFFFF}- Pedir permiso para salir del servicio administrativo\n");
     strcat(admininicial, "{FFFFFF}- Jamás estar OFF-Duty si no hay otros moderadores o administradores\n");
     strcat(admininicial, "{FFFFFF}- Chequear bien antes de banear una cuenta\n");
     strcat(admininicial, "{FFFFFF}- Supervisar que cada moderador a prueba y global trabaje como se debe\n\n");
     strcat(admininicial, "{FF0000}• Recuerda cada regla, estas deben ser respetadas!");
     ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{00CCFF}• Administrador Inicial", admininicial, "{FFFFFF}Cerrar", "");
  }
  if(Info[playerid][pAdminZC] == 5)
  {
     new admingeneral[1000];
     strcat(admingeneral, "{FFFFFF}- Publicitar las veces necesarias para mantener el servidor activo\n");
     strcat(admingeneral, "{FFFFFF}- Estar pendiente tanto como en SA:MP, también en foro\n");
     strcat(admingeneral, "{FFFFFF}- Ser activo en foro para atender reportes\n");
     strcat(admingeneral, "{FFFFFF}- Cuidar su vocabulario con cada usuario y en cualquier situación\n");
     strcat(admingeneral, "{FFFFFF}- Tomar imágenes de cada sanción por si el usuario lo solicita\n");
     strcat(admingeneral, "{FFFFFF}- Solicitar tiempo para rolear o buscar a alguien que cubra tu lugar\n");
     strcat(admingeneral, "{FFFFFF}- Notificar al programador el bug para que este lo repare\n");
     strcat(admingeneral, "{FFFFFF}- Respetar las decisiones de cada superior bajo al mando del staff\n");
     strcat(admingeneral, "{FFFFFF}- Pedir permiso para salir del servicio administrativo\n");
     strcat(admingeneral, "{FFFFFF}- Jamás estar OFF-Duty si no hay otros moderadores o administradores\n");
     strcat(admingeneral, "{FFFFFF}- Chequear bien antes de banear una cuenta\n");
     strcat(admingeneral, "{FFFFFF}- Supervisar que cada moderador a prueba y global trabaje como se debe\n\n");
     strcat(admingeneral, "{FF0000}• Recuerda cada regla, estas deben ser respetadas!");
     ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{00CCFF}• Administrador General", admingeneral, "{FFFFFF}Cerrar", "");
  }
  if(Info[playerid][pAdminZC] == 6)
  {
     new encfacciones[1000];
     strcat(encfacciones, "{FFFFFF}- Supervisar cada facción que cumplan su rol correspondiente\n");
     strcat(encfacciones, "{FFFFFF}- Chequear foro para revisar si han posteado su rol semanal\n");
     strcat(encfacciones, "{FFFFFF}- Notificar al programador ante una modificación en la facción\n");
     strcat(encfacciones, "{FFFFFF}- Responder, bloquear y mover las postulaciones a donde corresponda\n");
     strcat(encfacciones, "{FFFFFF}- Respetar el 2/2 de advertencía para cada una\n");
     strcat(encfacciones, "{FFFFFF}- Respetar el rol de cada una\n");
     strcat(encfacciones, "{FFFFFF}- Utilizar el /facchat en momentos importantes\n");
     strcat(encfacciones, "{FFFFFF}- Respetar las decisiones de cada superior bajo al mando del staff\n\n");
     strcat(encfacciones, "{FF0000}• Recuerda cada regla, estas deben ser respetadas!");
     ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FCFF03}• Enc. Facciones", encfacciones, "{FFFFFF}Cerrar", "");
  }
  if(Info[playerid][pAdminZC] == 7)
  {
     new adminsuperior[1000];
     strcat(adminsuperior, "{FFFFFF}- Utilizar cada comando con cuidado sin abusar\n");
     strcat(adminsuperior, "{FFFFFF}- Controlar el trabajo de mod's a prueba/global y administradores iniciales\n");
     strcat(adminsuperior, "{FFFFFF}- No tomar decisión propia sin consultar al Enc. Staff\n");
     strcat(adminsuperior, "{FFFFFF}- Prohibido en su totalidad entrar en temas de otros administradores o encargados\n");
     strcat(adminsuperior, "{FFFFFF}- Estar pendiente al teamspeak 3, foro y SAMP\n\n");
     strcat(adminsuperior, "{FF0000}• Recuerda cada regla, estas deben ser respetadas!");
     ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{5ABAFF}• Administrador Superior", adminsuperior, "{FFFFFF}Cerrar", "");
  }
  if(Info[playerid][pAdminZC] == 8)
  {
     new admintecnico[1000];
     strcat(admintecnico, "{FFFFFF}- Utilizar cada comando con cuidado sin abusar\n");
     strcat(admintecnico, "{FFFFFF}- Consultar antes de editar una puerta\n");
     strcat(admintecnico, "{FFFFFF}- No tomar decisión propia contra el staff\n");
     strcat(admintecnico, "{FFFFFF}- Prohibido en su totalidad entrar en temas de otros administradores o encargados\n");
     strcat(admintecnico, "{FFFFFF}- Estar pendiente al teamspeak 3, foro y SAMP\n\n");
     strcat(admintecnico, "{FF0000}• Recuerda cada regla, estas deben ser respetadas!");
     ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{5ABAFF}• Administrador Técnico", admintecnico, "{FFFFFF}Cerrar", "");
  }
  return 1;
}
CMD:placaex(playerid, params[])
{
  if(gPlayerLogged{playerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logeado correctamente.");
  if(Info[playerid][pTut] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en el tutorial.");
  if(IsAPolice(playerid))
  {
     SendClientMessageEx(playerid, COLOR_GREY, "¡Comando nuevo!: Por favor, debes poner /pduty para entrar en servicio.");
  }
  if(Team_LAMD(playerid))
  {
     SendClientMessageEx(playerid, COLOR_GREY, "¡Comando nuevo!: Por favor, debes poner /mduty para entrar en servicio.");
  }
  if(Team_BomberosBA(playerid))
  {
     SendClientMessageEx(playerid, COLOR_GREY, "¡Comando nuevo!: Por favor, debes poner /bduty para entrar en servicio.");
  }
  if(Team_USMC(playerid))
  {
     SendClientMessageEx(playerid, COLOR_GREY, "¡Comando nuevo!: Por favor, debes poner /eduty para entrar en servicio.");
  }
  if(Team_AININT(playerid))
  {
     SendClientMessageEx(playerid, COLOR_GREY, "¡Comando nuevo!: Por favor, debes poner /ainintduty para entrar en servicio.");
  }
  if(Team_CIA(playerid))
  {
     SendClientMessageEx(playerid, COLOR_GREY, "¡Comando nuevo!: Por favor, debes poner /ciaduty para entrar en servicio.");
  }
  return 1;
}
CMD:nonewbie(playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
	if(Info[playerid][pAdminZC] >= 5)
	{
		if (!nonewbie){
			nonewbie = 1;
			BroadCast(COLOR_GENERAL, "Staff Comunicado: ¡El canal de ayuda fue deshabilitado por un administrador!");
		}
		else{
			nonewbie = 0;
			BroadCast(COLOR_GENERAL, "Staff Comunicado: ¡El canal de ayuda fue habilitado por un administrador!");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	return 1;
}
zcmd(noduda, playerid, params[])
{
	new giveplayerid;
    if(Info[playerid][pAdminZC] < 2 &&Info[playerid][pHelper] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	if(!sscanf(params, "d", giveplayerid))
	{
	    if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}ID Inválida:{FFFFFF} En casos de una desconexión del usuario, tome su Nombre_Apellido para aplicar su sanción.");
   		if(Info[giveplayerid][pAdminZC] >= 2)
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}Inf. Dudas: {FFFFFF}No puedes silenciar a un miembro de la administración, use{FF0000} /Re ID Razón{FFFFFF} para tomar medidas.");
		}
	    if(Info[giveplayerid][pNMute] == 0)
		{
		    new string[128];
   			Info[giveplayerid][pNMute] = 1;
   			Info[giveplayerid][pNMuteTotal]++;
			if(Info[giveplayerid][pNMuteTotal] == 10)
			{
				Info[giveplayerid][pBannedZC] = 2;
				format(string, sizeof(string), "[Usuario Baneado]: %s fue baneado del servidor por ser silenciado del duda 10 veces en total.", GetPlayerNameEx(giveplayerid));
				BroadCast(COLOR_LIGHTRED,string);
				Kick(giveplayerid);
				return 1;
			}
			format(string, sizeof(string), "{2EDFFF}%s{FFFFFF} te ha silenciado del canal de dudas, por favor te invitamos a ver el:{2EDFFF} /Reglasparadudas",GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid,COLOR_LIGHTRED,string);
			foreach(Player, n)
			{
				if (gNewbie[n] == 0 || Info[n][pNMute] == 0)
				{
				    format(string, sizeof(string), "[Inf. Duda]: %s ha silenciado a %s por 10 minutos, razón: MUD - Mal Uso del Duda!",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(n, COLOR_LIGHTRED, string);
				}
			}
			SetTimerEx("NewbieUnMuted", 600000, 0, "d", giveplayerid);
		}
	} else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}Para silenciar a un usuario del canal de dudas, use: {2EDFFF}/Noduda ID");
	return 1;
}

CMD:armas(playerid, params[])
{
    if(GetPVarInt(playerid, "ArenaMode") > 0)
    {
        SafeDialogEx(playerid, PB_ARMAS, DIALOG_STYLE_LIST, "{2EDFFF}Armamentos Disponibles","9mm [1 Ficha]\nDesert Eagle [1 Ficha]\nMP5 [1 Ficha]\nAK-47 [1 Ficha]\nM4 [2 Fichas]\nShotgun [1 Ficha]\nRifle [2 Fichas]\n Armadura [1 Ficha]","Equipar","Salir");
	}
    else
	{
        SendClientMessageEx(playerid,COLOR_WHITE,"{FF0000}[ERROR]:{FFFFFF} No puedes usar este comando si no estás en el paintball.");
    }
    return 1;
}
//***telefonos publicos***
CMD:telefonop(playerid, params[])
	{
		new string[128], phonenumb;
        if(!IsAtCelPublic(playerid)) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No estas en un télefono público y/o comando no habilitado!");
		if(sscanf(params, "d", phonenumb)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Para realizar una llamada debe colocar: {000099}/Telefonop (Número)");
		if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_ROJO,"!{FFFFFF} No puedes llamar estando en prisión!");
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFFFF}Usted no puede utilizar el teléfono público!");


		if(Mobile[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}Ya estas en una llamada!");
		if(Info[playerid][pJailed] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Este número no se puede usar! {FF0000}(Jail-OOC)");
		format(string, sizeof(string), "* %s ingresa unos números en el teléfono público y hace una llamada.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerPlaySound(playerid, 3600, 0, 0, 0);
		if(phonenumb == 911){
            SetPlayerAttachedObject(playerid, 8, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SendClientMessageEx(playerid, COLOR_ALLDEPT, "Línea 911: Buenas señor/a, por favor díganos que servicio usted solicita, ¿Policia, médico, bombero o AININT?");
			Mobile[playerid] = 911;
			return 1;
		}
		if(phonenumb == 757){
            if(InLive == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "En este momento la línea está fuera de servicio u ocupada.");
			InLive = 0;
            Mobile[playerid] = 758;
			format(string,128,"Llamada Entrante desde un Telefono Publico.", Info[playerid][pPnumber]);
			SendFamilyMessage(5, COLOR_YELLOW, string);
            SetPlayerAttachedObject(playerid, 8, 330, 6);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			Bought(playerid, 20);
            return SendClientMessageEx(playerid, COLOR_WHITE, "LSTV: Hola... estás en Línea, desde este momento puedes hablar.");

		}
		else if(phonenumb == 3900){
		   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Bienvenido. ¿ Tiene algúna noticia, quiere participar ?");
		   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Déjenos un mensaje después de la señal, ¡hasta la vista!");
		  	SendClientMessageEx(playerid, COLOR_WHITE, "Biiip!");
			Bought(playerid, 20);
		   	return Mobile[playerid] = 3901;

		}
		if(phonenumb == Info[playerid][pPnumber]) return SendClientMessageEx(playerid, COLOR_GRAD2, "Está ocupado...");
		foreach(Player, i){
			if(Info[i][pPnumber] == phonenumb && phonenumb != 0){
				new giveplayerid = i;
				Mobile[playerid] = giveplayerid; //caller connecting
				if(IsPlayerConnected(giveplayerid)){
					if(giveplayerid != INVALID_PLAYER_ID){
						if(GetPVarInt(giveplayerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "El jugador está en el paintball arena no puede recibir llamadas.");
						if(PhoneOnline[giveplayerid] > 0){
							SendClientMessageEx(playerid, COLOR_GREY, "Tono Apagado.");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if(Mobile[giveplayerid] != INVALID_PLAYER_ID){
							SendClientMessageEx(playerid, COLOR_GRAD2, "Tono Ocupado...");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if (Mobile[giveplayerid] == INVALID_PLAYER_ID){
						    SetPlayerAttachedObject(playerid, 8, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
							format(string, sizeof(string), "Tu telefono está Sonando - Usa /Atender para Atender la Llamada. [Número %d].", Info[playerid][pPnumber]);
							format(string, sizeof(string), "* Teléfono de %s Suena.", GetPlayerNameEx(i));
							SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Ahora usa T, y Habla por el chat por Teléfono.");
							ProxDetector(30.0, i, string, COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL);
							CellTime[playerid] = 1;
							Bought(playerid, 20);
							return 1;
						}
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GRAD2, "Su Llamada no puede darse por el Numero Marcado, por favor, Compruebe el Número e Inténtelo Nuevamente.");
		return 1;
	}
//***sistema de fire***
    zcmd(desactivofuego, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        for(new f = 0; f < sizeof(Fire); f ++)
        {
            DestroyObject(Fire[f]);
            DestroyObject(Fire[f]);
        }
        F = true;
        for(new i = 0; i < MAX_PLAYERS; i ++)
        {
            Apagandofire[i] = 0;
            llegarf[i] = false;
            DisablePlayerCheckpoint(i);
            KillTimer(Timerfire);
        }
        SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} El sistema de incendio ha sido desactivado.");
        return 1;
    }
    zcmd(activofuego, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_AT, "¡Atención!: {FFFFFF}Para poder utilizar este comando, debes tener colocado el /Adminduty.");
        if(Info[playerid][pAdminZC] < 10) return SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} No tienes autorización a usar este comando.");
        F = false;
        SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} El sistema de incendio ha sido activado.");
        return 1;
    }
    zcmd(buscarfuego, playerid, params[])
    {
        if(Team_BomberosBA(playerid))
        {
    	if(F == false) return SendClientMessage(playerid, COLOR_WHITE, "No hay emergencias de incendio por ahora.");
        SetPlayerCheckpoint(playerid, LugarFuego[0], LugarFuego[1], LugarFuego[2], 8.0);
        SendClientMessage(playerid, 0x8D8DFFFF, "[Central]: Se ha advertido a los bomberos de un incendio, sigue el checkpoint.");
        lugarfire = GetTickCount();
        }
        return 1;
    }

CMD:cmueblesx(playerid, params[])
{
    if (PlayerToPoint(10, playerid,1328.0438,-1760.3077,13.5559))
	{
    return ShowModelSelectionMenu(playerid, MueblesObj, "Muebles", 0xFFFFFFFF, 0xDFDFDFFF, 0xD3D3D3FF);
    }
	return 1;
}

CMD:ajustarcasa(playerid, params[]){
    new string[128];
	if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000)
	{
		format(string, sizeof(string), "{BFE44E}» {FFFFFF}Dinero guardado en la casa ($%d).\n{BFE44E}» {FFFFFF}Muebles en o de la casa.", HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]);
		SafeDialogEx(playerid, MENU_CASA, DIALOG_STYLE_LIST, "{BFE44E}» Propiedad", string, "Aceptar", "Salir");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "{BFE44E}» No eres dueño de una casa, o no estás en una de ellas.");
	return 1;
}
CMD:afk(playerid,params[])
	{
	    if(Afk[playerid]==0){
		Afk[playerid]=1;
		Timer[playerid] = SetTimer("SendMessage",100,0);
		TogglePlayerControllable(playerid,0);
		SetPlayerVirtualWorld(playerid,5);
		SetPlayerCameraPos(playerid,-3000.692626,1771.791259,178.880004);
   		SetPlayerCameraLookAt(playerid,-2880.931884,1771.791259,178.880004);
		SendClientMessage(playerid,COLOR_BLANCO, "- Te has colocado en modo AFK para evitar problemas en las vías públicas u otra zona! (/Salirafk)");
		}
		else
		{
		SendClientMessage(playerid,COLOR_BLANCO, "- Ya te encuentras en modo AFK, deberás salir con el comando: /Salirafk");
		}
		return 1;
	}
CMD:salirafk(playerid,params[])
	{
	    if(Afk[playerid]==1){
		Afk[playerid]=0;
		Timer[playerid] = SetTimer("SendMessage",100,0);
		TogglePlayerControllable(playerid,1);
		SetPlayerVirtualWorld(playerid,0);
		SetCameraBehindPlayer(playerid); // Le quita la camara
		SendClientMessage(playerid,COLOR_BLANCO, "- Saliste del modo AFK, ahora puedes seguir disfrutando de la comunidad!");
		}
		else
		{
		SendClientMessage(playerid,COLOR_BLANCO, "- No te encuentras en modo AFK, para entrar debes colocar el comando: /Afk");
		}
		return 1;
	}
CMD:listaafk(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 2)
	{
		new
			estaafk[14 + MAX_PLAYER_NAME];
    	foreach(Player, i) if(Afk[i]==1)
		{
			format(estaafk, sizeof(estaafk), "* %s (ID %i)", GetPlayerNameEx(i), i);
			SendClientMessageEx(playerid, COLOR_GREY, estaafk);
		}
	}
	return 1;
}
// Comando para reiniciar todas las casas del servidor
CMD:reiniciarcasas(playerid, params[])
{
	for(new c = 0; c < MAX_HOUSES; c++)
	{
		new string[200], house;
		new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick));
        if(!strcmp(nick, "Kenji_Wang", true) || !strcmp(nick, "Killian_Mihaly", true) || !strcmp(nick, "Nick_Mason", true) || !strcmp(nick, "Micro_Lopez", true))
		HouseInfo[c][hLock] = 1;
		ClearHouse(c);
		format( HouseInfo[c][hOwner], 128, "Nobody" );
		HouseInfo[c][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SaveHouses();
		DestroyDynamicPickup(HouseInfo[c][hPickupID]);
		HouseInfo[c][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[c][hExteriorX], HouseInfo[c][hExteriorY], HouseInfo[c][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[c][hTextID]);
		format(string, sizeof(string), "{55F032}• Propiedad en Venta •\n\n{FFFFFF}Precio: {55F032}$%d\n{FFFFFF}(/Comprarcasa)", HouseInfo[house][hValue]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 2.0);
	}
return 1;
}

CMD:velocimetro(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "No eres el conductor del vehiculo.");
	}
	else if(!Info[playerid][pSpeedo])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Habilitaste el velocimetro.");
		Info[playerid][pSpeedo] = 1;

		if(arr_Engine{GetPlayerVehicleID(playerid)} != 0)
		{

			new vehicleid = GetPlayerVehicleID(playerid), szSpeed[84];
			format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH - Gas: %d", player_get_speed(playerid), VehicleFuel[vehicleid]);
			GameTextForPlayer(playerid, szSpeed, 1500, 3);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Desactivaste el velocimetro.");
		Info[playerid][pSpeedo] = 0;
		if(arr_Engine{GetPlayerVehicleID(playerid)} != 0) GameTextForPlayer(playerid, " ", 1500, 3);
	}
	return 1;
}
//******************************CMDS FIN******************************
// Ayuda en Texdraw's!
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(_:clickedid != INVALID_TEXT_DRAW)
    {
    	if(clickedid == AyudaT[1])
    	{
    	new iString[1000];
		strcat(iString, "{669999}• Comandos del personaje en general:\n");
		strcat(iString, "{FFFFFF}/cuenta /subirnivel /cambiarclave /tiendacash /tirar /mostrar /ayudatrabajo /limpiarmapa /dnifalso\n");
		strcat(iString, "{FFFFFF}/ayudasuciedad /calcular\n\n\n");
		strcat(iString, "{669999}• Comandos del personaje ilegal:\n");
		strcat(iString, "{FFFFFF}/vendercocaina /vendermarihuana /plantar /revisarplanta /sacarplanta /semillas\n\n\n");
		strcat(iString, "{669999}• Otros comandos destacados en el servidor:\n");
		strcat(iString, "{FFFFFF}/pagar /subsidio /id /cfumar /cropa /animaciones /ven /verdatos /nodatos /reglas /limpiarmichat\n");
		strcat(iString, "{FFFFFF}/garaje /togduda /buscartrabajo /tognews /togfam /togphone /darcheque /recargar /redes /record\n");
		strcat(iString, "{FFFFFF}/eject /aspirarcocaina /fumarmarihuana /llenar /moneda /dar /contrato  /duda /re /infovip");
		ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{669999}Ayuda General", iString, "Cerrar", "");
    	}
    	else if(clickedid == AyudaT[2])
    	{
		if(IsAPolice(playerid))
		    {
                new iString[1000];
                strcat(iString, "/radio /r /d /m /su /esposar /desesposar /ta(off) /limpiarcamion /vmaletero /ram /lucespd /arrastrar /rllamada /cargos\n");
                strcat(iString, "/quitar /multar /detener /bk /bkc /derechos /bar(2)(3) /qb /placa /embargar /tgunmaletero /(q)(p)spikes /bengala\n");
                strcat(iString, "/sospechosos /lapddiv /verllaves /registroveh /dejarmulta /lapd /arrestar /destruirplanta /deposito /cono\n");
                strcat(iString, "/npatrulla /bksame /bkcsame /alcoholemia /alpiso /limpiar /cargos /pduty\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Policía de Los Ángeles y Sheriff", iString, "Cerrar", "");

		    }
		    else if(Team_CBP(playerid))
			{
                new iString[1000];
                strcat(iString, "/robar /miembros /f\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Cedar Block Piru", iString, "Cerrar", "");
			}
			 else if(Team_Broadway(playerid))
			{
                new iString[1000];
   				strcat(iString, "/robar /miembros /f\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}N/S Broadway XIV", iString, "Cerrar", "");
			}
			else if(Team_Yakuza(playerid))
			{
			    new iString[1000];
				strcat(iString, "/equipo /robar /miembros /f /garaje /robarbanco\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Yakuza", iString, "Cerrar", "");
			}
			else if(Team_Santana(playerid))
			{
			    new iString[1000];
                strcat(iString, "/equipo /robar /miembros /f /garaje /robarbanco\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Santana", iString, "Cerrar", "");
			}
			else if(Team_BomberosBA(playerid))
			{
			    new iString[1000];
                strcat(iString, "/bduty /d /m /r(adio) /equipo /gob /qfuego /buscarfuego\n");
                strcat(iString, "/bar(2)(3) /qb /cono /bengala /(q)(p)spikes /placa\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Bomberos", iString, "Cerrar", "");
			}
			else if(Team_Alqaeda(playerid))
			{
			    new iString[1000];
                strcat(iString, "/equipo /robar /miembros /f /garaje /robarbanco\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}I.S.I.S", iString, "Cerrar", "");
			}
			else if(Team_Rusa(playerid))
			{
			    new iString[1000];
                strcat(iString, "/equipo /robar /miembros /f /garaje /robarbanco\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Rusos", iString, "Cerrar", "");
			}
			else if(Team_Motor(playerid))
			{
			    new iString[1000];
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{2EDFFF}Motoqueros","{2EDFFF}• Comandos disponibles para la facción Motoqueros •\n{FFFFFF}/f /equipo /pr /robarshop\n\n(Líderes): /contratar /despedir /darrango\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción. (247 o 248)\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
                strcat(iString, "/f /equipo /pr /robar\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Motoqueros", iString, "Cerrar", "");
			}
			else if(Team_BMC(playerid))
			{
			    new iString[1000];
		       	strcat(iString, "/robar /miembros /f\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Boulevard Mafia Crips", iString, "Cerrar", "");
			}
			 else if(Team_Longos(playerid))
			{
			    new iString[1000];
		        strcat(iString, "/robar /miembros /f\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Varrio Longos 13", iString, "Cerrar", "");
			}
			 else if(Team_LCN(playerid))
			{
			    new iString[1000];
				strcat(iString, "/equipo /robar /miembros /f /garaje /robarbanco\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}La Cosa Nostra", iString, "Cerrar", "");
			}
		    else if(Team_LAMD(playerid))
			{
			    new iString[1000];
       			strcat(iString, "/equipo /gob /sacarsangre /pcinfo /garaje /mduty /placa (/r)adio (/d)epartaments\n");
       			strcat(iString, "/irpt /subirpt /dejarpt /curar /certificar");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Médicos", iString, "Cerrar", "");
			}
			else if(Team_Mecanicos(playerid))
			{
			    new iString[1000];
          		strcat(iString, "/miembros /menu /mecaduty /nitro /hyd /garaje /equipo\n");
       			strcat(iString, "/venderspray /remolcar /reparar /cargarlegas /f");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Mecánicos", iString, "Cerrar", "");
			}
			else if(Hitman(playerid))
			{
			    new iString[1000];
          		strcat(iString, "/miembros /buscar /acontrato /amascara /darhit\n");
       			strcat(iString, "/hrangos /borrarhit /equipo /hits\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Hitman", iString, "Cerrar", "");
			}
			else if(Team_USMC(playerid))
			{
			    new iString[1000];
			    strcat(iString, "/misil /usmc (/r)adio /d /m (/ta)zer /tgunmaletero /eduty /usmcdiv /su /derechos /deposito /alpiso\n");
       			strcat(iString, "/revisar /bar /placa /qb /esposar /gob /limpiarcamion /vmaletero /(q)(p)spikes /detener /prision\n");
       			strcat(iString, "División Médicos: /dejarpt - /subirpt\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}United States Marine Corps", iString, "Cerrar", "");
			}
			else if(Team_LSTV(playerid))
			{
			    new iString[1000];
			    strcat(iString, "/miembros /entrevista /f /garaje /equipo /activarlinea /panum\n");
       			strcat(iString, "/nt (Noticias) - /Et (Entretenimiento) - /Ent (Entrevistas) - /Msfox (Música)\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}FOX", iString, "Cerrar", "");
			}
			else if(Gobierno(playerid))
			{
			    new iString[1000];
			  	strcat(iString, "/miembros /equipo /gob /impuesto\n/dejarfondos /gobdiv /garaje /d /(r)adio /sfondos\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Gobierno", iString, "Cerrar", "");
			}
			else if(Team_Judicial(playerid))
			{
			    new iString[1000];
       			strcat(iString, "/miembros (/r)adio /d /orden /qorden /multajudicial /scarcel /revertir /arrestojudicia\n");
       			strcat(iString, "/sprision /buscados /juicio /librarcargos /recompensar /verjuicios /presentar\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Sistema Judicial", iString, "Cerrar", "");
			}
			else if(Team_AININT(playerid))
			{
			    new iString[1000];
		        strcat(iString, "/miembros /r /d /m /su /encontrarveh /placa /revisar /gob /bkainint\n");
       			strcat(iString, "/esposar /desesposar /ta(off) /vmaletero /ainint /arrestar /alpiso\n");
       			strcat(iString, "/deposito /quitar /multar /detener /derechos /encontrar /lucespd\n");
       			strcat(iString, "/limpiar /sospechosos /ainintdiv /tgunmaletero /ram /ainintduty /bkc\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}AININT", iString, "Cerrar", "");
			}
			else if(Team_CIA(playerid))
			{
			    new iString[1000];
		        strcat(iString, "/d (/r)adio /ciadiv /su /sospechosos /m /vcoche /bengala /bar(2)(3) /desesposar\n");
       			strcat(iString, "/quitar /gob /derechos /deposito /verllaves\n");
       			strcat(iString, "/dejarmulta /limpiarcamion /ta(off) /vmaletero");
       			strcat(iString, "/cono /qb /(q)(p)spikes /ram /esposar\n");
       			strcat(iString, "/arrestar /cia /ciaduty /arrestar /limpiar\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}CIA", iString, "Cerrar", "");
			}
			else if(Play_Music(playerid))
			{
			    new iString[1000];
       			strcat(iString, "/ms (Para poder hablar global) /mson (Para poner una música por link global)\n\n");
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Play Music Radio", iString, "Cerrar", "");
			}
    	}
    	else if(clickedid == AyudaT[3])
    	{
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Chat", "{669999}• Comunicación IC:\n{FFFFFF}/g (Gritar) /s (Susurrar) /me /ame /do /c /r (Radio)\n\n\n{669999}• Comunicación OOC:\n{FFFFFF}/b /w (Whisper) /f (Faccion) /duda", "Cerrar", "");
    	}
    	else if(clickedid == AyudaT[4])
    	{
    	if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No eres líder de ninguna facción, por lo tanto no podra ver los cmd's.");
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Líder", "{669999}• Facciones Legales:\n{FFFFFF}/contratar /despedir /darrango /gob /rrestriccion\n\n{669999}• Facciones Ilegales:\n{FFFFFF}/contratar /despedir /darrango /robarbanco /rrestriccion", "Cerrar", "");
			}
		}
    	else if(clickedid == AyudaT[5])
    	{
    	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Teléfono", "{669999}• Todos los comandos actuales para el uso del teléfono:\n{FFFFFF}/llamar /sms /altavoz", "Cerrar", "");
		}
    	else if(clickedid == AyudaT[6])
    	{
  	    new iString[1000];
		strcat(iString, "{669999}• Funciones para casas:\n");
       	strcat(iString, "{FFFFFF}/comprarcasa /rentar /desrentar /timbre /vendercasa(2) /ajustarcasa\n");
       	strcat(iString, "{FFFFFF}/ponerrenta /preciorenta /sarma /garma /cdepositar /cmueble\n");
       	strcat(iString, "{FFFFFF}/cretirar /cmejorar /cajaestado /cseguro /vendermicasa(2)\n");
       	strcat(iString, "{FFFFFF}/arrestar /cia /ciaduty /arrestar /limpiar\n\n");
       	strcat(iString, "{669999}• Funciones para garajes:\n");
       	strcat(iString, "{FFFFFF}/agaraje /cgaraje /comprargaraje /vendergaraje");
        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Casa", iString, "Cerrar", "");
    	}
    	else if(clickedid == AyudaT[7])
    	{
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Vehículo", "{669999}• Comandos de vehículos:\n{FFFFFF}/estacionar /v (nombre) /gps /qmod /seguro\n/gunlocker /vendermicoche /llenar /velocidad\n/smaletero /gmaletero /darllave /quitarllave", "Cerrar", "");
    	}
    	else if(clickedid == AyudaT[8])
    	{
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Banco", "{669999}• Comandos para realizar una acción en tu cuenta bancaria:\n{FFFFFF}/balance /cajero /tarjeta", "Cerrar", "");
    	}
    	else if(clickedid == AyudaT[9])
    	{
		if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF} Usted no pertenece al {FFFF00}Club VIP{FFFFFF}, disculpe las molestias.");
            if(Info[playerid][pVIP] >= 1)
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{FFFF00}VIP Bronce", "{FFFFFF}/armasvip /venderfichasvip /togvip\n/automensaje /ayudafichas /togphone /vip\n/skinpremium /repararpremium", "Cerrar", "");
			}
			if(Info[playerid][pVIP] >= 2)
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{FFFF00}VIP Plata", "{FFFFFF}/invitaramigo /armasvip /venderfichasvip /togvip\n/automensaje /ayudafichas /togphone /vip\n/skinpremium /repararpremium", "Cerrar", "");
			}
			if(Info[playerid][pVIP] >= 3)
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{FFFF00}VIP Oro", "{FFFFFF}/invitaramigo /armasvip /venderfichasvip /togvip\n/automensaje /ayudafichas /togphone /vip\n/spawncasa /skinpremium /repararpremium", "Cerrar", "");
			}
			if(Info[playerid][pVIP] >= 4)
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{FFFF00}VIP Platino", "{FFFFFF}/invitaramigo /armasvip /venderfichasvip /togvip\n/automensaje /ayudafichas /togphone /vip\n/spawncasa /skinpremium /repararpremium", "Cerrar", "");
			}
			if(Info[playerid][pVIP] >= 5)
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{FFFF00}VIP Moderador", "{FFFFFF}/invitaramigo /armasvip /venderfichasvip /togvip\n/automensaje /ayudafichas /togphone /vip\n/spawncasa /skinpremium /repararpremium\n/unirse2", "Cerrar", "");
			}
    	}
    	else if(clickedid == AyudaT[10])
    	{
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Matrimonio", "{FFFFFF}/testigo /proponer /divorcio", "Cerrar", "");
    	}
    	else if(clickedid == AyudaT[11])
    	{
		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Armas", "{FFFFFF}/tarma /rarma /aceptar (arma) /cancelar (arma) /recargar", "Cerrar", "");
    	}
    	else if(clickedid == AyudaT[12])
    	{
		new iString[1000];
		strcat(iString, "{FFFFFF}1: Prohibido usar el /Duda para solicitar a un moderador/administrador (/Soporte)\n");
		strcat(iString, "{FFFFFF}2: No usar cualquier bug para beneficios propios\n");
		strcat(iString, "{FFFFFF}3: No pedir beneficios a la administración\n");
		strcat(iString, "{FFFFFF}4: Utilizar cada canal como corresponde ya sea IC u OOC\n");
		strcat(iString, "{FFFFFF}5: En casos de recibir DM de otro usuario, reportarlo y no responder dicho DM\n");
		strcat(iString, "{FFFFFF}7: Respetar las decisiones de cada persona, menos cancelar un rol. (Solicitar Staff)\n");
		strcat(iString, "{FFFFFF}8: Prohibido en su totaldiad pasar Skype\n");
		strcat(iString, "{FFFFFF}9: Esperar con moderación las respuestas solicitadas\n");
		strcat(iString, "{FFFFFF}10: Solicitar cada rol de robo al banco u otro grande en /foro\n");
		strcat(iString, "{FFFFFF}11: Los Líderes Generales [LG] deben cumplir 1 semana para cambiar de facción \n");
		strcat(iString, "{FFFFFF}12: No trollear a los usuarios, moderadores y administradores\n");
		strcat(iString, "{FFFFFF}13: Hot Key Board [HKB] tiene un límite de 2 lineas por cada macro\n");
		strcat(iString, "{FFFFFF}14: Respetar los tiempos de sanciones: /Sanciones");
		ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF0000}• REGLAS", iString, "De Acuerdo", "");
    	}
    	else if(clickedid == AyudaT[13])
    	{
		if (Info[playerid][pFMember] != 255)
		    {
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}Ayuda Familias", "{FFFFFF}/festado /familias /fdepositar /fretirar /cfdepositar\n/fropa /fsarma /fgarma\n\n{FFFF00}Comandos Lider:\n{FFFFFF}/ajustar /famrango /anombrerango /fseguro /festacionar\n/famllaves /fcomprarseguro (En 24 Horas)", "Cerrar", "");
		    }
		    else SendClientMessageEx(playerid, COLOR_ROJO, "! {FFFFFF}No eres parte de una familia o banda.");

    	}
    	else if(clickedid == AyudaT[14])
    	{
    	switch(Info[playerid][pJob])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Bartender", "/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Vendedor de moviles", "/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Chofer de Autobuses", "/precioviaje ($1 a $10) /recorrido /crecorrido", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Pizzero ", "/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Camionero", "/cargarc", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Repartidor", "/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Fabricante de Armas", "/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Taxista", "/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Granjero", "/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Traficante de droga", "/paquete /habilidad /tirar paquetes(d)\n/removergps", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Vendedor de Chalecos", "/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Artesano", "/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Jardinero", "/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Heladero", "/hduty /venderhelado", "Cerrar", "");
		        case 15: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Conductor de Trenes", "/trenduty /iniciarviaje /cancelarviaje /bocinatren", "Cerrar", "");
		        case 16: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Basurero", "/Rbasurero (Iniciar Recorrido) /Cbasurero (Cancelar Recorrido)", "Cerrar", "");
		        default: SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un trabajo, puedes usar /Buscartrabajo.");
		    }
		    switch(Info[playerid][pJob2])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Bartender", "/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Vendedor de moviles", "/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Chofer de Autobuses", "/precioviaje ($1 a $10) /recorrido /crecorrido", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Pizzero ", "/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Camionero", "/cargarc", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Repartidor", "/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Fabricante de Armas", "/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Taxista", "/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Granjero", "/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Traficante de droga", "/paquete /habilidad /tirar paquetes(d)\n/removergps", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Vendedor de Chalecos", "/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Artesano", "/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Jardinero", "/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Heladero", "/hduty /venderhelado", "Cerrar", "");
		        case 15: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Conductor de Trenes", "/trenduty /iniciarviaje /cancelarviaje /bocinatren", "Cerrar", "");
		        case 16: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{669999}• {FFFFFF}Basurero", "/Rbasurero (Iniciar Recorrido) /Cbasurero (Cancelar Recorrido)", "Cerrar", "");
		    }
		}
    	else if(clickedid == XCierreA)
    	{
   			for(new i = 0; i < 15; i++)
			{
                TextDrawHideForPlayer(playerid, AyudaTexdrawS);
				TextDrawHideForPlayer(playerid, AyudaT[i]);
				TextDrawHideForPlayer(playerid, XCierreA);
			}
			CancelSelectTextDraw(playerid);
    	}
 	}
    return 1;
}
//***************************
stock SendMoleMessage(color, string[]){
	foreach(Player, i){
		if(gPlayerLogged{i} == 1){
			SendClientMessageEx(i, color, string);
		}
	}
}
function cameraexpire(playerid)
{
	SetPVarInt(playerid, "cameraactive", 0);
 	SetCameraBehindPlayer(playerid);
 	if(GetPVarInt(playerid, "camerasc") == 1)
 	{
	 	SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
	  	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
	  	SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
	}
 	TogglePlayerControllable(playerid,1);
  	DestroyDynamic3DTextLabel(Camera3D[playerid]);
   	SendClientMessageEx(playerid, COLOR_GRAD1, "A tu cámara se le acabaron las baterias.");
}
CreateDynamicDoor(doorid){
	new string[128];
	format(string, sizeof(string), "{FFFFFF}%s\n{FFFFFF}ID: {2EDFFF}%d\n{FFFFFF}Presione:{2EDFFF} H",DDoorsInfo[doorid][ddDescription],doorid);
	switch(DDoorsInfo[doorid][ddColor]){
	    case -1:{ /* Disable 3d Textdraw */ }
	    case 1:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 2:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 3:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 4:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 5:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 6:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 7:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 8:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 9:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 10:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 11:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 12:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		default:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	}
	switch(DDoorsInfo[doorid][ddPickupModel]){
	    case -1: { /* PickUps */ }
		case 1:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 2:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1212, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 3:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1239, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 4:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1240, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 5:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 6:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1242, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 7:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1247, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 8:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1248, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 9:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1252, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 10:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1253, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 11:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 12:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 13:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 14:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 15:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 16:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 17:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 18:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 19:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 20:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 21:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 22:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 23:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 24:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 25:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    default: DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1318, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
	}
}
function PlayerPlayMusic(playerid){
	if(IsPlayerConnected(playerid)){
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

function StopMusic(){
	foreach(Player, i){
		PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
	}
}

function FishCost(playerid, fish){
	if(IsPlayerConnected(playerid)){
		new cost = 0;
		switch (fish){
			case 1: cost = 3;
			case 2: cost = 4;
			case 3: cost = 6;
			case 5: cost = 7;
			case 6: cost = 4;
			case 8: cost = 10;
			case 9: cost = 14;
			case 11: cost = 12;
			case 12: cost = 9;
			case 14: cost = 14;
			case 15: cost = 10;
			case 16: cost = 9;
			case 17: cost = 8;
			case 18: cost = 11;
			case 19: cost = 5;
			case 21: cost = 4;
		}
		return cost;
	}
	return 0;
}



//*******************Checks*******************
AdminOnlineCheck(){
	new count;
	foreach(Player, i){
		if(Info[i][pAdminZC] > 1){
			count++;
		}
	}
	return count;
}
medicoon(){
	new count;
	foreach(Player, i){
		if(Info[i][pMember] == 4 || Info[i][pLeader] == 4){
			count++;
		}
	}
	return count;
}
lapdon(){
	new count;
	foreach(Player, i){
		if(Info[i][pMember] == 1 || Info[i][pLeader] == 1){
			count++;
		}
	}
	return count;
}
mecaon(){
	new count;
	foreach(Player, i){
		if(Info[i][pMember] == 6 || Info[i][pLeader] == 6){
			count++;
		}
	}
	return count;
}
JudgeOnlineCheck(){
	new count;
	foreach(Player, i){
		if(Info[i][pMember] == 9 || Info[i][pLeader] == 9){
			count++;
		}
	}
	return count;
}

stock ConvertTime(cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1){

    #define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))

    #define CTM_cty 31536000
    #define CTM_ctmo 2628000
    #define CTM_ctw 604800
    #define CTM_ctd 86400
    #define CTM_cth 3600
    #define CTM_ctm 60

    #define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0


    new strii[128];

    if(cty != -1){
        CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(cty,"year","years"),PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctmo != -1){
        CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctw != -1){
        CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctd != -1){
        CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, and %d %s",PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(cth != -1){
        CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, and %d %s",PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctm != -1){
        CT(ctm);
        format(strii, sizeof(strii), "%d %s, and %d %s",PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    format(strii, sizeof(strii), "%d %s", PLUR(cts,"second","seconds"));
    return strii;
}

stock IsValidVehicleID(vehicleid)
{
   if(GetVehicleModel(vehicleid)) return 1;
   return 0;
}

ShowAdMuteFine(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new allmoney;
 	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
	{
 		allmoney = HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+Info[playerid][pAccount];
   	}
   	else
    {
	 	  allmoney = GetPlayerCash(playerid)+Info[playerid][pAccount];
    }
    new fine = 10*allmoney/100;
	if(Info[playerid][pADMuteTotal] < 4) format(string,sizeof(string),"Prisión por %d Minutos\nPerder Dinero ($%d)",Info[playerid][pADMuteTotal]*15,fine);
	if(Info[playerid][pADMuteTotal] == 4) format(string,sizeof(string),"Prisión por 1 Hora");
	if(Info[playerid][pADMuteTotal] == 5) format(string,sizeof(string),"Prisión por 1 Hora y 15 Minutos)");
	if(Info[playerid][pADMuteTotal] == 6) format(string,sizeof(string),"Prisión por 1 Hora y 30 Minutos");
	SafeDialogEx(playerid,ADMUTE,DIALOG_STYLE_LIST,"Selecciona tu castigo - AD Mutes",string,"Ok","Cancelar");
}

function WeedGrowth(weedid)
{
	if(Info[weedid][pWExists])
	{
	    if(Info[weedid][pWValue] < 45)
	    {
			new level = Info[weedid][pDrugsSkill];
	        if(level >= 0 && level <= 50)
			{ Info[weedid][pWValue]+= 1; }
			else if(level >= 51 && level <= 100)
			{ Info[weedid][pWValue]+= 2; }
			else if(level >= 101 && level <= 200)
			{ Info[weedid][pWValue]+= 2; }
			else if(level >= 201 && level <= 400)
			{ Info[weedid][pWValue]+= 2; }
			else if(level >= 401)
			{ Info[weedid][pWValue]+= 3; }
			if(Info[weedid][pWValue] > 45)
			{
			    Info[weedid][pWValue] = 45;
			}
		}
	}
	return 1;
}

WeedLogin(playerid)
{
	if(Info[playerid][pWExists])
	{
		Info[playerid][pWObject] = CreateDynamicObject(19473, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ], 0.0, 0.0, 0.0, Info[playerid][pWVW], Info[playerid][pWInt]);
		Info[playerid][pWTimer] = SetTimerEx("WeedGrowth", 60000, 1, "i", playerid);
		return 1;
	}
	return 1;
}

WeedLogout(WeedID)
{
	if(Info[WeedID][pWExists])
	{
		KillTimer(Info[WeedID][pWTimer]);
		DestroyDynamicObject(Info[WeedID][pWObject]);
		return 1;
	}
	return 1;
}

ClearWeed(WeedID)
{
	KillTimer(Info[WeedID][pWTimer]);
	DestroyDynamicObject(Info[WeedID][pWObject]);
	Info[WeedID][pWX] = 0.0;
	Info[WeedID][pWY] = 0.0;
	Info[WeedID][pWZ] = 0.0;
	Info[WeedID][pWValue] = 0;
	Info[WeedID][pWExists] = 0;
	return 1;
}

stock GiftPlayer(playerid)
{
		new string[128];
		new gift = Random(1, 19);
		switch(gift)
		{
		    case 1:
		    {
	        	if(Info[playerid][pConnectTime] < 5 || Info[playerid][pWRestricted] > 0) return GiftPlayer(playerid);
		    	GivePlayerValidWeapon(playerid, 24);
		    	GivePlayerValidWeapon(playerid, 31);
		    	GivePlayerValidWeapon(playerid, 29);
	        	SendClientMessageEx(playerid, -1, " Felicidades, ahora tienes un set de armas!");
	        	format(string, sizeof(string), "* A %s le regalaron un set de armas completo!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 2:
		    {
    			GivePlayerCash(playerid, 5000);
	        	SendClientMessageEx(playerid, -1, "  Felicidades, has ganado $5.000!");
	        	format(string, sizeof(string), "* A %s le regalaron $5.000 que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 3:
		    {
	        	Info[playerid][pMats] += 1000;
	        	SendClientMessageEx(playerid, -1, " Felicidades, ahora tienes 1.000 de materiales!");
	        	format(string, sizeof(string), "* A %s le regalaron 1.000 de materiales!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 4:
		    {
				return GiftPlayer(playerid);
		    }
		    case 5:
		    {
				Info[playerid][pCrack] += 10;
				SendClientMessageEx(playerid, -1, " Felicidades, ganaste 10 gramos de cocaína!");
				format(string, sizeof(string), "* A %s le regalaron 10 gramos de cocaína, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 6:
		    {
	        	GivePlayerCash(playerid, 10000);
				SendClientMessageEx(playerid, -1, " Felicidades, ganaste $10.000!");
				format(string, sizeof(string), "* A %s le regalaron $10,000 en efectivo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 7:
		    {
	        	GivePlayerCash(playerid, 15000);
				SendClientMessageEx(playerid, -1, "  Felicidades, has ganado $15,000!");
				format(string, sizeof(string), "* A %s le regalaron $15,000 en efectivo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 8:
		    {
	        	GivePlayerCash(playerid, 20000);
				SendClientMessageEx(playerid, -1, "  Felicidades, has ganado $20,000!");
				format(string, sizeof(string), "* A %s le regalaron $20,000 en efectivo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 9:
		    {
		    	GivePlayerCash(playerid, 25000);
				SendClientMessageEx(playerid, -1, " Felicidades, has ganado $25,000!");
				format(string, sizeof(string), "* A %s le regalaron $25,000 en efectivo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 10:
		    {
		    	Info[playerid][pMats] += 10000;
				SendClientMessageEx(playerid, -1, "  Felicidades, has ganado 10.000 materiales!");
				format(string, sizeof(string), "* A %s le regalaron 10.000 materiales, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 11:
		    {
			    Info[playerid][pExp] += 2;
				SendClientMessageEx(playerid, -1, "  Felicidades, has ganado 2 puntos de experiencia!");
				format(string, sizeof(string), "* A %s le regalaron 2 puntos de experiencia, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 12:
		    {
			    Info[playerid][pExp] += 4;
				SendClientMessageEx(playerid, -1, "  Felicidades, has ganado 4 puntos de experiencia!");
				format(string, sizeof(string), "* A %s le regalaron 4 puntos de experiencia, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 13:
		    {
		    Info[playerid][pExp] += 5;
				SendClientMessageEx(playerid, -1, "  Felicidades, has ganado 5 puntos de experiencia!");
				format(string, sizeof(string), "* A %s le regalaron 5 puntos de experiencia, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 14:
		    {
				Info[playerid][pPaintTokens] += 200;
				SendClientMessageEx(playerid, COLOR_GRAD2, "  Felicidades, has ganado 200 Fichas de PaintBall!");
				format(string, sizeof(string), "* A %s le regalaron 200 fichas de paintball, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("logs/- Regalos Abiertos.log", string);
		    }
		    case 17:
		    {
          		if(Info[playerid][pVIP] > 0)
		        {
					Info[playerid][pVTokens] += 10;
					SendClientMessageEx(playerid, COLOR_GRAD2, "  Felicidades, has ganado 10 Fichas VIP!");
					SendClientMessageEx(playerid, -1, " Puedes venderlas o usarlas en el lounge VIP!");
					format(string, sizeof(string), "* A %s le regalaron 10 Fichas VIP, que lo disfrute!", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					Log("logs/- Regalos Abiertos.log", string);
				}
				else
			    {
			        Info[playerid][pVIP] = 1;
        			Info[playerid][pTempVIP] = 3600;
		    		Info[playerid][pBuddyInvited] = 1;
				    SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido invitado a ser Bronce VIP por 1 hora VIP. Disfrutalo!");
				    format(string, sizeof(string), "BUDDY INVITE: %s ha ganado un buddyinvite.", GetPlayerNameEx(playerid));
				    Log("logs/- Invitaciones VIP.log", string);
				    format(string, sizeof(string), "* ¡A %s le regalaron 1 hora de Bronce VIP, que lo disfrute!", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
                    Log("logs/- Regalos Abiertos.log", string);
				}
		    }
		    default: return GiftPlayer(playerid);
		}
	    return 1;
}


public OnPlayerCommandReceived(playerid, cmdtext[])
{
    printf("[CMD] [%s]: %s", GetPlayerNameEx(playerid), cmdtext);
    if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "* No puedes utilizar comandos si no estás logeado en el servidor");
	if(strfind(cmdtext, "|", true) != -1)
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes usar el carácter '|' en un comando.");
		return 0;
	}
	if(GetPVarInt(playerid, "LoadingObjects") == 1)
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes usar comandos en este momento.");
	    return 0;
	}
 	if(Info[playerid][pAdminZC] < 2)
	{
		if(strfind(cmdtext, ":", true) != -1)
		{
			new
				i_numcount,
				i_period,
				i_pos;
			while(cmdtext[i_pos])
			{
				if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
				else if(cmdtext[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3)
			{
				new string[128];
				format(string,sizeof(string),"Atención: (ID: %d) %s puede estar haciendo SPAM: '%s'.", playerid, GetPlayerNameEx(playerid),cmdtext);
				SendAdminMessage(COLOR_RED, string);
				return 0;
			}
		}
	}
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) SendClientMessage(playerid, COLOR_WHITE, "* Cmd mal escrito o no existe, más información en {B9C9CF}/ayuda{FFFFFF} o puede enviar su {B9C9CF}/duda{FFFFFF} para más soporte.");
	return 1;
}

//------------------------------------------------------------------------------------------------------
stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5)
{
	new
		Float: f_playerPos[3];
	GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
	foreach(Player, i)
	{
		if(!BigEar[i])
		{
			if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				if(IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col1, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col2, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col3, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col4, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col5, string);
				}
			}
		}
		else SendClientMessageEx(i, col1, string);
	}
	return 1;
}

ProxDetectorS(Float:radi, playerid, targetid)
{
	new
		Float: fp_playerPos[3];
	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}

function PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

public OnPlayerText(playerid, text[])
{
    if(DetectarSpam(text)) { SendClientMessage(playerid,0xAA3333AA,"Lo que usted ha escrito en el chat, se considera SPAM!"); return 0; }
	// Anti-MG
	if(strfind(text, "=)", true) != -1 || strfind(text, "xD", true) != -1 || strfind(text, ":v", true) != -1 || strfind(text, ":'v", true) != -1 || strfind(text, "RolePlay", true) != -1 || strfind(text, ":)", true) != -1 || strfind(text, "x'D", true) != -1 || strfind(text, ":P", true) != -1 || strfind(text, "Admin", true) != -1 || strfind(text, "Noob", true) != -1 || strfind(text, "RP", true) != -1 || strfind(text, ":D", true) != -1 || strfind(text, ":c", true) != -1 || strfind(text, "v:", true) != -1)
	{
	SendClientMessage(playerid,0xAA3333AA,"Los signos colocados se prohiben por razón: MetaGamin [MG]");
	return 0;
    }
	new sendername[MAX_PLAYER_NAME],string[256],tmp[32];
	new giveplayer[MAX_PLAYER_NAME];
	if(Muted[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "* ¡Has sido silenciado!");
		return 0;
	}
	if(!gPlayerLogged{playerid})
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "No puedes usar el chat en el Login - Kikeado automáticamente.");
		Kick(playerid);
		return 0;
	}
	if(TutStep[playerid] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "* Estás en el tutorial no puedes hablar.");
		return 0;
	}
	if(TalkingLive[playerid] != INVALID_PLAYER_ID)
	{
		if(Team_LSTV(playerid))
		{
			format(string, sizeof(string), "[FOX Entrevistas]-[Reportero]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), text);
			OOCNews(COLOR_NEWS2, string);
		}
		else
		{
			format(string, sizeof(string), "[FOX Entrevistas]-[Invitado]{FFFFFF} %s: %s", GetPlayerNameEx(playerid), text);
			OOCNews(COLOR_NEWS2, string);
		}
		return 0;
	}
	if(MarriageCeremoney[playerid] > 0)
	{
		if (strcmp("si", text, true) == 0)
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "Sacerdote: %s aceptas a %s como tu esposa para siempre? (Escribe 'Si' - cualquier otro caracter arruinaria el matrimonio).", giveplayer,sendername);
					SendClientMessageEx(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0; // Yeah... no more "YES DILDOS SEX RAPE LOL" broadcast to the whole server
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(Info[playerid][pSex] == 1 && Info[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticias: Tenemos una nueva linda pareja! %s y %s ahora están casados!!", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(Info[playerid][pSex] == 1 && Info[ProposedTo[playerid]][pSex] == 1)
					{
						format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticias: Tenemos una nueva pareja gay! %s & %s se han casado.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(Info[playerid][pSex] == 2 && Info[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticias: Tenemos una nueva pareja de lesbianas! %s & %s se han casado.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(Info[ProposedTo[playerid]][pMarriedTo], MAX_PLAYER_NAME, "%s", sendername);
					format(Info[playerid][pMarriedTo], MAX_PLAYER_NAME, "%s", giveplayer);
					GivePlayerCash(playerid, - 100000);
					Info[playerid][pMarried] = 1;
					Info[ProposedTo[playerid]][pMarried] = 1;
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		else
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					format(string, sizeof(string), "* No quisiste casarse con %s, no dijiste 'si'.", GetPlayerNameEx(GotProposedBy[playerid]));
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s no quisó casaste contigo, no dijo 'si'.",GetPlayerNameEx(playerid));
					SendClientMessageEx(GotProposedBy[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					format(string, sizeof(string), "* No quisiste casarse con %s, no dijiste 'si'.",GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s no quisó casaste contigo, no dijo 'si'.",GetPlayerNameEx(playerid));
					SendClientMessageEx(ProposedTo[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		return 0;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(UnidentifedCall[playerid] == 1)
		{
		    format(string, sizeof(string), "(Teléfono): %s", text);
		}
		else
		{
			format(string, sizeof(string), "(Teléfono): %s", text);
		}
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		// -============================ · ============================- //
		if(Mobile[playerid] == 915)
		{
		    if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_BLANCO, "Centro Médico: Entendido, por favor dígamos su ubicación.");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			format(wanted, sizeof(wanted), "{FF7477}Centro Médico: {FFFFFF}%s necesita una ambulancia de urgencias en %s",turner, text);
			SendRadioMessage(4, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "{FF7477}Centro Médico: {FFFFFF}La situación es la siguiente, %s",Situacion[playerid]);
			SendRadioMessage(4, TEAM_CYAN_COLOR, wanted);
			format(string, sizeof(string), "[Central]: Solicitaron una ambulancia en %s, por favor, que un móvil de apoyo asista al lugar.",text);
			SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			emdtrace = 1; emdtrace_x = trace_x; emdtrace_y = trace_y; emdtrace_z = trace_z;
			SendClientMessageEx(playerid, COLOR_BLANCO, "Centro Médico: La ambulancia está en camino, por favor sea paciente.");
			SendClientMessageEx(playerid, COLOR_ROJO, "¡Colgaron!");
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 8);
			return 0;
		}
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_BLANCO, "Centro Médico: Buenas, por favor necesitamos detalles de la urgencia.");
				return 0;
			}
			SendClientMessageEx(playerid, COLOR_BLANCO, "Centro Médico: Entendido, por favor díganos su ubicación.");
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			Mobile[playerid] = 915;
			return 0;
		}
		if(Mobile[playerid] == 921)
		{
		    if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_BLANCO, "Bomberos: Por favor, dígamos su ubicación para enviar una unidad.");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			format(wanted, sizeof(wanted), "Dep. Bomberos: {FFFFFF}%s notifica una emergencia en %s",turner, text);
			SendRadioMessage(20, COLOR_ROJO, wanted);
			format(wanted, sizeof(wanted), "Dep. Bomberos: {FFFFFF}La siguiente situación es %s",Situacion[playerid]);
			SendRadioMessage(20, COLOR_ROJO, wanted);
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			emdtrace = 1; emdtrace_x = trace_x; emdtrace_y = trace_y; emdtrace_z = trace_z;
			SendClientMessageEx(playerid, COLOR_BLANCO, "Dep. de Bomberos: {FFFFFF}Una unidad de bomberos está en camino, espere. . .");
			SendClientMessageEx(playerid, COLOR_BLANCO, "¡Colgaron!");
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 8);
			return 0;
		}
		if(Mobile[playerid] == 920)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_BLANCO, "{FFFFFF}Bomberos: Informe la situación.");
				return 0;
			}
			SendClientMessageEx(playerid, COLOR_BLANCO, "{FFFFFF}Bomberos: Entendido, por favor díganos su ubicación.");
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			Mobile[playerid] = 921;
			return 0;
		}
		if(Mobile[playerid] == 758)
		{
		    format(string, sizeof(string), "(celular) %s", text);
		    SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
			format(string, sizeof(string), "[News Live - %s] Celular: %s",GetPlayerNameEx(playerid), text);
			OOCNews(COLOR_NEWS2, string);
			return 0;
		}
		if(Mobile[playerid] == 904)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "Departamento Federal: No entendemos lo que dices!");
				return 0;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(strfind(text, " ", true))
			{
			    format(string, sizeof(string), "[Central]: Se ha solicitado una unidad en: %s",text);
				SendFamilyMessage(2, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "[Central]: El señor/a %s denunció: %s",sendername, Situacion[playerid]);
				SendFamilyMessage(2, TEAM_RADIO_COLOR, string);
				SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "Dep. Federal:{FFFFFF} Bien, ya esta yendo una unidad en camino, gracias por informar.");
				SendClientMessageEx(playerid, COLOR_ROJO, "¡Colgaron!");
				Mobile[playerid] = INVALID_PLAYER_ID;
				new Float:trace_x, Float:trace_y, Float:trace_z;
				GetPlayerPos(playerid, trace_x, trace_y, trace_z);
				pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(playerid, 8);
				return 0;
			}
			else
			{
			    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "Departamento Federal:{FFFFFF} Por favor, calmese y repita bien la ciudad o detalles del lugar.");
			    return 0;
			}
		}
		if(Mobile[playerid] == 903)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "Departamento Federal:{FFFFFF} No entiendo, por favor repita lo que dijo.");
				return 0;
			}
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			format(string, sizeof(string), "Dep. Federal:{FFFFFF} Díganos ubicación o detalles del lugar por favor.", GetPlayerNameEx(playerid));
			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, string);
			Mobile[playerid] = 904;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "Departamento de Policía: No entendemos lo que dices!");
				return 0;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(strfind(text, " ", true))
			{
			    format(string, sizeof(string), "[Central]: han solicitado una patrulla en: %s",text);
				SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "[Central]: un tal %s denuncia: %s",sendername, Situacion[playerid]);
				SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
				SendClientMessageEx(playerid, COLOR_WHITE, "Dep. de Policía: Bien, ya esta yendo una unidad en camino, gracias por comunicarte.");
				SendClientMessageEx(playerid, COLOR_ROJO, "¡Colgaron!");
				Mobile[playerid] = INVALID_PLAYER_ID;
				new Float:trace_x, Float:trace_y, Float:trace_z;
				GetPlayerPos(playerid, trace_x, trace_y, trace_z);
				pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(playerid, 8);
				return 0;
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_BLANCO, "Departamento de policía: Por favor, calmese y repita bien la ciudad o detalles del lugar.");
			    return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_BLANCO, "Departamento de policía: No entiendo, por favor repita lo que dijo.");
				return 0;
			}
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			format(string, sizeof(string), "Dep. de policía: Díganos ubicación o detalles del lugar por favor.", GetPlayerNameEx(playerid));
			SendClientMessageEx(playerid, COLOR_BLANCO, string);
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "Operadora: Lo sentimos, repita el servicio solicitado el cual es policia, paramedico, bomberos o AININT.");
				return 0;
			}
			else if ((strcmp("Policia", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Policia")))
			{
				SendClientMessageEx(playerid, COLOR_BLANCO, "{FFFFFF}• La conexión con el departamento de {000099}policía{FFFFFF} fue establecida con éxito.");
				SendClientMessageEx(playerid, COLOR_BLANCO, "Dep. de policía: Buenas señor/a, ¿Nos puede dar detalles?.");
				Mobile[playerid] = 912;
				return 0;
			}
			else if ((strcmp("Medico", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Medico")))
			{
			    SendClientMessageEx(playerid, COLOR_BLANCO, "{FFFFFF}• La conexión con el {FF7477}hospital{FFFFFF} fue establecida con éxito.");
				SendClientMessageEx(playerid, COLOR_BLANCO, "Centro Médico: Buenas, por favor díganos la emergencia.");
				Mobile[playerid] = 914;

				return 0;
			}
			else if ((strcmp("Bombero", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Bombero")))
			{
			    SendClientMessageEx(playerid, COLOR_BLANCO, "{FFFFFF}• La conexión con el departamento de {FF0000}bomberos{FFFFFF} fue establecida con éxito.");
				SendClientMessageEx(playerid, COLOR_BLANCO, "Dep. de Bomberos: Muy buenas, por favor diganos la situación.");
				Mobile[playerid] = 920;

				return 0;
			}
			else if ((strcmp("AININT", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("AININT")))
			{
			    SendClientMessageEx(playerid, COLOR_BLANCO, "{FFFFFF}• La conexión con el departamento de {000099}AININT{FFFFFF} fue establecida con éxito.");
				SendClientMessageEx(playerid, COLOR_BLANCO, "Dep. Federal: Buenas señor/a, ¿Nos puede dar detalles de la situación?.");
				Mobile[playerid] = 903;

				return 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "Operadora: Lo sentimos, repita el servicio solicitado el cual es policia, paramedico, bomberos o AININT.");
				return 0;
			}
		}
		if(Mobile[playerid] == 3901)
		{
			SendFamilyMessage(5, COLOR_GREEN, "[Central]: Llegó un nuevo mensaje a SA News:");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[ID:%d] Mensaje de %s: %s", playerid, sendername, text);
			SendFamilyMessage(5, COLOR_GREEN, string);
			SendClientMessageEx(playerid, COLOR_GREEN, "SA News Estudio: Gracias por su información !");
			SendClientMessageEx(playerid, COLOR_GRAD2, "   la llamada se colgo...");
			Mobile[playerid] = 255;
			return 0;
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(Info[Mobile[playerid]][pSpeaker] != 0)
				{
			   		format(string, sizeof(string), "* Altavoz * %s dice: %s", GetPlayerNameEx(playerid), text);
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
			   		SendClientMessageEx(Mobile[playerid], COLOR_YELLOW,string);
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_YELLOW,"No hay nadie!");
		}
		return 0;
	}
	if(GetPVarInt(playerid, "IsInArena") == 1)
	{
		if(GetPVarInt(playerid, "ArenaMode") == 2)
		{
			switch(Info[playerid][pPaintTeam])
			{
			    case 1:
				{
					format(string, sizeof(string), "{FFFFFF}[P. Chat - {FF0000}Equipo Rojo{FFFFFF}] %s dice: %s", GetPlayerNameEx(playerid), text);
				}
				case 2:
				{
					format(string, sizeof(string), "{FFFFFF}[P. Chat - {000099}Equipo Azul{FFFFFF}] %s dice: %s", GetPlayerNameEx(playerid), text);
				}
			}
		}
		if(GetPVarInt(playerid, "ArenaMode") == 1)
		{
			format(string, sizeof(string), "{FFFFFF}[P. Chat] %s dice: %s", GetPlayerNameEx(playerid), text);
		}
		if(GetPVarInt(playerid, "ArenaMode") == 3)
		{
			format(string, sizeof(string), "{FFFFFF}[P. Chat] %s dice: %s", GetPlayerNameEx(playerid), text);
		}
		SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_WHITE, string);
		return 0;
	}
	if(Info[playerid][pMaskuse] == 1)
	{
		format(string, sizeof(string), "{FFFFFF}Desconocido dice: %s", text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		return 0;
	}
 	switch(Info[playerid][pAccent])
	{
		case 0, 1:
		{
			format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid,string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 2:
		{
			format(string, sizeof(string), "[Acento Britanico] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 3, 4, 5:
		{
			format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 6:
		{
			format(string, sizeof(string), "[Acento Venezolano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 7:
		{
			format(string, sizeof(string), "[Acento Peruano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 8:
		{
			format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 9:
		{
			format(string, sizeof(string), "[Acento Americano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 10:
		{
			format(string, sizeof(string), "[Acento Español] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 11:
		{
			format(string, sizeof(string), "[Acento Colombiano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 12:
		{
			format(string, sizeof(string), "[Acento Francés] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 13:
		{
			format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 14:
		{
			format(string, sizeof(string), "[Acento Gangster] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 15:
		{
			format(string, sizeof(string), "[Acento Uruguayo] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 16:
		{
			format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 17:
		{
			format(string, sizeof(string), "[Acento Argentino] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 18:
		{
			format(string, sizeof(string), "[Acento Chileno] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 19:
		{
			format(string, sizeof(string), "[Acento Cubano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 20:
		{
			format(string, sizeof(string), "[Acento Israeli] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 21:
		{
			format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 22:
		{
			format(string, sizeof(string), "[Acento Hippie] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 23:
		{
			format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
	}
	return 0;
}

function FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

stock IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}

    function TeleportPlayer(playerid)
    {
            new Float:cx, Float:cy, Float:cz;
            GetPlayerPos(playerid, cx, cy, cz);
    		for(new i = 0; i < sizeof(DDoorsInfo); i++)
                            {
                            if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
							{
           						 SendClientMessageEx(playerid, COLOR_GRAD2, "Usa el comando /entrar o presiona la tecla [H] para entrar a un interior, para salir usa /salir, o pulsa [H]");
            					return 1;
       						 }
                            if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW])
                                    {
                            if(DDoorsInfo[i][ddVIP] > 0 && Info[playerid][pVIP] < DDoorsInfo[i][ddVIP])
                                            {
                                    SendClientMessageEx(playerid, COLOR_FADE1, "Seguridad dice: Para entrar a este lugar debes tener tu credencial del Club VIP.");
                                    return 1;
                            }
                            if(DDoorsInfo[i][ddFamily] > 0)
                                            {
                                    if(Info[playerid][pFMember] != DDoorsInfo[i][ddFamily]-1)
                                                    {
                                    SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes entrar, sólo para miembros de la familia.");
                                                    return 1;
                                            }
                                }
                                if(DDoorsInfo[i][ddFaction] > 0)
                                            {
                                                    if(DDoorsInfo[i][ddFaction] >= 1 && DDoorsInfo[i][ddFaction] <= 3)
                                                    {
                                                            if(!OrgGob(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes entrar, esta puerta está restringida. (Sólo Policías)");
                                                    }
                                                    else if(DDoorsInfo[i][ddFaction] < 32 && Info[playerid][pMember] != DDoorsInfo[i][ddFaction])
                                                    {
                                                            return  SendClientMessageEx(playerid, COLOR_GRAD2, "Sólo ingreso a miembros de la facción.");
                                                    }
                                }
                                if(DDoorsInfo[i][ddAdmin] > 0 && Info[playerid][pAdminZC] < DDoorsInfo[i][ddAdmin])
                                            {
                                    return SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes entrar, necesitas ser de más nivel administrativo.");
                                }

                                if(DDoorsInfo[i][ddWanted] > 0 && Info[playerid][pWantedLevel] != 0)
                                            {
                                    return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta puerta esta restringida a personas con nivel de búsqueda.");
                                }

                                            if(DDoorsInfo[i][dLocked] == 1)
                                            {
                                                return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta puerta está bloqueada.");
                                            }
                            SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
                            Info[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
                            Info[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
                            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
                            if(DDoorsInfo[i][ddInteriorLoad])
                                            {
                               LoadObjects(playerid);
                            }
                            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                                            {
                            SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                            SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                            SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                            LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
                            }
                            else
                                            {
                                    SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                                    SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                                    SetCameraBehindPlayer(playerid);
                            }
                            if(DDoorsInfo[i][dMusic] == 0) return 1;
                            else
                            {
                                switch(DDoorsInfo[i][dMusic])
                                {
                                    case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=56349", 1, 1, 1, 1, 0); // Reggeaton
                                case 2: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=860870", 1, 1, 1, 1, 0); // Electro
                                case 3: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200", 1, 1, 1, 1, 0); // Techno
                                case 4: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016", 1, 1, 1, 1, 0); // Hip hop
                                case 5: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366", 1, 1, 1, 1, 0); // Variada
                            }
                        }
                                            return 1;
                            }
                        }
                        for(new i = 0; i < sizeof(fINFO); i++)
                            {
                            if (IsPlayerInRangeOfPoint(playerid,3.0,fINFO[i][FamilyEntrance][0], fINFO[i][FamilyEntrance][1], fINFO[i][FamilyEntrance][2]))
                                    {
                                    LoadObjects(playerid);
                            SetPlayerInterior(playerid,fINFO[i][FamilyInterior]);
                            Info[playerid][pInt] = fINFO[i][FamilyInterior];
                            Info[playerid][pVW] = fINFO[i][FamilyVirtualWorld];
                            SetPlayerVirtualWorld(playerid, fINFO[i][FamilyVirtualWorld]);
                            if(fINFO[i][FamilyCustomMap])
                                            {
                                    LoadObjects(playerid);
                            }
                            Streamer_UpdateEx(playerid, fINFO[i][FamilyExit][0],fINFO[i][FamilyExit][1],fINFO[i][FamilyExit][2]);
                            SetPlayerPos(playerid,fINFO[i][FamilyExit][0],fINFO[i][FamilyExit][1],fINFO[i][FamilyExit][2]);
                            SetPlayerFacingAngle(playerid,fINFO[i][FamilyExit][3]);
                            return 1;
                            }
                            }
                            //AININT
                    if(PlayerToPointStripped(1, playerid,325.4713,-1514.8862,36.0325, cx,cy,cz))
                    {
                        LoadObjects(playerid);
                            SetPlayerPos(playerid,278.0079,-1505.8489,-45.1302); Info[playerid][pVW] = 600;
                            SetPlayerVirtualWorld(playerid, 600); SetPlayerFacingAngle(playerid, ESTE);
                            SetCameraBehindPlayer(playerid);
                    }
            if(PlayerToPointStripped(1, playerid,278.0079,-1505.8489,-45.1302, cx,cy,cz))
            {
                    SetPlayerPos(playerid,325.4713,-1514.8862,36.0325); SetPlayerFacingAngle(playerid, 90);
                    SetCameraBehindPlayer(playerid); SetPlayerVirtualWorld(playerid, 0);
            }
            //AININT HELIPAD
            else if (PlayerToPointStripped(1, playerid,316.2381,-1513.3770,24.9219, cx,cy,cz))
			{
			SafeDialogEx( playerid, ELEVATOR4 , DIALOG_STYLE_LIST, "Elevador", "Interior\nHelipuerto", "Ir", "Cancelar");
			}
            else if (PlayerToPointStripped(1, playerid,301.5812,-1490.6759,-45.1302, cx,cy,cz))
            {
                    if(!Team_AININT(playerid))
                    {
                            SendClientMessageEx(playerid,COLOR_GREY,"Usted tiene el acceso denegado a éste lugar.");
                            return 1;
                    }
                    else SafeDialogEx( playerid, ELEVATOR5 , DIALOG_STYLE_LIST, "Elevador", "Garage\nHelipuerto", "Ir", "Cancelar");
            }
            else if (PlayerToPointStripped(1, playerid,308.8113,-1509.8134,77.7645, cx,cy,cz))
            {
                    SafeDialogEx( playerid, ELEVATOR7 , DIALOG_STYLE_LIST, "Elevador", "Interior\nGarage", "Ir", "Cancelar");
            }
            else if (PlayerToPointStripped(1, playerid,364.7064,-11.3221,1001.8516, cx,cy,cz) && GetPlayerInterior(playerid) == 9)
            {
                    SetPosEx(playerid, 928.6895,-1353.0563,13.3438,89.7594,0,0);
                GameTextForPlayer(playerid, "~w~AT-RP", 5000, 1);
            }
                            if (IsPlayerInRangeOfPoint(playerid,3,2281.1748,-1724.4528,13.2521)) //  GARAGE 1
                            {
                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                            SetVehiclePos(GetPlayerVehicleID(playerid),  2233.9280,-1758.3882,2031.3885);
                            SetVehicleZAngle(GetPlayerVehicleID(playerid),  11.4);
                            Streamer_Update(playerid);
                    }
                    else{
                                            SetPlayerPos(playerid, 2235.1851,-1763.5916,2032.9728);
                                            SetPlayerFacingAngle(playerid, 14.9);
                                            SetCameraBehindPlayer(playerid);
                                            LoadObjects(playerid);
                                    }
                                    return 1;
                            }
                            if (IsPlayerInRangeOfPoint(playerid,3,1242.2382,-1732.4800,13.2911)) //  GARAGE 2
                            {

                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                            SetVehiclePos(GetPlayerVehicleID(playerid),  1134.0381,-1591.4459,6602.5879);
                            SetVehicleZAngle(GetPlayerVehicleID(playerid),  176.3030);
                            Streamer_Update(playerid);
                    }
                    else{
                                            SetPlayerPos(playerid, 1134.0381,-1591.4459,6602.5879);
                                            SetPlayerFacingAngle(playerid, 14.9);
                                            SetCameraBehindPlayer(playerid);
                                            LoadObjects(playerid);
                                    }
                                    return 1;
                            }
                            if (IsPlayerInRangeOfPoint(playerid,3,853.3862,-1387.1884,13.7470)) //  GARAGE VIP
                            {

                                    if(Info[playerid][pVIP] == 0) return GameTextForPlayer(playerid, "~r~No eres VIP", 2000, 4);
                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                                    {
                            SetVehiclePos(GetPlayerVehicleID(playerid),  855.6053,-1412.6117,4202.1577);
                            SetVehicleZAngle(GetPlayerVehicleID(playerid),  NORTE);
                            Streamer_Update(playerid);
                    }
                    else{
                                            SetPlayerPos(playerid, 855.6053,-1412.6117,4202.1577);
                                            SetPlayerFacingAngle(playerid, NORTE);
                                            SetCameraBehindPlayer(playerid);
                                            LoadObjects(playerid);
                                    }
                                    return 1;
                            }
                        for(new i = 0; i < sizeof(HouseInfo); i++){
                            if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])){
                            if(Info[playerid][pPhousekey] == i || Info[playerid][pPhousekey2] == i || HouseInfo[i][hLock] == 0 || Info[playerid][pRenting] == i){
                                            LoadObjects(playerid);
                                    SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                                    Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                                    Info[playerid][pVW] = i+6000;
                                    SetPlayerVirtualWorld(playerid, i+6000);
                                    if(HouseInfo[i][hInteriorLoad] == 1){
                                    LoadObjects(playerid);
                                    }
                                    SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                                    SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                                    SetCameraBehindPlayer(playerid);
                                    GameTextForPlayer(playerid, "~w~Bienvenido", 5000, 1);
                                    Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                            }
                            else
                            {
                                    GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
                            }
                            return 1;
                    }
                    }
                    for(new i = 0; i <  sizeof(DDoorsInfo); i++)
                    {
                    if (IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
                            {
                    SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
                    Info[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
                    SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
                    Info[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
                    if(DDoorsInfo[i][ddExteriorLoad])
                                    {
                                            LoadObjects(playerid);
                    }
                    if(DDoorsInfo[i][dMusic] != 0) StopAudioStreamForPlayer(playerid);
                    if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                                    {
                            SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                            SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                            SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                            LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
                    }
                    else
                                    {
                            SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                            SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                            SetCameraBehindPlayer(playerid);
                            return 1;
                    }
                    }
            }
            for(new i = 0; i < sizeof(fINFO); i++)
                    {
                    if (IsPlayerInRangeOfPoint(playerid,3.0,fINFO[i][FamilyExit][0], fINFO[i][FamilyExit][1], fINFO[i][FamilyExit][2]) && Info[playerid][pVW] == fINFO[i][FamilyVirtualWorld]) {
                    Info[playerid][pInt] = 0;
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerInterior(playerid,0);
                    Streamer_UpdateEx(playerid, fINFO[i][FamilyEntrance][0],fINFO[i][FamilyEntrance][1],fINFO[i][FamilyEntrance][2]);
                    SetPlayerPos(playerid,fINFO[i][FamilyEntrance][0],fINFO[i][FamilyEntrance][1],fINFO[i][FamilyEntrance][2]);
                    SetPlayerFacingAngle(playerid,fINFO[i][FamilyEntrance][3]);
                    return 1;
                    }
            }
                    if (IsPlayerInRangeOfPoint(playerid,8,2233.9280,-1758.3882,2031.3885)) //  GARAGE 1
                    {
                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                    SetVehiclePos(GetPlayerVehicleID(playerid),  2281.1748,-1724.4528,13.2521);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  179.93);
                    Streamer_Update(playerid);
                }
                else{
                                    SetPlayerPos(playerid, 2280.5620,-1722.8878,13.5469);
                                    SetPlayerFacingAngle(playerid, 181);
                                    SetCameraBehindPlayer(playerid);
                            }
                            return 1;
                    }
                    if (IsPlayerInRangeOfPoint(playerid,8,1140.7430,-1592.1893,6602.4922)) //  GARAGE 1
                    {
                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                    SetVehiclePos(GetPlayerVehicleID(playerid),  1242.2382,-1732.4800,13.2911);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  359.47);
                    Streamer_Update(playerid);
                }
                else{
                                    SetPlayerPos(playerid, 1241.9020,-1734.0985,13.5899);
                                    SetPlayerFacingAngle(playerid, 354.9746);
                                    SetCameraBehindPlayer(playerid);
                            }
                            return 1;
                    }
                    if (IsPlayerInRangeOfPoint(playerid,8,855.6053,-1412.6117,4202.1577)) //  GARAGE VIP
                    {
                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                    SetVehiclePos(GetPlayerVehicleID(playerid),  853.3862,-1387.1884,13.7470);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  182.4513);
                    Streamer_Update(playerid);
                }
                else{
                                    SetPlayerPos(playerid, 853.3862,-1387.1884,13.7470);
                                    SetPlayerFacingAngle(playerid, 182.4513);
                                    SetCameraBehindPlayer(playerid);
                            }
                            return 1;
                    }
                for(new i = 0; i <  sizeof(HouseInfo); i++)
                    {
                    if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && Info[playerid][pVW] == i+6000)
                            {
                            SetPlayerInterior(playerid,0);
                        Info[playerid][pInt] = 0;
                        if(HouseInfo[i][hExteriorLoad])
                        {
                            LoadObjects(i);
                        }
                        SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
                        SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
                        SetCameraBehindPlayer(playerid);
                        SetPlayerVirtualWorld(playerid, 0);
                        Info[playerid][pVW] = 0;
                        return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
                    }
                }
            return 1;
    }


ClearChatbox(playerid)
{
	for(new i = 0; i < 10; i++)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "");
	}
	return 1;
}

stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

function RadarCooldown(playerid)
{
   DeletePVar(playerid, "RadarTimeout");
   return 1;
}

function MapsRemoveForPlayer(playerid)
{
//Removes
//----------> Taller R - By. Kevin Script
RemoveBuildingForPlayer(playerid, 5681, 1921.4844, -1778.9141, 18.5781, 0.25);
//----------> Taxistas - By. Kevin Script
RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1931.3125, 16.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1901.5391, 16.3750, 0.25);
//----------> N/S Broadway XIV - By. Kevin Script
RemoveBuildingForPlayer(playerid, 1410, 2632.6328, -1060.3281, 69.2969, 0.25);
//----------> Plaza Central - By. Kevin Script
RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);
RemoveBuildingForPlayer(playerid, 4210, 1479.5625, -1631.4531, 12.0781, 0.25);
RemoveBuildingForPlayer(playerid, 4186, 1479.5547, -1693.1406, 19.5781, 0.25);
RemoveBuildingForPlayer(playerid, 3985, 1479.5625, -1631.4531, 12.0781, 0.25);
//----------> Sheriff de Palomino Creek - By. Kevin Script
RemoveBuildingForPlayer(playerid, 13252, 2256.7266, -52.0000, 25.8828, 0.25);
RemoveBuildingForPlayer(playerid, 13374, 2241.4063, 21.4609, 33.1719, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2235.7813, -86.1016, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 12961, 2240.0938, -77.2813, 26.0938, 0.25);
RemoveBuildingForPlayer(playerid, 13438, 2240.1484, -75.8750, 27.9297, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2244.4063, -86.1016, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2246.6016, -88.4531, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2283.5469, -75.5781, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 673, 2244.1328, -51.9844, 25.0625, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2241.0625, -40.2734, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2235.5234, -44.0859, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2235.2031, -53.6094, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2234.8906, -60.2969, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 615, 2266.6172, -59.8438, 23.6094, 0.25);
RemoveBuildingForPlayer(playerid, 669, 2248.6250, -65.6797, 25.8125, 0.25);
RemoveBuildingForPlayer(playerid, 12960, 2256.7266, -52.0000, 25.8828, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2250.7891, -40.2734, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2261.6250, -40.2734, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 671, 2274.7344, -60.3281, 25.0781, 0.25);
RemoveBuildingForPlayer(playerid, 700, 2274.3125, -40.2734, 25.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2284.4609, -45.0547, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2246.4453, -38.1484, 25.6797, 0.25);
//----------> Gasolinera de Palomino Creek - By. Kevin Script
RemoveBuildingForPlayer(playerid, 3322, 2556.4141, 19.2813, 28.4141, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2569.1016, 31.8750, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 782, 2553.8516, 30.4844, 25.3594, 0.25);
RemoveBuildingForPlayer(playerid, 3311, 2556.4141, 19.2813, 28.4141, 0.25);
//----------> Hospital de Palomino Creek - By. Kevin Script
RemoveBuildingForPlayer(playerid, 3323, 2556.4219, 89.1953, 28.3281, 0.25);
RemoveBuildingForPlayer(playerid, 3325, 2556.4219, 64.1953, 27.5156, 0.25);
RemoveBuildingForPlayer(playerid, 13461, 2373.2344, 29.1719, 30.3438, 0.25);
RemoveBuildingForPlayer(playerid, 13375, 2436.8594, 63.8047, 32.8203, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2568.8203, 50.0938, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2556.5078, 51.5000, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 781, 2558.9766, 54.1406, 25.7656, 0.25);
RemoveBuildingForPlayer(playerid, 781, 2544.9844, 67.6094, 25.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3310, 2556.4219, 64.1953, 27.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2544.0781, 55.9844, 26.1797, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2544.0781, 60.6563, 26.1797, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2554.0625, 76.6797, 26.0156, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2547.9844, 76.6797, 26.0156, 0.25);
RemoveBuildingForPlayer(playerid, 766, 2565.8906, 68.6641, 25.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2544.0781, 76.7500, 26.1797, 0.25);
RemoveBuildingForPlayer(playerid, 773, 2565.3438, 86.6250, 25.6406, 0.25);
RemoveBuildingForPlayer(playerid, 765, 2545.7813, 89.6719, 25.4141, 0.25);
RemoveBuildingForPlayer(playerid, 3313, 2556.4219, 89.1953, 28.3281, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2544.0781, 91.2109, 26.1797, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2544.0781, 95.9219, 26.1797, 0.25);
//----------> Villa 3 - By. Julian Llorca y Ema Baqué
RemoveBuildingForPlayer(playerid, 708, 2713.0781, -1916.7109, 12.1875, 0.25);
RemoveBuildingForPlayer(playerid, 708, 2648.6484, -1916.7109, 12.1875, 0.25);
RemoveBuildingForPlayer(playerid, 708, 2679.6406, -1916.7109, 12.1875, 0.25);
RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -2033.4375, 12.7578, 0.25);
RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -1954.8203, 12.7578, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2647.1016, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2658.7188, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2671.5000, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3591, 2632.2734, -2014.9844, 15.2109, 0.25);
RemoveBuildingForPlayer(playerid, 3654, 2695.0859, -1983.7734, 15.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3654, 2674.5547, -2026.8750, 15.0078, 0.25);
RemoveBuildingForPlayer(playerid, 3592, 2672.5469, -1985.5469, 15.3906, 0.25);
RemoveBuildingForPlayer(playerid, 3647, 2694.0156, -2026.0781, 15.2656, 0.25);
RemoveBuildingForPlayer(playerid, 3647, 2654.1484, -1983.8984, 15.2422, 0.25);
RemoveBuildingForPlayer(playerid, 3592, 2634.1719, -1989.0547, 15.3906, 0.25);
RemoveBuildingForPlayer(playerid, 708, 2639.2734, -1976.3281, 12.6328, 0.25);
RemoveBuildingForPlayer(playerid, 708, 2687.4688, -2036.9766, 12.6328, 0.25);
RemoveBuildingForPlayer(playerid, 708, 2628.1094, -2006.8828, 12.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2647.1016, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2658.7188, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2671.5000, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 671, 2637.3594, -2023.8594, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 671, 2660.2813, -2034.0000, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 712, 2680.2578, -2037.5469, 21.7188, 0.25);
RemoveBuildingForPlayer(playerid, 3649, 2674.5547, -2026.8750, 15.0078, 0.25);
RemoveBuildingForPlayer(playerid, 671, 2701.0000, -2037.4141, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3648, 2694.0156, -2026.0781, 15.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2704.1172, -2020.9375, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2704.1172, -2025.6016, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2663.0625, -2017.2109, 9.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3590, 2632.2734, -2014.9844, 15.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1460, 2632.4297, -2006.4844, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1460, 2632.5391, -2001.9063, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 5265, 2678.9688, -2003.8125, 21.5000, 0.25);
RemoveBuildingForPlayer(playerid, 1407, 2649.8281, -1993.8438, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1460, 2632.6484, -1997.3203, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1307, 2643.2969, -1986.0781, 12.2891, 0.25);
RemoveBuildingForPlayer(playerid, 3589, 2634.1719, -1989.0547, 15.3906, 0.25);
RemoveBuildingForPlayer(playerid, 1407, 2647.5625, -1991.3984, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1460, 2641.5000, -1986.0703, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1407, 2657.1875, -1993.8438, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1407, 2661.8516, -1993.8438, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1460, 2664.2969, -1991.4453, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 671, 2664.3750, -1987.2188, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1460, 2642.8828, -1981.8125, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1460, 2630.9141, -1973.0313, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1460, 2626.3359, -1973.0781, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 3638, 2644.6172, -1955.7031, 15.7344, 0.25);
RemoveBuildingForPlayer(playerid, 3648, 2654.1484, -1983.8984, 15.2422, 0.25);
RemoveBuildingForPlayer(playerid, 3638, 2666.4375, -1955.7031, 15.7344, 0.25);
RemoveBuildingForPlayer(playerid, 3589, 2672.5469, -1985.5469, 15.3906, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2701.7109, -2014.0234, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2704.1172, -2016.2734, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2696.9453, -2014.0234, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2690.4141, -2014.0234, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2688.1328, -2016.3672, 13.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2699.5078, -2008.1719, 16.3203, 0.25);
RemoveBuildingForPlayer(playerid, 1315, 2702.9063, -2007.2969, 15.8203, 0.25);
RemoveBuildingForPlayer(playerid, 712, 2680.1563, -1978.2500, 21.5313, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2682.2188, -1988.7813, 9.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3638, 2687.1250, -1955.7031, 15.7344, 0.25);
RemoveBuildingForPlayer(playerid, 3649, 2695.0859, -1983.7734, 15.0625, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2703.4609, -1983.5938, 9.6719, 0.25);
RemoveBuildingForPlayer(playerid, 17912, 2672.9141, -1883.7734, 13.8750, 0.25);
RemoveBuildingForPlayer(playerid, 714, 2654.5781, -1900.8047, 11.6172, 0.25);
RemoveBuildingForPlayer(playerid, 669, 2685.2422, -1914.6563, 12.3125, 0.25);
//----------> Garitas de Policía - By. Kevin Script
// El Corona
RemoveBuildingForPlayer(playerid, 620, 1949.7969, -1943.5781, 10.8047, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1935.6719, -1942.4063, 13.7188, 0.25);
//----------> FOX Exterior - By. Kevin Script
RemoveBuildingForPlayer(playerid, 6491, 717.4844, -1357.3047, 20.2969, 0.25);
RemoveBuildingForPlayer(playerid, 6490, 717.4844, -1357.3047, 20.2969, 0.25);
RemoveBuildingForPlayer(playerid, 6516, 717.6875, -1357.2813, 18.0469, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 642.0938, -1359.8203, 16.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 642.0938, -1334.8516, 16.2734, 0.25);
//----------> Departamento Commerce - By. Kevin Script
RemoveBuildingForPlayer(playerid, 1537, 1725.4297, -1637.4375, 19.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1533, 1728.4453, -1637.4375, 19.2109, 0.25);
RemoveBuildingForPlayer(playerid, 641, 1722.3750, -1620.6016, 15.7266, 0.25);
RemoveBuildingForPlayer(playerid, 641, 1722.1797, -1615.7188, 11.7969, 0.25);
//----------> Decoración Calles (LCV-RP) - Modificado por Kevin Script SAMP
RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1729.9375, 12.4375, 0.25);
RemoveBuildingForPlayer(playerid, 6253, 1305.4688, -1619.7422, 13.3984, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1304.1172, -1696.7969, 12.2891, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1702.3828, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1682.2578, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1305.6719, -1669.8984, 12.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1662.3359, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1642.3281, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1305.5625, -1641.5313, 12.2891, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1305.5625, -1614.8281, 12.2891, 0.25);
RemoveBuildingForPlayer(playerid, 6046, 1305.4688, -1619.7422, 13.3984, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1622.3281, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1602.3281, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1305.6719, -1583.7031, 12.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1582.3203, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1562.3203, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1273.6094, -1542.3750, 15.2344, 0.25);
RemoveBuildingForPlayer(playerid, 638, 1266.5469, -1544.0000, 13.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1308.3281, -1539.3203, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1316.6563, -1519.2734, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1329.7109, -1498.6797, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1341.3516, -1476.6016, 18.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1348.0078, -1447.9219, 18.2266, 0.25);
//----------> Departamento del USMC - By. Kevin Script
RemoveBuildingForPlayer(playerid, 4026, 1497.7969, -1543.7109, 17.5547, 0.25);
RemoveBuildingForPlayer(playerid, 4218, 1497.7031, -1546.6172, 43.9922, 0.25);
RemoveBuildingForPlayer(playerid, 4016, 1497.7969, -1543.7109, 17.5547, 0.25);
//----------> Plaza de Ganton - By. Kevin Script
RemoveBuildingForPlayer(playerid, 1226, 2343.7734, -1753.5625, 16.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2324.4531, -1727.8359, 16.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1315, 2335.3203, -1726.4922, 15.7813, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2346.8672, -1715.4688, 16.3125, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2338.4922, -1700.0859, 16.3125, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2367.6016, -1706.2891, 11.2891, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2382.0625, -1727.8359, 16.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2377.7422, -1721.3359, 13.3984, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2377.7422, -1717.8359, 13.3984, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2375.0625, -1715.7969, 11.2891, 0.25);
//----------> Cámaras de Seguridad (Los Ángeles)
RemoveBuildingForPlayer(playerid, 1290, 597.4688, -1733.2109, 18.4141, 0.25);
//----------> Concesionaria Grotti - By. Kevin Script
RemoveBuildingForPlayer(playerid, 6482, 536.1328, -1291.6797, 23.4688, 0.25);
RemoveBuildingForPlayer(playerid, 6337, 536.1328, -1291.6797, 23.4688, 0.25);
RemoveBuildingForPlayer(playerid, 1266, 520.3516, -1307.0547, 29.6875, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 520.3438, -1307.0625, 29.6797, 0.25);
//----------> Basureros - By. Kevin Script
RemoveBuildingForPlayer(playerid, 3723, 2197.7500, -1993.3594, 14.9922, 0.25);
RemoveBuildingForPlayer(playerid, 3723, 2178.7344, -1971.2656, 16.8672, 0.25);
RemoveBuildingForPlayer(playerid, 3722, 2178.7344, -1971.2656, 16.8672, 0.25);
RemoveBuildingForPlayer(playerid, 3722, 2197.7500, -1993.3594, 14.9922, 0.25);
//----------> 24 Horas Ayuntamiento - By. Kevin Script
RemoveBuildingForPlayer(playerid, 4191, 1353.2578, -1764.5313, 15.5938, 0.25);
RemoveBuildingForPlayer(playerid, 4022, 1353.2578, -1764.5313, 15.5938, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1345.7656, -1740.6172, 15.6250, 0.25);
//----------> Casas de 24 Horas Ayuntamiento - By. Kevin Script
RemoveBuildingForPlayer(playerid, 4049, 1330.3750, -1793.0781, 22.9688, 0.25);
RemoveBuildingForPlayer(playerid, 4219, 1330.3281, -1792.5938, 23.4922, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1336.1563, -1844.0156, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1336.3359, -1842.8516, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1336.3750, -1841.5391, 13.0391, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1337.2578, -1841.8750, 13.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1336.8750, -1818.2266, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1336.7891, -1816.3047, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.1250, -1816.5781, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1338.0781, -1815.7578, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.8984, -1816.1641, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1342.2734, -1806.2031, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1342.6328, -1807.0391, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1221, 1342.5156, -1805.0703, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 4231, 1342.0547, -1800.2188, 25.4297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.9531, -1796.4297, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1338.9609, -1796.0000, 13.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.9375, -1795.4609, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 4112, 1330.3750, -1793.0781, 22.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1221, 1338.9688, -1793.7266, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1337.6953, -1774.7344, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1338.7891, -1775.3203, 12.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1337.0078, -1773.8672, 13.0000, 0.25);
//----------> Casa Premium Santa Maria Beach - By. Kevin Script
RemoveBuildingForPlayer(playerid, 6188, 836.3125, -1866.7578, -0.5391, 0.25);
RemoveBuildingForPlayer(playerid, 6189, 836.4453, -2003.5234, -2.6406, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -2019.0000, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -2015.0625, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -2002.9688, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1999.0313, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1968.7891, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1977.1797, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1924.5156, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1932.9063, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1901.1172, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1892.7344, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 821.8125, -2042.2969, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 824.7969, -2036.6797, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 821.8125, -2031.3516, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 821.8125, -1956.0469, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 821.8125, -1945.1016, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 824.1563, -1950.4297, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 821.8125, -1879.9219, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 824.1563, -1874.3047, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 821.8125, -1868.9766, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2042.5547, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2030.4531, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2026.5234, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 851.0078, -1992.5781, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2008.8906, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2004.9609, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 848.5625, -1986.6719, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 851.0078, -1981.6328, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1974.2734, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1970.3359, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1942.2891, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1946.2188, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1926.6875, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1922.7500, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 848.3281, -1909.3828, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 851.0078, -1904.3359, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1281, 851.0078, -1915.2813, 12.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1897.0234, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1893.0859, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1850.2109, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1854.1484, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1461, 852.7344, -1851.8672, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1864.8828, 12.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1860.9531, 12.2344, 0.25);
//----------> Edificio Unity Station - By. Kevin Script
RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
RemoveBuildingForPlayer(playerid, 4072, 1777.4375, -1782.3047, 12.6250, 0.25);
RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1791.1797, -1816.6328, 14.6250, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1788.5078, -1816.5703, 13.3516, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1796.9609, -1817.3906, 14.6250, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1801.8828, -1817.3047, 13.3516, 0.25);
RemoveBuildingForPlayer(playerid, 4012, 1777.4375, -1782.3047, 12.6250, 0.25);
RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
//----------> Plaza Commerce - By. Kevin Script
RemoveBuildingForPlayer(playerid, 4077, 1781.4766, -1648.4219, 26.8359, 0.25);
RemoveBuildingForPlayer(playerid, 4078, 1783.1016, -1647.3125, 23.2578, 0.25);
RemoveBuildingForPlayer(playerid, 1531, 1767.2109, -1617.5391, 15.0391, 0.25);
RemoveBuildingForPlayer(playerid, 1531, 1799.1328, -1708.7656, 14.1016, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1807.5156, -1625.8828, 12.7031, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1777.8516, -1677.1953, 14.3125, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1761.4609, -1651.7422, 14.3125, 0.25);
RemoveBuildingForPlayer(playerid, 4028, 1781.4766, -1648.4219, 26.8359, 0.25);
RemoveBuildingForPlayer(playerid, 3984, 1783.1016, -1647.3125, 23.2578, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1753.7656, -1632.0625, 17.2500, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1792.8047, -1640.9531, 14.3125, 0.25);
//----------> AININT Exterior Texturizado - By. Kevin Script
RemoveBuildingForPlayer(playerid, 6475, 322.4219, -1514.9922, 55.2891, 0.25);
RemoveBuildingForPlayer(playerid, 6518, 310.3438, -1546.9688, 69.5625, 0.25);
RemoveBuildingForPlayer(playerid, 3671, 296.2266, -1553.2188, 57.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3671, 300.6719, -1540.3906, 57.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3671, 306.1094, -1528.5000, 57.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3671, 312.8203, -1517.0938, 57.0391, 0.25);
RemoveBuildingForPlayer(playerid, 6342, 322.4219, -1514.9922, 55.2891, 0.25);
RemoveBuildingForPlayer(playerid, 3671, 320.6797, -1506.4531, 57.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3671, 329.6094, -1496.6953, 57.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3671, 339.5156, -1487.9219, 57.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3671, 350.2813, -1480.2266, 57.0391, 0.25);
RemoveBuildingForPlayer(playerid, 6476, 332.8906, -1500.0625, 29.8750, 0.25);
RemoveBuildingForPlayer(playerid, 6341, 332.8906, -1500.0625, 29.8750, 0.25);
//----------> Casa Blanca - By. Kevin Script
RemoveBuildingForPlayer(playerid, 4917, 1145.9531, -2037.0000, 65.5156, 0.25);
RemoveBuildingForPlayer(playerid, 4987, 1102.9141, -2036.9844, 76.6875, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1104.1641, -2060.7656, 68.6484, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1174.7500, -2070.0313, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 4826, 1102.9141, -2036.9844, 77.3359, 0.25);
RemoveBuildingForPlayer(playerid, 4825, 1145.9531, -2037.0000, 65.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1159.4375, -2039.8047, 68.3750, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1082.7969, -2034.7656, 68.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1205.3438, -2070.0313, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1208.7109, -2059.3203, 75.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1211.2344, -2052.9922, 68.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1187.2500, -2034.0469, 68.3750, 0.25);
RemoveBuildingForPlayer(playerid, 4986, 1179.1406, -2036.9922, 65.7266, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1208.4297, -2045.2422, 75.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1204.4922, -2039.8047, 68.3750, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1208.9141, -2025.9297, 75.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1211.2344, -2019.6797, 68.3516, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1103.8828, -2011.9688, 68.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1175.1797, -2003.9141, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1175.0703, -1993.9531, 68.7188, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1208.9141, -2012.8516, 75.7578, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1209.6328, -2008.5469, 68.6484, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1205.4141, -2003.9141, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1427.3047, -1890.2891, 15.6250, 0.25);
RemoveBuildingForPlayer(playerid, 4917, 1145.9531, -2037.0000, 65.5156, 0.25);
RemoveBuildingForPlayer(playerid, 4987, 1102.9141, -2036.9844, 76.6875, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1104.1641, -2060.7656, 68.6484, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1174.7500, -2070.0313, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 4826, 1102.9141, -2036.9844, 77.3359, 0.25);
RemoveBuildingForPlayer(playerid, 4825, 1145.9531, -2037.0000, 65.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1159.4375, -2039.8047, 68.3750, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1082.7969, -2034.7656, 68.6953, 0.25);
RemoveBuildingForPlayer(playerid, 691, 1258.1719, -2081.9297, 55.7891, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1205.3438, -2070.0313, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1208.7109, -2059.3203, 75.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1211.2344, -2052.9922, 68.2656, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1209.9141, -2065.5781, 68.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1242.7266, -2060.8750, 64.6094, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1280.2031, -2062.1016, 63.7734, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1187.2500, -2034.0469, 68.3750, 0.25);
RemoveBuildingForPlayer(playerid, 4986, 1179.1406, -2036.9922, 65.7266, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1208.4297, -2045.2422, 75.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1204.4922, -2039.8047, 68.3750, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1208.9141, -2025.9297, 75.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1211.2344, -2019.6797, 68.3516, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1103.8828, -2011.9688, 68.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1175.1797, -2003.9141, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1175.0703, -1993.9531, 68.7188, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1208.9141, -2012.8516, 75.7578, 0.25);
RemoveBuildingForPlayer(playerid, 951, 1209.6328, -2008.5469, 68.6484, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1205.4141, -2003.9141, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 4823, 1338.3281, -1976.6563, 36.6094, 0.25);
//----------> Edificio Market - By. Kevin Script
RemoveBuildingForPlayer(playerid, 3750, 664.9219, -1309.3516, 18.3672, 0.25);
RemoveBuildingForPlayer(playerid, 3750, 785.3750, -1152.4453, 28.4375, 0.25);
RemoveBuildingForPlayer(playerid, 3750, 659.7813, -1227.2734, 19.9141, 0.25);
RemoveBuildingForPlayer(playerid, 6493, 713.5625, -1236.2188, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 6523, 702.8672, -1276.0313, 20.9063, 0.25);
RemoveBuildingForPlayer(playerid, 726, 743.2422, -1151.4766, 20.8750, 0.25);
RemoveBuildingForPlayer(playerid, 733, 778.2109, -1207.2031, 13.5391, 0.25);
RemoveBuildingForPlayer(playerid, 729, 731.3906, -1223.1641, 12.5078, 0.25);
RemoveBuildingForPlayer(playerid, 733, 717.1172, -1236.2266, 12.0625, 0.25);
RemoveBuildingForPlayer(playerid, 726, 680.8594, -1293.3984, 12.3984, 0.25);
RemoveBuildingForPlayer(playerid, 732, 782.7969, -1304.0781, 12.3906, 0.25);
RemoveBuildingForPlayer(playerid, 620, 654.0938, -1281.6250, 11.4766, 0.25);
RemoveBuildingForPlayer(playerid, 620, 651.1094, -1305.9766, 12.5859, 0.25);
RemoveBuildingForPlayer(playerid, 3749, 664.9219, -1309.3516, 18.3672, 0.25);
RemoveBuildingForPlayer(playerid, 620, 652.9766, -1251.7656, 11.4766, 0.25);
RemoveBuildingForPlayer(playerid, 620, 656.7578, -1240.7188, 12.1953, 0.25);
RemoveBuildingForPlayer(playerid, 3749, 659.7813, -1227.2734, 19.9141, 0.25);
RemoveBuildingForPlayer(playerid, 620, 678.4844, -1251.7891, 12.0313, 0.25);
RemoveBuildingForPlayer(playerid, 6522, 702.8672, -1276.0313, 20.9063, 0.25);
RemoveBuildingForPlayer(playerid, 620, 746.4922, -1303.4141, 11.6719, 0.25);
RemoveBuildingForPlayer(playerid, 620, 760.4531, -1304.1328, 12.2813, 0.25);
RemoveBuildingForPlayer(playerid, 620, 782.3438, -1277.8359, 12.2031, 0.25);
RemoveBuildingForPlayer(playerid, 6487, 713.5625, -1236.2188, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 620, 783.0625, -1245.7969, 12.5938, 0.25);
RemoveBuildingForPlayer(playerid, 3749, 785.3750, -1152.4453, 28.4375, 0.25);
//----------> HQ Rusos - By. Abril Soler**************************
RemoveBuildingForPlayer(playerid, 1454, -1072.3203, -914.2266, 128.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -1067.3438, -914.2266, 128.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -1062.3750, -914.2266, 128.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -1057.3984, -914.2266, 128.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -1052.4219, -914.2266, 128.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -1047.4531, -914.2266, 128.9688, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1210.2500, -1220.7891, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1215.9375, -1215.1094, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1215.9375, -1203.4297, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1215.9375, -1191.6719, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1215.9375, -1179.9844, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1215.9375, -1168.2969, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1215.9375, -1156.6094, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1198.5625, -1220.7891, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1186.8047, -1220.7891, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1218.0703, -1122.6484, 129.0859, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1220.7031, -1111.6797, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1220.7031, -1076.5469, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1220.7031, -1088.2344, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1220.7031, -1099.9922, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1284.7031, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1273.2188, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1261.5313, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1249.8438, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1116.8594, -1255.3594, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1105.1094, -1255.3594, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1238.1563, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1226.4688, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1175.1172, -1220.7891, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1163.4297, -1220.7891, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1151.7422, -1220.7891, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1140.0625, -1220.7891, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1128.5703, -1220.7891, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 705, -1086.4141, -1291.3906, 128.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1093.8438, -1290.4922, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1089.9141, -1313.6172, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1096.1250, -1307.8359, 129.3516, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1096.2031, -1296.5313, 129.3516, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1079.5156, -1294.6250, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1079.5156, -1300.8438, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1082.4531, -1295.7578, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1082.4531, -1299.7578, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1081.5156, -1294.6250, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1081.5156, -1300.8438, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1082.4531, -1297.7578, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1078.3125, -1313.6406, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1082.2422, -1290.5156, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1082.4922, -1255.4375, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1075.5078, -1294.6250, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1077.5078, -1294.6250, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1075.5000, -1300.8438, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1077.5078, -1300.8438, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1073.5000, -1294.6250, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1073.5156, -1300.8438, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 17011, -1074.6016, -1298.7500, 128.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1067.4766, -1294.7734, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1069.5078, -1294.6250, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1071.5156, -1294.6250, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1071.5078, -1300.8438, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1069.5156, -1300.8438, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1068.5156, -1299.8203, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -1067.7734, -1297.9844, 129.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1070.5781, -1290.4141, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1066.6484, -1313.5391, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1033.1250, -1298.1797, 129.3516, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1064.9609, -1273.0156, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1064.9375, -1261.4219, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1064.8594, -1284.6875, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1070.8984, -1255.4609, 129.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1033.1250, -1256.0078, 129.4375, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1033.1250, -1286.5859, 129.4375, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1033.1563, -1267.6016, 129.4375, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1033.1563, -1244.3125, 129.4375, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1015.5547, -1223.0938, 129.0078, 0.25);
RemoveBuildingForPlayer(playerid, 3276, -1027.0703, -1223.0703, 129.1016, 0.25);
//----------> Interior Aeropuerto LA***************************
RemoveBuildingForPlayer(playerid, 3970, -1861.8828, 45.1875, 1055.2813, 0.25);
//----------> Play Music Exterior - By. Kevin Script*********************
RemoveBuildingForPlayer(playerid, 5858, 1214.1484, -913.4453, 43.0547, 0.25);
RemoveBuildingForPlayer(playerid, 1522, 1199.9688, -917.6406, 42.0234, 0.25);
RemoveBuildingForPlayer(playerid, 6010, 1214.1484, -913.4453, 43.0547, 0.25);
RemoveBuildingForPlayer(playerid, 5742, 1197.3203, -899.2109, 45.0938, 0.25);
//----------> Unidad Maritima de LAPD***************************
RemoveBuildingForPlayer(playerid, 1529, 730.4453, -1482.0078, 2.2500, 0.25);
RemoveBuildingForPlayer(playerid, 6056, 701.4375, -1417.1250, 17.6641, 0.25);
//----------> Interior de Motoqueros - By. Kevin Script********************
RemoveBuildingForPlayer(playerid, 14653, 681.4453, -455.1719, -25.9453, 0.25);
//----------> Arbol del Encuentro - By. Kevin Script********************
RemoveBuildingForPlayer(playerid, 1226, 2118.2891, -1939.3984, 16.3906, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2114.5547, -1928.1875, 5.0313, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2113.3984, -1925.0391, 10.8047, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2115.6719, -1922.7656, 10.8047, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2123.3594, -1928.0703, 6.8438, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2122.6563, -1916.7891, 10.8047, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2116.9297, -1916.0781, 10.8047, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2121.5078, -1909.5313, 10.8047, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2101.2578, -1900.1797, 16.3906, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2110.2734, -1906.5859, 5.0313, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2134.6016, -1900.4063, 16.3906, 0.25);
//----------> Iglesia Exterior - By. Kevin Script*********************
RemoveBuildingForPlayer(playerid, 4070, 1719.7422, -1770.7813, 23.4297, 0.25);
RemoveBuildingForPlayer(playerid, 1531, 1724.7344, -1741.5000, 14.1016, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1700.8516, -1778.3984, 12.4922, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1701.3047, -1794.4297, 12.5469, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1701.1484, -1753.2266, 12.3516, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1701.2578, -1764.4844, 12.4375, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1700.8984, -1743.9844, 12.4531, 0.25);
RemoveBuildingForPlayer(playerid, 3986, 1719.7422, -1770.7813, 23.4297, 0.25);
//----------> Chofer de Autobuses - By. Kevin Script********************
RemoveBuildingForPlayer(playerid, 1290, 1781.2031, -2076.5703, 18.3750, 0.25);
RemoveBuildingForPlayer(playerid, 3573, 1798.6484, -2057.9141, 14.9844, 0.25);
//----------> Departamento de Policía Dillimore - By. Kevin Script************
RemoveBuildingForPlayer(playerid, 782, 643.1484, -614.5625, 15.2813, 0.25);
RemoveBuildingForPlayer(playerid, 1687, 625.0156, -579.7188, 25.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 632.5781, -583.5938, 19.8203, 0.25);
RemoveBuildingForPlayer(playerid, 781, 630.7266, -578.7734, 15.1328, 0.25);
RemoveBuildingForPlayer(playerid, 780, 628.1953, -557.3438, 15.3359, 0.25);
RemoveBuildingForPlayer(playerid, 781, 630.2188, -564.2500, 15.1328, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 632.8438, -545.6016, 19.8203, 0.25);
RemoveBuildingForPlayer(playerid, 781, 629.5781, -547.2188, 15.1328, 0.25);
// Interior
RemoveBuildingForPlayer(playerid, 1738, 320.4063, 306.5547, 998.8047, 0.25);
RemoveBuildingForPlayer(playerid, 2186, 325.2656, 302.5000, 998.1406, 0.25);
RemoveBuildingForPlayer(playerid, 2616, 325.8281, 302.0391, 1000.2578, 0.25);
RemoveBuildingForPlayer(playerid, 2613, 325.2109, 306.5000, 998.1484, 0.25);
RemoveBuildingForPlayer(playerid, 2202, 327.2813, 302.4844, 998.1406, 0.25);
RemoveBuildingForPlayer(playerid, 2309, 326.9375, 304.9922, 998.1563, 0.25);
RemoveBuildingForPlayer(playerid, 2605, 326.0313, 305.0313, 998.5469, 0.25);
RemoveBuildingForPlayer(playerid, 2608, 327.9766, 303.8203, 1000.0859, 0.25);
RemoveBuildingForPlayer(playerid, 2200, 328.0625, 307.8672, 998.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1808, 320.4141, 308.2891, 998.1406, 0.25);
RemoveBuildingForPlayer(playerid, 14881, 322.4297, 310.0547, 1000.1484, 0.25);
RemoveBuildingForPlayer(playerid, 2196, 324.6016, 308.9219, 998.9609, 0.25);
RemoveBuildingForPlayer(playerid, 2612, 324.4141, 309.9609, 999.9141, 0.25);
RemoveBuildingForPlayer(playerid, 2614, 325.2344, 309.9453, 1001.3281, 0.25);
RemoveBuildingForPlayer(playerid, 2607, 325.2734, 308.2422, 998.5469, 0.25);
RemoveBuildingForPlayer(playerid, 2309, 325.4531, 309.1641, 998.1563, 0.25);
RemoveBuildingForPlayer(playerid, 14882, 325.7266, 310.9297, 1000.1563, 0.25);
RemoveBuildingForPlayer(playerid, 2611, 326.0625, 309.9531, 999.9063, 0.25);
RemoveBuildingForPlayer(playerid, 2615, 328.1563, 309.1797, 1000.3672, 0.25);
RemoveBuildingForPlayer(playerid, 2192, 327.0391, 309.6172, 999.6172, 0.25);
RemoveBuildingForPlayer(playerid, 2610, 327.9453, 309.6406, 998.9766, 0.25);
RemoveBuildingForPlayer(playerid, 2609, 327.4609, 309.6406, 998.8828, 0.25);
RemoveBuildingForPlayer(playerid, 14883, 320.8672, 314.2109, 1000.1484, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 323.3750, 313.5234, 998.1484, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 323.3750, 314.1719, 998.1484, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 323.3750, 314.8125, 998.1484, 0.25);
RemoveBuildingForPlayer(playerid, 2602, 317.0391, 317.6797, 998.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1738, 322.2109, 317.9219, 998.8047, 0.25);
// LAPD
RemoveBuildingForPlayer(playerid, 4063, 1578.4688, -1676.4219, 13.0703, 0.25);
RemoveBuildingForPlayer(playerid, 4064, 1571.6016, -1675.7500, 35.6797, 0.25);
RemoveBuildingForPlayer(playerid, 3975, 1578.4688, -1676.4219, 13.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3976, 1571.6016, -1675.7500, 35.6797, 0.25);
//----------> Rentas de vehículos Unity - By. Kevin Script****************
RemoveBuildingForPlayer(playerid, 1413, 1879.9922, -1879.8906, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 1885.2578, -1879.8984, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 1864.1797, -1879.6641, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 1869.4609, -1879.6641, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1874.7344, -1879.6641, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1890.5234, -1879.6641, 13.6797, 0.25);
//----------> Varrio Longos 13 - By. Kevin Script************************
RemoveBuildingForPlayer(playerid, 620, 1808.8828, -2016.6094, 9.6719, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1811.2500, -2012.6172, 21.9609, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1792.7500, -1974.5547, 11.4453, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1794.5938, -1980.7500, 9.6719, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1808.8828, -1985.3359, 9.6719, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1812.3438, -1968.8047, 11.4453, 0.25);
//----------> Concesionaria Vinewood - By. Kevin Script******************
RemoveBuildingForPlayer(playerid, 1525, 1271.4844, -1662.3203, 20.2500, 0.25);
RemoveBuildingForPlayer(playerid, 626, 1258.5781, -1675.5000, 14.6016, 0.25);
RemoveBuildingForPlayer(playerid, 626, 1267.6719, -1675.5000, 14.6016, 0.25);
RemoveBuildingForPlayer(playerid, 626, 1258.5781, -1659.8750, 14.6016, 0.25);
RemoveBuildingForPlayer(playerid, 626, 1267.6719, -1659.8750, 14.6016, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1292.1797, -1660.1719, 15.8906, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1237.5000, -1643.4297, 14.8516, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1233.4688, -1643.4297, 14.8516, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1245.5625, -1643.4297, 14.8516, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1241.5313, -1643.4297, 14.8516, 0.25);
RemoveBuildingForPlayer(playerid, 626, 1258.5781, -1643.3672, 14.6016, 0.25);
RemoveBuildingForPlayer(playerid, 626, 1267.6719, -1643.3672, 14.6016, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1292.1797, -1629.1016, 15.9063, 0.25);
//----------> I.S.I.S - By. Kevin Script**************************
RemoveBuildingForPlayer(playerid, 16755, -662.6172, 2309.9453, 140.4531, 0.25);
RemoveBuildingForPlayer(playerid, 16406, -662.6172, 2309.9453, 140.4531, 0.25);
RemoveBuildingForPlayer(playerid, 16411, -806.0078, 2387.6719, 153.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3275, -812.0547, 2406.4531, 155.9688, 0.25);
RemoveBuildingForPlayer(playerid, 3275, -775.9922, 2408.3594, 156.8281, 0.25);
RemoveBuildingForPlayer(playerid, 3350, -773.0391, 2419.6484, 155.9688, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -774.2266, 2421.2656, 157.0313, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -775.1953, 2424.9609, 157.0313, 0.25);
RemoveBuildingForPlayer(playerid, 3302, -774.2031, 2425.3672, 159.2969, 0.25);
RemoveBuildingForPlayer(playerid, 16404, -772.1641, 2424.2031, 157.9219, 0.25);
RemoveBuildingForPlayer(playerid, 3302, -772.2734, 2422.0234, 159.5781, 0.25);
RemoveBuildingForPlayer(playerid, 3302, -772.2578, 2425.3828, 159.3750, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -770.2422, 2421.2656, 157.0313, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -769.1563, 2424.7656, 157.0313, 0.25);
RemoveBuildingForPlayer(playerid, 3302, -770.3359, 2422.0234, 159.5313, 0.25);
RemoveBuildingForPlayer(playerid, 3302, -808.5469, 2428.9375, 159.2109, 0.25);
RemoveBuildingForPlayer(playerid, 3302, -812.3281, 2428.1406, 159.3750, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -810.0859, 2426.1797, 156.8672, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -813.0859, 2428.2891, 156.8672, 0.25);
RemoveBuildingForPlayer(playerid, 16405, -809.6953, 2429.2188, 157.7656, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -771.5547, 2425.9609, 157.0313, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -773.7500, 2426.0938, 157.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -807.4063, 2430.1328, 156.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3302, -807.9609, 2430.7891, 159.1406, 0.25);
RemoveBuildingForPlayer(playerid, 3302, -811.7344, 2429.9922, 159.4219, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -808.0391, 2431.8672, 156.8672, 0.25);
RemoveBuildingForPlayer(playerid, 3260, -811.8516, 2432.0781, 156.8672, 0.25);
//*****************Carreras Clandestinas - By. Kevin Script*****************
RemoveBuildingForPlayer(playerid, 5322, 2571.0156, -2014.9375, 7.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1448, 2583.1172, -2026.9766, 2.9219, 0.25);
RemoveBuildingForPlayer(playerid, 1448, 2583.3750, -2027.8984, 3.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1448, 2583.8750, -2028.9531, 2.9219, 0.25);
RemoveBuildingForPlayer(playerid, 17857, 2583.2969, -1731.9297, 11.0000, 0.25);
RemoveBuildingForPlayer(playerid, 17938, 2571.3750, -1816.4141, 2.6016, 0.25);
RemoveBuildingForPlayer(playerid, 1438, 2555.9141, -1896.0078, 2.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2557.4297, -1877.9844, 3.0547, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2580.5703, -1877.2344, 3.1094, 0.25);
RemoveBuildingForPlayer(playerid, 3594, 2598.1563, -1886.4922, 3.4375, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2591.6016, -1838.0234, 2.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2590.3203, -1837.3359, 2.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1438, 2611.2109, -1834.4531, 1.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2610.6641, -1801.6406, 0.9219, 0.25);
RemoveBuildingForPlayer(playerid, 17502, 2583.2969, -1731.9297, 11.0000, 0.25);
RemoveBuildingForPlayer(playerid, 17939, 2582.1563, -1670.7422, 5.7344, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2560.6953, -1585.2969, 4.0234, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2559.4141, -1584.6016, 4.0234, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2568.9688, -1560.6797, 7.1250, 0.25);
//********************Campo de PaintBall - By. Kevin Script********************
RemoveBuildingForPlayer(playerid, 3928, -1131.5781, 1041.7344, 1344.7422, 0.25);
RemoveBuildingForPlayer(playerid, 3932, -1131.9453, 1029.1406, 1346.4063, 0.25);
RemoveBuildingForPlayer(playerid, 3934, -973.8359, 1077.1719, 1343.9922, 0.25);
RemoveBuildingForPlayer(playerid, 3939, -975.0469, 1089.6563, 1345.6563, 0.25);
RemoveBuildingForPlayer(playerid, 1596, -1132.6953, 1073.9922, 1354.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1596, -973.5625, 1046.0703, 1353.9688, 0.25);
//*************************Mecánicos - By. Kevin Script*************************
RemoveBuildingForPlayer(playerid, 6153, 1007.3125, -1435.1641, 19.1172, 0.25);
RemoveBuildingForPlayer(playerid, 6192, 988.9063, -1487.9063, 24.5391, 0.25);
RemoveBuildingForPlayer(playerid, 6151, 1007.3125, -1435.1641, 19.1172, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1057.1953, -1437.6563, 15.9375, 0.25);
//***********************Pizería - By. Kevin Script***********************
RemoveBuildingForPlayer(playerid, 1408, 2099.8516, -1813.9063, 13.1016, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2099.8594, -1819.3594, 13.1016, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2099.8594, -1799.4219, 13.1016, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2102.6016, -1822.0781, 13.1172, 0.25);
RemoveBuildingForPlayer(playerid, 1432, 2104.0156, -1812.4219, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1432, 2101.9922, -1814.7109, 12.5703, 0.25);
RemoveBuildingForPlayer(playerid, 1432, 2103.4063, -1817.3047, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1432, 2102.1250, -1819.9531, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1432, 2101.6328, -1798.1719, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1432, 2103.9609, -1800.5625, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2099.8516, -1793.9766, 13.1016, 0.25);
RemoveBuildingForPlayer(playerid, 712, 2100.8125, -1764.3750, 21.3906, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2102.6641, -1791.3281, 13.1016, 0.25);
RemoveBuildingForPlayer(playerid, 1432, 2103.6875, -1795.9063, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1432, 2102.0625, -1793.1406, 12.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2114.7188, -1785.1797, 16.3984, 0.25);
//**************Mercado Negro Exterior - By. Kevin Script**************
RemoveBuildingForPlayer(playerid, 3253, -420.3594, -1756.2188, 5.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3286, -420.2188, -1765.2500, 8.6406, 0.25);
//*******************Banco Exterior - By. Kevin Script*******************
RemoveBuildingForPlayer(playerid, 727, 1321.2266, -1023.8359, 29.7891, 0.25);
RemoveBuildingForPlayer(playerid, 732, 1338.6719, -1022.8828, 29.6797, 0.25);
RemoveBuildingForPlayer(playerid, 729, 1294.8828, -1024.3828, 32.7344, 0.25);
RemoveBuildingForPlayer(playerid, 729, 1340.4219, -953.3828, 35.5313, 0.25);
RemoveBuildingForPlayer(playerid, 729, 1304.3438, -947.1953, 38.8281, 0.25);
RemoveBuildingForPlayer(playerid, 729, 1342.1328, -1004.3672, 32.7109, 0.25);
//***************Aeropuerto************
RemoveBuildingForPlayer(playerid, 3672, 2112.9375, -2384.6172, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 1889.6563, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 1822.7344, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 1682.7266, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 1617.2813, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 1754.1719, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2082.4063, -2370.0156, 14.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 1617.2813, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1649.0625, -2641.4063, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3663, 1664.4531, -2439.8047, 14.4688, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 1682.7266, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 1754.1719, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 1822.7344, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1855.7969, -2641.4063, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 1889.6563, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3664, 2042.7734, -2442.1875, 19.2813, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2088.6094, -2422.1719, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2082.4063, -2370.0156, 14.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 2112.9375, -2384.6172, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3663, 1580.0938, -2433.8281, 14.5703, 0.25);
//***********************Granjero - By. Kevin Script***********************
RemoveBuildingForPlayer(playerid, 3425, -370.3750, -1446.9688, 35.9531, 0.25);
RemoveBuildingForPlayer(playerid, 17298, -366.6719, -1422.6875, 30.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -372.1797, -1434.6094, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -369.1953, -1434.6094, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -366.2031, -1434.6094, 25.4375, 0.25);
RemoveBuildingForPlayer(playerid, 1454, -363.2109, -1434.6094, 25.3984, 0.25);
//*******************Concesionario La Playa - By. Kevin Script*******************
RemoveBuildingForPlayer(playerid, 6456, 397.5391, -1848.4922, 12.1484, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 377.4531, -1867.1719, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1368, 378.0234, -1821.9922, 7.4766, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1874.0313, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1855.5234, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1837.9766, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1368, 381.7969, -1834.9219, 7.4766, 0.25);
RemoveBuildingForPlayer(playerid, 1371, 387.1328, -1831.4453, 7.5938, 0.25);
RemoveBuildingForPlayer(playerid, 1368, 381.7969, -1809.3594, 7.4766, 0.25);
RemoveBuildingForPlayer(playerid, 6288, 397.5391, -1848.4922, 12.1484, 0.25);
RemoveBuildingForPlayer(playerid, 1500, 387.5625, -1817.0859, 6.8203, 0.25);
//**********************CIA Exterior - By. Kevin Script**********************
RemoveBuildingForPlayer(playerid, 1215, 1195.3594, -1820.2734, 13.1406, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1284.9766, -1820.7422, 14.0703, 0.25);
//********************Destructora LS - By. Kevin Script********************
RemoveBuildingForPlayer(playerid, 3686, 2169.1172, -2276.5859, 15.9063, 0.25);
RemoveBuildingForPlayer(playerid, 3686, 2195.0859, -2216.8438, 15.9063, 0.25);
RemoveBuildingForPlayer(playerid, 3686, 2220.7813, -2261.0547, 15.9063, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2179.9219, -2334.8516, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2165.2969, -2317.5000, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2193.2578, -2286.2891, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2183.1719, -2237.2734, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2174.6406, -2215.6563, 15.1016, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2193.0625, -2196.6406, 15.1016, 0.25);
RemoveBuildingForPlayer(playerid, 5305, 2198.8516, -2213.9219, 14.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3747, 2234.3906, -2244.8281, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3747, 2226.9688, -2252.1406, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3747, 2219.4219, -2259.5234, 14.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3747, 2212.0938, -2267.0703, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3747, 2204.6328, -2274.4141, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2179.9219, -2334.8516, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2165.2969, -2317.5000, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2165.0703, -2288.9688, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2193.2578, -2286.2891, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3627, 2169.1172, -2276.5859, 15.9063, 0.25);
RemoveBuildingForPlayer(playerid, 3569, 2204.6328, -2274.4141, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3569, 2212.0938, -2267.0703, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3627, 2220.7813, -2261.0547, 15.9063, 0.25);
RemoveBuildingForPlayer(playerid, 3569, 2219.4219, -2259.5234, 14.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2194.4766, -2242.8750, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2217.2188, -2250.3594, 16.3672, 0.25);
RemoveBuildingForPlayer(playerid, 3569, 2226.9688, -2252.1406, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3569, 2234.3906, -2244.8281, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2183.1719, -2237.2734, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2235.1641, -2231.8516, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2174.6406, -2215.6563, 15.1016, 0.25);
RemoveBuildingForPlayer(playerid, 3627, 2195.0859, -2216.8438, 15.9063, 0.25);
RemoveBuildingForPlayer(playerid, 5244, 2198.8516, -2213.9219, 14.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2193.0625, -2196.6406, 15.1016, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2215.8047, -2199.2188, 16.3125, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2207.8750, -2191.2500, 16.3125, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2223.7422, -2207.1875, 16.3125, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2240.7813, -2240.8984, 16.3672, 0.25);
//****************Concesionaria Botes - By. Kevin Script****************
RemoveBuildingForPlayer(playerid, 1290, 2863.6250, -2026.9922, 15.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2863.6250, -1927.2188, 15.7109, 0.25);
//*****************Banco Nuevo*************************
RemoveBuildingForPlayer(playerid, 6372, 599.0938, -1435.3984, 19.8828, 0.25);
//***********************Repartidores - By. Kevin Script***********************
RemoveBuildingForPlayer(playerid, 3707, 2184.3516, -2681.7344, 20.4922, 0.25);
RemoveBuildingForPlayer(playerid, 3688, 2192.8984, -2580.8672, 17.7891, 0.25);
RemoveBuildingForPlayer(playerid, 3708, 2184.3516, -2681.7344, 20.4922, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2206.3125, -2616.4688, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2206.3125, -2548.6719, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2205.1563, -2582.7891, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3770, 2208.7266, -2508.8594, 13.9844, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2206.3125, -2616.4688, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2205.1563, -2582.7891, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3621, 2192.8984, -2580.8672, 17.7891, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2206.3125, -2548.6719, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2209.4531, -2534.0781, 16.7188, 0.25);
RemoveBuildingForPlayer(playerid, 3626, 2208.7266, -2508.8594, 13.9844, 0.25);
//*************************Electrónica*************************
RemoveBuildingForPlayer(playerid, 5839, 1198.9922, -1128.8125, 27.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1223, 1176.8438, -1135.4141, 22.8125, 0.25);
RemoveBuildingForPlayer(playerid, 717, 1182.1719, -1134.6875, 23.0000, 0.25);
RemoveBuildingForPlayer(playerid, 5727, 1198.9922, -1128.8125, 27.8438, 0.25);
//*************************gasolinera ganton*************************
RemoveBuildingForPlayer(playerid, 5224, 2385.1875, -1906.5156, 18.4453, 0.25);
RemoveBuildingForPlayer(playerid, 1527, 2392.3594, -1914.5703, 14.7422, 0.25);
RemoveBuildingForPlayer(playerid, 5233, 2374.7734, -1937.1797, 20.1953, 0.25);
RemoveBuildingForPlayer(playerid, 5168, 2385.1875, -1906.5156, 18.4453, 0.25);
RemoveBuildingForPlayer(playerid, 1522, 2396.3047, -1899.6172, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1522, 2399.3281, -1899.6172, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1687, 2398.3906, -1910.9609, 21.2266, 0.25);
RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1901.5625, 13.0234, 0.25);
RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1905.1094, 13.0234, 0.25);
RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1908.4531, 13.0234, 0.25);
//*************************Autos Chocones*************************
RemoveBuildingForPlayer(playerid, 6464, 379.0625, -2065.0234, 11.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1529, 399.0078, -2066.8828, 11.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 353.0156, -2081.1875, 6.5938, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 353.0156, -2050.4844, 6.5938, 0.25);
RemoveBuildingForPlayer(playerid, 6466, 374.6953, -2054.8828, 8.7031, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 381.0313, -2070.9375, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 6283, 379.0625, -2065.0234, 11.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2055.1016, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2061.9531, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2049.3516, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 400.7578, -2081.1875, 6.5938, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 400.7578, -2050.4844, 6.5938, 0.25);
//*************************alhambra exterior*************************
RemoveBuildingForPlayer(playerid, 1524, 1837.6641, -1640.3828, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1825.9297, -1697.5625, 16.3438, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1832.3828, -1694.3125, 9.7188, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1825.8516, -1667.0781, 16.3438, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1832.8984, -1670.7656, 9.7188, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1694.4609, 21.3906, 0.25);
//*************************alhambra interior*************************
RemoveBuildingForPlayer(playerid, 2596, 482.4453, -20.5938, 1002.2969, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 479.5078, -20.3828, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 2596, 485.7422, -20.5938, 1002.2969, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 490.6328, -24.3906, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 1775, 495.9688, -24.3203, 1000.7344, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 478.2188, -19.4141, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 1544, 477.2109, -16.1016, 1003.7266, 0.25);
RemoveBuildingForPlayer(playerid, 2173, 476.5313, -14.4453, 1002.6875, 0.25);
RemoveBuildingForPlayer(playerid, 1544, 477.3203, -13.9375, 1003.7266, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 478.1953, -7.1719, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 478.6016, -7.6953, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 1436, 479.5938, -8.9922, 1001.2188, 0.25);
RemoveBuildingForPlayer(playerid, 2232, 478.3359, -5.5859, 1001.6797, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 479.2891, -5.4063, 1001.1797, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 479.8203, -5.8125, 1001.1797, 0.25);
RemoveBuildingForPlayer(playerid, 2232, 480.7969, -5.1016, 1001.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1544, 480.8594, -5.0156, 1002.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1436, 479.5938, -4.2969, 1002.6328, 0.25);
RemoveBuildingForPlayer(playerid, 2232, 482.5781, -3.2188, 1001.6797, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 501.4141, -7.5547, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 2778, 502.4063, -7.5313, 999.6797, 0.25);
RemoveBuildingForPlayer(playerid, 2681, 503.6484, -7.5156, 999.6797, 0.25);
RemoveBuildingForPlayer(playerid, 2232, 495.0391, -5.4063, 1001.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1544, 495.0078, -5.4453, 1002.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1544, 495.2031, -5.3828, 1002.2656, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 497.1563, -7.1094, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 2232, 496.3750, -5.6953, 1001.6797, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 505.6797, -7.0156, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 2232, 494.0625, -2.5156, 1001.6797, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 502.1641, -1.8906, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 499.8438, -1.6172, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 2670, 505.8125, -1.5625, 999.7813, 0.25);
RemoveBuildingForPlayer(playerid, 1776, 500.5625, -1.3672, 1000.7344, 0.25);
RemoveBuildingForPlayer(playerid, 1775, 501.8281, -1.4297, 1000.7344, 0.25);
//*************************exterior vip*************************
RemoveBuildingForPlayer(playerid, 1283, 807.9531, -1406.5391, 15.5703, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 786.9453, -1394.5703, 15.7031, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 828.7656, -1390.1172, 15.6406, 0.25);
RemoveBuildingForPlayer(playerid, 1462, 826.8516, -1385.6719, 12.5078, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 798.3828, -1384.3516, 15.6094, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 802.7109, -1375.6875, 15.3672, 0.25);
RemoveBuildingForPlayer(playerid, 5817, 848.8594, -1370.4297, 17.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 857.3750, -1381.1641, 13.0469, 0.25);
RemoveBuildingForPlayer(playerid, 1365, 861.9844, -1380.4609, 13.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1462, 853.1953, -1359.7266, 12.5547, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 860.9141, -1359.8047, 16.0859, 0.25);
RemoveBuildingForPlayer(playerid, 5816, 877.3516, -1363.7109, 21.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1462, 886.3438, -1357.3047, 12.5547, 0.25);
RemoveBuildingForPlayer(playerid, 1411, 870.1484, -1343.6563, 14.0859, 0.25);
RemoveBuildingForPlayer(playerid, 1438, 872.2656, -1346.4141, 12.5313, 0.25);
RemoveBuildingForPlayer(playerid, 1411, 875.4141, -1343.6563, 14.0859, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 778.8594, -1391.1563, 16.3125, 0.25);
//*************************Bar las 4p´s*************************
RemoveBuildingForPlayer(playerid, 14739, 752.3984, 1439.9453, 1104.2813, 0.25);
RemoveBuildingForPlayer(playerid, 2425, 756.6406, 1441.5391, 1102.8047, 0.25);
//*********************USMC exterior*********************
RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
RemoveBuildingForPlayer(playerid, 16095, 279.1328, 1829.7813, 16.6328, 0.25);
RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
RemoveBuildingForPlayer(playerid, 16096, 120.5078, 1934.0313, 19.8281, 0.25);
RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3267, 354.4297, 2028.4922, 22.4141, 0.25);
RemoveBuildingForPlayer(playerid, 3277, 354.4141, 2028.5000, 22.3750, 0.25);
RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);
//*********************USMC barco SF*********************
RemoveBuildingForPlayer(playerid, 3791, -1289.9766, 494.7734, 10.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3795, -1294.1172, 499.3359, 10.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3791, -1290.5000, 496.4375, 10.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3787, -1290.2656, 499.9609, 10.7734, 0.25);
RemoveBuildingForPlayer(playerid, 3787, -1290.3125, 497.9609, 10.7734, 0.25);
RemoveBuildingForPlayer(playerid, 3792, -1294.5938, 497.3750, 10.3359, 0.25);
RemoveBuildingForPlayer(playerid, 3787, -1300.6406, 504.0391, 10.7734, 0.25);
RemoveBuildingForPlayer(playerid, 3789, -1301.5859, 511.1094, 10.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3792, -1301.5859, 511.9688, 10.7500, 0.25);
RemoveBuildingForPlayer(playerid, 3800, -1298.2109, 503.1641, 10.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3798, -1297.7422, 501.6172, 10.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3788, -1294.0156, 509.2188, 10.7188, 0.25);
RemoveBuildingForPlayer(playerid, 3793, -1294.0156, 510.1563, 10.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3794, -1294.6172, 501.3281, 10.7188, 0.25);
RemoveBuildingForPlayer(playerid, 3798, -1293.2344, 512.4531, 10.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3795, -1290.3984, 503.4688, 10.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3792, -1289.7031, 503.9922, 10.7500, 0.25);
RemoveBuildingForPlayer(playerid, 3793, -1294.3750, 503.1094, 10.4297, 0.25);
//****************Hospital Público - By. Kevin Script****************
RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1085.7031, -1361.0234, 13.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1148.6797, -1385.1875, 13.2656, 0.25);
RemoveBuildingForPlayer(playerid, 617, 1178.6016, -1332.0703, 12.8906, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.0078, -1353.5000, 12.5781, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.0078, -1343.2656, 12.5781, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1177.7344, -1315.6641, 13.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.8125, -1292.9141, 12.5781, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.8125, -1303.1484, 12.5781, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1383.2734, 15.9453, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1350.4141, 15.9453, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1210.8047, -1367.3828, 15.7734, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1320.8594, 15.9453, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1210.8047, -1337.8359, 15.7734, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1299.7422, 15.9453, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1210.8047, -1304.9688, 15.7734, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);
//*********************Estacionamiento*********************
RemoveBuildingForPlayer(playerid, 713, 1109.6953, -1752.6172, 11.8516, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1098.4141, -1725.7422, 12.1563, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1055.2813, -1725.7422, 12.1563, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1775.6094, 13.9766, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1049.7891, -1757.1172, 12.3516, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1752.2500, 13.9766, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1109.6953, -1752.6172, 11.8516, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1098.4141, -1725.7422, 12.1563, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1055.2813, -1725.7422, 12.1563, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1775.6094, 13.9766, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1049.7891, -1757.1172, 12.3516, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1752.2500, 13.9766, 0.25);
//*********************Bomberos - By. Kevin Script*********************
RemoveBuildingForPlayer(playerid, 5967, 1259.4375, -1246.8125, 17.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
RemoveBuildingForPlayer(playerid, 1391, 1238.3750, -1258.2734, 44.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1269.5469, -1280.3203, 15.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1254.6875, -1276.1641, 17.0781, 0.25);
RemoveBuildingForPlayer(playerid, 5857, 1259.4375, -1246.8125, 17.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1284.1797, -1239.6406, 12.9141, 0.25);
//*********************LAPD Interior*********************
RemoveBuildingForPlayer(playerid, 2165, 223.0703, 120.0625, 998.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2165, 223.0703, 122.0469, 998.0156, 0.25);
RemoveBuildingForPlayer(playerid, 1806, 223.3984, 120.4219, 998.0000, 0.25);
RemoveBuildingForPlayer(playerid, 2356, 224.2031, 121.7266, 997.9922, 0.25);
RemoveBuildingForPlayer(playerid, 1806, 226.7500, 119.2578, 998.0000, 0.25);
RemoveBuildingForPlayer(playerid, 2165, 227.1094, 118.9297, 998.0156, 0.25);
RemoveBuildingForPlayer(playerid, 14895, 234.7031, 122.0625, 1004.3203, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 240.2891, 108.7500, 1002.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 240.2891, 109.4375, 1002.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 240.2891, 110.0859, 1002.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 240.2891, 110.7500, 1002.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 252.5391, 113.2891, 1002.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 252.5391, 113.9531, 1002.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 252.5391, 114.6016, 1002.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1722, 252.5391, 115.2891, 1002.2109, 0.25);
RemoveBuildingForPlayer(playerid, 14851, 246.2500, 118.1484, 1005.9063, 0.25);
RemoveBuildingForPlayer(playerid, 14847, 246.2344, 117.8047, 1005.6094, 0.25);
//*********************LAPD Exterior*********************

RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1541.4453, -1713.3047, 14.4297, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1709.6406, 13.0469, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1541.2969, -1702.6016, 14.4375, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1693.3906, 14.4375, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1687.1016, 14.4375, 0.25);
RemoveBuildingForPlayer(playerid, 646, 1545.5234, -1678.8438, 14.0000, 0.25);
RemoveBuildingForPlayer(playerid, 646, 1553.8672, -1677.7266, 16.4375, 0.25);
RemoveBuildingForPlayer(playerid, 646, 1553.8672, -1673.4609, 16.4375, 0.25);
RemoveBuildingForPlayer(playerid, 646, 1545.5625, -1672.2188, 14.0000, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1664.6250, 14.4375, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1658.3438, 14.4375, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1541.4766, -1648.4531, 14.4375, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1642.0313, 13.0469, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1541.7422, -1638.9141, 14.4375, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1525, 1549.8906, -1714.5234, 15.1016, 0.25);
//
RemoveBuildingForPlayer(playerid, 1490, 2353.5391, -1508.2109, 24.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 2347.1406, -1498.8516, 26.2266, 0.25);
//*********************Ayuntamiento*********************************
RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1465.4766, -1848.2500, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1466.9453, -1847.8438, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1419.7344, -1846.5469, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1420.4297, -1845.3438, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1419.6953, -1844.2031, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1420.4922, -1842.4375, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1419.7266, -1842.8516, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1419.6719, -1842.0313, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 4170, 1433.9531, -1844.4063, 21.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1432.3047, -1832.9141, 15.2891, 0.25);
RemoveBuildingForPlayer(playerid, 1357, 1487.6953, -1848.1094, 12.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1486.2109, -1848.1250, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1468.0625, -1847.7891, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1488.9219, -1848.2734, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 4171, 1503.3984, -1848.3359, 21.4609, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1515.3828, -1850.0547, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1514.4219, -1850.0391, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1516.6875, -1850.0547, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1538.9453, -1849.2734, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1538.8359, -1847.6250, 13.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1538.3906, -1847.9297, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1539.1016, -1847.2969, 12.9297, 0.25);
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if (newkeys == 16 && InteriorLimusina[playerid] > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(InteriorLimusina[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InteriorLimusina[playerid] = 0;
	}
	if (newkeys == 16 && InteriorSwatVan[playerid] > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(InteriorSwatVan[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InteriorSwatVan[playerid] = 0;
	}
	if (newkeys == 16 && InteriorTren[playerid] > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(InteriorTren[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InteriorTren[playerid] = 0;
	}
	if (newkeys == 16 && InteriorBeagle[playerid] > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(InteriorBeagle[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y+2, Z);
		SetPlayerInterior(playerid, 0);
		InteriorBeagle[playerid] = 0;
	}
   	if(newkeys == KEY_CTRL_BACK)
	{
	 	new params[1];
	 	cmd_entrar(playerid, params);
	 	cmd_salir(playerid, params);
	}
//***sistema de fire***
	if(HOLDING(KEY_FIRE))
    {
        SetTimerEx("Checkfire", 750, false, "i", playerid);
        Apagandofire[playerid] = 1;
    }
    if(RELEASED(KEY_FIRE))
    {
        Apagandofire[playerid] = 0;
    }
//**security**
#if defined AntiArmas 1
new Menu[1024];
if(newkeys & KEY_FIRE && ArmaProhibida(playerid))
{
new Arma, Balas;
GetPlayerWeaponData(playerid, 7, Arma, Balas);
SetPlayerHealth(playerid, 0);
Menu[0]='\0';
strcat(Menu, "{FFFFFF}El arma que quieres utilizar fue prohibida\nde la comunidad.\n\n{FFFFFF}Informa: Administración\n{FFFFFF}Sitio Web: www.titaniumgamers.com", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, "{FF0000}[<!>] Arma Prohibida", Menu, "{FFFFFF}Cerrar", "") ;
#endif
return 1;
}
	//************
	new sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(IsPlayerNPC(playerid)) return 1;
	if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys) && gPlayerUsingLoopingAnim[playerid] == 1 && Info[playerid][pBeingSentenced] == 0)
	{
	    StopLoopingAnim(playerid);
    }
	if((newkeys & KEY_FIRE) && GetPVarInt(playerid, "SpeedRadar") == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    if(GetPVarInt(playerid, "RadarTimeout") == 0)
	    {
			if(GetPlayerWeapon(playerid) == SPEEDGUN)
			{
			    new Float:x,Float:y,Float:z;
				for(new veh = 1; veh < MAX_VEHICLES; veh++)
				{
				    if(IsVehicleStreamedIn(veh, playerid))
				    {
					    GetVehiclePos(veh,x,y,z);
					    if(IsPlayerAimingAt(playerid,x,y,z,10))
					    {
					        new string[128];
							new Float: Speed = GetVehicleSpeed(veh, 0);
							format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~Placa: ~w~%d~n~~b~Vel: ~w~%d MPH", veh, floatround(Speed/1.609));
							GameTextForPlayer(playerid, string,3500, 3);
							format(string, sizeof(string), "Placa: %d Vel: %d MPH", veh, floatround(Speed/1.609));
							SendClientMessageEx(playerid, COLOR_GRAD4, string);
							SetPVarInt(playerid, "RadarTimeout", 1);
							SetTimerEx("RadarCooldown", 3000, 0, "i", playerid);
							return 1;
						}
					}
			    }
			}
		}
	}
	if (IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
	{
		if(GetPVarInt(playerid, "editingcdvehpos"))
		{
			TogglePlayerControllable(playerid, false);
		    SafeDialogEx(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Advertencia:","Esta es la nueva posición que quieres?","Ok","Cancelar");
		}
		if(GetPVarInt(playerid, "editingcdvehnew"))
		{
            TogglePlayerControllable(playerid, false);
	        SafeDialogEx(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Advertencia:","Esta es la nueva posición que quieres?","Ok","Cancelar");
		}
		if(GetPVarInt(playerid, "editingfamhq") != 255)
		{
		    if(GetPVarInt(playerid, "editingfamhqaction") == 1)
		    {
      			DeletePVar(playerid, "editingfamhqaction");
		        TogglePlayerControllable(playerid, false);
	        	SafeDialogEx(playerid,HQENTRANCE,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Es está la entrada que quieres?","Ok","Cancelar");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 2)
		    {
		        DeletePVar(playerid, "editingfamhqaction");
		        TogglePlayerControllable(playerid, false);
	        	SafeDialogEx(playerid,HQEXIT,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Es está la salida que quieres?","Ok","Cancelar");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 5)
		    {
		        TogglePlayerControllable(playerid, false);
	        	SafeDialogEx(playerid,HQENTRANCE,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Es está la entrada que quieres?","Ok","Cancelar");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 6)
		    {
		        TogglePlayerControllable(playerid, false);
	        	SafeDialogEx(playerid,HQEXIT,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Es está la salida que quieres?","Ok","Cancelar");
		    }

		}
	}
	if(newkeys == KEY_NO)
	{
	 new params[1];
	 cmd_motor(playerid, params);
	}
	if(newkeys == KEY_YES)
	{
	 new params[1];
	 cmd_luces(playerid, params);
	}
	if(newkeys == KEY_FIRE)
	{
	    if(TutStep[playerid] == 0) return 1;
	    if(PuedeP[playerid] == 1) return GameTextForPlayer(playerid, "~W~Espere. . .", 5000, 1);
		if(TutStep[playerid] == 1)
		{
			switch(TutTime[playerid])
			{
		    	case 1: TutTime[playerid] = 2;
		    	case 2: TutTime[playerid] = 3;
		    	case 3: TutTime[playerid] = 4;
		    	case 4: TutTime[playerid] = 5;
		    	case 5: TutTime[playerid] = 6;
		    	case 6: TutTime[playerid] = 7;
		    	case 7: TutTime[playerid] = 8;
		    	case 8: TutTime[playerid] = 9;
		    	case 9: TutTime[playerid] = 10;
		    	case 10: TutTime[playerid] = 11;
		    	case 11: TutTime[playerid] = 12;
 		    	case 12: TutTime[playerid] = 13;
		    	case 13: TutTime[playerid] = 14;
		    }
		    Tutorial_Inside(playerid);
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if(cHealth < 100)
		    {
				SetHP(playerid, cHealth+2);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "* Terminaste de tomar la bebida.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
			DeletePVar(playerid, "UsingSprunk");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	if (IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
	{
 		new Float:health;
 		GetPlayerHealth(playerid, health);

		if(GetPVarInt(playerid, "UsingSprunk"))
		{
		    new hpint = floatround( health, floatround_round );
		    if( hpint >= 100 )
			{
  				SendClientMessageEx(playerid, COLOR_GREY, " Tu vida está estable (100hp).");
	 			return 1;
	   		}
	   		else
	   		{
				GetPlayerHealth(playerid, health);
				SetHP(playerid, health+2.0);
			}
		}
	}
	if(newkeys & KEY_SPRINT)
    {
    	if(IsPlayerConnected(playerid))
		{
		    if(ShowRules[playerid] == 0)
			{
				return 1;
			}
  			if(PlayerDrunk[playerid] > 9) { ApplyAnimation(playerid,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[playerid]*1000); }
  			if(PuedeD[playerid] == 1)
	    	{
				return GameTextForPlayer(playerid, "Espere por favor. . .", 5000, 1);
			}
			else if(ShowRules[playerid] == 1)
			{
				switch(RulesTime[playerid])
				{
		    		case 1: RulesTime[playerid] = 2;
		    		case 2: RulesTime[playerid] = 3;
		    		case 3: RulesTime[playerid] = 4;
		    		case 4: RulesTime[playerid] = 5;
		    		case 5: RulesTime[playerid] = 6;
		    		case 6: RulesTime[playerid] = 7;
		    		case 7: RulesTime[playerid] = 8;
		    		case 8: RulesTime[playerid] = 9;
		    		case 9: RulesTime[playerid] = 10;
		    	}
		    	ShowRol(playerid);
		    }
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
    	if(IsPlayerConnected(playerid))
		{
		    if (GetPlayerState(playerid) == 1)
			{
				TeleportPlayer(playerid);
				if(ReduceTime[playerid] == 0)
				{
				    new Float:hp; GetPlayerHealth(playerid, hp);
					if(PlayerToPoint(1.0,playerid,-36.3182,-56.8905,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-19.1974,-56.8366,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-35.9060,-139.2014,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-15.2743,-139.2626,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+5);
					}
					else if(PlayerToPoint(1.0,playerid,-16.7039,-139.3292,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
				}
			}
			else if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1);
			}
		}
    }
   if((newkeys & KEY_FIRE) && pTazer[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{



 		if(TazerTimeout[playerid] > 0) return 1;
		new Float:X, Float:Y, Float:Z;
		foreach(Player, i)
		{
		    if(IsPlayerStreamedIn(i, playerid))
		    {
			    GetPlayerPos(i, X, Y, Z);
				if(IsPlayerAimingAt(playerid,X,Y,Z,1) && Info[i][pEstado] == 0 && GetPlayerState(i) == PLAYER_STATE_ONFOOT && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
				{
					if(OrgGob(i))
					{
					    return SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes tazear a esta persona.");
					}
					new string[44 + (MAX_PLAYER_NAME * 2)];
		    		format(string, sizeof(string), "* %s descarga 400 voltios en el cuerpo de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(i, "~r~Tazeado", 6000, 3);
					SetPlayerDrunkLevel(i, 5000);
					TogglePlayerControllable(i, 0);
					PlayerPlaySound(i, 1085, X, Y, Z);
					PlayerPlaySound(playerid, 1085, X, Y, Z);
					Info[i][pEstado] = 1;
					SetPVarInt(i, "PlayerCuffed", 1);
					PlayerCuffedTime[i] = 15;
					SetPVarInt(i, "IsFrozen", 1);
					TazerTimeout[playerid] = 4;
					SetTimerEx("TazerTimer",1000,false,"d",playerid);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Recargando Taser... ~w~5", 1500,3);
					return 1;
	             }
	         }
         }
	}
	return 1;
}

stock ClearKnock(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	KnockedDown[playerid] = 0;
}

stock RemovePlayerWeapon(playerid, weapon){
	switch(weapon) {
		case 0, 1: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][0] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 2, 3, 4, 5, 6, 7, 8, 9: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][1] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 22, 23, 24: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][2] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 25, 26, 27: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][3] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 28, 29, 32: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][4] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 30, 31: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][5] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 33, 34: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][6] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 35, 36, 37, 38: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][7] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 16, 17, 18, 39: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][8] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 41, 42, 43: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][9] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 10, 11, 12, 13, 14, 15: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][10] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 44, 45, 46: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][11] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 40: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][12] = 0;
			SetPlayerWeapons(playerid);
	    }
	}
	return 1;
}

/*RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[13];
	for(new s = 0; s < 13; s++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, s, wep, ammo);
		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, s, plyWeapons[s], ammo);
		}
		else
		{
			Info[playerid][pWeapons][s] = 0;
		}
	}
	ResetPlayerWeapons(playerid);
 	for(new s = 0; s < 13; s++)
	{
		GivePlayerValidWeapon(playerid, plyWeapons[s]);
	}
	return 1;
}*/

function ReduceTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(ReduceTime[playerid] == 1)
	    {
			ReduceTime[playerid] = 0;
	    }
	}
}

function FreezePlayer(playerid)	{	TogglePlayerControllable(playerid, 0);	}

function UnfreezePlayer(playerid)	{	TogglePlayerControllable(playerid, 1);	}

function Heal(playerid)			{	SetHP(playerid, 100);			return 1;	}

function CheckForCloseDoor(playerid)
{
	new sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(IsAPolice(playerid))
    {
        if (PlayerToPoint(15, playerid,1589.053344,-1638.123168,14.122960))
		{
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
      		return 1;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE," No hay señal.");
    }
    else SendClientMessageEx(playerid, COLOR_WHITE,"Usted no tiene un mando a distancia.");
    return 1;
}


stock Bought(playerid, amount)
{
	if(IsPlayerConnected(playerid))
	{
 		new a[12];
		format(a,sizeof(a),"~r~ -%d$",amount);
		GameTextForPlayer(playerid, a, 5000, 1);
		GivePlayerCash(playerid, -amount);
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock Earn(playerid, amount){
	if(IsPlayerConnected(playerid)){
		new a[12];
		format(a,sizeof(a),"~g~ %d$",amount);
	    GameTextForPlayer(playerid, a, 5000, 1);
		GivePlayerCash(playerid, amount);
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock CheckMoney(playerid, money){
    if(IsPlayerConnected(playerid)){
	    new b[70];
	    new xx;
		xx = money - (GetPlayerCash(playerid));
	    if(GetPlayerCash(playerid) >= money){ return 1; }
		else{
		    format(b,sizeof(b),"* Te faltan %d!",xx);
			SendClientMessageEx(playerid, COLOR_FADE1, b);
			return 0;
		}
	}
	return 0;
}

function ClearDrugs(playerid)
{
	UsedWeed[playerid] = 0;
	UsedCrack[playerid] = 0;
	return 1;
}

function NewUs(playerid)
{
	  NewUsed[playerid] = 0;
      return 1;
}

function PuedePTimer(playerid)
{
	PuedeP[playerid] = 0;
	return 1;
}

function ReleasePlayer(playerid)
{
	SetPVarInt(playerid, "IsFrozen", 0);
	TogglePlayerControllable(playerid,1);
}

function NewbieUnMuted(playerid)
{
    Info[playerid][pNMute] = 0;
    SendClientMessage(playerid, COLOR_WHITE, "Ahora ya no estas silenciado del canal de ayuda recuerda usarlo sólo para preguntas válidas.");
    SendClientMessage(playerid, COLOR_WHITE, "Si sigues recuerda que puedes resultar baneado automáticamente del servidor.");
	return 1;
}
//***dni por textdraw***
function ShowDNI(playerid,giveplayerid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(giveplayerid))
	{
	    new string[64], sex[18], otext[36];
	    if(Info[playerid][pSex] == 1) { sex = "Hombre"; }
   		if(Info[playerid][pSex] == 2) { sex = "Mujer"; }
   		if(Info[playerid][pOrigin] == 2) { otext = "Los Angeles"; }
		else if(Info[playerid][pOrigin] == 1) { otext = "Los Angeles"; }

        format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
		PlayerTextDrawSetString(giveplayerid,DNI5[giveplayerid], string);

        format(string, sizeof(string), "%d", Info[playerid][pDNI]);
		PlayerTextDrawSetString(giveplayerid,DNI3[giveplayerid], string);

		format(string, sizeof(string), "%s", sex);
		PlayerTextDrawSetString(giveplayerid,DNI9[giveplayerid], string);

		format(string, sizeof(string), "%d", Info[playerid][pAge]);
		PlayerTextDrawSetString(giveplayerid,DNI7[giveplayerid], string);

		format(string, sizeof(string), "%s", otext);
		PlayerTextDrawSetString(giveplayerid,DNI11[giveplayerid], string);

   		PlayerTextDrawSetPreviewModel(giveplayerid,DNI12[giveplayerid], Info[playerid][pChar]);

		PlayerTextDrawShow(giveplayerid, DNI0[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI1[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI2[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI3[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI4[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI5[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI6[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI7[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI8[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI9[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI10[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI11[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI12[giveplayerid]);

		SetTimerEx("qdni",10000,false,"i",giveplayerid);
	}
}
//**********************
//**licencias por textdraw***
function ShowLicencia(playerid,giveplayerid,tipo)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(giveplayerid))
	{
 		new sex[18],string[200];
	    if(Info[playerid][pSex] == 1) { sex = "Hombre"; }
   		if(Info[playerid][pSex] == 2) { sex = "Mujer"; }

   		format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
		PlayerTextDrawSetString(giveplayerid, LICENCIA2[giveplayerid], string);

		format(string, sizeof(string), "%s", sex);
		PlayerTextDrawSetString(giveplayerid, LICENCIA8[giveplayerid], string);

		format(string, sizeof(string), "%d", Info[playerid][pAge]);
		PlayerTextDrawSetString(giveplayerid, LICENCIA4[giveplayerid], string);

   		PlayerTextDrawSetPreviewModel(giveplayerid, LICENCIA1[giveplayerid], Info[playerid][pChar]);
	    if(tipo == 1)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "ld_drv:gold");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	    if(tipo == 2)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "ld_drv:goboat");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	    if(tipo == 3)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "ld_drv:golfly");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	    if(tipo == 4)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "hud:fist");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	    if(tipo == 5)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "ld_drv:silver");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	}
}
//***************************
function RegMsn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SafeDialogEx(playerid,DIALOG_REG_MSN,DIALOG_STYLE_MSGBOX,"{C3FF23}Cuenta Guardada","{FFFFFF}• Su cuenta ya fue guardada en nuestra base de datos con éxito!","{FFFFFF}Siguiente","");
		return 1;
	}
	return 1;
}

stock Admin(lvl,playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new admin = Info[playerid][pAdminZC];
	    if(admin	>=	lvl)
		{
		    return 1;
		}
	}
	return 0;
}
stock Ef(lvl,playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new ef = Info[playerid][pFactionModerator];
	    if(ef	>=	lvl)
		{
		    return 1;
		}
	}
	return 0;
}
stock Efam(lvl,playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new efam = Info[playerid][pGangModerator];
	    if(efam	>=	lvl)
		{
		    return 1;
		}
	}
	return 0;
}
stock Es(lvl,playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new es = Info[playerid][pModStaff];
	    if(es	>=	lvl)
		{
		    return 1;
		}
	}
	return 0;
}
stock Eb(lvl,playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new eb = Info[playerid][pBanAppealer];
	    if(eb	>=	lvl)
		{
		    return 1;
		}
	}
	return 0;
}
stock To(lvl,playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new to = Info[playerid][pShopTech];
	    if(to	>=	lvl)
		{
		    return 1;
		}
	}
	return 0;
}
function Detective_FindPerson(playerid)
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(WhoFind[playerid], X,Y,Z);
	SetPlayerCheckpoint(playerid, X,Y,Z, 6);
	SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar");
	WhoFind[playerid] = 0;
	return 1;
}

function Detective_FindCar(playerid)
{
	new Float:X,Float:Y,Float:Z;
	GetVehiclePos(WhoFind[playerid], X,Y,Z);
	SetPlayerCheckpoint(playerid, X,Y,Z, 10);
	SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar");
	WhoFind[playerid] = 0;
	return 1;
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
 	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

LoadAnimLibs(playerid)
{
    PreloadAnimLib(playerid,"CARRY");
    PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"BD_FIRE");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"GHANDS");
	PreloadAnimLib(playerid,"MEDIC");
	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"SWAT");
	PreloadAnimLib(playerid,"WUZI");
   	PreloadAnimLib(playerid,"PED");
   	PreloadAnimLib(playerid,"ped");
   	PreloadAnimLib(playerid,"SCRATCHING");
    PreloadAnimLib(playerid,"FAT");
    PreloadAnimLib(playerid,"POLICE");
   	PreloadAnimLib(playerid,"Attractors");
   	PreloadAnimLib(playerid,"FOOD");
   	PreloadAnimLib(playerid,"CRIB");
    PreloadAnimLib(playerid,"INT_HOUSE");
    PreloadAnimLib(playerid,"MISC");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"GRAVEYARD");
	PreloadAnimLib(playerid,"DANCING");
	PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"GANGS");
	PreloadAnimLib(playerid,"FIGHT_D");
	PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"SNM");
	PreloadAnimLib(playerid,"benchpress");
}
SearchingHit(playerid)
{
	new string[ 256 ];
   	SendClientMessageEx(playerid, COLOR_WHITE, "Contratos Habilitados:");
   	new hits;
	foreach(Player, i)
	{
		if(Info[i][pMember] != 8 && Info[i][pHead] > 0)
		{
	 		if(GotHit[i] == 0)
  			{
				hits++;
				format(string, sizeof(string), "Nombre: %s (ID %d) | Precio: $%d | Contratado por: %s | Detalles: %s | Seguido por: Nobody", GetPlayerNameEx(i), i, Info[i][pHead], Info[i][pContractBy], Info[i][pContractDetail]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
			else
			{
  				format(string, sizeof(string), "Nombre: %s (ID %d) | Precio: $%d |  Contratado por: %s | Detalles: %s | Seguido por: %s", GetPlayerNameEx(i), i, Info[i][pHead], Info[i][pContractBy], Info[i][pContractDetail], GetPlayerNameEx(GetChased[i]));
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
  		}
	}
	if(hits && Info[playerid][pRank] >= 6 && Info[playerid][pMember] == 8 && Info[playerid][pLeader] == 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Usa {5ABAFF}/darhit{FFFFFF} para asignar un contrato a uno de los hitman.");
	}
	if(hits == 0)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "No hay contratos disponibles.");
	}
	return 0;
}

SendPaintballArenaMessage(arenamodo, color, message[])
{
	foreach(Player, p)
	{
   		new modo = GetPVarInt(p, "ArenaMode");
   		if(arenamodo == modo)
       	{
	      	SendClientMessageEx(p, color, message);
		}
	}
	return 1;
}

function BackupClear(playerid, faction, timer)
{
	if(IsPlayerConnected(playerid))
	{
		if(faction == 1)
		{
			if(Info[playerid][pRequestingBackup] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_LAPD(i) && OnDuty[i] == 1)
						DisablePlayerCheckpoint(playerid);
					}
				}
				if(timer != 1) 	SendClientMessageEx(playerid, TEAM_BLUE_COLOR, "Tu pedido de refuerzos ha sido cancelado automáticamente.");
				else 					SendClientMessageEx(playerid, TEAM_BLUE_COLOR, "Tu pedido fue cancelado.");

				Info[playerid][pRequestingBackup] = 0;
			}
		}
	}
	return 1;
}

//·| << Timers de Objetos >> ========================================================================================|·
function Puerta2Abierta()
{
    MoveObject(PuertaH2,250.67543029785, 130.39466552734, 1037.9182128906, 0.97);
    SetTimer("Puerta2Cerrada", 5000, 0);
}
function Puerta1Abierta()
{
    MoveObject(PuertaH1,250.56510925293, 130.34936218262, 1032.2158203125, 0.97);
    SetTimer("Puerta1Cerrada", 8000, 0);
}
function Puerta2Cerrada()
{
    MoveObject(PuertaH2,250.67543029785, 131.59466552734, 1037.9182128906, 0.97);
    if(HaciaAbajo == 1) {
    SetTimer("Eabajo", 2000, 0); }
    else { }
}
function Puerta1Cerrada()
{
    MoveObject(PuertaH1,250.56510925293, 131.54936218262, 1032.2158203125, 0.97);
    if(HaciaArriba == 1) {
    SetTimer("Earriba", 2000, 0); }
    else {
    }
}

stock SetPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
    SetPlayerPos(playerid, X, Y, Z);
    SetPlayerFacingAngle(playerid, A);
    SetPlayerInterior(playerid, interiorid);
    SetPlayerVirtualWorld(playerid, worldid);
	Info[playerid][pVW] = interiorid;
	Info[playerid][pInt] = worldid;
}

function TazerTimer(playerid)
{
	if (TazerTimeout[playerid] > 0)
   	{
		new string[128];
   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Recargando Taser... ~w~%d", TazerTimeout[playerid]);
		GameTextForPlayer(playerid, string,1500, 3);
		TazerTimeout[playerid] -= 1;
		SetTimerEx("TazerTimer",1000,false,"d",playerid);
   	}
	return 1;
}

GetPlayerNameEx(playerid) {

	new
		sz_playerName[MAX_PLAYER_NAME],
		i_pos;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfind(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}

function BikeModel(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 509) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 510) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 462) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 448) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 581) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 522) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 461) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 521) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 523) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 463) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 586) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 468) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 471) { return 1; }
	}
	return 0;
}

//Buttons
function CloseChief()
{
	MoveDynamicObject(chief1,229.59960938,119.50000000,1009.21875000,4);
 MoveDynamicObject(chief2,232.59960938,119.53515625,1009.21875000,4);
	return 1;
}
function CloseEastLobby()
{
	MoveDynamicObject(eastlobby1,253.14941406,110.59960938,1002.21502686,4);
	MoveDynamicObject(eastlobby2,253.18457031,107.59960938,1002.21502686,4);
	return 1;
}
function CloseWestLobby()
{
	MoveDynamicObject(westlobby1,239.71582031,116.09179688,1002.21502686,4);
	MoveDynamicObject(westlobby2,239.67968750,119.09960938,1002.21502686,4);
	return 1;
}

function CloseLocker()
{
	MoveDynamicObject(locker1,267.29980469,112.56640625,1003.61718750,4);
 MoveDynamicObject(locker2,264.29980469,112.52929688,1003.61718750,4);
	return 1;
}
function CloseCCTV()
{
	MoveDynamicObject(cctv1,264.44921875,115.79980469,1003.61718750,4);
 MoveDynamicObject(cctv2,267.46875000,115.83691406,1003.61718750,4);
	return 1;
}
function CloseAININTD1()
{
	MoveDynamicObject(AININTDoor1,276.78461, -1488.97546, 4994.61914,4);
	return 1;
}
function CloseAININTD2()
{
	MoveDynamicObject(AININTDoor2,269.50909, -1502.52991, 4994.61914,4);
	return 1;
}
function CloseAININTD3()
{
	MoveDynamicObject(AININTDoor3,223.07930, -1488.93042, 5004.55371,4);
	return 1;
}
function CloseAININTD4()
{
	MoveDynamicObject(AININTDoor4,211.59100, -1508.53979, 4998.76611,4);
	return 1;
}
function CloseAININTD5()
{
	MoveDynamicObject(AININTDoor5,230.89220, -1488.88452, 5010.36133,4);
	
	return 1;
}

ExecuteNOPAction(playerid)
{
	NOPTrigger[playerid]++;
	RemovePlayerFromVehicle(playerid);
	new newcar = GetPlayerVehicleID(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z+2);
	SetVehicleToRespawn(newcar);
	if(NOPTrigger[playerid] >= 1)
	{
		new sec = (NOPTrigger[playerid] * 1000)/1000-1, string[128];
		format(string, sizeof(string), "AdmWarning: %s (ID %d) tal vez es `NOP hacking explote´, (Modelo: %d) por %d segundos.", GetPlayerNameEx(playerid), playerid, GetVehicleModel(newcar),sec);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "ATENCIÓN: %s fue expulsado por el servidor, razón: Posible Crasher", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
 		SafeDialogEx(playerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Haz sido expulsado del servidor","El Servidor\nte ha expulsado\nRazon: Posible Car Crash","Salir","");
		SetTimerEx("KickxD",500,0,"d",playerid);
	}
	return 1;
}

stock PlayerFacePlayer(playerid, targetplayerid) { // Yeah, this'll fix the handshake headaches we had last time around (shaking air).
	new
		Float: Angle;

	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return 1;
}

stock GivePlayerEventWeapons( playerid )
{
	if( GetPVarInt( playerid, "EventToken" ) == 1 )
	{
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 0 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 1 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 2 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 3 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 4 ], 60000 );
	}
	return 1;
}

function SafeLoadObjects(playerid)
{
	if(GetPVarType(playerid, "LoadingObjects"))
	{
		DeletePVar(playerid, "LoadingObjects");
		TogglePlayerControllable(playerid, 1);
		TextDrawHideForPlayer(playerid, box);
		TextDrawHideForPlayer(playerid, streamer);
	}
}

function ReFill(playerid)
{
	if(!IsAtGasStation(playerid) || !IsPlayerInAnyVehicle(playerid) || VehicleFuel[GetPlayerVehicleID(playerid)] >= 200 || GetPlayerCash(playerid) < 1)
	{
		StopRefueling(playerid);
	}
	else
	{
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) return StopRefueling(playerid);
		VehicleFuel[GetPlayerVehicleID(playerid)] += 125; RefuelingVehiclePrice[playerid] += 200;
		if(VehicleFuel[GetPlayerVehicleID(playerid)] >= 200) VehicleFuel[GetPlayerVehicleID(playerid)] = 200;
	}
	return true;
}

stock StopRefueling(playerid)
{
	new string[128];
	GivePlayerCash(playerid, -RefuelingVehiclePrice[playerid]);
	format(string, sizeof(string), "Gasolinero dice: El tanque de su vehículo fue cargado, su precio es de %d.", RefuelingVehiclePrice[playerid]);
	SendClientMessageEx(playerid, COLOR_FADE1, string);

	RefuelingVehicle[playerid] = 0; RefuelingVehiclePrice[playerid] = 0; KillTimer(RefuelingVehicleTimer[playerid]);
	return true;
}

public OnVehicleSpawn(vehicleid)
{
    if(Lamp[vehicleid] == 1)
	{
    	DestroyObject(light[vehicleid]);
        Lamp[vehicleid] = 0;
        MatCam[vehicleid] = 0;
        DestroyObject(Letrero_Tax_01);
        DestroyObject(Letrero_Tax_02);
        DestroyObject(Letrero_Tax_03);
        DestroyObject(Letrero_Tax_04);
        DestroyObject(Letrero_Tax_05);
        DestroyObject(Letrero_Tax_06);
        DestroyObject(Letrero_Tax_07);
        DestroyObject(Letrero_Tax_08);
        DestroyObject(Luz_01);
        DestroyObject(Luz_02);
        DestroyObject(Luz_03);
        DestroyObject(Luz_04);
    }
    VehicleStatus{vehicleid} = 0;
    estacionveh[vehicleid] = 0;
	foreach(Player, i)
	{
	    new v;
	    v = GetPlayerVehicle(i, vehicleid);
	    if (v != -1)
	    {
 			if(PlayerVehicleInfo[i][v][pvId] == vehicleid && GetVehicleModel(vehicleid) != PlayerVehicleInfo[i][v][pvModelId])
	  		{
	   			DestroyVehicle(vehicleid);
				PlayerVehicleInfo[i][v][pvId] = CreateVehicle(PlayerVehicleInfo[i][v][pvModelId], PlayerVehicleInfo[i][v][pvPosX], PlayerVehicleInfo[i][v][pvPosY], PlayerVehicleInfo[i][v][pvPosZ], PlayerVehicleInfo[i][v][pvPosAngle],PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2], -1);
				if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvLock]);
	            ChangeVehiclePaintjob(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvPaintJob]);
				ChangeVehicleColor(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
                SetVehicleVirtualWorld(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvVW]);
                SetVehicleHealth(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvHealth]);
				//SetVehicleNumberPlate(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvNumberPlate]);
				for(new m = 0; m < MAX_MODS; m++)
	   			{
   					AddVehicleComponent(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvMods][m]);
	      		}
 			}
 			else
			{
			    ChangeVehiclePaintjob(vehicleid, PlayerVehicleInfo[i][v][pvPaintJob]);
				ChangeVehicleColor(vehicleid, PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
				SetVehicleVirtualWorld(vehicleid, PlayerVehicleInfo[i][v][pvVW]);
				SetVehicleHealth(vehicleid, PlayerVehicleInfo[i][v][pvHealth]);
				for(new m = 0; m < MAX_MODS; m++)
	            {
  	            	AddVehicleComponent(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvMods][m]);
	            }
				if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvLock]);
			}
			new string[128];
			format(string,sizeof(string),"Tu %s ha sido enviado a la última posición donde lo aparcaste, /GPS.",GetVehicleName(vehicleid));
			SendClientMessageEx(i, COLOR_GRAD1, string);
		}
	}
 	if(LockStatus[vehicleid])
	{
		foreach(Player, i)
		{
			if(Info[i][pLockCar] == vehicleid)
			{
				Info[i][pLockCar] = INVALID_VEHICLE_ID;
			}
		}
	}
	arr_Engine{vehicleid} = 0;
	VehicleFuel[vehicleid] = 200;
	TruckContents[vehicleid] = 0;
	DestroyObject(ObjMat_01[vehicleid]);
	DestroyObject(ObjMat_02[vehicleid]);
	DestroyObject(ObjMat_03[vehicleid]);
	DestroyObject(ObjMat_04[vehicleid]);
}

function SetPlayerJoinCamera(playerid)
{
SetPosEx(playerid, 415.733825, -1506.296630, 31.401828, 0, 0, 0);
SetPlayerFacingAngle(playerid, 219.770111);
SetPlayerCameraPos(playerid, 432.109008, -1567.099975,34.623218);
SetPlayerCameraLookAt(playerid, 384.470703,-1518.270019,34.629215);
SetPlayerVirtualWorld(playerid, 0);
}

stock IsPlayerInVehicleRadio(playerid, Float:radius)
{
    new Float:r, Float:rr, Float:rrr, Float:rc, Float:rrc, Float:rrrc;
    GetPlayerPos(playerid, r, rr, rrr);
    for(new i; i < MAX_VEHICLES; i++)
    {
        GetVehiclePos(i, rc, rrc, rrrc);
        if(PlayerToPoint(radius,playerid,rc,rrc,rrrc))
        {
            return i;
        }
    }
    return false;
}

stock CleanScreen()
{
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        ClearChatbox(i);
    }
    return 1;
}

function DisableVehicleAlarm(vehicleid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
}

function HospitalFun(playerid)
{
    SendClientMessageEx(playerid, COLOR_SALMON, "Los gastos médicos son {FFFFFF}$1.450{FF7477} en total, para la próxima cuidese.");
    GivePlayerCash(playerid, -1450);
	SetCameraBehindPlayer(playerid);
	SetPosEx(playerid, -211.507080, -1778.385498, 675.785949,ESTE,0,0);
	SetPlayerFacingAngle(playerid, 269.400024);
	SetPlayerInterior(playerid,5);
	LoadObjects(playerid);
	SetCameraBehindPlayer(playerid);
}

function OtherTimerEx(playerid, type)
{
	if(type == TYPE_GIVEWEAPONTIMER)
	{
	    if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
		{
			SetPVarInt(playerid, "GiveWeaponTimer", GetPVarInt(playerid, "GiveWeaponTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(type == TYPE_GUARDTIMER)
	{
	    if(GetPVarInt(playerid, "GuardTimer") > 0)
	    {
	        SetPVarInt(playerid, "GuardTimer", GetPVarInt(playerid, "GuardTimer")-1);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
	    }
	}
	else if(type == TYPE_FLOODPROTECTION)
	{
 		if( CommandSpamUnmute[playerid] >= 1)
 		{
  			CommandSpamUnmute[playerid]--;
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
    	}
	}
	else if(type == TYPE_PAYTIMER)
	{
	    if(GetPVarInt(playerid, "GiveMoneyTimer") > 0)
		{
			SetPVarInt(playerid, "GiveMoneyTimer", GetPVarInt(playerid, "GiveMoneyTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PAYTIMER);
		}
	}
	else if(type == TYPE_ARMSTIMER)
	{
	    if(GetPVarInt(playerid, "ArmsTimer") > 0)
		{
			SetPVarInt(playerid, "ArmsTimer", GetPVarInt(playerid, "ArmsTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
		}
	}
	else if (type == TYPE_TPPIZZARUNTIMER)
	{
		if(GetPVarInt(playerid, "tpPizzaTimer") > 0 && GetPVarInt(playerid, "Pizza"))
		{
			SetPVarInt(playerid, "tpPizzaTimer", GetPVarInt(playerid, "tpPizzaTimer")-1);
			SetTimerEx("OtherTimerEx", 2000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
		}
	}
	else if(type == TYPE_TPDRUGRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpDrugRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpDrugRunTimer", GetPVarInt(playerid, "tpDrugRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
		}
	}
	if(type == TYPE_TPMATRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpMatRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpMatRunTimer", GetPVarInt(playerid, "tpMatRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		}
	}
	else if(type == TYPE_TPTRUCKRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpTruckRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpTruckRunTimer", GetPVarInt(playerid, "tpTruckRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		}
	}
	else if (type == TYPE_PIZZATIMER)
	{
	    if(GetPVarInt(playerid, "pizzaTimer") == 0)
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "No lograste entregar la pizza a la casa antes de que se se enfriara!");
            SetPVarInt(playerid, "Pizza", 0);
            DestroyProgressBar(PizzaBar[playerid]);
            DisablePlayerCheckpoint(playerid);
	    }
	    else if (GetPVarInt(playerid, "Pizza") == 0)
	    {
	        DestroyProgressBar(PizzaBar[playerid]);
            DisablePlayerCheckpoint(playerid);
	    }
	    else if (GetPVarInt(playerid, "pizzaTimer") > 0 && GetPVarInt(playerid, "Pizza") > 0)
	    {
			SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTimer")-1);
	        SetProgressBarValue(PizzaBar[playerid], (GetPVarInt(playerid, "pizzaTimer") * 100.0 / GetPVarInt(playerid, "pizzaTotal")));
	        UpdateProgressBar(PizzaBar[playerid], playerid);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
	    }
	}
}

stock IsLocolowVehicle(veh)
{
	new model = GetVehicleModel(veh);
    switch(model)
    {
        case 412,534,535,536,566,567,576: return 1;
    }
    return 0;
}

stock SendReportToQue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;

        for(new i=0;i<MAX_REPORTS;i++)
        {
                if(!breakingloop)
                {
                        if(Reports[i][HasBeenUsed] == 0)
                        {
                                breakingloop = true;
                                newid = i;
                        }
                }
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 5;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 30000, 0, "d", newid);
        new string[128];
        format(string, sizeof(string), "Reporte de [%i] %s (RID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, (report));
        ABroadCast(COLOR_REPORT,string, 2);
    }
    else
    {
        ClearReports();
        SendReportToQue(reportfrom, report);
        }
    if(Info[reportfrom][pVIP] >= 4){
        new string[128];
                format(string, sizeof(string), "~r~Reporte VIP: ~w~%d", newid);
                foreach(Player, i){
                    if(Info[i][pAdminZC] >= 2){
                        GameTextForPlayer(i, string, 1500, 1);
                        }
                }
        }
        return 1;
}

function ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
		strmid(Reports[i][Report], "None", 0, 4, 4);
		Reports[i][CheckingReport] = 999;
        Reports[i][ReportFrom] = 999;
        Reports[i][TimeToExpire] = 5;
        Reports[i][HasBeenUsed] = 0;
        Reports[i][BeingUsed] = 0;
	}
	return 1;
}

function ReportTimer(reportid)
{
	if(Reports[reportid][BeingUsed] == 1)
	{
	    if(Reports[reportid][TimeToExpire] > 0)
	    {
	        Reports[reportid][TimeToExpire]--;
	        if(Reports[reportid][TimeToExpire] == 0)
	        {
	            SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_GRAD2, "-El reporte que usted envió no fue atendido y/o visto por nuestra administración!");
	            SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_GRAD2, "-También es recomendable que busques ayuda en nuestro foro: Próximamente");
	            Reports[reportid][BeingUsed] = 0;
	            Reports[reportid][ReportFrom] = 999;
	            return 1;
	        }
  			Reports[reportid][ReportExpireTimer] = SetTimerEx("ReportTimer", 30000, 0, "d", reportid);
		}
	}
	return 1;
}

function ReplyTimer(reportid)
{
    Reports[reportid][BeingUsed] = 0;
	Reports[reportid][ReportFrom] = 999;
    Reports[reportid][CheckingReport] = 999;
}
/*
ReadyToCapture(pointid)
{
	new string[128];
	//if(Points[pointid][Type] == 3 && Points[pointid][Type] == 4) return 1;
	format(string, sizeof(string), "%s está disponible para capturar! En el punto escribe /capturar!", Points[pointid][Name]);
	Points[pointid][CaptureProccess] = Create3DTextLabel(string, COLOR_POINTGEN, Points[pointid][Pointx], Points[pointid][Pointy], Points[pointid][Pointz]+0.6, 10.0, 0, 0);
	Points[pointid][CaptureProccessEx] = 1;
	return 1;
}

function CaptureTimer(point)
{
	new string[128];
	new fam;
	if (Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
		new claimer = Points[point][ClaimerId];
		new Float: x, Float: y, Float: z;
		GetPlayerPos(claimer, x, y, z);
		if (Points[point][Capturex] != x || Points[point][Capturey] != y || Points[point][Capturez] != z || GetPVarInt(Points[point][ClaimerId],"Injured") == 1)
		{
			SendClientMessageEx(Points[point][ClaimerId], COLOR_LIGHTBLUE, "No pudiste capturar el punto, te moviste o te moriste mientras intentabas capturar.");
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][TimeToClaim] = 0;
		}
		else
		{
			if(Points[point][Vulnerable] > 0)
			{
			    SendClientMessageEx(Points[point][ClaimerId], COLOR_LIGHTBLUE, "No pudiste capturar, el punto ya fue capturado.");
				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
				return 1;
			}
			fam = Info[claimer][pFMember];
            Points[point][PlayerNameCapping] = GetPlayerNameEx(claimer);
		   	format(string, sizeof(string), "%s ha intentado tomar el control de %s por %s, será de ellos en %d minutos.", Points[point][PlayerNameCapping], Points[point][Name], fINFO[fam][FamilyName], TIME_TO_TAKEOVER);
			SendClientMessageToAllEx(COLOR_POINTGEN, string);
			if(Points[point][CaptureProccessEx] >= 1)
			{
				Update3DTextLabelText(Points[point][CaptureProccess], COLOR_POINTGEN, string);
				Points[point][CaptureProccessEx] = 2;
			}
			Points[point][TakeOverTimerStarted] = 1;
			Points[point][TakeOverTimer] = 5;
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][ClaimerTeam] = fam;
			Points[point][TimeToClaim] = 0;
			if(Points[point][CaptureTimerEx2] != -1) KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = SetTimerEx("CaptureTimerEx", 60000, 1, "d", point);
		}
	}
	return 1;
}

function ProgressTimer(point)
{
	if (Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
	    Points[point][TimeLeft]--;
		SetProgressBarValue(Points[point][PointBarID], GetProgressBarValue(Points[point][PointBarID])-10.0);
		UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		if(GetProgressBarValue(Points[point][PointBarID]) >= 10) SetTimerEx("ProgressTimer", 1000, 0, "d", point);
		new string[128];
		format(string, sizeof(string), "%s está tratando de capturar el punto, tiempo restante: %d", GetPlayerNameEx(Points[point][ClaimerId]), Points[point][TimeLeft]);
		if(Points[point][TimeLeft] == 9) Points[point][CaptureProgress] = CreateDynamic3DTextLabel(string, COLOR_RED, Points[point][Pointx], Points[point][Pointy], Points[point][Pointz]+1.0, 10.0);
				else if(Points[point][TimeLeft] < 9 && Points[point][TimeLeft] >= 0) UpdateDynamic3DTextLabelText(Points[point][CaptureProgress], COLOR_RED, string);

		if(GetProgressBarValue(Points[point][PointBarID]) == 50.0)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_YELLOW);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(GetProgressBarValue(Points[point][PointBarID]) == 20.0)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_RED);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(GetProgressBarValue(Points[point][PointBarID]) <= 0.0 && Points[point][TimeLeft] <= 0)
		{
		    CaptureTimer(point);
		    Points[point][TimeLeft] = 0;
		    DestroyProgressBar(Points[point][PointBarID]);
		    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
		}
	}
	else
	{
	    DestroyProgressBar(Points[point][PointBarID]);
	    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
	    Points[point][ClaimerId] = INVALID_PLAYER_ID;
		Points[point][TimeToClaim] = 0;
	}
	return 1;
}

function CaptureTimerEx(point)
{
	new string[128];
	new fam;
	if (Points[point][TakeOverTimerStarted])
	{
		fam = Points[point][ClaimerTeam];
		if (Points[point][TakeOverTimer] > 0)
		{
			Points[point][TakeOverTimer]--;
			format(string, sizeof(string), "%s ha intentado tomar el control de %s por %s, será de ellos en %d minutos!",
			Points[point][PlayerNameCapping], Points[point][Name], fINFO[fam][FamilyName], Points[point][TakeOverTimer]);
			Update3DTextLabelText(Points[point][CaptureProccess], COLOR_POINTGEN, string);
		}
		else
		{
			Points[point][ClaimerTeam] = INVALID_PLAYER_ID;
			Points[point][TakeOverTimer] = 0;
			Points[point][TakeOverTimerStarted] = 0;
			Points[point][Announced] = 0;
			Points[point][Vulnerable] = NEW_VULNERABLE;
			Delete3DTextLabel(Points[point][CaptureProccess]);
			Points[point][CaptureProccessEx] = 0;
			strmid(Points[point][Owner], fINFO[fam][FamilyName], 0, 32, 32);
			strmid(Points[point][CapperName], Points[point][PlayerNameCapping], 0, 32, 32);
			format(string, sizeof(string), "%s ha tomado correctamente el control de %s por %s.", Points[point][CapperName], Points[point][Name], Points[point][Owner]);
			SendClientMessageToAllEx(COLOR_POINTGEN, string);
			UpdatePoints();
			KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = -1;
		}
	}
}
*/

CheckVIPExpire(playerid){
   	print("DEBUG CheckVIPExpire");
   	new year, month,day;
   	getdate(year, month, day);
   	if(Info[playerid][pVIP] == 0){
	   Info[playerid][pVIPDateD] = -1;
	   Info[playerid][pVIPDateM] = -1;
	   return 1;
	}
	if(Info[playerid][pVIPDateD] >= 1 && Info[playerid][pVIPDateM] >= 1){
    	if(Info[playerid][pVIP] >= 1 && Info[playerid][pBuddyInvited] == 0){

	    	if(day >= Info[playerid][pVIPDateD] && Info[playerid][pVIPDateM] == 12 && month != 12){
	    	    //print("DEBUG: DICIEMBRE EXPLOIT [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "{FFFF00}Inf. Club VIP: {FFFFFF}Tu VIP ha expirado, puedes realizar una renovación!");
			}
			if(day >= Info[playerid][pVIPDateD] && month >= Info[playerid][pVIPDateM]){
                //print("DEBUG: NORMAL [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "{FFFF00}Inf. Club VIP: {FFFFFF}Tu VIP ha expirado, puedes realizar una renovación!");
			}
			if(Info[playerid][pVIPDateD] >= 30 && month > Info[playerid][pVIPDateM]){
			    //print("DEBUG: Si es 30 y pasó el mes [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "{FFFF00}Inf. Club VIP: {FFFFFF}Tu VIP ha expirado, puedes realizar una renovación!");
			}
		}
	}
	return 1;
}

stock IsWAAVehicle(veh)
{
    new model = GetVehicleModel(veh);
    switch(model)
    {
        case 558,559,560,561,562,565: return 1;
    }
    return 0;
}

function RadioBroadCast(playerid, color, string[])
{
	new MiscString[128], Float: aaaPositions[3];
	foreach(Player, i)
	{
		if(Info[i][pRadioFreq] == Info[playerid][pRadioFreq] && Info[i][pRadio] >= 1 && gRadio[i] != 0)
		{
			GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
			format(MiscString, sizeof(MiscString), "** Radio (%d khz) ** %s: %s", Info[playerid][pRadioFreq], GetPlayerNameEx(playerid), string);
			SendClientMessageEx(i, PUBLICRADIO_COLOR, MiscString);
			format(MiscString, sizeof(MiscString), "(radio) %s", string);
			SetPlayerChatBubble(playerid,MiscString,COLOR_WHITE,15.0,5000);
		}
	}
}

function ShowRol(playerid)
{
	if(ShowRules[playerid] == 1)
	{
	    switch(RulesTime[playerid])
	    {
	        case 1:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1; gNewbie[playerid]=1;
	        	SetPlayerVirtualWorld(playerid, playerid+1);
	        	TogglePlayerControllable(playerid, 0);
				Streamer_UpdateEx(playerid,370.0804,-2087.8767,7.8359);
				SetPlayerPos(playerid,370.0804,-2087.8767,-10.0);
				SetPlayerCameraPos(playerid,423.3802,-2067.7915,29.8605);
				SetPlayerCameraLookAt(playerid,370.0804,-2087.8767,7.8359);
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Muy buenas, bienvenido, estás por leer un tútorial básico de conceptos y demás.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Un administrador te envió a un tutorial para poder aprender más rápido con el fin de saber lo básico.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Pulsa la tecla ESPACIO para seguir.");

			}
	        case 2:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "DeathMatch [DM]");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es DeathMatch [DM]? Esto es matar y/o golpear a una persona sin ningún tipo de razón.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Un ejemplo, si vas por la calle y empiezas a pegarle o a dispararle a alguien sin tener ninún motivo");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "hasta matarlo, la persona te reportará y tu puedes ser sancionado con el tiempo correspondiente.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Este es el concepto DeathMatch, respetalo.");
	        }
	        case 3:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Metagaming [MG]");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Metagaming [MG]? Esto es el uso de información OOC para beneficios IC ó confusión de canales.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "bueno, como verás cada usuario tiene un nombre en su cabeza, es obvio que en la vida real no pasa lo mismo");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "para saber su nombre tienes que preguntarle; Hola ¿Cuál es tu nombre? y el te responderá, desde ese momento ya");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "puedes llamarlo por su nombre. También es usar signos de caracteres en el chat IC (xD, :), xP, etc).");
	        }
	        case 4:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 13000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "In Character - Out of Character (IC - OOC)");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "IC : Es la información que tu personaje obtiene en su vida (In Game), y sólo tu personaje la sabe.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "OOC: Es la información que tu sabes como persona, la que está manejando el personaje desde tu computador.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Por eso es que no puedes mezclar información IC con OOC o viceversa. Por que estarías haciendo Metagaming.");
	        }
	        case 5:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "PowerGaming [PG]");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Powergaming [PG]? Esto se llama a realizar actos (roles) ficticios y fuera de lo posible en la vida real.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Por ejemplo, Usas el comando /me se tira del edificio y sige caminando. Es lógico que tu no vas a tirarte");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "de un quinto piso y salir vivo no?. También es obligar/forzar a una persona hacer un ROL.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Por ejemplo, usando el comando /me le roba su dinero y se va corriendo. Imposible, para rolear tienes que tener criterio.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda eres un personaje REAL y tienes que portate como tal.");
	        }
	        case 6:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Revenge Kill (RK)");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Revenge Kill [RK]? Cuando `mueres´ en un ROL (Asalto a un banco, guerra de pandillas, etc)");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "tu no puedes regresar al mismo lugar y vengarte a por quien te mató, ya que tu exactamente no mueres, resultas herido");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "y cuando te recuperas no recuerdas nada, entonces no puedes volver al mismo lugar, ya que no recuerdas nada.");
	        }
	        case 7:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Bad Driving (BD) - Badly Parked Car (BPC)");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Bad Driving (BD) y Badly Parked Car (BPC)?");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Esto es muy sencillo y creo que su mismo nombre lo dice, se llama a manejar incorrectamente (por las veredas, atropellando gente, etc),");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "y es en contra las reglas del servidor, recuerda que estás simulando la vida real.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Badly Parked Car se define en estacionar tu vehiculo de una manera imposible, o No-RP, por ejemplo en medio del asfalto.");
	        }
	        case 8:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Car Kill - Car Jack");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Car Kill (CK) y Car Jack (CJ)?");
	        	SendClientMessageEx(playerid, COLOR_WHITE, " * Car Kill es matar a una persona atropellandolo en varias ocaciones hasta matarlo.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, " * Car Jack es sacar a una persona de su auto sin ningún rol alguno.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, " * Esos 2 Terminos son en contra del servidor y puedes ser castigado.");
	        }
	        case 9:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Fin - Reglas de Rol");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Bien, espero que hayas aprendido en este resumen de las reglas de nuestro servidor, puedes entrar a nuestro");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "foro (www.Próximamente.com) y buscar más información, ahora volverás a tu posición anterior, no perderás nada.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda siempre que más importante es el rol de un presonaje. Bienvenido y disfruta del servidor!");
	        }
	        case 10:
	        {
	            ClearChatbox(playerid);
	            gNewbie[playerid]=1; gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0; RulesTime[playerid] = 0; RulesTime[playerid] = 0;
				SetPlayerPos(playerid, GetPVarFloat(playerid, "rOldX"), GetPVarFloat(playerid, "rOldY"), GetPVarFloat(playerid, "rOldZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "rOldVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid, "rOldInt"));
				Info[playerid][pVW] = GetPVarInt(playerid, "rOldVW");
				Info[playerid][pInt] = GetPVarInt(playerid, "rOldInt");
		        TogglePlayerControllable(playerid, 1);
		        ClearAnimations(playerid);
		        SetCameraBehindPlayer(playerid);
	        }
		}
	}
	return 1;
}

function TutRolTimer(playerid)
{
	PuedeD[playerid] = 0;
	GameTextForPlayer(playerid, "Pulsa ESPACIO", 2000, 3);
}

function Tutorial_Inside(i) // Tutorial optimizado
{
	if(TutStep[i] == 1)
	{
 		if(TutTime[i] >= 1)
		{
			switch (TutTime[i])
			{
   				   				case 1:
				{
				    PuedeP[i] = 0;
				    TextDrawHideForPlayer(i, TextTut[i]);
					for(new p = 1; p < 5; p++)
					{
						TextDrawHideForPlayer(i, TutorialTxd[p]);
					}
              		gOoc[i] = 0; 	gNews[i] = 0;
					gFam[i] = 0; 	TutStep[i] = 0;
					gNewbie[i]=0;	Muted[i] = 0;
					TutTime[i] = 0; TutError[i] = 0;
					if(Info[i][pOrigin] == 1){
		           	SetPosEx(i, 1742.982177,-1864.359252,13.573948,0,0,0);// Ciudad
		           	SetPlayerFacingAngle(i, 359.682250);
		           	SetPlayerInterior(i,0);
		           	LoadObjects(i);
					SetCameraBehindPlayer(i);
		           	}
		           	else
		           	{
		           	SetPosEx(i, 2476.352539,47.859924,26.484375,0,0,0);// Pueblo
		           	SetPlayerFacingAngle(i, 180.832046);
		            }
                    SendClientMessageEx(i, COLOR_BLANCO, "Te damos la bienvenida a Absolute Titanium RolePlay, para nosotros es un gran gusto recibirte. {2EDFFF}(/Nuevo) (/Stats)");
		           	StopAudioStreamForPlayer(i);
		           	SetPlayerInterior(i,0);
		           	LoadObjects(i);
					SetCameraBehindPlayer(i);
					//----> Stat's de inicio. . .
              		Info[i][pWRestricted] = 0;
                    Info[i][pTut] = 1;
	    		    Info[i][pLevel] = 1;
	    		    Info[i][pNMute] = 0;
	    		    Info[i][pPTR] += 10;
		           	TogglePlayerControllable(i, 1);
		           	ClearAnimations(i);
		            GivePlayerCash(i, 10000);
		            SetCameraBehindPlayer(i);
		            OnPlayerSavedStats(i);
				}
			}
		}
	}
	return 1;
}

public OnPlayerInteriorChange(playerid,newinteriorid,oldinteriorid){
	if(gPlayerLogged{playerid} && gPlayerSpawned[playerid] && GetPVarInt(playerid, "EventToken") == 0){
		Info[playerid][pInt] = newinteriorid;
	}
	Streamer_Update(playerid);
}

hackerTrigger(playerid,newweapon){
	if(!gPlayerLogged{playerid}) { return 1; }
	if(Info[playerid][pTut] == 0) { return 1; }
	if(GetPVarInt(playerid, "IsInArena") == 1) { return 1; }

	new	reason[94],string[94];
	format(string, sizeof(string), "AdmWarning: {FFFFFF}%s -  Weapon Hacking (%s).", GetPlayerNameEx(playerid), WeaponNames[newweapon]);
	ABroadCast(COLOR_ORANGE,string, 2);
	format(string, sizeof(string), "ATENCIÓN: %s fue expulsado por el servidor, razón: weapon hack", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
 		SafeDialogEx(playerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Haz sido expulsado del servidor","El Servidor\nte ha expulsado\nRazon: Weapon Hack","Salir","");
		SetTimerEx("KickxD",500,0,"d",playerid);

 	format(reason, sizeof(reason), "Weapon Hacking (%s).", WeaponNames[newweapon]);
	return 1;
}

stock scriptBan(playerid, reason[]){
	new ip[32], aString[128];
	Info[playerid][pBannedZC] = 2;
   	format(aString, sizeof(aString), "AT-RP: {FFFFFF} %s fue baneado, razón: %s", GetPlayerNameEx(playerid), reason);
   	SendClientMessageToAllEx(COLOR_LIGHTRED, aString);
   	GetPlayerIp(playerid,ip,sizeof(ip));
   	format(aString, sizeof(aString),"AT-RP: {FFFFFF} %s fue baneado, razón: %s (IP: %d)", GetPlayerNameEx(playerid), reason, ip);
   	Log("logs/- Usuarios Baneados.log", aString);
   	++TotalAutoBan;
	AddBan(ip);
	Kick(playerid);
	return 1;
}

OnPlayerChangeWeapon(playerid, newweapon)
{
	if(InsideMainMenu[playerid] == 1) { Kick(playerid); }
	if(gPlayerLogged{playerid}){
		if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0){
			if(GetPlayerWeapon(playerid) >= 1 && GetPlayerState(playerid) == 1){
			//if(Info[playerid][pWeapons][0] != 1 && GetPlayerWeapon(playerid) == 1) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 2 && GetPlayerWeapon(playerid) == 2) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 3 && GetPlayerWeapon(playerid) == 3) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 4 && GetPlayerWeapon(playerid) == 4) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 5 && GetPlayerWeapon(playerid) == 5) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 6 && GetPlayerWeapon(playerid) == 6) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 7 && GetPlayerWeapon(playerid) == 7) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 8 && GetPlayerWeapon(playerid) == 8) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 9 && GetPlayerWeapon(playerid) == 9) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][2] != 22 && GetPlayerWeapon(playerid) == 22) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][2] != 23 && GetPlayerWeapon(playerid) == 23) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][2] != 24 && GetPlayerWeapon(playerid) == 24) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][3] != 25 && GetPlayerWeapon(playerid) == 25) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][3] != 26 && GetPlayerWeapon(playerid) == 26) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][3] != 27 && GetPlayerWeapon(playerid) == 27) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][4] != 28 && GetPlayerWeapon(playerid) == 28) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][4] != 29 && GetPlayerWeapon(playerid) == 29) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][4] != 32 && GetPlayerWeapon(playerid) == 32) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][5] != 30 && GetPlayerWeapon(playerid) == 30) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][5] != 31 && GetPlayerWeapon(playerid) == 31) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][6] != 33 && GetPlayerWeapon(playerid) == 33) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][6] != 34 && GetPlayerWeapon(playerid) == 34) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][7] != 35 && GetPlayerWeapon(playerid) == 35) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][7] != 36 && GetPlayerWeapon(playerid) == 36) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][7] != 37 && GetPlayerWeapon(playerid) == 37) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][7] != 38 && GetPlayerWeapon(playerid) == 38) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][8] != 16 && GetPlayerWeapon(playerid) == 16) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][8] != 17 && GetPlayerWeapon(playerid) == 17) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][8] != 18 && GetPlayerWeapon(playerid) == 18) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][8] != 39 && GetPlayerWeapon(playerid) == 39) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][9] != 41 && GetPlayerWeapon(playerid) == 41) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][9] != 42 && GetPlayerWeapon(playerid) == 42) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][9] != 43 && GetPlayerWeapon(playerid) == 43) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 10 && GetPlayerWeapon(playerid) == 10) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 11 && GetPlayerWeapon(playerid) == 11) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 12 && GetPlayerWeapon(playerid) == 12) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 13 && GetPlayerWeapon(playerid) == 13) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 14 && GetPlayerWeapon(playerid) == 14) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 15 && GetPlayerWeapon(playerid) == 15) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][11] != 44 && GetPlayerWeapon(playerid) == 44) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][11] != 45 && GetPlayerWeapon(playerid) == 45) hackerTrigger(playerid,newweapon);
			//if(Info[playerid][pWeapons][11] != 46 && GetPlayerWeapon(playerid) == 46) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][12] != 40 && GetPlayerWeapon(playerid) == 40) hackerTrigger(playerid,newweapon);
			}
		}
	}
}

stock fcreate(filename[]){
	if (fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if (fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}

function splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

function DrinkCooldown(playerid)
{
    SetPVarInt(playerid, "DrinkCooledDown", 1);
    return 1;
}

function ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nadie");
		strmid(Info[playerid][pMarriedTo], string, 0, strlen(string), 255);
		Info[playerid][pMarried] = 0;
	}
	return 1;
}

function ClearHouse(houseid)
{
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hSafeMoney] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeapons][0] = 0;
	HouseInfo[houseid][hWeapons][1] = 0;
	HouseInfo[houseid][hWeapons][2] = 0;
	HouseInfo[houseid][hWeapons][3] = 0;
	HouseInfo[houseid][hWeapons][4] = 0;
	HouseInfo[houseid][hGLUpgrade] = 1;
	/*  Muebles a la puta calle	*/
	if(HouseInfo[houseid][hMuebleId][0] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][0]);
	}
	if(HouseInfo[houseid][hMuebleId][1] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][1]);
	}
	if(HouseInfo[houseid][hMuebleId][2] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][2]);
	}
	if(HouseInfo[houseid][hMuebleId][3] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][3]);
	}
	if(HouseInfo[houseid][hMuebleId][4] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][4]);
	}
	if(HouseInfo[houseid][hMuebleId][5] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][5]);
	}
	if(HouseInfo[houseid][hMuebleId][6] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][6]);
	}
	if(HouseInfo[houseid][hMuebleId][7] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][7]);
	}
	if(HouseInfo[houseid][hMuebleId][8] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][8]);
	}
	if(HouseInfo[houseid][hMuebleId][9] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][9]);
	}
	if(HouseInfo[houseid][hMuebleId][10] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][10]);
	}
         	HouseInfo[houseid][hMuebles][0] = 0;
			HouseInfo[houseid][hMueblesPOSX][0] = 0;
			HouseInfo[houseid][hMueblesPOSY][0] = 0;
			HouseInfo[houseid][hMueblesPOSZ][0] = 0;
			HouseInfo[houseid][hMueblesPOSRy][0] = 0;
            HouseInfo[houseid][hMueblesPOSRx][0] = 0;
            HouseInfo[houseid][hMueblesPOSRz][0] = 0;

            HouseInfo[houseid][hMuebles][1] = 0;
           	HouseInfo[houseid][hMueblesPOSX][1] = 0;
			HouseInfo[houseid][hMueblesPOSY][1] = 0;
			HouseInfo[houseid][hMueblesPOSZ][1] = 0;
            HouseInfo[houseid][hMueblesPOSRx][1] = 0;
            HouseInfo[houseid][hMueblesPOSRy][1] = 0;
            HouseInfo[houseid][hMueblesPOSRz][1] = 0;

			HouseInfo[houseid][hMuebles][2] = 0;
			HouseInfo[houseid][hMueblesPOSX][2] = 0;
			HouseInfo[houseid][hMueblesPOSY][2] = 0;
			HouseInfo[houseid][hMueblesPOSZ][2] = 0;
			HouseInfo[houseid][hMueblesPOSRx][2] = 0;
			HouseInfo[houseid][hMueblesPOSRy][2] = 0;
			HouseInfo[houseid][hMueblesPOSRz][2] = 0;

			HouseInfo[houseid][hMuebles][3] = 0;
			HouseInfo[houseid][hMueblesPOSX][3] = 0;
			HouseInfo[houseid][hMueblesPOSY][3] = 0;
			HouseInfo[houseid][hMueblesPOSZ][3] = 0;
			HouseInfo[houseid][hMueblesPOSRz][3] = 0;
			HouseInfo[houseid][hMueblesPOSRy][3] = 0;
			HouseInfo[houseid][hMueblesPOSRx][3] = 0;

			HouseInfo[houseid][hMuebles][4] = 0;
			HouseInfo[houseid][hMueblesPOSX][4] = 0;
			HouseInfo[houseid][hMueblesPOSY][4] = 0;
			HouseInfo[houseid][hMueblesPOSZ][4] = 0;
			HouseInfo[houseid][hMueblesPOSRz][4] = 0;
			HouseInfo[houseid][hMueblesPOSRy][4] = 0;
			HouseInfo[houseid][hMueblesPOSRx][4] = 0;

			HouseInfo[houseid][hMuebles][5] = 0;
			HouseInfo[houseid][hMueblesPOSX][5] = 0;
			HouseInfo[houseid][hMueblesPOSY][5] = 0;
			HouseInfo[houseid][hMueblesPOSZ][5] = 0;
			HouseInfo[houseid][hMueblesPOSRx][5] = 0;
			HouseInfo[houseid][hMueblesPOSRy][5] = 0;
			HouseInfo[houseid][hMueblesPOSRz][5] = 0;

			HouseInfo[houseid][hMuebles][6] = 0;
			HouseInfo[houseid][hMueblesPOSX][6] = 0;
			HouseInfo[houseid][hMueblesPOSY][6] = 0;
			HouseInfo[houseid][hMueblesPOSZ][6] = 0;
			HouseInfo[houseid][hMueblesPOSRx][6] = 0;
			HouseInfo[houseid][hMueblesPOSRy][6] = 0;
			HouseInfo[houseid][hMueblesPOSRz][6] = 0;

			HouseInfo[houseid][hMuebles][7] = 0;
			HouseInfo[houseid][hMueblesPOSX][7] = 0;
			HouseInfo[houseid][hMueblesPOSY][7] = 0;
			HouseInfo[houseid][hMueblesPOSZ][7] = 0;
			HouseInfo[houseid][hMueblesPOSRx][7] = 0;
			HouseInfo[houseid][hMueblesPOSRy][7] = 0;
			HouseInfo[houseid][hMueblesPOSRz][7] = 0;

			HouseInfo[houseid][hMuebles][8] = 0;
			HouseInfo[houseid][hMueblesPOSX][8] = 0;
			HouseInfo[houseid][hMueblesPOSY][8] = 0;
			HouseInfo[houseid][hMueblesPOSZ][8] = 0;
			HouseInfo[houseid][hMueblesPOSRx][8] = 0;
			HouseInfo[houseid][hMueblesPOSRy][8] = 0;
			HouseInfo[houseid][hMueblesPOSRz][8] = 0;

			HouseInfo[houseid][hMuebles][9] = 0;
			HouseInfo[houseid][hMueblesPOSX][9] = 0;
			HouseInfo[houseid][hMueblesPOSY][9] = 0;
			HouseInfo[houseid][hMueblesPOSZ][9] = 0;
			HouseInfo[houseid][hMueblesPOSRx][9] = 0;
			HouseInfo[houseid][hMueblesPOSRy][9] = 0;
			HouseInfo[houseid][hMueblesPOSRz][9] = 0;

			HouseInfo[houseid][hMuebles][10] = 0;
			HouseInfo[houseid][hMueblesPOSX][10] = 0;
			HouseInfo[houseid][hMueblesPOSY][10] = 0;
			HouseInfo[houseid][hMueblesPOSZ][10] = 0;
			HouseInfo[houseid][hMueblesPOSRx][10] = 0;
			HouseInfo[houseid][hMueblesPOSRy][10] = 0;
			HouseInfo[houseid][hMueblesPOSRz][10] = 0;
}

function ClearFamily(family)
{
	foreach(Player, i)
	{
		if(Info[i][pFMember] == family)
		{
			SendClientMessageEx(i, COLOR_LIGHTBLUE, "* La Banda/Familia en la que tu estás fue eliminada por un administrador, fuiste expulsado automáticamente.");
			Info[i][pFMember] = 255;
		}
	}
	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Ninguna");
	fINFO[family][FamilyTaken] = 0;
	strmid(fINFO[family][FamilyName], string, 0, strlen(string), 255);
	strmid(fINFO[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(fINFO[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Novato");
	strmid(fINFO[family][FamilyRank1], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Asociado");
	strmid(fINFO[family][FamilyRank2], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Soldado");
	strmid(fINFO[family][FamilyRank3], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Capo");
	strmid(fINFO[family][FamilyRank4], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Mano Derecha");
	strmid(fINFO[family][FamilyRank5], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Padrino");
	strmid(fINFO[family][FamilyRank6], string, 0, strlen(string), 255);
	fINFO[family][FamilyColor] = 0;
	fINFO[family][FamilyTurfTokens] = 24;
	fINFO[family][FamilyMembers] = 0;
	fINFO[family][FamilySpawn][0] = 0.0;
	fINFO[family][FamilySpawn][1] = 0.0;
	fINFO[family][FamilySpawn][2] = 0.0;
	fINFO[family][FamilySpawn][3] = 0.0;
    fINFO[family][FamilyGuns][0] = 0;
    fINFO[family][FamilyGuns][2] = 0;
    fINFO[family][FamilyGuns][3] = 0;
    fINFO[family][FamilyGuns][4] = 0;
    fINFO[family][FamilyGuns][5] = 0;
    fINFO[family][FamilyGuns][6] = 0;
    fINFO[family][FamilyGuns][7] = 0;
	fINFO[family][FamilyGuns][8] = 0;
	fINFO[family][FamilyGuns][9] = 0;
	fINFO[family][FamilyCash] = 0;
	fINFO[family][FamilyMats] = 0;
	fINFO[family][FamilyPot] = 0;
	fINFO[family][FamilyCrack] = 0;
	fINFO[family][FamilySafe][0] = 0.0;
	fINFO[family][FamilySafe][1] = 0.0;
	fINFO[family][FamilySafe][2] = 0.0;
	fINFO[family][FamilyUSafe] = 0;
	if(IsValidDynamicPickup(fINFO[family][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[family][FamilyEntrancePickup] );
	if(IsValidDynamicPickup(fINFO[family][FamilyExitPickup])) DestroyDynamicPickup( fINFO[family][FamilyExitPickup] );
	DestroyDynamic3DTextLabel( Text3D:fINFO[family][FamilyEntranceText] );
	DestroyDynamic3DTextLabel( Text3D:fINFO[family][FamilyExitText] );
	DestroyDynamicPickup( fINFO[family][FamilyPickup] );
	saveFamilies();
	return 1;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{

    new Float:TGTDistance;

    // get distance from camera to target
    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
    GetPlayerCameraPos(playerid, cx, cy, cz);
    GetPlayerCameraFrontVector(playerid, fx, fy, fz);
    return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock ModifyVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else GetPlayerVelocity(playerid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}


IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

CheckBan(ip[])
{
	new string[20];
    new File: file = fopen("ban.cfg", io_read);
	while(fread(file, string))
	{
	    if (strcmp(ip, string, true, strlen(ip)) == 0)
	    {
	        fclose(file);
	        return 1;
	    }
	}
	fclose(file);
	return 0;
}

AddBan(ip[])
{
	if (CheckBan(ip) == 0)
	{
		new File: file = fopen("ban.cfg", io_append);
		new string[20];
		format(string, sizeof(string), "\n%s", ip);
	 	fwrite(file, string);
	 	fclose(file);
	 	foreach(Player, playerid)
		{
		    new playerIP[16];
			GetPlayerIp(playerid, playerIP, sizeof(playerIP));
			if (strcmp(playerIP, ip) == 0)
			{
	            SendClientMessage(playerid, COLOR_GENERAL, "{2EDFFF}AT-RP: {FFFFFF} Fuiste baneado del servidor, contactenos: www.titaniumgamers.com");
				Kick(playerid);
			}
		}
		return 1;
	}
	return 0;
}

RemoveBan(ip[])
{
    if (CheckBan(ip) == 1)
	{
	    new string[20];
		new File: file = fopen("ban.cfg", io_read);
		fcreate("tempBan.cfg");
		new File: file2 = fopen("tempBan.cfg", io_append);
		while(fread(file, string))
		{
			if (strcmp(ip, string, true, strlen(ip)) != 0 && strcmp("\n", string) != 0)
		    {
				fwrite(file2, string);
			}
		}
		fclose(file);
		fclose(file2);
		file = fopen("ban.cfg", io_write);
		file2 = fopen("tempBan.cfg", io_read);
		while(fread(file2, string))
		{
			fwrite(file, string);
		}
		fclose(file);
		fclose(file2);
		fremove("tempBan.cfg");
		return 1;
    }
	return 0;
}
public OnPlayerUpdate(playerid)
{

	    if(Dragged[playerid] != -1)
	    {
			new playerb = Dragged[playerid];
			new Float:pos[3];
			GetPlayerPos(playerb, pos[0], pos[1], pos[2]);
			SetPlayerPos(playerid, pos[0]+0.5, pos[1]+0.5, pos[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(playerb));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
	    }

     		// Speedlimit
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Speedlimit[playerid])
		{
		    new a, b, c;
			GetPlayerKeys(playerid, a, b ,c);
		    if(a == 8 && GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) > Speedlimit[playerid])
		    {
		        new newspeed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) - Speedlimit[playerid];
		    	ModifyVehicleSpeed(GetPlayerVehicleID(playerid), -newspeed);
		    }
		}


    new pCurWeap = GetPlayerWeapon(playerid);
    if(InsideMainMenu[playerid] == 1) SetPlayerArmedWeapon(playerid, 0);
    if(TutStep[playerid] > 0) SetPlayerArmedWeapon(playerid, 0);
    if(GetPVarInt(playerid, "Injured") == 1) SetPlayerArmedWeapon(playerid, 0);
	if(GetPVarInt(playerid, "IsFrozen") == 1) TogglePlayerControllable(playerid, 0);
    if(pCurWeap != pCurrentWeapon[playerid])
    {
        OnPlayerChangeWeapon(playerid, pCurWeap);
        pCurrentWeapon[playerid] = pCurWeap;
	}
	if(papilla[playerid] == 1)
	{
	if(Info[playerid][pAdminZC] == 2)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 3)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 4)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 5)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 6)
          {
               SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 7)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
           if(Info[playerid][pAdminZC] == 8)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 9)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 10)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
          if(Info[playerid][pAdminZC] == 11)
          {
                SetPlayerColor(playerid,COLOR_ADMIN_DUTY);
          }
	}
	if(refuer[playerid] == 1)
	{
		new Float:px,Float:py,Float:pz; GetPlayerPos(playerid, px, py, pz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(Team_LAPD(i) && OnDuty[i] == 1)
			{
			SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
			if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
			}
		}
	}
	//**Armas en la espalda**
    if(GetPlayerState(playerid)==PLAYER_STATE_ONFOOT)
	{
		new weaponid=GetPlayerWeapon(playerid),oldweapontype=GetWeaponType(OldWeapon[playerid]);
		new weapontype=GetWeaponType(weaponid);
		if(HoldingWeapon[playerid]==weaponid)
		    StopPlayerHoldingObject(playerid);

		if(OldWeapon[playerid]!=weaponid)
		{
		    new modelid=GetWeaponModel(OldWeapon[playerid]);
		    if(modelid!=0 && oldweapontype!=WEAPON_TYPE_NONE && oldweapontype!=weapontype)
		    {
		        HoldingWeapon[playerid]=OldWeapon[playerid];
		        switch(oldweapontype)
		        {
		            case WEAPON_TYPE_LIGHT:
						SetPlayerHoldingObject(playerid, modelid, 8,0.0,-0.1,0.15, -100.0, 0.0, 0.0);

					case WEAPON_TYPE_MELEE:
					    SetPlayerHoldingObject(playerid, modelid, 7,0.0,0.0,-0.18, 100.0, 45.0, 0.0);

					case WEAPON_TYPE_HEAVY:
					    SetPlayerHoldingObject(playerid, modelid, 1, 0.2,-0.125,-0.1,0.0,25.0,180.0);
		        }
		    }
		}

		if(oldweapontype!=weapontype)
			OldWeapon[playerid]=weaponid;
	}
    //***********************
	return 1;
}

function restartTimer() {
	iGMXTick--;
	switch(iGMXTick)
	{
	    case 0:{
		    GameTextForAll("~w~Es servidor va ser reiniciado ahora...", 9000, 5);
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "ATENCIÓN:{FFFFFF} Es servidor ha sido reiniciado, porfavor vuelve a re-conectarte.");
			KillTimer(iGMXTimer);
			SendRconCommand("exit");
	    }
	    case 1: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~1~w~ segundo.", 1110, 5);
	    case 2: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~2~w~ segundos.", 1110, 5);
	    case 3: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~3~w~ segundos.", 1110, 5);
	    case 4: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~4~w~ segundos.", 1110, 5);
	    case 5: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~5~w~ segundos.", 1110, 5);
	}
	return 1;
}

function SyncPlayerTime(playerid)
{
	new hour, minute, second;
	gettime(hour, minute, second);
	SetPlayerTime(playerid, hour, minute);
	return 1;
}

Random(min, max)
{
    new a = random(max - min) + min;
    return a;
}

LoadObjects(playerid)
{
	TogglePlayerControllable(playerid, 0);
	TextDrawShowForPlayer(playerid, box);
	TextDrawShowForPlayer(playerid, streamer);
	SetPVarInt(playerid, "LoadingObjects", 1);
	return SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
}

function MessageTaxiDriver(job, color, string[])
{
	foreach(Player, i)
	{
		if(job == 9 && TransportDuty[i] > 0 && (Info[i][pJob] == 8 || Info[i][pJob2] == 8 || Info[i][pTaxiLicense] == 1 ))
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

FMemberCounter() {

	new
		arrCounts[sizeof(fINFO)],
		szFileStr[128],
		arrTimeStamp[2][3],
		File: iFileHandle = fopen("logs/- CountFam.log", io_append);

	gettime(arrTimeStamp[0][0], arrTimeStamp[0][1], arrTimeStamp[0][2]);
	getdate(arrTimeStamp[1][0], arrTimeStamp[1][1], arrTimeStamp[1][2]);
	foreach(Player, i) if(Info[i][pAdminZC] < 2 && Info[i][pFMember] != 255) ++arrCounts[Info[i][pFMember]];

	format(szFileStr, sizeof(szFileStr), "----------------------------------------\r\nFecha: %d/%d/%d - Hora: %d:%d\r\n", arrTimeStamp[1][1], arrTimeStamp[1][2], arrTimeStamp[1][0], arrTimeStamp[0][0], arrTimeStamp[0][1]);
	fwrite(iFileHandle, szFileStr);

	for(new iFam; iFam < sizeof(fINFO); ++iFam) format(szFileStr, sizeof(szFileStr), "(%i) %s: %i\r\n", iFam+1, fINFO[iFam][FamilyName], arrCounts[iFam]), fwrite(iFileHandle, szFileStr);
	return fclose(iFileHandle);
}

stock SendJobMessage(job, color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pJob] == job || Info[i][pJob2] == job)
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

IsPlayerInInvalidNosVehicle( playerid )
{
	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 1;
	}
	return 0;
}

//------------------------------------------------------------------------------
//----------------------DYNAMIC GANG VEHICLE SYSTEM-----------------------------
//------------------------------------------------------------------------------
stock CreateGangVehicle(f, fv, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(FVINFO[f][fv][fvId] == INVALID_VEHICLE_ID)
	{
		FVINFO[f][fv][fvModelId] = modelid;
		FVINFO[f][fv][fvSpawnx] = x;
		FVINFO[f][fv][fvSpawny] = y;
		FVINFO[f][fv][fvSpawnz] = z;
		FVINFO[f][fv][fvSpawna] = angle;
		FVINFO[f][fv][fvColor1] = color1;
		FVINFO[f][fv][fvColor2] = color2;
		FVINFO[f][fv][fvPrice] = price;
		FVINFO[f][fv][fvFuel] = 200;
		FVINFO[f][fv][fvLock] = 1;
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		FVINFO[f][fv][fvId] = carcreated;
		//printf("Created the gang vehicle for family %d | vehicleid #%d | familyvehicleslot #%d.", f, FVINFO[f][fv][fvId], fv);
		return carcreated;
	}
	return INVALID_VEHICLE_ID;
}

stock DestroyGangVehicle(f, fv)
{
	if(FVINFO[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(FVINFO[f][fv][fvId]);
		FVINFO[f][fv][fvModelId] = 0;
		FVINFO[f][fv][fvSpawnx] = 0.0;
		FVINFO[f][fv][fvSpawny] = 0.0;
		FVINFO[f][fv][fvSpawnz] = 0.0;
		FVINFO[f][fv][fvSpawna] = 0.0;
		FVINFO[f][fv][fvPaintJob] = -1;
		FVINFO[f][fv][fvColor1] = 126;
		FVINFO[f][fv][fvColor2] = 126;
		FVINFO[f][fv][fvPrice] = 0;
		FVINFO[f][fv][fvImpounded] = 0;
		FVINFO[f][fv][fvFuel] = 200;
		FVINFO[f][fv][fvLock] = 0;
		VehicleFuel[FVINFO[f][fv][fvId]] = 200;
	    //printf("Family %d vehicle %d(vehicleid %d) has been destroyed.", f,fv,FVINFO[f][fv][fvId]);
	    FVINFO[f][fv][fvId] = INVALID_VEHICLE_ID;
	}
}

stock LoadGangVehicles(f)
{
	//printf(" Loading family %d's vehicles.", f);
	for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    {
        if(FVINFO[f][fv][fvModelId] != 0)
        {
			new carcreated = CreateVehicle(FVINFO[f][fv][fvModelId], FVINFO[f][fv][fvSpawnx], FVINFO[f][fv][fvSpawny], FVINFO[f][fv][fvSpawnz], FVINFO[f][fv][fvSpawna],FVINFO[f][fv][fvColor1], FVINFO[f][fv][fvColor2], -1);
			FVINFO[f][fv][fvId] = carcreated;
			VehicleFuel[carcreated] = FVINFO[f][fv][fvFuel];
			if(FVINFO[f][fv][fvLocked] == 1) LockGangVehicle(f, FVINFO[f][fv][fvId], FVINFO[f][fv][fvLock]);
        }
    }
}

LockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FVINFO[family][v][fvId] == carid && type == 3)
	{
	    LockStatus[carid] = 1;
		vehicle_lock_doors(carid);
	}
}

UnLockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FVINFO[family][v][fvId] == carid && type == 3)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

stock UnloadGangVehicles(f)
{
	//printf(" Unloading %s's vehicles.", fINFO[f][FamilyName]);
	for(new fv = 0; fv < MAX_PLAYERVEHICLES; fv++)
    {
        if(FVINFO[f][fv][fvId] != INVALID_VEHICLE_ID)
        {
            if(LockStatus[FVINFO[f][fv][fvId]] != 0) LockStatus[FVINFO[f][fv][fvId]] = 0;
			DestroyVehicle(FVINFO[f][fv][fvId]);
			VehicleFuel[FVINFO[f][fv][fvId]] = 200.0;
			FVINFO[f][fv][fvId] = INVALID_VEHICLE_ID;
        }
    }
}

stock UpdateGangVehicleParkPosition(f, fv, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health, temp = 1, vw)
{
	if(FVINFO[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
	    if(temp == 0)
		{
	 		new Float:oldx, Float:oldy, Float:oldz;
			oldx = FVINFO[f][fv][fvSpawnx];
			oldy = FVINFO[f][fv][fvSpawny];
			oldz = FVINFO[f][fv][fvSpawnz];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FVINFO[f][fv][fvSpawnx] = newx;
			FVINFO[f][fv][fvSpawny] = newy;
			FVINFO[f][fv][fvSpawnz] = newz;
			FVINFO[f][fv][fvSpawna] = newangle;
			DestroyVehicle(FVINFO[f][fv][fvId]);
			new carcreated = CreateVehicle(FVINFO[f][fv][fvModelId], FVINFO[f][fv][fvSpawnx], FVINFO[f][fv][fvSpawny], FVINFO[f][fv][fvSpawnz],
			FVINFO[f][fv][fvSpawna],FVINFO[f][fv][fvColor1], FVINFO[f][fv][fvColor2], -1);
	        FVINFO[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SetVehicleVirtualWorld(carcreated, vw);
	        saveFamiliesHQ();
        	return 1;
		}
		else
		{
		    new Float:oldx, Float:oldy, Float:oldz;
			oldx = FVINFO[f][fv][fvSpawnxtmp];
			oldy = FVINFO[f][fv][fvSpawnytmp];
			oldz = FVINFO[f][fv][fvSpawnztmp];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FVINFO[f][fv][fvSpawnxtmp] = newx;
			FVINFO[f][fv][fvSpawnytmp] = newy;
			FVINFO[f][fv][fvSpawnztmp] = newz;
			FVINFO[f][fv][fvSpawnatmp] = newangle;
			DestroyVehicle(FVINFO[f][fv][fvId]);
			new carcreated = CreateVehicle(FVINFO[f][fv][fvModelId], FVINFO[f][fv][fvSpawnxtmp], FVINFO[f][fv][fvSpawnytmp], FVINFO[f][fv][fvSpawnztmp],
			FVINFO[f][fv][fvSpawnatmp],FVINFO[f][fv][fvColor1], FVINFO[f][fv][fvColor2], -1);
	        FVINFO[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SetVehicleVirtualWorld(carcreated, vw);
	        saveFamiliesHQ();
        	return 1;
		}
	}
	return 0;
}

stock GetGangFreeVehicleId(f){
    new
		i = 0;
	while (i < MAX_GANG_VEHICLES && FVINFO[f][i][fvId] != INVALID_VEHICLE_ID){
		i++;
	}
	if (i == MAX_GANG_VEHICLES) return -1;
	return i;

}

stock GetGangVehicleCount(f)
{
    new
		i = 0,
		cars = 0;
	while (i < MAX_GANG_VEHICLES && FVINFO[f][i][fvId] != INVALID_VEHICLE_ID){
	    cars++;
		i++;
	}
	return cars;

}

stock GetGangVehicle(f, vehicleid)
{
	if(f == 255) return -1;
	if(vehicleid == -1) return -1;
    for(new v = 0; v < MAX_GANG_VEHICLES; v++)
    {
        if(FVINFO[f][v][fvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

ReturnUser(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if ('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if (isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		new
			sz_playerName[MAX_PLAYER_NAME];

		foreach(Player, i) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

//------------------------------------------------------------------------------
//DEALERSHIP Cars SYSTEM BY ALEX DONUTS
//------------------------------------------------------------------------------
stock CreateCarDealership(Float: enx, Float: eny, Float: enz, Float: radius, price, message[])
{
	new dealershipid = GetFreeCarDealership();
	if(dealershipid == -1) return -1;
	new text_info[128];
	CDSInfo[dealershipid][cdEntranceX] = enx;
	CDSInfo[dealershipid][cdEntranceY] = eny;
	CDSInfo[dealershipid][cdEntranceZ] = enz;
	CDSInfo[dealershipid][cdRadius] = radius;
	CDSInfo[dealershipid][cdPrice] = price;
	strmid(CDSInfo[dealershipid][cdMessage], message, 0, strlen(message), 255);
	CDSInfo[dealershipid][cdPickupID] = CreateDynamicPickup(1239, 1, CDSInfo[dealershipid][cdEntranceX], CDSInfo[dealershipid][cdEntranceY], CDSInfo[dealershipid][cdEntranceZ], .interiorid = 0);
	format(text_info, sizeof(text_info),"Concesionario (%d) %s\nDueño: %s", dealershipid, CDSInfo[dealershipid][cdMessage], CDSInfo[dealershipid][cdPrice]);
    CDSInfo[dealershipid][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_GENERAL,CDSInfo[dealershipid][cdEntranceX], CDSInfo[dealershipid][cdEntranceY], CDSInfo[dealershipid][cdEntranceZ]+0.75,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
    SavecDealership(dealershipid);
    return dealershipid;
}

stock DestroyCarDealership(dealershipid)
{
	new string[30];
	CDSInfo[dealershipid][cdEntranceX] = 0.0;
	CDSInfo[dealershipid][cdEntranceY] = 0.0;
	CDSInfo[dealershipid][cdEntranceZ] = 0.0;
	CDSInfo[dealershipid][cdRadius] = 0.0;
	CDSInfo[dealershipid][cdTill] = 0;
	CDSInfo[dealershipid][cdOwned] = 0;
	CDSInfo[dealershipid][cdPrice] = 0;
	format(string, sizeof(string), "Nadie");
	strmid(CDSInfo[dealershipid][cdOwner], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Nada");
	strmid(CDSInfo[dealershipid][cdMessage], string, 0, strlen(string), 255);
	DestroyDynamic3DTextLabel(CDSInfo[dealershipid][cdTextLabel]);
	DestroyDynamicPickup(CDSInfo[dealershipid][cdPickupID]);
	CDSInfo[dealershipid][cdPickupID] = 0;
	CDSInfo[dealershipid][cdTextLabel] = Text3D:INVALID_3DTEXT_ID;
	CDSInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	{
		if (CDSInfo[dealershipid][cdVehicleModel][v] != 0)
		{
	        DestroyCarDealershipVehicle(dealershipid, v);
		}
	}
	SavecDealership(dealershipid);
}

stock GetFreeCarDealership()
{
    new
		i = 0;
	while (i < MAX_CARDEALERSHIPS && CDSInfo[i][cdEntranceX] != 0.0 && CDSInfo[i][cdEntranceY] != 0.0)
	{
		i++;
	}
	if (i == MAX_CARDEALERSHIPS) return -1;
	return i;

}

stock SetPlayerOwnerOfCD(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	CDSInfo[dealershipid][cdOwned] = 1;
	GetPlayerName(playerid, owner, sizeof(owner));
	strmid(CDSInfo[dealershipid][cdOwner], owner, 0, strlen(owner), 255);
	new text_info[128];
	format(text_info, sizeof(text_info),"Concesionario (%d) %s\nDueño: %s", dealershipid, CDSInfo[dealershipid][cdMessage], CDSInfo[dealershipid][cdOwner]);
	UpdateDynamic3DTextLabelText(CDSInfo[dealershipid][cdTextLabel], COLOR_GENERAL, text_info);
	SavecDealership(dealershipid);
}

stock SellCarDealership(dealershipid)
{
	CDSInfo[dealershipid][cdOwned] = 0;
	CDSInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
	CDSInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
	CDSInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
	CDSInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	strmid(CDSInfo[dealershipid][cdOwner], "Nadie", 0, MAX_PLAYER_NAME, 255);
	new text_info[128];
	format(text_info, sizeof(text_info),"Concesionario (%d) %s En Venta\nPrecio: %d", dealershipid, CDSInfo[dealershipid][cdMessage], CDSInfo[dealershipid][cdPrice]);
	UpdateDynamic3DTextLabelText(CDSInfo[dealershipid][cdTextLabel], COLOR_GENERAL, text_info);
	SavecDealership(dealershipid);
}

stock IsPlayerOwnerOfCD(playerid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
	    if(strcmp(CDSInfo[d][cdOwner],owner, true ) == 0)
	    {
			return d;
		}
	}
	return -1;
}

stock IsPlayerOwnerOfCDEx(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	if(strcmp(CDSInfo[dealershipid][cdOwner],owner, true ) == 0)
	{
	    return 1;
	}
	return 0;
}

stock CreateCarDealershipVehicle(dealershipid, modelid, Float: x, Float: y, Float: z, Float: a, price)
{
    new cdvehicleid = GetFreeCarDealershipVehicleId(dealershipid);
    if(cdvehicleid == -1) return -1;
    new text_info[128];
    CDSInfo[dealershipid][cdVehicleModel][cdvehicleid] = modelid;
    CDSInfo[dealershipid][cdVehicleCost][cdvehicleid] = price;
    CDSInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = x;
    CDSInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = y;
    CDSInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = z;
    CDSInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = a;
    new carcreated = CreateVehicle(modelid, x, y, z, a, 0, 0, 6);
    format(text_info, sizeof(text_info), "%s En Venta | Precio: %d", GetVehicleName(carcreated), CDSInfo[dealershipid][cdVehicleCost][cdvehicleid]);
    CDSInfo[dealershipid][cdVehicleLabel][cdvehicleid] = CreateDynamic3DTextLabel(text_info,COLOR_MAGENTA,0.0, 0.0, 0.0,5.0,INVALID_PLAYER_ID,carcreated,1);
	CDSInfo[dealershipid][cdVehicleId][cdvehicleid] = carcreated;
	SavecDealership(cdvehicleid);
    return cdvehicleid;
}

stock DestroyCarDealershipVehicle(dealershipid, cdvehicleid)
{
    CDSInfo[dealershipid][cdVehicleModel][cdvehicleid] = 0;
    CDSInfo[dealershipid][cdVehicleCost][cdvehicleid] = 0;
    CDSInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = 0.0;
    DestroyDynamic3DTextLabel(CDSInfo[dealershipid][cdVehicleLabel][cdvehicleid]);
    DestroyVehicle(CDSInfo[dealershipid][cdVehicleId][cdvehicleid]);
    CDSInfo[dealershipid][cdVehicleLabel][cdvehicleid] = Text3D:INVALID_3DTEXT_ID;
    CDSInfo[dealershipid][cdVehicleId][cdvehicleid] = 0;
}

stock GetFreeCarDealershipVehicleId(dealershipid)
{
    new
		i = 0;
	while (i < MAX_DEALERSHIPVEHICLES && CDSInfo[dealershipid][cdVehicleModel][i] != 0)
	{
		i++;
	}
	if (i == MAX_DEALERSHIPVEHICLES) return -1;
	return i;

}

stock GetCarDealershipVehicleId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CDSInfo[d][cdVehicleId][v] == vehicleid)
            {
                return v;
            }
		}
    }
    return -1;
}

stock GetCarDealershipId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CDSInfo[d][cdVehicleId][v] == vehicleid)
            {
                return d;
            }
		}
    }
    return -1;
}

//------------------------------------------------------------------------------
//SISTEMAAUTOS BY ALEX DONUTS
//------------------------------------------------------------------------------
stock CreatePlayerVehicle(playerid, playervehicleid, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] == INVALID_PLAYER_VEHICLE_ID)
	{
	    PlayerCars++;
        carsforplayer[playerid]++;
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = modelid;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = x;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = y;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = z;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = angle;
		PlayerVehicleInfo[playerid][playervehicleid][pvVW] = GetPlayerVirtualWorld(playerid);
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = color1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = color2;
		PlayerVehicleInfo[playerid][playervehicleid][pvPark] = 1;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = price;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 200;
		PlayerVehicleInfo[playerid][playervehicleid][pvLock] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvHealth] = 1000.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
		for(new m = 0; m < MAX_MODS; m++)
	    {
	    	PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;
		}
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
		SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvVW]);
		//SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);
		return carcreated;
	}
	return INVALID_PLAYER_VEHICLE_ID;
}

stock DestroyPlayerVehicle(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvModelId])
	{
	    PlayerCars--;
	    carsforplayer[playerid]--;
		DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvVW] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = -1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 200;
		PlayerVehicleInfo[playerid][playervehicleid][pvLock] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvHealth] = 1000.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 0;
		VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 200;
		VehicleFuel[playervehicleid] = 200;
		strcpy(PlayerVehicleInfo[playerid][playervehicleid][pvAllowPlayer], "Nadie", MAX_PLAYER_NAME);
	    PlayerVehicleInfo[playerid][playervehicleid][pvId] = INVALID_PLAYER_VEHICLE_ID;
	    if(PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    {
	        Info[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	        Info[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    	PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		}
	}
}

stock LoadPlayerVehicles(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	//printf(" Loading %s's vehicles.", playername);
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvImpounded] >= 2) PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
        if(PlayerVehicleInfo[playerid][v][pvModelId] != 0 && PlayerVehicleInfo[playerid][v][pvImpounded] == 0)
        {
            PlayerCars++;
            carsforplayer[playerid]++;
			new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][v][pvModelId], PlayerVehicleInfo[playerid][v][pvPosX], PlayerVehicleInfo[playerid][v][pvPosY], PlayerVehicleInfo[playerid][v][pvPosZ], PlayerVehicleInfo[playerid][v][pvPosAngle],PlayerVehicleInfo[playerid][v][pvColor1], PlayerVehicleInfo[playerid][v][pvColor2], -1);
			PlayerVehicleInfo[playerid][v][pvId] = carcreated;
			VehicleFuel[carcreated] = PlayerVehicleInfo[playerid][v][pvFuel];
			SetVehicleHealth(carcreated, PlayerVehicleInfo[playerid][v][pvHealth]);
			SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playerid][v][pvVW]);
			//SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][v][pvNumberPlate]);
			if(PlayerVehicleInfo[playerid][v][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvLock]);
        }
        else if(PlayerVehicleInfo[playerid][v][pvModelId] == 0 && PlayerVehicleInfo[playerid][v][pvImpounded] != 0)
            PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
    }
    LoadAllPlayerVehicleMods(playerid);
}

stock UnloadPlayerVehicles(playerid)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	//printf(" Unloading %s's vehicles.", playername);
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvImpounded] >= 2) PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
        if(PlayerVehicleInfo[playerid][v][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][v][pvImpounded] == 0)
        {
            PlayerCars--;
            carsforplayer[playerid]--;
            if(LockStatus[PlayerVehicleInfo[playerid][v][pvId]] != 0) LockStatus[PlayerVehicleInfo[playerid][v][pvId]] = 0;
            UpdatePlayerVehicleMods(playerid, v);
			DestroyVehicle(PlayerVehicleInfo[playerid][v][pvId]);
			VehicleFuel[PlayerVehicleInfo[playerid][v][pvId]] = 200;
			PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
			if(PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    	{
	    	    Info[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	    	    Info[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    		PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
			}
        }
    }
}

stock RegisterVehicleNumberPlate(vehicleid, sz_NumPlate[])
{
	new
	    Float: a_CarPos[4], fuel; // X, Y, Z, Z Angle, Fuel

	GetVehiclePos(vehicleid, a_CarPos[0], a_CarPos[1], a_CarPos[2]);
	GetVehicleZAngle(vehicleid, a_CarPos[3]);
	fuel = VehicleFuel[vehicleid];
	//SetVehicleNumberPlate(vehicleid, sz_NumPlate);
	SetVehicleToRespawn(vehicleid);
	//SetVehicleToRespawn(vehicleid);
	SetVehiclePos(vehicleid, a_CarPos[0], a_CarPos[1], a_CarPos[2]);
	SetVehicleZAngle(vehicleid, a_CarPos[3]);
	VehicleFuel[vehicleid] = fuel;
	return 1;
}

stock UpdatePlayerVehicleParkPosition(playerid, playervehicleid, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] != INVALID_PLAYER_VEHICLE_ID)
	{
		 new Float:oldx, Float:oldy, Float:oldz, oldfuel;
		 oldx = PlayerVehicleInfo[playerid][playervehicleid][pvPosX];
		 oldy = PlayerVehicleInfo[playerid][playervehicleid][pvPosY];
		 oldz = PlayerVehicleInfo[playerid][playervehicleid][pvPosZ];
		 if(oldx == newx && oldy == newy && oldz == newz) return 0;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = newx;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = newy;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = newz;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = newangle;
		 PlayerVehicleInfo[playerid][playervehicleid][pvVW] = GetVehicleVirtualWorld(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		 oldfuel = VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]];
		 VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 200;
		 UpdatePlayerVehicleMods(playerid, playervehicleid);
		 DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		 new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvModelId], PlayerVehicleInfo[playerid][playervehicleid][pvPosX], PlayerVehicleInfo[playerid][playervehicleid][pvPosY], PlayerVehicleInfo[playerid][playervehicleid][pvPosZ],
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle],PlayerVehicleInfo[playerid][playervehicleid][pvColor1], PlayerVehicleInfo[playerid][playervehicleid][pvColor2], -1);
   		 SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvVW]);
		 PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
         VehicleFuel[carcreated] = oldfuel;
         SetVehicleHealth(carcreated, health);
         LoadPlayerVehicleMods(playerid, playervehicleid);
         return 1;
	}
	return 0;
}

stock UpdatePlayerVehicleMods(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0) {
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		new carid = PlayerVehicleInfo[playerid][playervehicleid][pvId];
		new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1,
			sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(carid, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(carid, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(carid, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(carid, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(carid, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(carid, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(carid, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(carid, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(carid, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_LEFT);
		if(spoilers >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][0] = spoilers;
		if(hood >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][1] = hood;
		if(roof >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][2] = roof;
		if(sideskirt1 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][3] = sideskirt1;
		if(lamps >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][4] = lamps;
		if(nitro >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][5] = nitro;
		if(exhaust >= 1000)     PlayerVehicleInfo[playerid][playervehicleid][pvMods][6] = exhaust;
		if(wheels >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][7] = wheels;
		if(stereo >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][8] = stereo;
		if(hydraulics >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][9] = hydraulics;
		if(frontbumper >= 1000) PlayerVehicleInfo[playerid][playervehicleid][pvMods][10] = frontbumper;
		if(rearbumper >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][11] = rearbumper;
		if(ventright >= 1000)   PlayerVehicleInfo[playerid][playervehicleid][pvMods][12] = ventright;
		if(ventleft >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][13] = ventleft;
		if(sideskirt2 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][14] = sideskirt2;
	}
}

stock LoadPlayerVehicleMods(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0 && PlayerVehicleInfo[playerid][playervehicleid][pvSpawned]== 1)
	{
		//printf(" Cargando mods del jugador ID #%d.", playerid);
		new paintjob = PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob];
		new color1 = PlayerVehicleInfo[playerid][playervehicleid][pvColor1];
		new color2 = PlayerVehicleInfo[playerid][playervehicleid][pvColor2];
		if(PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] != -1)
		{
			 ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][playervehicleid][pvId], paintjob);
			 ChangeVehicleColor(PlayerVehicleInfo[playerid][playervehicleid][pvId], color1, color2);
		}
		for(new m = 0; m < MAX_MODS; m++)
		{
			AddVehicleComponent(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]);
		}
	}
}

stock LoadAllPlayerVehicleMods(playerid)
{
	//print(" Modificaciones de todos los autos cargadas.");
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvModelId] != 0 && PlayerVehicleInfo[playerid][v][pvImpounded] == 0)
        {
            new paintjob = PlayerVehicleInfo[playerid][v][pvPaintJob];
        	new color1 = PlayerVehicleInfo[playerid][v][pvColor1];
	        new color2 = PlayerVehicleInfo[playerid][v][pvColor2];
            if(PlayerVehicleInfo[playerid][v][pvPaintJob] != -1)
	        {
                ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][v][pvId], paintjob);
	        }
	        ChangeVehicleColor(PlayerVehicleInfo[playerid][v][pvId], color1, color2);
	        for(new m = 0; m < MAX_MODS; m++)
	        {
  	        	AddVehicleComponent(PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvMods][m]);
	        }
		}
	}
}

stock GetPlayerFreeVehicleId(playerid){
	for(new i; i < MAX_PLAYERVEHICLES; ++i){
		if(PlayerVehicleInfo[playerid][i][pvModelId] == 0) return i;
	}
	return -1;
}

function GetPlayerVehicleCount(playerid){
	new cars = 0;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++){
	    if(PlayerVehicleInfo[playerid][i][pvModelId]){
	        if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][i][pvImpounded] == 0 && PlayerVehicleInfo[playerid][i][pvSpawned] == 1){
				if(CheckPlayerVehicleForDesync(playerid, PlayerVehicleInfo[playerid][i][pvId])) return 0;
				cars++;
			}
	    }
	}
	return cars;
}

function VehicleCount(playerid){
    new cars = 0;
    for(new i = 0; i < MAX_PLAYERVEHICLES; i++){
		if(PlayerVehicleInfo[playerid][i][pvModelId] != 0){
			cars++;
		}
    }
    return cars;
}
/*InvalidModCheck(model, partid) {
    switch(model) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595, 573, 556, 557, 539, 471, 432, 406, 444,
		448, 461, 462, 463, 468, 481, 509, 510, 521, 522, 581, 586, 417, 425, 447, 460, 469, 476, 487,
		488, 477, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return 0;
		default: switch(GetVehicleComponentType(partid)) {
			case 5: switch(partid) {
				case 1008, 1009, 1010: return 1;
				default: return 0;
			}
			case 7: switch(partid) {
				case 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098: return 1;
				default: return 0;
			}
			case 8: switch(partid) {
				case 1086: return 1;
				default: return 0;
			}
			case 9: switch(partid) {
				case 1087: return 1;
				default: return 0;
			}
			default: for(new i; i < 4; i++) if(partid == vehicleMods[model - 400][GetVehicleComponentType(partid)][i]) {
				return 1;
			}
		}
	}
	return 0;
}*/

function CheckPlayerVehicleForDesync(playerid, vehicleid)
{
	if(GetVehicleModel(vehicleid) < 400 || GetVehicleModel(vehicleid) > 611)
	{
    	SendClientMessageEx(playerid, COLOR_ROJO, "!{FFFFFF} Desincronización de vehículos detectado, ejecutando sincronización de sus vehículos...");
    	UnloadPlayerVehicles(playerid);
    	//LoadPlayerVehicles(playerid);
    	SendClientMessageEx(playerid, COLOR_WHITE, "Sus vehículos han sido sincronizados con el servidor.");
    	return 1;
	}
	return 0;
}

stock GetPlayerVehicle(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	if(!GetVehicleModel(vehicleid)) return -1;
    for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

stock GetDistancePlayerVeh(playerid, veh) {

	new
	    Float:Floats[7];

	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));

	return floatround(Floats[6]);
}

stock doesVehicleExist(vehicleid) {

    if(GetVehicleModel(vehicleid) >= 400) {
		return 1;
	}
	return 0;
}

stock IsValidSkin(skinid){
	if(skinid < 0 || skinid > 299) return false;
	return true;
}

stock IsPublicSkin(skinid) {
	if(!IsValidSkin(skinid)) return false;

	switch(skinid) {
		case 274 .. 288, 265 .. 267, 71: return false;
	}
	return true;
}
stock GetClosestCar(playerid, exception = INVALID_VEHICLE_ID) {
    new
		Float:Distance,
		target = -1;
    for(new v; v < MAX_VEHICLES; v++) if(doesVehicleExist(v)) {
        if(v != exception && (target < 0 || Distance > GetDistancePlayerVeh(playerid, v))) {
            target = v;
            Distance = GetDistancePlayerVeh(playerid, v);
        }
    }
    return target;
}

LockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 3)
	{
	    LockStatus[carid] = 1;
	    vehicle_lock_doors(carid);
	}
}

UnLockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 3)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

function SetVehicleEngine(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(engine == VEHICLE_PARAMS_ON)
	{
	new string1[128];
	format(string1, sizeof(string1), "* %s apaga el motor del vehículo.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	arr_Engine{vehicleid} = 0;
	}
    else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
	{
	new Float: f_vHealth;
	GetVehicleHealth(vehicleid, f_vHealth);
	if(f_vHealth < 350.0) return GameTextForPlayer(playerid, "~r~MOTOR QUEMADO", 5000, 3);
    if(VehicleFuel[vehicleid] <= 0) return GameTextForPlayer(playerid, "~r~SIN GASOLINA", 5000, 3);
	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	arr_Engine{vehicleid} = 1;


    GameTextForPlayer(playerid, "~w~", 1000, 3);
	new string1[128];
	format(string1, sizeof(string1), "* %s enciende el motor del vehículo.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

SetVehicleLights(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		GameTextForPlayer(playerid, "", 200, 1);
	}
    else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		GameTextForPlayer(playerid, "", 200, 1);
	}
	return 1;
}

SetVehicleHood(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		GameTextForPlayer(playerid, "", 200, 1);
	}
    else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		GameTextForPlayer(playerid, "", 200, 1);
	}
	return 1;
}

SetVehicleTrunk(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		GameTextForPlayer(playerid, "", 200, 1);
	}
    else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		GameTextForPlayer(playerid, "", 200, 1);
	}
	return 1;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {
	new
		Float:Floats[3];
	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock GivePlayerCash(playerid, money)
{
	SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	GivePlayerMoney(playerid, money);
	return 1;
}

stock ResetPlayerCash(playerid)
{
	SetPVarInt(playerid, "Cash", 0);
	ResetPlayerMoney(playerid);
	return 1;
}

//---------------------------------------------------------
//Delay:NOPCheck[1000, i](playerid)
// Timer Name: NOPCheck(playerid)
function NOPCheck(playerid)
{
	if(GetPlayerState(playerid) != 2) NOPTrigger[playerid] = 0;
	if(GetPlayerState(playerid) != 2) return 1;
	new newcar = GetPlayerVehicleID(playerid);
    if(LAPD_OrgGobCar(newcar) && Info[playerid][pMember] != 1 && Info[playerid][pLeader] != 1) ExecuteNOPAction(playerid);
    else if(AININT_Vehicle(newcar) && Info[playerid][pMember] != 2 && Info[playerid][pLeader] != 2) ExecuteNOPAction(playerid);
    else if(IsAnUSMCCar(newcar) && Info[playerid][pMember] != 3 && Info[playerid][pLeader] !=3) ExecuteNOPAction(playerid);
    else if(Mecanico_Vehicle(newcar) && Info[playerid][pMember] != 6 && Info[playerid][pLeader] !=6) ExecuteNOPAction(playerid);
    else if(LAMD_Vehicle(newcar) && Info[playerid][pMember] != 4 && Info[playerid][pLeader] !=4) ExecuteNOPAction(playerid);
    else if(GobierAuto(newcar) && Info[playerid][pMember] != 7 && Info[playerid][pLeader] !=7) ExecuteNOPAction(playerid);
    else if(Taxi_Vehicle(newcar) && Info[playerid][pJob] != 8 && Info[playerid][pJob2] != 8) ExecuteNOPAction(playerid);
    else if(Motor_Vehicle(newcar) && Info[playerid][pMember] != 21 && Info[playerid][pLeader] !=21) ExecuteNOPAction(playerid);
    else if(Play_Music_Vehicle(newcar) && Info[playerid][pMember] != 22 && Info[playerid][pLeader] !=22) ExecuteNOPAction(playerid);
	return 1;
}

// Función: Otros Timers.
timer severTimers[1000]()
{
	if(iAdverTimer >= 1)
		--iAdverTimer;
	foreach(Player, i)
	{
	    SyncPlayerTime(i);
	    if(IsPlayerConnected(i) && gPlayerLogged{i} == 1)
	    {
			if(Tied[i] > 0) TogglePlayerControllable(i, 0);
            if(GetPVarInt(i, "EMSAttempt") == -1) ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
		    if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i)
					{
						CallCost[i] = CallCost[i]+callcost;
					}
				}
				CellTime[i]++;
				if (Mobile[Mobile[i]] == INVALID_PLAYER_ID && CellTime[i] == 5)
				{
				    if(IsPlayerConnected(Mobile[i]))
				    {
						new called[MAX_PLAYER_NAME], string[96];
						GetPlayerName(Mobile[i], called, sizeof(called));
						format(string, sizeof(string), "* El teléfono de %s está sonando.", called);
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
			    new string[24];
				format(string, sizeof(string), "~w~Costo de llamada: x",CallCost[i]);
				GivePlayerCash(i, -CallCost[i]);
				GameTextForPlayer(i, string, 5000, 1);
				CallCost[i] = 0;
			}
			for(new h = 0; h < sizeof(Points); h++)
			{
				if(IsPlayerInRangeOfPoint(i, 2.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz])){
					if(Points[h][Type] == 3 && Info[i][pPot] < 3){
						GameTextForPlayer(i, "~w~Usa /comprarmarihuana para comprar algo de ~n~~r~marihuana", 5000, 5);
					}
					else if(Points[h][Type] == 1 && GetPVarInt(i, "Packages") == 0){
						GameTextForPlayer(i, "~w~Usa /materiales para comprar ~n~~r~paquetes de materiales.", 5000, 5);
					}
					else if(Points[h][Type] == 4){
						GameTextForPlayer(i, "~w~Usa /comprarcocaina para comprar ~n~algo de ~r~cocaína", 5000, 5);
					}
					else if(Points[h][Type] == 5){
						GameTextForPlayer(i, "~w~Usa /paquete para comprar un ~n~~r~paquete de droga", 5000, 5);
					}
				}
			}
			if(TransportDriver[i] < 999)
			{
				if(GetPlayerVehicleID(i) != GetPlayerVehicleID(TransportDriver[i]) || !TransportDuty[TransportDriver[i]])
				{
					if(IsPlayerConnected(TransportDriver[i]))
					{
					    new string[24];
						TransportMoney[TransportDriver[i]] += TransportCost[i];
						TransportTime[TransportDriver[i]] = 0;
						TransportCost[TransportDriver[i]] = 0;
						format(string, sizeof(string), "~w~Pasajero se bajo del vehículo~n~~g~ganancias %d",TransportCost[i]);
						GameTextForPlayer(TransportDriver[i], string, 5000, 1);
						TransportDriver[i] = 999;
					}
				}
				else if(TransportTime[i] >= 16)
				{
					TransportTime[i] = 1;
					GivePlayerCash(i, -TransportValue[TransportDriver[i]]);
					if(TransportDriver[i] < 999)
					{
						if(IsPlayerConnected(TransportDriver[i]))
						{
		  					TransportCost[i] += TransportValue[TransportDriver[i]];
							TransportCost[TransportDriver[i]] = TransportCost[i];
						}
					}
				}
				TransportTime[i] += 1;
				new string[24];
				format(string, sizeof(string), "~r~%d ~w~: ~g~%d",TransportTime[i],TransportCost[i]);
				GameTextForPlayer(i, string, 15000, 6);
				GameTextForPlayer(TransportDriver[i], string, 15000, 6);
				if(TransportCost[i] > GetPlayerCash(i))
				{
				    RemovePlayerFromVehicle(i);
				    new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(i, slx, sly, slz);
					SetPlayerPos(i, slx, sly, slz + 2);
				    GameTextForPlayer(i, "~r~No tienes más dinero para pagar el taxi, pasa por un cajero automático.", 4000, 4);
				}
			}
			if(IsPlayerInAnyVehicle(i))
			{
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(i, 0);
				else if(Info[i][pWeapons][4] == 0) SetPlayerArmedWeapon(i, 0);
				else SetPlayerArmedWeapon(i, 29);
			}
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && Info[i][pAdminZC] < 4)
			{
				new string[74 + MAX_PLAYER_NAME];
			    format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) es posible que use Cheat de JetPack .", GetPlayerNameEx(i), i);
				ABroadCast( COLOR_YELLOW, string, 2 );
				format(string, sizeof(string), "%s (ID %d) es posible que use Cheat de JetPack.", GetPlayerNameEx(i), i);
				Log("logs/- Hacks Reportados.log", string);
				format(string, sizeof(string), "ATENCIÓN: %s ha sido auto-expulsado, razón: jetpack hack.", GetPlayerNameEx(i), i);
				ABroadCast(COLOR_YELLOW, string, 0 );
				Kick(i);
			}
			if(IsPlayerInRangeOfPoint(i, 2, 1544.2, -1353.4, 329.4))
			{
				GivePlayerValidWeapon(i, 46);
			}
		}
	}
}

timer severTimers2[1000]()
{
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i) && gPlayerLogged{i} == 1)
		{
			if(GetPlayerPing(i) > MAX_PING)
			{
			    new string[128];
	           	format(string, sizeof(string), "[Ping Máximo]: %s fue expulsado por tener %d de ping. [Max. 1.500]", GetPlayerNameEx(i), GetPlayerPing(i) );
				ABroadCast(COLOR_GENERAL, string, 2);
	        	SendClientMessageEx(i, COLOR_GENERAL, "{2EDFFF}¡Atención!: {FFFFFF}Estimado usuario, usted fue expulsado del servidor por tener más de 1.500 de Ping.");
	        	Kick(i);
		    }
			if(Info[i][pJudgeJailType] != 0 && Info[i][pJudgeJailTime] > 0 && !Info[i][pBeingSentenced]) Info[i][pJudgeJailTime]--;
			if(Info[i][pJudgeJailTime] <= 0 && Info[i][pJudgeJailType] != 0) Info[i][pJudgeJailType] = 0;
	        if(IsaRent[i] > 0)
			{
				if(RentTime[i] > 0)
				{
			       	RentTime[i]--;
			   	}
			   	if(RentTime[i] == 0)
				{
			       	RentTime[i] = 0;
			       	if(IsaRent[i] == 1)
					{
						IsaRent[i] = 0;
						new newcar = GetPlayerVehicleID(i);
						if(IsARentCar(newcar))
						{
							SetVehicleToRespawn(HireKey[i]);
							TogglePlayerControllable(i, 1);
						}
					}
				}
			}
   			if(CommandSpamUnmute[i] == 0){ CommandSpamTimes[i] = 0;}
			if(Info[i][pADTime] != 0){Info[i][pADTime]--;}
			if(Info[i][pServiceTime] != 0) { Info[i][pServiceTime]--; }
			if(Info[i][pSavedTime] != 0) { Info[i][pSavedTime]--; }
			if(NewbieTimer[i] > 0) { NewbieTimer[i]--; }
			if(VIPTimer[i] > 0){ VIPTimer[i]--; }
   			if(Info[i][pDPTime] != -1){
			   	Info[i][pDPTime]--;
			   	if(Info[i][pDPTime] == 0){
			       	Info[i][pDPHours] = 0;
			       	Info[i][pRHours] = 0;
			       	Info[i][pDPTime] = -1;
			       	Info[i][pPTR] +=1;
			       	SendClientMessageEx(i, COLOR_GREEN,"* Se terminó tu tiempo, no pudiste mantener el beneficio de Usuario Dedicado, intentalo de nuevo!");
			   	}
			}
			if(GetPlayerCash(i) != GetPlayerMoney(i))
			{
				ResetMoneyBar(i);
				UpdateMoneyBar(i,GetPVarInt(i, "Cash"));
			}
			if(Info[i][pTriageTime] != 0)
			{
				Info[i][pTriageTime]--;
    		}
 		    if(Info[i][pTempVIP] >= 1)
			 {
				Info[i][pTempVIP]--;
    		}
		    if(Info[i][pTempVIP] <= 0 && Info[i][pBuddyInvited] == 1)
			{
				Info[i][pTempVIP] = 0;
				Info[i][pBuddyInvited] = 0;
    			Info[i][pVIP] = 0;
				SendClientMessageEx(i, COLOR_VIP, "INFO: {FFFFFF}Tu VIP Temporal ha expirado.");
				SetPlayerToTeamColor(i);
     		}
			if(Info[i][pRMuted] > 1)
			{
			   	if(Info[i][pRMutedTime] > 0)
   				{
			   	    Info[i][pRMutedTime]--;
			   	}
			   	else
				{
			   	    Info[i][pRMuted] = 0;
			   	}
			}
		    if(Info[i][pJailed] > 0)
			{
				if(Info[i][pJailTime] > 0)
				{
					Info[i][pJailTime]--;
					new text[128];
		        	switch(Info[i][pJailed])
					{
		            	case 1, 4: format(text, sizeof(text), "~n~~n~~n~~n~~n~~n~~n~ ~r~SANCION OOC~n~~w~%d segundos (%i minutos) restantes", Info[i][pJailTime], Info[i][pJailTime]/60);
					}
					GameTextForPlayer(i, text, 2000, 3);
				}
    			if(Info[i][pJailTime] <= 0)
				{
				    Info[i][pJailTime] = 0;
				    switch(Info[i][pJailed])
				    {
				        case 2:{
						SetPosEx(i,1605.5861,-1646.6277,13.5469,0,0,0);
						Info[i][pWantedLevel] = 0;
						SetPlayerWantedLevel(i, Info[i][pWantedLevel]);
				        }
				        case 3:{
				 		SetPlayerInterior(i, 0);
				 		Info[i][pInt] = 0;
			 			SetPlayerVirtualWorld(i, 0);
			 			Info[i][pVW] = 0;
			 			SetPlayerPos(i,343.1081,-1521.4404,33.2985);
				        }
				        case 1,4:{
				    	SetPlayerInterior(i, 0);
				    	Info[i][pInt] = 0;
				    	SetPosEx(i,1552.8286,-1674.9845,16.1953,0,0,0);
				        }
				        case 5:{
			 			SetPlayerInterior(i, 0);
			 			Info[i][pInt] = 0;
			 			SetPlayerVirtualWorld(i, 0);
			 			Info[i][pVW] = 0;
			 			SetPlayerPos(i,130.0132,1945.5618,19.3507);
						}
				        case 6:{
			 			SetPlayerInterior(i, 0);
			 			Info[i][pInt] = 0;
			 			SetPlayerVirtualWorld(i, 0);
			 			Info[i][pVW] = 0;
			 			SetPlayerPos(i,725.8815,-1438.3231,13.5391);
						}
						case 1000:{
				    	SetPlayerInterior(i, 0);
				    	Info[i][pInt] = 0;
				    	SetPosEx(i,1552.8286,-1674.9845,16.1953,0,0,0);
				    	}
					}
					Info[i][pJailed] = 0;
					PhoneOnline[i] = 0;
					SendClientMessageEx(i, COLOR_GREEN,"Has pagado tu condena.");
					GameTextForPlayer(i, "~g~Eres Libre~n~~w~Se mejor persona.", 5000, 1);
					SetPlayerSkin(i, Info[i][pChar]);
					SetPlayerToTeamColor(i);
				}
			}
			if(Info[i][pWantedLevel] > 0)
			{
			   	SetPlayerWantedLevel(i, Info[i][pWantedLevel]);
			}
		    if(UsedFind[i] >= 1){
		    	UsedFind[i] -= 1;
		   	}
   			if(JustReported[i] > 0){
				JustReported[i]--;
			}
			if(JustDuda[i] > 0){
				JustDuda[i]--;
			}
			if(JustAfk[i] > 0){
				JustAfk[i]--;
			}
			if(tarmalimit[i] > 0){
				tarmalimit[i]--;
			}
		    if(Info[i][pGiftTime] != 0){
				Info[i][pGiftTime]--;
			}
			if(PlayerTazeTime[i] >= 1){
				PlayerTazeTime[i] += 1;
				if(PlayerTazeTime[i] == 15){PlayerTazeTime[i] = 0;}
			}
			if(MechanicCallTime[i] > 0)
			{
				if(MechanicCallTime[i] == 300) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Checkpoint eliminado!", 2500, 1); }
				else
				{
				    new string[5];
					format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(MedicCallTime[i] > 0)
			{
				if(MedicCallTime[i] == 45) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Checkpoint eliminado!", 2500, 1); }
				else
				{
				    new string[5];
					format(string, sizeof(string), "%d", 45 - MedicCallTime[i]);
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(MedicAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
					GameTextForPlayer(i, string, 1500, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(GetPlayerState(i) == PLAYER_STATE_ONFOOT) for(new h = 0; h < sizeof(fINFO); h++)
			{
				if(IsPlayerInRangeOfPoint(i, 2.0, fINFO[h][FamilySafe][0], fINFO[h][FamilySafe][1], fINFO[h][FamilySafe][2]))
				{
					if(fINFO[h][FamilyUSafe] == 1)
					{
						GameTextForPlayer(i, "~y~Caja Fuerte~w~~n~Escribe ~r~/ayudasafe~w~ para mas informacion", 5000, 3);
					}
				}
			}
			if(EMSCallTime[i] > 0)
			{
		    	if(EMSAccepted[i] < 999)
				{
		        	if(IsPlayerConnected(EMSAccepted[i]))
					{
		            	new Float:X,Float:Y,Float:Z;
		            	GetPlayerPos(EMSAccepted[i], X, Y, Z);
		            	SetPlayerCheckpoint(i, X, Y, Z, 5);
					}
				}
			}
			if(Info[i][pEstado] == 1){
				if(PlayerCuffedTime[i] <= 0){
			    	//Frozen[i] = 0;
			    	SetPVarInt(i, "IsFrozen", 0);
					TogglePlayerControllable(i, 1);
					Info[i][pEstado] = 0;
					SetPVarInt(i, "PlayerCuffed", 0);
					PlayerCuffedTime[i] = 0;
					PlayerTazeTime[i] = 1;
					ClearAnimations(i);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(i, X, Y, Z);
					SetPlayerPos(i, X, Y, Z);
				}
				else{
					PlayerCuffedTime[i] -= 1;
				}
			}
			if(Info[i][pEstado] == 2){
				if(PlayerCuffedTime[i] <= 0){
			    	new Float:X, Float:Y, Float:Z;
			    	GetPlayerPos(i, X, Y, Z);
			    	new copinrange;
					foreach(Player, j){
			    		if(IsPlayerInRangeOfPoint(j, 30, X, Y, Z) && OrgGob(j)){copinrange = 1;}
					}
			    	if(copinrange == 0)
					{
						//Frozen[i] = 0;
						SetPVarInt(i, "IsFrozen", 0);
						GameTextForPlayer(i, "~r~Rompiste las esposas eres libre!", 2500, 3);
						TogglePlayerControllable(i, 1);
						Info[i][pEstado] = 0;
						DeletePVar(i, "PlayerCuffed");
						PlayerCuffedTime[i] = 0;
					}
					else{PlayerCuffedTime[i] = 60;}
				}
				else{PlayerCuffedTime[i] -= 1;}
			}
			if(PlayerDrunk[i] > 9)
			{
		    	if(PlayerDrunkTime[i] > 20)
				{
		    		ApplyAnimation(i,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[i]*1000);
		    		SetPlayerDrunkLevel(i, PlayerDrunk[i]*1000);
		    		PlayerDrunk[i] -= 1;
		    		PlayerDrunkTime[i] = 0;
				}
				PlayerDrunkTime[i] += 1;
			}
			if(PlayerDrunk[i] < 10 && PlayerDrunk[i] > 0)
			{
		    	if(PlayerDrunkTime[i] > 30)
				{
		        	PlayerDrunk[i] -= 1;
                   	PlayerDrunkTime[i] = 0;
				}
				PlayerDrunkTime[i] += 1;
			}
		}
	}
}

/*UPDATE ACCOUNTS TICKRATE 5 MIN
timer saveAccounts[180000]()
{
	new string[128];
	saveFamilies();
	saveFamiliesHQ();
	new playerip[32];
	foreach(Player, i){
	    if(gPlayerLogged{i}){
  			format(string, sizeof(string), "Lvl: %d Exp: %d/%d", Info[i][pLevel],  Info[i][pExp], (Info[i][pLevel]+1)*(explevel)); // sistema experiencia (nota copiar todo desde update asta timer
    		TextDrawSetString(Experiencia[i], string);
			Info[i][pInt] = GetPlayerInterior(i);
			Info[i][pVW] = GetPlayerVirtualWorld(i);
			GetPlayerPos(i, Info[i][pPos_x], Info[i][pPos_y], Info[i][pPos_z]);
			GetPlayerFacingAngle(i, Info[i][pPos_r]);
			GetPlayerIp(i, playerip, sizeof(playerip));
			format(Info[i][pIP], 32, "%s", playerip);
        	OnPlayerSavedStats(i);
        }
    }
    print("EXE:saveAccounts;");
*/

// Timer Name: VehicleUpdate()
// TickRate: 10 Sec.
timer VehicleUpdate[10000]()
{
    new engine,lights,alarm,doors,bonnet,boot,objective,modelid;
    for(new v = 0; v < MAX_VEHICLES; v++) if(GetVehicleModel(v)){
		modelid = GetVehicleModel(v);
	    GetVehicleParamsEx(v,engine,lights,alarm,doors,bonnet,boot,objective);
		switch(modelid){
			case 520, 476, 593, 553, 513, 512, 577, 592, 511, 539, 464, 519: VehicleFuel[v] = 200;
			case 509, 481, 510: VehicleFuel[v] = 200, arr_Engine{v} = 1, SetVehicleParamsEx(v,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
	    if(engine == VEHICLE_PARAMS_ON){
			if(VehicleFuel[v] > 0 && !IsAHarvest(v)){
				VehicleFuel[v]-=1;
				if(VehicleFuel[v] <= 0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			}
			if(arr_Engine{v} == 0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	    }
	}
}
timer ServerMicrobeat[250]()
{
    new
		Float: fExpHealth,
		Float: fCurrentSpeed,
		iVehicle,
		arrDamage[4],
		arrVehParams[7],
		szSpeed[80];
	foreach(Player, i){
	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER){
		    fCurrentSpeed = player_get_speed(i);
			fVehSpeed[i] = fCurrentSpeed;
			iVehicle = GetPlayerVehicleID(i);
  			for(new s=0;s<10;s++){
				if(SpikeStrips[s][sX] != 0){
					if(VehicleToPoint( 3.0, iVehicle, SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ])){
			  			GetVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
			 			arrDamage[3] = encode_tires(1, 1, 1, 1);
			   			UpdateVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
		  			}
				}
	   		}
			GetVehicleHealth(iVehicle,fExpHealth);
			if(fExpHealth < 350.0 && !IsABike(iVehicle)){
 				SetVehicleHealth(iVehicle, 251.0);
    			GetVehicleParamsEx(iVehicle, arrVehParams[0], arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
				if(arrVehParams[0] == VEHICLE_PARAMS_ON) SetVehicleParamsEx(iVehicle,VEHICLE_PARAMS_OFF, arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
				GameTextForPlayer(i, "~r~MOTOR QUEMADO", 2500, 3);
				arr_Engine{iVehicle} = 0;
			}
			else if(Info[i][pSpeedo] != 0 && arr_Engine{iVehicle} == 1)
			{
			    if(fCurrentSpeed > 120){
					format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%.0f KPH ~w~- Gas: %d", fCurrentSpeed, VehicleFuel[iVehicle]);
				}
				else if(fCurrentSpeed > 50){
					format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~%.0f KPH ~w~- Gas: %d", fCurrentSpeed, VehicleFuel[iVehicle]);
				}
				else if(fCurrentSpeed >= 0){
					format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f KPH ~w~- Gas: %d", fCurrentSpeed, VehicleFuel[iVehicle]);
				}
				GameTextForPlayer(i, szSpeed, 1500, 3);
			}
		}
	}
}
timer Mensajes[600000]()
{
	foreach(Player, i){
	    if(Advisors > 0 && Info[i][pLevel] < 4) SendClientMessageEx(i, COLOR_LIGHTBLUE, "Si usted necesita ayuda, use los comandos: /Ayudame - /Soporte");
		if(GetPlayerCash(i) < 0){
			if(MoneyMessage[i]==0){
				new string[128];
				format(string, sizeof(string), "[SMS]: Usted tiene una deuda sin pagar de $%d, en casos de no pagar será embargado. [Banco Nacional]", GetPlayerCash(i));
				SendClientMessageEx(i, COLOR_YELLOW, string);
				MoneyMessage[i] = 1;
			}
		}
		else MoneyMessage[i] = 0;
	}
	if(VIPGiftsTimeLeft > 0 && VIPGifts == 1){
	    VIPGiftsTimeLeft -= 10;
	    if(VIPGiftsTimeLeft > 0){
		    new string[128];
			format(string, sizeof(string), "%s quiere que vengas al Club VIP hay regalos para ti [%d minutos restantes]", VIPGiftsName, VIPGiftsTimeLeft);
   			BroadCast(COLOR_LIGHTGREEN, string);
		}
	}
	if(VIPGiftsTimeLeft <= 0 && VIPGifts == 1){
	    VIPGiftsTimeLeft = 0;
	    VIPGifts = 0;
	    new string[128];
		format(string, sizeof(string), "Club VIP ya no está regalando obsequios. Gracias por venir!", VIPGiftsName, VIPGiftsTimeLeft);
		BroadCast(COLOR_LIGHTGREEN, string);
	}
}

timer EMSUpdate[3000](){
	foreach(Player, i){
	    if(GetPVarType(i, "Injured")){
	        if(GetPVarInt(i, "EMSAttempt") != 0){
				new Float:health;
 				GetPlayerHealth(i,health);
				if(GetPVarInt(i, "EMSAttempt") == -1)
				{
    				if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
					    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
				  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
	    			}
	    			SetHP(i, health-1);
	    			ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
					GameTextForPlayer(i, "~r~ESTAS AGONIZANDO~n~~w~/solicitar medicos", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 1)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
					    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
				  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
	    			}
	    			SetHP(i, health-5);
	    			ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
					GameTextForPlayer(i, "~r~agonizando~n~~w~Espera que LAMD llege...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 8)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
					    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
				  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
	    			}
	    			SetHP(i, health-5);
	    			ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
					GameTextForPlayer(i, "~r~agonizando~n~~w~Espera que LAMD llege...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 2)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
					    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
				  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
	    			}
	    			GameTextForPlayer(i, "~g~Rescatado~n~~w~En espera de atencion medica...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 3){
	    			if(IsPlayerInAnyVehicle(i)){
	        			new ambmodel = GetPlayerVehicleID(i);
	        			if(GetVehicleModel(ambmodel) == 416){
	    					GameTextForPlayer(i, "~g~Rescatado~n~~w~TE TRASLADAN AL HOSPITAL MAS CERCA", 5000, 3);
						}
						else{
	        				SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
	        				KillEMSQueue(i);
	        				SetPVarInt(i, "Hospital", 1);
							SpawnPlayer(i);
						}
					}
					else{
		    			SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
	        			KillEMSQueue(i);
	        			SetPVarInt(i, "Hospital", 1);
						SpawnPlayer(i);
					}
				}
				if(health <= 10)
				{
	    			SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
	    			KillEMSQueue(i);
	    			SetPVarInt(i, "Hospital", 1);
        	    	SetHP(i, 50);
					SpawnPlayer(i);
				}
	        }
	    }
	}
}

// Timer Name: SpecUpdate() TickRate: 3 secs.
timer SpecUpdate[3000](){
	foreach(Player, i){
	    if(Info[i][pAdminZC] >= 2){
		    if(Spectating[i] >= 1){
				if(Spectate[i] < 553){
					new targetid = Spectate[ i ];
					if( !IsPlayerConnected( targetid ) ){
    					SendClientMessageEx( i, COLOR_WHITE, "El jugador que estabas specteando salio del servidor, tomá SS para más seguridad." );
			    		GettingSpectated[Spectate[i]] = 999;
			    		Spectating[i] = 0;
						Spectate[i] = 999;
						SetPVarInt(i, "SpecState", -1);
						SetPVarInt(i, "SpecOff", 1 );
						TogglePlayerSpectating( i, false );
						SetCameraBehindPlayer(i);
						SetPlayerColor(i, COLOR_POINTGEN);
					}
				}
				if(Spectate[i] == 553){
					TogglePlayerControllable(i, 1);
					TogglePlayerSpectating(i, 0);
					DeletePVar(i, "MedicBill");
					SpawnPlayer( i );
					Spectate[i] = 999;
					Spectating[i] = 0;
					SetPlayerColor(i, COLOR_POINTGEN);
				}
				if(Spectate[i] == 554){
					TogglePlayerControllable(i, 1);
					SetPlayerInterior(i,Unspec[i][sPint]);
					Info[i][pInt] = Unspec[i][sPint];
					SetPlayerPos(i, Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2]);
					Spectate[i] = 999;
					SetPlayerColor(i, COLOR_POINTGEN);
				}
					if(Spectate[i] == 556){
					Spectate[i] = 999;
					SetPlayerColor(i, COLOR_POINTGEN);
				}
					if(Spectate[i] == 557){
					Spectate[i] = 554;
					SetPlayerColor(i, COLOR_POINTGEN);
				}
			}
		}
	}
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
    if(pickupid == koson)
	{
		if(Koson1[playerid]== 1)
		{
		    if(acobrarcesped[playerid]<300) acobrarcesped[playerid]=300;
		    if(acobrarcesped[playerid]>400) acobrarcesped[playerid]=400;
			DisablePlayerCheckpoint(playerid);
   				armaRecibir[playerid]=random(10);
				if(armaRecibir[playerid] == 5)
				{
				new string[128];
				format(string, sizeof(string), "Ganaste %d$ por tu trabajo y un regalo de parte del jefe",acobrarcesped[playerid]);
	  			GameTextForPlayer(playerid,string,4000,3);
				GivePlayerCash(playerid, acobrarcesped[playerid]);
   				new randomarma = random(sizeof(idarma));
				GivePlayerValidWeapon(playerid, idarma[randomarma]);
                SetPlayerSkin(playerid,OldskinJ[playerid]);
                acobrarcesped[playerid]=0;
			}else{
			    new string[128];
				format(string, sizeof(string), "Ganaste %d$ por tu trabajo",acobrarcesped[playerid]);
	  			GameTextForPlayer(playerid,string,4000,3);
				GivePlayerCash(playerid, acobrarcesped[playerid]);
				SetPlayerSkin(playerid,OldskinJ[playerid]);
				acobrarcesped[playerid]=0;
   				}
				Koson1[playerid]= 0;
				recojercesped[playerid]=0;
		}
	}
	if(pickupid == cesped)
	{
		GameTextForPlayer(playerid,"~r~/recogercesped",4000,3);
	}
	if(pickupid == LenadorU)
            {
                    if(GetPVarInt(playerid,"PlayerStartDrova") == 1) return GameTextForPlayer(playerid,"~r~Continua recogiendo madera!",3000,3);
                    ShowPlayerDialog(playerid,999,DIALOG_STYLE_MSGBOX,"[LEÑADOR]","Empezar a cortar madera?","Si","No");
                    talar[playerid]=1;

            }
            else if(pickupid == Talararbol[0])
            {
                    if (talar[playerid] == 1)
                    {
                	if(GetPVarInt(playerid,"PlayerStartDrova") == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[Acepta primero el trabajo)");
                    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
                    SetPlayerAttachedObject(playerid,8, 341, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            		Tiempotalar[playerid] = SetTimerEx("espera",5000,false,"i", playerid);
                 	Azar1 = random(sizeof(Maderaazar));
                	gcorte[playerid] += Maderaazar[Azar1][0];
					CorteX+=Maderaazar[Azar1][0];
					CorteY+=Maderaazar[Azar1][0];
					CorteY ++;
                    TrabajoL[playerid] = true;
                    SetTimerEx("arbol1",4000,false,"i", playerid);
                    lena1[playerid] = 1;
                    talar[playerid]=0;
                    }
            }
            else if(pickupid == Talararbol[1])
            {
                    if (talar[playerid] == 1)
                    {
                    if(GetPVarInt(playerid,"PlayerStartDrova") == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[Acepta primero el trabajo)");
                    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
					SetPlayerAttachedObject(playerid,8, 341, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            		Tiempotalar[playerid] = SetTimerEx("espera",5000,false,"i", playerid);
                	Azar1 = random(sizeof(Maderaazar));
                	gcorte[playerid] += Maderaazar[Azar1][0];
					CorteX+=Maderaazar[Azar1][0];
					CorteY+=Maderaazar[Azar1][0];
					CorteY ++;
                    TrabajoL[playerid] = true;
                    SetTimerEx("arbol2",4000,false,"i", playerid);
                    lena1[playerid] = 1;
                    talar[playerid]=0;
                    }
            }
            else if(pickupid == Talararbol[2])
            {
                    if (talar[playerid] == 1)
                    {
                    if(GetPVarInt(playerid,"PlayerStartDrova") == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[Acepta primero el trabajo)");
                    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
					SetPlayerAttachedObject(playerid,8, 341, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            		Tiempotalar[playerid] = SetTimerEx("espera",5000,false,"i", playerid);
                	Azar1 = random(sizeof(Maderaazar));
                	gcorte[playerid] += Maderaazar[Azar1][0];
					CorteX+=Maderaazar[Azar1][0];
					CorteY+=Maderaazar[Azar1][0];
					CorteY ++;
                    TrabajoL[playerid] = true;
                    SetTimerEx("arbol3",4000,false,"i", playerid);
                    lena1[playerid] = 1;
                    talar[playerid]=0;
                    }
            }
            else if(pickupid == Talararbol[3])
            {
                    if (talar[playerid] == 1)
                    {
                	if(GetPVarInt(playerid,"PlayerStartDrova") == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[Acepta primero el trabajo");
                    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
					SetPlayerAttachedObject(playerid,8, 341, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            		Tiempotalar[playerid] = SetTimerEx("espera",5000,false,"i", playerid);
                	Azar1 = random(sizeof(Maderaazar));
                	gcorte[playerid] += Maderaazar[Azar1][0];
					CorteX+=Maderaazar[Azar1][0];
					CorteY+=Maderaazar[Azar1][0];
					CorteY ++;
                    TrabajoL[playerid] = true;
                    SetTimerEx("arbol4",4000,false,"i", playerid);
                    lena1[playerid] = 1;
                    talar[playerid]=0;
                    }
            }
        if(pickupid == lena)
	{
		if(lena1[playerid]== 1)
		{
			new string[128];
	 		ClearAnimations(playerid);
	 		DisablePlayerCheckpoint(playerid);
			GivePlayerCash(playerid, gcorte[playerid] * 2);
			lena1[playerid]= 0;
			ApplyAnimation(playerid,"PED","IDLE_tired",4.1,1,0,0,0,2500);
			format(string, sizeof(string), "te han pagado: $%d",gcorte[playerid]* 3);
			GameTextForPlayer(playerid,string,4000,3);
			talar[playerid]=1;
			gcorte[playerid] = 0;
			for(new x2;x2<MAX_PLAYERTOYS;x2++)
	    	{
		    RemovePlayerAttachedObject(playerid, x2);
        	}
		}
	}
	if(pickupid == ganja)
	{
		GameTextForPlayer(playerid,"~r~/vendercosecha",3000,3);
	}
    if(pickupid == roboV)
    {
    	GameTextForPlayer(playerid,"~r~/robarshop",3000,3);
	}
	if(pickupid == roboD)
    {
    	GameTextForPlayer(playerid,"~r~/dejarrobo",3000,3);
	}
    if(pickupid == ticketR)
    {
    GameTextForPlayer(playerid,"~p~/Cticket: Precio del Ticket: $50.",3000,3);
    }
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
		enum
	{
		CHECKPOINT_1,
		CHECKPOINT_2,
		CHECKPOINT_3,
		CHECKPOINT_4,
		CHECKPOINT_5,
		CHECKPOINT_6,
		CHECKPOINT_7,
		CHECKPOINT_8,
		CHECKPOINT_9,
		CHECKPOINT_10,
		CHECKPOINT_11,
		CHECKPOINT_12,
		CHECKPOINT_13,
		CHECKPOINT_14,
		CHECKPOINT_15,
	}
    	if(Kosonrob[playerid] == 1)
		{
			switch(pKosonrob[playerid])
			{
			case CHECKPOINT_1:
    			{
					pKosonrob[playerid] = CHECKPOINT_2;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2040.2615,-1239.2533,22.5250,1.0972,-1164.6312,20.3167, 5.0);
					new cobro1=random(50);
                    acobrarcesped[playerid]+=cobro1;
				}
			case CHECKPOINT_2:
				{
					pKosonrob[playerid] = CHECKPOINT_3;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2037.7347,-1153.3411,22.9239,94.2694,-1171.8638,22.3931, 5.0);
					new cobro2=random(50);
                    acobrarcesped[playerid]+=cobro2;
				}
			case CHECKPOINT_3:
				{
					pKosonrob[playerid] = CHECKPOINT_4;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1973.5685,-1157.2955,20.5330,90.5327,-1225.0547,16.6850, 5.0);
					new cobro3=random(50);
                    acobrarcesped[playerid]+=cobro3;
				}
			case CHECKPOINT_4:
				{
					pKosonrob[playerid] = CHECKPOINT_5;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1888.0820,-1156.6615,23.7287,198.9810,-1246.1703,22.7465, 5.0);
					new cobro4=random(50);
                    acobrarcesped[playerid]+=cobro4;
				}
			case CHECKPOINT_5:
				{
                    pKosonrob[playerid] = CHECKPOINT_6;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1918.8859,-1233.3040,17.0178,280.3542,0.0,0.0, 5.0);
					new cobro5=random(50);
                    acobrarcesped[playerid]+=cobro5;
				}
			case CHECKPOINT_6:
				{
                    pKosonrob[playerid] = CHECKPOINT_7;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1969.6433,-1223.3857,19.6034,282.1702,0.0,0.0, 5.0);
					new cobro6=random(50);
                    acobrarcesped[playerid]+=cobro6;
				}
			case CHECKPOINT_7:
				{
                    pKosonrob[playerid] = CHECKPOINT_8;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2048.9810,-1204.7010,23.0090,62.0343,0.0,0.0, 5.0);
					new cobro7=random(50);
                    acobrarcesped[playerid]+=cobro7;
				}
			case CHECKPOINT_8:
				{
                    pKosonrob[playerid] = CHECKPOINT_9;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1974.1473,-1177.3590,19.6034,92.4975,0.0,0.0, 5.0);
					new cobro8=random(50);
                    acobrarcesped[playerid]+=cobro8;
				}
			case CHECKPOINT_9:
				{
                    pKosonrob[playerid] = CHECKPOINT_10;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1898.7450,-1181.7754,23.1214,143.4958,0.0,0.0, 5.0);
					new cobro9=random(50);
                    acobrarcesped[playerid]+=cobro9;
				}
				case CHECKPOINT_10:
				{
                    pKosonrob[playerid] = CHECKPOINT_11;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1867.7736,-1228.7124,16.5319,256.9824,0.0,0.0, 5.0);
					new cobro10=random(50);
                    acobrarcesped[playerid]+=cobro10;
				}
				case CHECKPOINT_11:
				{
                    pKosonrob[playerid] = CHECKPOINT_12;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1946.0057,-1241.0990,18.7193,282.7324,0.0,0.0, 5.0);
					new cobro11=random(50);
                    acobrarcesped[playerid]+=cobro11;
				}
			case CHECKPOINT_12:
				{
                    pKosonrob[playerid] = CHECKPOINT_13;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2044.1243,-1220.5642,22.6328,29.5925,0.0,0.0, 5.0);
					new cobro12=random(50);
                    acobrarcesped[playerid]+=cobro12;
				}
			case CHECKPOINT_13:
				{
                    pKosonrob[playerid] = CHECKPOINT_14;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2001.8083,-1153.2592,21.6568,175.6700,-1164.6312,20.3167, 5.0);
					new cobro13=random(50);
                    acobrarcesped[playerid]+=cobro13;
				}
			case CHECKPOINT_14:
				{
                    pKosonrob[playerid] = CHECKPOINT_15;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 1,2040.47656, -1246.61938, 22.54460,1991.8071,-1164.6312,20.3167, 5.0);
					new cobro14=random(50);
                    acobrarcesped[playerid]+=cobro14;

				}
			case CHECKPOINT_15:
				{
				new cobro15=random(50);
				acobrarcesped[playerid]+=cobro15;
    			acobrarcesped[playerid]+=cobro15;
				DisablePlayerRaceCheckpoint(playerid);
				Koson1[playerid]=1;
				GameTextForPlayer(playerid,"~w~VE A LA CASA CON EL SIGNO ~g~$",4000,3);
				recojercesped[playerid]=0;
				RemovePlayerFromVehicle(playerid);
				}
			}
		}
		return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(Info[playerid][pAdminZC] > 5999)
	{
    SetPlayerPosFindZ(playerid, fX, fY, fZ);
    }
    return 1;
}

public Tiempoarbol0(playerid)
{
DestroyObject(Arbolmuerto[0]);
Arbolvivo[0] = CreateObject(726, -528, -1453.8994140625, 9.8999996185303, 0, 0, 0);
return 1;
}
public Tiempoarbolx(playerid)
{
DestroyObject(Arbolmuerto[1]);
Arbolvivo[1] = CreateObject(763, -513.7998046875, -1470.7998046875, 10.800000190735, 0, 0, 0);
return 1;
}
public Tiempoarbolxx(playerid)
{
DestroyObject(Arbolmuerto[2]);
Arbolvivo[2] = CreateObject(766, -525.8994140625, -1473.5, 9.8999996185303, 0, 0, 0);
return 1;
}
public Tiempoarbolxxx(playerid)
{
DestroyObject(Arbolmuerto[3]);
Arbolvivo[3] = CreateObject(727, -514.69921875, -1457.099609375, 10.89999961853, 0, 0, 0);
return 1;
}

public espera(playerid)
{
    new string[128];
	if(TrabajoL[playerid]==true){
	SetPlayerAttachedObject(playerid, 8 , 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
	ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
	StopAudioStreamForPlayer(playerid);
	format(string, sizeof(string), "Recogiste %d de madera",gcorte[playerid]);
	SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}¡Lleva la madera a la granja para seguir su proceso! {CC0000}[Checkpoint Marcado]");
 	GameTextForPlayer(playerid,string,4000,3);
 	SetPlayerCheckpoint(playerid, -407.2330,-1426.3041,26.3147, 3.0);
	}
	return 1;
}

public arbol1(playerid)
{
	DestroyObject(Arbolvivo[0]);
	Arbolmuerto[0] = CreateObject(843, -529.7998046875, -1453.8994140625, 10.5, 0, 0, 0);
 	SetTimerEx("Tiempoarbol0", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 7);
  	return 1;
}

public arbol2(playerid)
{
	DestroyObject(Arbolvivo[1]);
 	Arbolmuerto[1] = CreateObject(843, -513.70001220703, -1472.3000488281, 11.300000190735, 0, 0, 87.989501953125);
 	SetTimerEx("Tiempoarbolx", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 7);
  	return 1;
}

public arbol3(playerid)
{
	DestroyObject(Arbolvivo[2]);
 	Arbolmuerto[2] = CreateObject(843, -525.79998779297, -1475.1999511719, 10.300000190735, 0, 0, 87.989501953125);
 	SetTimerEx("Tiempoarbolxx", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 7);
  	return 1;
}

public arbol4(playerid)
{
	DestroyObject(Arbolvivo[3]);
 	Arbolmuerto[3] = CreateObject(843, -516.19921875, -1457, 11.5, 0, 0, 0);
  	SetTimerEx("Tiempoarbolxxx", 10000, false, "i", playerid);
  	RemovePlayerAttachedObject(playerid, 7);
  	return 1;
}

////////////////robos tienda electroncia////////////////////
forward RobadoCosas(playerid);
public RobadoCosas(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 7.0,1009.2381,48.5105,55.3221))
	{
    YaRobo[playerid] = 1;
	new randomrobo = random(8);
	switch(randomrobo)
	{
	    case 0:
		{
		    SendClientMessage(playerid,-1,"Logras robar una TV Vieja.");
			RobarTVVieja(playerid);
			SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
			SendClientMessageEx(playerid, COLOR_GRAD2, "¡Recuerda usar /tirarrobo si te persige LAPD!");
		}
		case 1:
		{
		    SendClientMessage(playerid,-1,"Logras robar una TV Moderna.");
			RobarTVBuena(playerid);
			SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
			SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LAPD!");
		}
		case 2:
		{
		    SendClientMessage(playerid,-1,"Logras robar una Caja de Madera.");
		    RobarCaja(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LAPD!");
		}
		case 3:
		{
            SendClientMessage(playerid,-1,"Logras robar una PC.");
            RobarPC(playerid);
            SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
            SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LAPD!");
		}
		case 4:
		{
		    SendClientMessage(playerid,-1,"Logras robar una PlayStation vieja.");
		    RobarPlayVieja(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LAPD!");
		}
		case 5:
		{
		    SendClientMessage(playerid,-1,"Logras robar una PlayStation nueva.");
		    RobarPlayBuena(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LAPD!");
		}
		case 6:
		{
		    SendClientMessage(playerid,-1,"Logras robar una Videograbadora vieja.");
		    RobarVideoVieja(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LAPD!");
		}
		case 7:
		{
		    SendClientMessage(playerid,-1,"Logras robar una Videograbadora nueva.");
		    RobarVideoBuena(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LAPD!");
		}
	}
	}
	return 1;
}


public TimerATRP(playerid)
{
	if(Info[playerid][pEstado] == 1)
	{
	Info[playerid][pEstado] = 0;
	DeletePVar(playerid, "IsFrozen");
	TogglePlayerControllable(playerid, 1);
	}
	return 1;
}


public TimerKICK(playerid)
{
	Kick(playerid);
	return 1;
}
public TimerBAN(playerid)
{
Info[playerid][pBannedZC] = 2;
UnloadPlayerVehicles(playerid);
Kick(playerid);
return 1;
}

public TimerBANIP(playerid)
{
new playerip[32];
Info[playerid][pBannedZC] = 2;
GetPlayerIp(playerid, playerip, sizeof(playerip));
Kick(playerid);
AddBan(playerip);
return 1;
}



public TimerROB(playerid)
{
    Info[playerid][probita] = 0;
	return 1;
}

public Timermanubrio(playerid)
{
	manubrio[playerid] = 0;
	return 1;
}

public TimerESCAPE(playerid)
{
	if(Info[playerid][pEstado] == 0)
	{
	SetPlayerPos(playerid, 1316.454345, -1000.260192, 146.792053);
	}
return 1;
}

public TimerBANK(playerid)
{
 	new Float:x, Float:y, Float:z;
	GetObjectPos(BOMBA[playerid], x, y, z);
	CreateExplosion(x, y, z, 7, 2.0);
	DestroyObject(BOMBA[playerid]);
	SendClientMessage(playerid,-1,"{FF0000}>>{FFFFFF}La puerta fué destrozada, roba la caja fuerte.");
	pbomba[playerid] = 0;
	bombap[playerid] = 0;
	MoveDynamicObject(Pbankazo,1000.86, -1170.12, 7.67, 10);
 	SetTimer("BankClose", 900000, 0);
	return 1;
}
public TimerTICKET(playerid)
{
 Vortex[playerid] = 0;
 RemovePlayerFromVehicle(playerid);
 SendClientMessageEx(playerid, COLOR_GREY, "Se acabó el tiempo de tu ticket,compra otro!");
 return 1;
}

public TimerBANCO(playerid)
{
robobanco[playerid] = 0;
return 1;
}




public Tiempo(playerid)
{
		if(IsPlayerInRangeOfPoint(playerid, 25.0, 1316.454345,-1000.260192,146.792053))
		{
       	new string[128];
  		new Dinero = RandomEx(3000, 15000);
	   	format(string, sizeof(string), "Has logrado robar  $%d", Dinero);
	   	GameTextForPlayer(playerid,string,4000,3);
	   	SendClientMessage(playerid, COLOR_GREEN, "{FFFFFF}Escapá por la ventilación rápidamente: {2EDFFF}/Escapar");
	   	SetTimerEx("TimerBANCO",3600000,false,"d",playerid);
	   	SetPlayerCheckpoint(playerid, 1316.454345, -1000.260192, 146.792053, 5);
     	SetPlayerAttachedObject( playerid, 7, 1550, 1, 0.024558, -0.279748, -0.060589, 6.105677, 137.291320, 147.132202, 1.019888, 1.000000, 1.000000 );
	   	}
	   	return 1;
}
	stock RandomEx(min, max)
	{
    new randval = random(max - min) + min;
    return randval;
	}


forward sound_alarm();
public sound_alarm()
{
	PlaySoundForAll(6001);
	return 1;
}

forward alarm_off();
public alarm_off()
{
	PlaySoundForAll(13606);
	return 1;
}

stock OpenBlastDoor()
{
	MoveObject(blast_door_obj, 321.42, -1188.23, 81.57, 0.5);
	blast_door_open = 1;
	PlaySoundForAll(1153, 321.42, -1188.23, 81.57);
	SetTimer("close_blast_door", 10000, 0);
	return 1;
}

stock OpenPFAdoor()
{
	MoveObject(PFA_door_obj, 1545.61, -1627.85, 26.22, 0.5);
	PFA_door_open = 1;
	PlaySoundForAll(1153, 1545.58, -1627.96, 17.59);
	SetTimer("close_PFA_door", 10000, 0);
	return 1;
}

stock Openblackdoor()
{
	MoveObject(black_door_obj, 1643.27, -1714.88, 23.64, 0.5);
	black_door_open = 1;
	PlaySoundForAll(1153, 1643.27, -1714.88, 16.64);
	SetTimer("close_black_door", 10000, 0);
	return 1;
}

stock Opensubdoor()
{
	MoveObject(sub_door_obj, 2361.20, -1272.13, 26.64, 1);
	sub_door_open = 1;
	PlaySoundForAll(1153, 2361.20, -1272.13, 24.20);
	SetTimer("close_sub_door", 15000, 0);
	return 1;
}

stock PlaySoundForAll(soundid, Float:x=0.0, Float:y=0.0, Float:z=0.0)
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}
stock PickUpBoombox(playerid)
{
    foreach(Player, i)
	{
 		if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
   		{
     		StopStream(i);
		}
	}
	DeletePVar(playerid, "BBArea");
	DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
	DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
	DeletePVar(playerid, "PlacedBB"); DeletePVar(playerid, "BBLabel");
 	DeletePVar(playerid, "BBX"); DeletePVar(playerid, "BBY"); DeletePVar(playerid, "BBZ");
	DeletePVar(playerid, "BBInt");
	DeletePVar(playerid, "BBVW");
	DeletePVar(playerid, "BBStation");
	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(Player, i)
	{
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            StopStream(playerid);
	            SendClientMessage(playerid, COLOR_GREY, "* Te alejas de la zona y la música deja de oirse poco a poco");
				return 1;
	        }
	    }
	}
	return 1;
}

stock StopStream(playerid)
{
	DeletePVar(playerid, "pAudioStream");
    StopAudioStreamForPlayer(playerid);
}

stock PlayStream(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "pAudioStream")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "pAudioStream", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
    if(IsPlayerConnected(playerid))
 	{
 	    switch(weaponid)
 	    {
 	        case 0: BajarVida(playerid, 5);
 	        case 1: BajarVida(playerid, 10);
 	        case 15: BajarVida(playerid, 15);
 	        case 13: BajarVida(playerid, 15);
 	        case 12: BajarVida(playerid, 15);
 	        case 11: BajarVida(playerid, 15);
 	        case 10: BajarVida(playerid, 15);
 	        case 14: BajarVida(playerid, 15);
 	        case 3: BajarVida(playerid, 15);
 	        case 5: BajarVida(playerid, 15);
 	        case 6: BajarVida(playerid, 15);
 	        case 7: BajarVida(playerid, 15);
      		case 2: BajarVida(playerid, 15);
 	        case 8: BajarVida(playerid, 25);
 	        case 4: BajarVida(playerid, 30);
 	        case 22: BajarVida(playerid, 45);
 	        case 23: BajarVida(playerid, 45);
 			case 24: BajarVida(playerid, 60);
 			case 25: BajarVida(playerid, 50);
 			case 27: BajarVida(playerid, 70);
 			case 28: BajarVida(playerid, 10);
 			case 29: BajarVida(playerid, 18);
 			case 30: BajarVida(playerid, 25);
 			case 31: BajarVida(playerid, 35);
 			case 32: BajarVida(playerid, 10);
 			case 33: BajarVida(playerid, 35);
 			case 34: BajarVida(playerid, 100);
 		}
 	}
    return 1;
}
stock BajarVida(playerid,Float:vida)
{
 	new Float:Arm, Float:temporal, Float:Hp;
 	GetPlayerArmour(playerid, Arm);
 	if(Arm > 0.0)
 	{
	 	temporal = floatsub(Arm,vida);
	 	if(temporal < 0.0)
	 	{
	 	    SetPlayerArmour(playerid,0.0);
	 	    GetPlayerHealth(playerid, Hp);
	 	    SetPlayerHealth(playerid,floatsub(Hp,temporal));
	 	}
	 	else SetPlayerArmour(playerid, temporal);
 	}
 	else
 	{
 		GetPlayerHealth(playerid, Hp);
        SetPlayerHealth(playerid,floatsub(Hp,vida));
 	}
	return 1;
}

function UpdateBizz()
{
	new idx, File: file2, coordsstring[256];
	while (idx < sizeof(BizzInfo))
	{
		format(coordsstring, sizeof(coordsstring), "%d,%s,%s,%s,%f,%f,%f,%d,%d,%d,%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bName],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntrancex],
		BizzInfo[idx][bEntrancey],
		BizzInfo[idx][bEntrancez],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bTillEx]);

		if(idx == 0)	file2 = fopen("bizz.cfg", io_write);
		else			file2 = fopen("bizz.cfg", io_append);

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
}

function OnGlobalBizzTextdrawUpdate()
{
    for(new b = 0; b < sizeof(BizzInfo); b++)
	{
	    OnBizzTextdrawUpdate(b);
 	}
 	return 1;
}

function OnBizzTextdrawUpdate(bid)
{
    new string[256];
	if(BizzInfo[bid][bOwned] == 0)
 	{
 		DestroyDynamic3DTextLabel(Bizz3DText[bid]);
  		DestroyDynamicPickup(BizzPickup[bid]);
   		format(string, sizeof(string), "{7D997D}¡Negocio en Venta!\n{2EDFFF}%s\n{7D997D}Precio:{2EDFFF} %d$\n{7D997D}Nivel:{2EDFFF} %d\n{7D997D}ID:{2EDFFF} %d\n{7D997D}CMD: {2EDFFF}/Comprarnegocio",BizzInfo[bid][bName],BizzInfo[bid][bBuyPrice],BizzInfo[bid][bLevelNeeded],bid);
		Bizz3DText[bid] = CreateDynamic3DTextLabel(string,COLOR_BLUE, BizzInfo[bid][bEntrancex], BizzInfo[bid][bEntrancey], BizzInfo[bid][bEntrancez],5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0);
		BizzPickup[bid] = CreateDynamicPickup(1274, 1, BizzInfo[bid][bEntrancex], BizzInfo[bid][bEntrancey], BizzInfo[bid][bEntrancez]);
	}
	else
	{
 		DestroyDynamic3DTextLabel(Bizz3DText[bid]);
  		DestroyDynamicPickup(BizzPickup[bid]);
   		format(string, sizeof(string), "{2EDFFF}%s\n{7D997D}Dueño:{2EDFFF} %s\n{7D997D}Extorcion:{2EDFFF} %s",BizzInfo[bid][bName],BizzInfo[bid][bOwner],BizzInfo[bid][bExtortion]);
		Bizz3DText[bid] = CreateDynamic3DTextLabel(string,COLOR_BLUE, BizzInfo[bid][bEntrancex], BizzInfo[bid][bEntrancey], BizzInfo[bid][bEntrancez],5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0);
		BizzPickup[bid] = CreateDynamicPickup(1274, 1, BizzInfo[bid][bEntrancex], BizzInfo[bid][bEntrancey], BizzInfo[bid][bEntrancez]);
	}
	return 1;
}

SellBizz(bizzid)
{
	BizzInfo[bizzid][bOwned] = 0;
	strmid(BizzInfo[bizzid][bOwner], "El Estado", 0, strlen("El Estado"), 64);
	strmid(BizzInfo[bizzid][bExtortion], "Nadie", 0, strlen("Nadie"), 32);
	BizzInfo[bizzid][bTill] = 0;
	BizzInfo[bizzid][bTillEx] = 0;
	UpdateBizz();
	OnBizzTextdrawUpdate(bizzid);
	return 1;
}

function TillTimer()
{
	for(new b = 0; b < sizeof(BizzInfo); b++)
	{
	    new bearn = BizzInfo[b][bBuyPrice]/500;
		Till(b, bearn);
	}
}

stock Till(bizzid, amount)
{
	if(BizzInfo[bizzid][bOwned] == 1){
        if(strcmp("Nadie", BizzInfo[bizzid][bExtortion], true ) == 0){
        	BizzInfo[bizzid][bTill] += amount;
       	}
       	else{
       	    new money = amount / 4;
			BizzInfo[bizzid][bTill] += money * 3;
			BizzInfo[bizzid][bTillEx] += money;
		}
	}
	return 1;
}

function CheckBizz(playerid, earn)
{
	if(PlayerToPoint(10.0,playerid,499.9703,-20.3358,1000.6797))    Till(0, earn);
	if(PlayerToPoint(10.0,playerid,221.7099,299.1493,955.9631))  Till(1, earn);
 	if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))     Till(2, earn);
 	if(PlayerToPoint(10.0,playerid,377.0499,-67.4344,1001.5078))     Till(3, earn);
 	if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))     Till(4, earn);
 	if(PlayerToPoint(10.0,playerid,375.8651,-118.9402,1001.4995))     Till(5, earn);
 	if(PlayerToPoint(10.0,playerid,379.2390,-190.1861,1000.6328))     Till(6, earn);
 	if(PlayerToPoint(10.0,playerid,681.4490,-459.2420,-25.6172))     Till(7, earn);
 	if(PlayerToPoint(10.0,playerid,496.3752,-76.0410,998.7578))     Till(8, earn);
 	if(PlayerToPoint(10.0,playerid,-22.3260,-138.6221,1003.5469))     Till(9, earn);
 	if(PlayerToPoint(10.0,playerid,-25.6448,-56.6718,1003.5469))     Till(10, earn);
	if(PlayerToPoint(10.0,playerid,-29.3554,-28.8020,1003.5573))   Till(11,earn);
	if(PlayerToPoint(10.0,playerid,-28.7605,-185.1333,1003.5469))   Till(12,earn);
	if(PlayerToPoint(10.0,playerid,-28.0818,-89.9434,1003.5469))   Till(13,earn);
	if(PlayerToPoint(5.0,playerid,-60.2884,59.0147,1023.5759))   Till(14,earn);
	if(PlayerToPoint(5.0,playerid,-59.3870,58.2315,1004.8693))   Till(15,earn);
	if(PlayerToPoint(5.0,playerid,-60.4091,58.8382,1043.5759))   Till(16,earn);
	if(PlayerToPoint(5.0,playerid,-60.1126,58.8346,1063.5759))   Till(17,earn);
	if(PlayerToPoint(5.0,playerid,-60.4153,58.8366,1083.5759))   Till(18,earn);
	if(PlayerToPoint(5.0,playerid,-60.9187,58.8351,1098.57599))   Till(19,earn);
	if(PlayerToPoint(10.0,playerid,207.5627,-103.7291,1005.2578))   Till(20,earn);
	if(PlayerToPoint(10.0,playerid,203.9068,-41.0728,1001.8047))   Till(21,earn);
	if(PlayerToPoint(10.0,playerid,214.4470,-7.6471,1001.2109))   Till(22,earn);
	if(PlayerToPoint(10.0,playerid,161.3765,-83.8416,1001.8047))   Till(23,earn);
	if(PlayerToPoint(10.0,playerid,202.6777,-163.0623,1000.5306))   Till(24,earn);
	if(PlayerToPoint(10.0,playerid,499.9703,-20.3358,1000.6797))    Till(25, earn);
	if(PlayerToPoint(10.0,playerid,221.7099,299.1493,955.9631))  Till(26, earn);
 	if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))     Till(27, earn);
 	if(PlayerToPoint(10.0,playerid,377.0499,-67.4344,1001.5078))     Till(28, earn);
 	if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))     Till(29, earn);
 	if(PlayerToPoint(10.0,playerid,375.8651,-118.9402,1001.4995))     Till(30, earn);
 	if(PlayerToPoint(10.0,playerid,379.2390,-190.1861,1000.6328))     Till(31, earn);
 	if(PlayerToPoint(10.0,playerid,681.4490,-459.2420,-25.6172))     Till(32, earn);
 	if(PlayerToPoint(10.0,playerid,496.3752,-76.0410,998.7578))     Till(33, earn);
 	if(PlayerToPoint(10.0,playerid,-22.3260,-138.6221,1003.5469))     Till(34, earn);
 	if(PlayerToPoint(10.0,playerid,-25.6448,-56.6718,1003.5469))     Till(35, earn);
	if(PlayerToPoint(10.0,playerid,-29.3554,-28.8020,1003.5573))   Till(36,earn);
	if(PlayerToPoint(10.0,playerid,-28.7605,-185.1333,1003.5469))   Till(37,earn);
	if(PlayerToPoint(10.0,playerid,-28.0818,-89.9434,1003.5469))   Till(38,earn);
	if(PlayerToPoint(5.0,playerid,-60.2884,59.0147,1023.5759))   Till(39,earn);
	return 0;
}

IsAtBarr(playerid)
{
    if(IsPlayerConnected(playerid)){
        if(PlayerToPoint(10.0,playerid,221.7099,299.1493,955.9631))         return 1;
		else if(PlayerToPoint(10.0,playerid,681.2422,-453.6727,-25.6172))   return 1;
		else if(PlayerToPoint(10.0,playerid,377.0499,-67.4344,1001.5078)) return 1;
		else if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))  return 1;
		else if(PlayerToPoint(10.0,playerid,375.8651,-118.9402,1001.4995)) return 1;
		else if(PlayerToPoint(10.0,playerid,379.2390,-190.1861,1000.6328))   return 1;
		else if(PlayerToPoint(10.0,playerid,681.4490,-459.2420,-25.6172))    return 1;
		else if(PlayerToPoint(25.0,playerid,1920.0979,-1865.1298,13.6559))  return 1;
		else if(PlayerToPoint(10.0,playerid,1392.5297,-1893.1754,17.4266))  return 1;
		else if(PlayerToPoint(10.0,playerid,496.3752,-76.0410,998.7578))  return 1;
		else if(PlayerToPoint(10.0,playerid,2887.80933,-1944.59534,9.15788))  return 1; //Comida de la concesionaria de botes
		else if(PlayerToPoint(10.0,playerid,355.57077,-1846.73706,4.99998))  return 1; //Playa 1
		else if(PlayerToPoint(10.0,playerid,355.57080,-1858.60022,4.99990))  return 1; //Playa 2

	}
	return 0;
}

IsAtRepVip(playerid)
{
    if(PlayerToPoint(12.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(10.0,playerid,1944.3260,-1772.9254,13.3906))
		{// Temple
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391))
		{// Flint County
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1625.0463,-2167.6428,13.4402) || PlayerToPoint(12.0,playerid,-1676.6323,414.0262,6.9484))
		{// LIBRE!!!!
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,1637.0149,2331.5129,10.8722) || PlayerToPoint(6.0,playerid,1636.6686,2325.8711,10.8722))
		{// LIBRE!!!!
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,1636.6140,2320.6423,10.8722) || PlayerToPoint(12.0,playerid,1595.5337,2198.9404,10.8203)|| PlayerToPoint(6.0,playerid,1839.58, -2522.52, 13.55))
		{// LIBRE!!!!
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,656.4265,-559.8610,16.5015) || PlayerToPoint(8.0,playerid,656.3797,-570.4138,16.5015) || PlayerToPoint(6.0,playerid,2294.2227,-1911.0593,13.5971) )
		{// Dillimore
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1359.0695,-1807.6924,13.6298) || PlayerToPoint(8.0,playerid,656.3797,-570.4138,16.5015) || PlayerToPoint(6.0,playerid,2294.2227,-1911.0593,13.5971) )
		{// Commerce
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1359.6958,-1819.1261,13.6528) || PlayerToPoint(6.0,playerid,656.3797,-570.4138,16.5015) || PlayerToPoint(6.0,playerid,2294.2227,-1911.0593,13.5971) )
		{//Commerce
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,583.529724,1274.296875,11.847764))
		{//Gas del tren
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,203.050247,-1440.544433,13.105228))
		{// Rodeo
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,-1605.718383,-2714.178955,48.533473))
		{// Wetstone
		    return 1;
		}
		else if(PlayerToPoint(9.0,playerid,2114.010498,920.246398,10.820312))
		{// Las Vegas
		    return 1;

	}
	return 0;
}
/*function ShowDNIFalse(playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
	    new string[64], sex[2];
	    if(Info[playerid][pSex] == 1) { sex = "M"; }
   		else								{ sex = "F"; }

	    Message(targetid, 0x0D86FFFF, "|___________ Documento Nacional de Identidad ___________|");
   		format(string, sizeof(string), "   Nombre: %s", Info[playerid][pDNIName]);
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   Sexo: %s", sex);
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   Edad: %d     Fecha Nacimiento: %d", Info[playerid][pAge], 2012-Info[playerid][pAge]);
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   Estado Civil: Soltero");
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   Nº DNI: %d", Info[playerid][pDNIFalse]);
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   IDSA%d%s<%s>%d-%d", Info[playerid][pDNIFalse],sex,Info[playerid][pDNIFalse],2012-Info[playerid][pAge],Info[playerid][pAge]);
   		Message(targetid, COLOR_GRAD2, string);
   		Message(targetid, 0x0D86FFFF, "|_________________ ·------------------------------· _________________|");
	}
}*/

//***dni por textdraw***
function ShowDNIFalse(playerid,giveplayerid)
{
        if(IsPlayerConnected(playerid)&&IsPlayerConnected(giveplayerid))
		{
	    new string[64], sex[18], otext[36];
	    if(Info[playerid][pSex] == 1) { sex = "Hombre"; }
   		if(Info[playerid][pSex] == 2) { sex = "Mujer"; }
   		if(Info[playerid][pOrigin] == 2) { otext = "Los Angeles"; }
		else if(Info[playerid][pOrigin] == 1) { otext = "Los Angeles"; }

        format(string, sizeof(string), "%s", Info[playerid][pDNIName]);
		PlayerTextDrawSetString(giveplayerid,DNI5[giveplayerid], string);

        format(string, sizeof(string), "%d", Info[playerid][pDNI]);
		PlayerTextDrawSetString(giveplayerid,DNI3[giveplayerid], string);

		format(string, sizeof(string), "%s", sex);
		PlayerTextDrawSetString(giveplayerid,DNI9[giveplayerid], string);

		format(string, sizeof(string), "%d", Info[playerid][pAge]);
		PlayerTextDrawSetString(giveplayerid,DNI7[giveplayerid], string);

		format(string, sizeof(string), "%s", otext);
		PlayerTextDrawSetString(giveplayerid,DNI11[giveplayerid], string);

   		PlayerTextDrawSetPreviewModel(giveplayerid,DNI12[giveplayerid], Info[playerid][pChar]);

		PlayerTextDrawShow(giveplayerid, DNI0[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI1[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI2[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI3[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI4[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI5[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI6[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI7[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI8[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI9[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI10[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI11[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI12[giveplayerid]);
		SetTimerEx("qdni",10000,false,"i",giveplayerid);
	}
}
//**********************
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == MueblesObj)
	{
	    if(response)
		{
	        if(Info[playerid][pMuebles][0] == -1)
	        {
				Info[playerid][pMuebles][0] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 1.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][1] == -1)
	        {
				Info[playerid][pMuebles][1] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 2.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][2] == -1)
	        {
				Info[playerid][pMuebles][2] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 3.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][3] == -1)
	        {
				Info[playerid][pMuebles][3] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 4.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][4] == -1)
	        {
				Info[playerid][pMuebles][4] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 5.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][5] == -1)
	        {
				Info[playerid][pMuebles][5] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 6.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][6] == -1)
	        {
				Info[playerid][pMuebles][6] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 7.");
				return 1;
			}
   			else if(Info[playerid][pMuebles][7] == -1)
	        {
				Info[playerid][pMuebles][7] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 8.");
				return 1;
			}
   			else if(Info[playerid][pMuebles][8] == -1)
	        {
				Info[playerid][pMuebles][8] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 9.");
				return 1;
			}
   			else if(Info[playerid][pMuebles][9] == -1)
	        {
				Info[playerid][pMuebles][9] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 10.");
				return 1;
			}
   			else if(Info[playerid][pMuebles][10] == -1)
	        {
				Info[playerid][pMuebles][10] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 11.");
				return 1;
			} else return SendClientMessageEx(playerid, -1, "No tienes más espacio");

   		}
	}
	// Comprar Skin
	if(listid == skinlist)
	{
	    if(response)
	    {
      	if(modelid >= 274 && modelid <= 288 || modelid >= 265 && modelid <= 267 || modelid == 71)
		{
			SendClientMessage(playerid, COLOR_GREY, "* Skin no permitida.");
			return 1;
			}
		SendClientMessage(playerid, COLOR_FADE1, "Vendedor/a dice: Gracias por comprar aquí, vuelva pronto por más ropa!");
  		SetPlayerSkin(playerid, modelid);
 		GivePlayerCash(playerid,-100);
	  	}
	 	else SendClientMessage(playerid, COLOR_FADE1, "Vendedor/a dice: Si te interesa una vestimenta no dudes consultar.");
    	return 1;
	//***sistema muebles***
	}
	return 1;
}

forward TimerAuto(playerid);
public TimerAuto(playerid)
{
SendClientMessageToAll(0xFFFFFFF,AutoMensajes[random(sizeof(AutoMensajes))]);
}
public Clock(playerid)
{
    new string[256];
    new string2[256];
    new year, month, day;
    new hour, minute, second;
    getdate(year, month, day);
    gettime(hour,minute,second);
    new mtext[20];
    getdate(year, month, day);
    if(month == 1) { mtext = "Enero"; }
    else if(month == 2) { mtext = "Febrero"; }
    else if(month == 3) { mtext = "Marzo"; }
    else if(month == 4) { mtext = "Abril"; }
    else if(month == 5) { mtext = "Mayo"; }
    else if(month == 6) { mtext = "Junio"; }
    else if(month == 7) { mtext = "Julio"; }
    else if(month == 8) { mtext = "Agosto"; }
    else if(month == 9) { mtext = "Septiembre"; }
    else if(month == 10) { mtext = "Octubre"; }
    else if(month == 11) { mtext = "Noviembre"; }
    else if(month == 12) { mtext = "Diciembre"; }
    format(string, sizeof(string), "%d de %s del %d", day, mtext, year);
    TextDrawSetString(Text:FechaD, string);
    format(string2, sizeof(string2), "%d:%d:%d", hour, minute, second);
    TextDrawSetString(Text:TiempoD, string2);
}
stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);
//**security**
public OnPlayerCleoDetected(playerid, cleoid)
{
#if defined AntiCleo 1
switch(cleoid)
{
case CLEO_CARWARP:
{
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por posible intento de Car Warp.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - Seguridad V2: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado por Seguridad V2. Razón: Posible Car Warp.", Nombre);
SendClientMessageToAll(Gris, Texto);
Kick(playerid);
}
case CLEO_CARSWING:
{
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
Menu[0]='\0';

strcat(Menu, "{FFFFFF} Expulsado por posible intento de Car Swing.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - Seguridad V2: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado por Seguridad V2. Razón: Posible Car Swing.", Nombre);
SendClientMessageToAll(Gris, Texto);
Kick(playerid);
}
case CLEO_CAR_PARTICLE_SPAM:
{
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por posible intento de Cleo Spam.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - Seguridad V2: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado por Seguridad V2. Razón: Posible Cleo Spam.", Nombre);
SendClientMessageToAll(Gris, Texto);
Kick(playerid);
}
}
#endif
return 1;
}
stock DetectarIP(IP[])
{
new Codigo = 0;
for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && !strcmp(ObtenerIP(i), IP)) Codigo++;
return Codigo;
}
//==============================================================================
// Stock - ObtenerIP.
//==============================================================================
stock ObtenerIP(playerid)
{
new IP[16];
GetPlayerIp(playerid, IP, sizeof(IP));
return IP;
}
//==============================================================================
// Stock - BanearBots.
//==============================================================================
stock BanearBots(playerid)
{
#if defined AntiBot 1
new IP[32];
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
GetPlayerIp(playerid, IP, sizeof(IP));
for(new i = 0, PingUp = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && !BotServidor[i])
{
PingUp = GetPlayerPing(i);
if(i == playerid || !strcmp(IP, ObtenerIP(i)) || PingUp <= 0 || PingUp >= 50000)
{
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Baneado por intento de Bot.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - Seguridad V2: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido baneado por Seguridad V2. Razón: Posible Bot.", Nombre);
SendClientMessageToAll(Gris, Texto);
BanEx(playerid, "[<!>] Baneado por intento de Bot.");
if(Barra[i] != -1)
{
KillTimer(Barra[i]);
Barra[i] = -1;
}
}
}
format(IP, sizeof(IP), "banip %s", IP);
return SendRconCommand(IP);
#endif
}
//==============================================================================
// Stock - IDMayor.
//==============================================================================
stock IDMayor(exceptof = INVALID_PLAYER_ID)
{
new MaxID = 0;
for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && i != exceptof && i > MaxID) MaxID = i;
return MaxID;
}
//==============================================================================
// Stock - AutoProhibido.
//==============================================================================
stock AutoProhibido(playerid)
{
new Auto = GetPlayerVehicleID(playerid);
#define MAX_INVALID_NOS_VEHICLES 52
new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
{
581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 417, 425, 469, 487, 512, 520, 563, 593,
509, 481, 510, 472, 473, 493, 520, 595, 484, 430, 453, 432, 476, 497, 513, 533, 577,
452, 446, 447, 454, 590, 569, 537, 538, 570, 449, 519, 460, 488, 511, 519, 548, 592
};
if(IsPlayerInAnyVehicle(playerid))
{
for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
{
if(GetVehicleModel(Auto) == InvalidNosVehicles[i]) return true;
}
}
return false;
}
//==============================================================================
// Stock - AutoCrash.
//==============================================================================
stock AutoCrash(modelid, componentid)
{
if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
return true;

switch (modelid)
{
case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
case 409: return (componentid == 1009);
case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
case 506: return (componentid == 1009);
case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
}
return false;
}
//==============================================================================
// Stock - ArmaProhibida.
//==============================================================================
stock ArmaProhibida(playerid)
{
new Arma = GetPlayerWeapon(playerid);
if( /*Arma == 39||*/ Arma == 38|| Arma == 37|| Arma == 27|| Arma == 26/*|| Arma == 44|| Arma == 45*/)
{
return true;
}
return false;
}
// ® SkyStudios SA-MP: Todos los derechos reservados.
//************
public Camara()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	if(camaraon[i] > 0 && IsPlayerInAnyVehicle(i))
	{
		AttachObjectToVehicle(FPS[i], GetPlayerVehicleID(i), 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
    	AttachCameraToObject(i, FPS[i]);
	}
	else if(camaraon[i] > 0 && !IsPlayerInAnyVehicle(i))
	{
		AttachObjectToPlayer(FPS[i], i, 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
    	AttachCameraToObject(i, FPS[i]);
	}
	}
	return 1;
}
stock DetectarSpam(SPAM[])
{
    new SSPAM;
    new CUENTAP,CUENTAN,CUENTAW,CUENTADP,CUENTAGB;
	for(SSPAM = 0; SSPAM < strlen(SPAM); SSPAM ++)
	{
	    if(SPAM[SSPAM] == '.') CUENTAP ++; //Cuenta los Puntos
	    if(SPAM[SSPAM] == 'w' || SPAM[SSPAM] == 'W') CUENTAW ++; //Cuenta las "W"
	    if(SPAM[SSPAM] == ':') CUENTADP ++; //Cuenta los ":"
	    if(SPAM[SSPAM] == '_') CUENTAGB ++; //Cuenta los "_"
	}
 	if(CUENTAP >= 3 && CUENTAN >= 4) return 1;
 	if(CUENTAW >= 3) return 1;
 	if(CUENTAN >= 3) return 1;
 	if(CUENTAGB >= 2 && CUENTAN >= 3) return 1;
 	if(strfind(SPAM, ".com", true) != -1 || strfind(SPAM, ".com.ar", true) != -1 || strfind(SPAM, ".org", true) != -1 || strfind(SPAM, ".net", true) != -1 || strfind(SPAM, ".esy.es", true) != -1 || strfind(SPAM, ":7777", true) != -1 || strfind(SPAM, ":8888", true) != -1 || strfind(SPAM, ".es", true) != -1 || strfind(SPAM, ".tk", true) != -1) return 1;
 	if(CUENTADP >= 1 && CUENTAN >= 4) return 1;
 	return 0;
}
//***sistema muebles***
stock ColocarMueblesCasas(){
   	for(new MueblesI = 1; MueblesI < sizeof(HouseInfo); MueblesI++){
	   	if(HouseInfo[MueblesI][hMuebles][0] > 0){
	    HouseInfo[MueblesI][hMuebleId][0] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][0], HouseInfo[MueblesI][hMueblesPOSX][0], HouseInfo[MueblesI][hMueblesPOSY][0], HouseInfo[MueblesI][hMueblesPOSZ][0], HouseInfo[MueblesI][hMueblesPOSRx][0], HouseInfo[MueblesI][hMueblesPOSRy][0], HouseInfo[MueblesI][hMueblesPOSRz][0], HouseInfo[MueblesI][hMuebleVW][0], HouseInfo[MueblesI][hMuebleINT][0], -1, 200.0);
		}
		if(HouseInfo[MueblesI][hMuebles][1] > 0){
		HouseInfo[MueblesI][hMuebleId][1] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][1], HouseInfo[MueblesI][hMueblesPOSX][1], HouseInfo[MueblesI][hMueblesPOSY][1], HouseInfo[MueblesI][hMueblesPOSZ][1], HouseInfo[MueblesI][hMueblesPOSRx][1], HouseInfo[MueblesI][hMueblesPOSRy][1], HouseInfo[MueblesI][hMueblesPOSRz][1], HouseInfo[MueblesI][hMuebleVW][1], HouseInfo[MueblesI][hMuebleINT][1], -1, 200.0);
		}
	 	if(HouseInfo[MueblesI][hMuebles][2] > 0){
		HouseInfo[MueblesI][hMuebleId][2] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][2], HouseInfo[MueblesI][hMueblesPOSX][2], HouseInfo[MueblesI][hMueblesPOSY][2], HouseInfo[MueblesI][hMueblesPOSZ][2], HouseInfo[MueblesI][hMueblesPOSRx][2], HouseInfo[MueblesI][hMueblesPOSRy][2], HouseInfo[MueblesI][hMueblesPOSRz][2], HouseInfo[MueblesI][hMuebleVW][2], HouseInfo[MueblesI][hMuebleINT][2], -1, 200.0);
		}
	 	if(HouseInfo[MueblesI][hMuebles][3] > 0){
		HouseInfo[MueblesI][hMuebleId][3] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][3], HouseInfo[MueblesI][hMueblesPOSX][3], HouseInfo[MueblesI][hMueblesPOSY][3], HouseInfo[MueblesI][hMueblesPOSZ][3], HouseInfo[MueblesI][hMueblesPOSRx][3], HouseInfo[MueblesI][hMueblesPOSRy][3], HouseInfo[MueblesI][hMueblesPOSRz][3], HouseInfo[MueblesI][hMuebleVW][3], HouseInfo[MueblesI][hMuebleINT][3], -1, 200.0);
		}
		if(HouseInfo[MueblesI][hMuebles][4] > 0){
		HouseInfo[MueblesI][hMuebleId][4] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][4], HouseInfo[MueblesI][hMueblesPOSX][4], HouseInfo[MueblesI][hMueblesPOSY][4], HouseInfo[MueblesI][hMueblesPOSZ][4], HouseInfo[MueblesI][hMueblesPOSRx][4], HouseInfo[MueblesI][hMueblesPOSRy][4], HouseInfo[MueblesI][hMueblesPOSRz][4], HouseInfo[MueblesI][hMuebleVW][4], HouseInfo[MueblesI][hMuebleINT][4], -1, 200.0);
		}
		if(HouseInfo[MueblesI][hMuebles][5] > 0){
	 	HouseInfo[MueblesI][hMuebleId][5] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][5], HouseInfo[MueblesI][hMueblesPOSX][5], HouseInfo[MueblesI][hMueblesPOSY][5], HouseInfo[MueblesI][hMueblesPOSZ][5], HouseInfo[MueblesI][hMueblesPOSRx][5], HouseInfo[MueblesI][hMueblesPOSRy][5], HouseInfo[MueblesI][hMueblesPOSRz][5], HouseInfo[MueblesI][hMuebleVW][5], HouseInfo[MueblesI][hMuebleINT][5], -1, 200.0);
		}
	 	if(HouseInfo[MueblesI][hMuebles][6] > 0){
		HouseInfo[MueblesI][hMuebleId][6] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][6], HouseInfo[MueblesI][hMueblesPOSX][6], HouseInfo[MueblesI][hMueblesPOSY][6], HouseInfo[MueblesI][hMueblesPOSZ][6], HouseInfo[MueblesI][hMueblesPOSRx][6], HouseInfo[MueblesI][hMueblesPOSRy][6], HouseInfo[MueblesI][hMueblesPOSRz][6], HouseInfo[MueblesI][hMuebleVW][6], HouseInfo[MueblesI][hMuebleINT][6], -1, 200.0);
		}
 		if(HouseInfo[MueblesI][hMuebles][7] > 0){
		HouseInfo[MueblesI][hMuebleId][7] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][7], HouseInfo[MueblesI][hMueblesPOSX][7], HouseInfo[MueblesI][hMueblesPOSY][7], HouseInfo[MueblesI][hMueblesPOSZ][7], HouseInfo[MueblesI][hMueblesPOSRx][7], HouseInfo[MueblesI][hMueblesPOSRy][7], HouseInfo[MueblesI][hMueblesPOSRz][7], HouseInfo[MueblesI][hMuebleVW][7], HouseInfo[MueblesI][hMuebleINT][7], -1, 200.0);
		}
 		if(HouseInfo[MueblesI][hMuebles][8] > 0){
		HouseInfo[MueblesI][hMuebleId][8] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][8], HouseInfo[MueblesI][hMueblesPOSX][8], HouseInfo[MueblesI][hMueblesPOSY][8], HouseInfo[MueblesI][hMueblesPOSZ][8], HouseInfo[MueblesI][hMueblesPOSRx][8], HouseInfo[MueblesI][hMueblesPOSRy][8], HouseInfo[MueblesI][hMueblesPOSRz][8], HouseInfo[MueblesI][hMuebleVW][8], HouseInfo[MueblesI][hMuebleINT][8], -1, 200.0);
		}
 		if(HouseInfo[MueblesI][hMuebles][9] > 0){
		HouseInfo[MueblesI][hMuebleId][9] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][9], HouseInfo[MueblesI][hMueblesPOSX][9], HouseInfo[MueblesI][hMueblesPOSY][9], HouseInfo[MueblesI][hMueblesPOSZ][9], HouseInfo[MueblesI][hMueblesPOSRx][9], HouseInfo[MueblesI][hMueblesPOSRy][9], HouseInfo[MueblesI][hMueblesPOSRz][9], HouseInfo[MueblesI][hMuebleVW][9], HouseInfo[MueblesI][hMuebleINT][9], -1, 200.0);
		}
 		if(HouseInfo[MueblesI][hMuebles][10] > 0){
		HouseInfo[MueblesI][hMuebleId][10] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][10], HouseInfo[MueblesI][hMueblesPOSX][10], HouseInfo[MueblesI][hMueblesPOSY][10], HouseInfo[MueblesI][hMueblesPOSZ][10], HouseInfo[MueblesI][hMueblesPOSRx][10], HouseInfo[MueblesI][hMueblesPOSRy][10], HouseInfo[MueblesI][hMueblesPOSRz][10], HouseInfo[MueblesI][hMuebleVW][10], HouseInfo[MueblesI][hMuebleINT][10], -1, 200.0);
		}
	}
}

function SituarObjetoCASAARCH(playerid, houseid, idobjetom, IDOBJETOUS, Float: X,Float: Y,Float: Z,Float: rX,Float: rY,Float: rZ, IDSLOT)
{
	Info[playerid][pMuebles][IDSLOT] = -1;
	HouseInfo[houseid][hMuebles][idobjetom] = IDOBJETOUS;
	HouseInfo[houseid][hMueblesPOSX][idobjetom] = X;
 	HouseInfo[houseid][hMueblesPOSY][idobjetom] = Y;
	HouseInfo[houseid][hMueblesPOSZ][idobjetom] = Z;
	HouseInfo[houseid][hMueblesPOSRx][idobjetom] = rX;
	HouseInfo[houseid][hMueblesPOSRy][idobjetom] = rY;
	HouseInfo[houseid][hMueblesPOSRz][idobjetom] = rZ;
	return 1;
}

function PonerNuevoMueble(playerid, houseid, IDSLOT)
{
	HouseInfo[houseid][hMuebleId][IDSLOT] = CreateDynamicObject(HouseInfo[houseid][hMuebles][IDSLOT], HouseInfo[houseid][hMueblesPOSX][IDSLOT], HouseInfo[houseid][hMueblesPOSY][IDSLOT], HouseInfo[houseid][hMueblesPOSZ][IDSLOT], HouseInfo[houseid][hMueblesPOSRx][IDSLOT], HouseInfo[houseid][hMueblesPOSRy][IDSLOT], HouseInfo[houseid][hMueblesPOSRz][IDSLOT], HouseInfo[houseid][hMuebleVW][IDSLOT], HouseInfo[houseid][hMuebleINT][IDSLOT], -1, 200.0);
	return 1;
}
function GuardarmuebleUserCASA(playerid, CASA){
    for(new SLOTS = 0; SLOTS< 7 ; SLOTS++){
		if(Info[playerid][pMuebles][SLOTS] < 1){
			if(HouseInfo[CASA][hMuebles][0] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][0];
	  			HouseInfo[CASA][hMuebles][0] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][0]);
	  		}
			else if(HouseInfo[CASA][hMuebles][1] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][1];
	  			HouseInfo[CASA][hMuebles][1] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][0]);
	  		}
			else if(HouseInfo[CASA][hMuebles][2] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][2];
	  			HouseInfo[CASA][hMuebles][2] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][2]);
	  		}
			else if(HouseInfo[CASA][hMuebles][3] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][3];
	  			HouseInfo[CASA][hMuebles][3] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][3]);
	  		}
			else if(HouseInfo[CASA][hMuebles][4] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][4];
	  			HouseInfo[CASA][hMuebles][4] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][4]);
	  		}
			else if(HouseInfo[CASA][hMuebles][5] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][5];
	  			HouseInfo[CASA][hMuebles][5] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][5]);
	  		}
			else if(HouseInfo[CASA][hMuebles][6] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][6];
	  			HouseInfo[CASA][hMuebles][6] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][6]);
	  		}
			else if(HouseInfo[CASA][hMuebles][7] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][7];
	  			HouseInfo[CASA][hMuebles][7] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][7]);
	  		}
			else if(HouseInfo[CASA][hMuebles][8] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][8];
	  			HouseInfo[CASA][hMuebles][8] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][8]);
	  		}
			else if(HouseInfo[CASA][hMuebles][9] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][9];
	  			HouseInfo[CASA][hMuebles][9] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][9]);
	  		}
			else if(HouseInfo[CASA][hMuebles][10] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][10];
	  			HouseInfo[CASA][hMuebles][10] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][10]);
	  		}
 		}
	}
   	SendClientMessageEx(playerid, COLOR_GREY, "Los muebles de la casa han sido guardados en las ranuras disponibles.");
	return 1;
}

function GuardarmuebleUser(playerid, CASA, IDSLOT)
{
	if(Info[playerid][pMuebles][0] < 1)
	{
		Info[playerid][pMuebles][0] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 1 de tus muebles");
  		return 1;
	}
   	else if(Info[playerid][pMuebles][1] < 1)
 	{
		Info[playerid][pMuebles][1] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 2 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][2] < 1)
 	{
		Info[playerid][pMuebles][2] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 3 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][3] < 1)
 	{
		Info[playerid][pMuebles][3] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 4 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][4] < 1)
 	{
		Info[playerid][pMuebles][4] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 5 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][5] < 1)
 	{
		Info[playerid][pMuebles][5] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 6 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][6] < 1)
 	{
		Info[playerid][pMuebles][6] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 7 de tus muebles");
   	}
	else if(Info[playerid][pMuebles][7] < 1)
 	{
		Info[playerid][pMuebles][7] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 8 de tus muebles");
   	}
	else if(Info[playerid][pMuebles][8] < 1)
 	{
		Info[playerid][pMuebles][8] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 9 de tus muebles");
   	}
	else if(Info[playerid][pMuebles][9] < 1)
 	{
		Info[playerid][pMuebles][9] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 10 de tus muebles");
   	}
	else if(Info[playerid][pMuebles][10] < 1)
 	{
		Info[playerid][pMuebles][10] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 11 de tus muebles");
   	}
   	else SendClientMessageEx(playerid, COLOR_GREY, "No tienes espacio para guardar más muebles, deje algunos en su casa o tirelos.");
	return 1;
}

stock InfoCasaMuebles(playerid){
	SendClientMessageEx(playerid, -1, "{BFE44E}- INFORMACIÓN SOBRE MUEBLES.");
	SendClientMessageEx(playerid, -1, "{BFE44E}» {FFFFFF}HIT: Presiona {BFE44E}'ESPACIO' {FFFFFF}para cambiar la posición de la cámara para la edición.");
	SendClientMessageEx(playerid, -1, "{BFE44E}» {FFFFFF}HIT: Presiona {BFE44E}'ESQ' {FFFFFF}para cancelar y no poner el mueble.");
	SendClientMessageEx(playerid, -1, "{BFE44E}» {FFFFFF}HIT: Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
			new Float:oldX, Float:oldY, Float:oldZ,
	        Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	    	GetObjectPos(objectid, oldX, oldY, oldZ);
	    	GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			new OVW, OINT;

		    if(!playerobject)
		    {
		        if(!IsValidObject(objectid)) return;
		        MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
		    }


        if(response == EDIT_RESPONSE_FINAL)
        {
           	new house = Info[playerid][pPhousekey];
			if(ObjetoUsarEnCasa[playerid] == 1)
			{
				if(HouseInfo[house][hMuebles][0] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][0] = OINT;
				HouseInfo[house][hMuebleVW][0] = OVW;

 				SituarObjetoCASAARCH(playerid, house, 0, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 0);
				}
				else if(HouseInfo[house][hMuebles][1] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][1] = OINT;
				HouseInfo[house][hMuebleVW][1] = OVW;

	    		SituarObjetoCASAARCH(playerid, house, 1, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 1);
				}
				else if(HouseInfo[house][hMuebles][2] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][2] = OINT;
				HouseInfo[house][hMuebleVW][2] = OVW;

	    		SituarObjetoCASAARCH(playerid, house, 2, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 2);
				}
				else if(HouseInfo[house][hMuebles][3] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][3] = OINT;
				HouseInfo[house][hMuebleVW][3] = OVW;

    		 	SituarObjetoCASAARCH(playerid, house, 3, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 3);
				}
				else if(HouseInfo[house][hMuebles][4] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][4] = OINT;
				HouseInfo[house][hMuebleVW][4] = OVW;

	    		SituarObjetoCASAARCH(playerid, house, 4, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 4);
				}
				else if(HouseInfo[house][hMuebles][5] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][5] = OINT;
				HouseInfo[house][hMuebleVW][5] = OVW;

                SituarObjetoCASAARCH(playerid, house, 5, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 5);
				}
				else if(HouseInfo[house][hMuebles][6] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][6] = OINT;
				HouseInfo[house][hMuebleVW][6] = OVW;

	    		SituarObjetoCASAARCH(playerid, house, 6, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 6);
				}
				else if(HouseInfo[house][hMuebles][7] <= 0)
	    		{
       				OVW = GetPlayerVirtualWorld(playerid);
                	OINT = GetPlayerInterior(playerid);
               		HouseInfo[house][hMuebleINT][7] = OINT;
					HouseInfo[house][hMuebleVW][7] = OVW;
	    			SituarObjetoCASAARCH(playerid, house, 7, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);
                	DestroyObject(Objeto_Por_Jugador[playerid]);
                	PonerNuevoMueble(playerid, house, 7);
				}
				else if(HouseInfo[house][hMuebles][8] <= 0)
	    		{
       				OVW = GetPlayerVirtualWorld(playerid);
                	OINT = GetPlayerInterior(playerid);
               		HouseInfo[house][hMuebleINT][8] = OINT;
					HouseInfo[house][hMuebleVW][8] = OVW;
	    			SituarObjetoCASAARCH(playerid, house, 8, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);
                	DestroyObject(Objeto_Por_Jugador[playerid]);
                	PonerNuevoMueble(playerid, house, 8);
				}
				else if(HouseInfo[house][hMuebles][9] <= 0)
	    		{
       				OVW = GetPlayerVirtualWorld(playerid);
                	OINT = GetPlayerInterior(playerid);
               		HouseInfo[house][hMuebleINT][9] = OINT;
					HouseInfo[house][hMuebleVW][9] = OVW;
	    			SituarObjetoCASAARCH(playerid, house, 9, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);
                	DestroyObject(Objeto_Por_Jugador[playerid]);
                	PonerNuevoMueble(playerid, house, 9);
				}
				else if(HouseInfo[house][hMuebles][10] <= 0)
	    		{
       				OVW = GetPlayerVirtualWorld(playerid);
                	OINT = GetPlayerInterior(playerid);
               		HouseInfo[house][hMuebleINT][10] = OINT;
					HouseInfo[house][hMuebleVW][10] = OVW;
	    			SituarObjetoCASAARCH(playerid, house, 10, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);
                	DestroyObject(Objeto_Por_Jugador[playerid]);
                	PonerNuevoMueble(playerid, house, 10);
				}
            }
            SaveHouses();
			OnPlayerSavedStats(playerid);
			CancelEdit(playerid);
        }

        if(response == EDIT_RESPONSE_CANCEL)
        {
             DestroyObject(Objeto_Por_Jugador[playerid]);
             CancelEdit(playerid);
        }
}

//***Armas en la espalda**
stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;

		case 2..8:
		    return weaponid+331;

        case 9:
		    return 341;

		case 10..15:
			return weaponid+311;

		case 16..18:
		    return weaponid+326;

		case 22..29:
		    return weaponid+324;

		case 30,31:
		    return weaponid+325;

		case 32:
		    return 372;

		case 33..45:
		    return weaponid+324;

		case 46:
		    return 371;
	}
	return 0;
}

GetWeaponType(weaponid)
{
	switch(weaponid)
	{
	    case 22,23,24,26,28,32:
	        return WEAPON_TYPE_LIGHT;

		case 3,4,16,17,18,39,10,11,12,13,14,40,41:
		    return WEAPON_TYPE_MELEE;

		case 2,5,6,7,8,9,25,27,29,30,31,33,34,35,36,37,38:
		    return WEAPON_TYPE_HEAVY;
	}
	return WEAPON_TYPE_NONE;
}

//************************
//***dni por textdraw***
public qdni(playerid)
	{
		PlayerTextDrawHide(playerid, DNI0[playerid]);
		PlayerTextDrawHide(playerid, DNI1[playerid]);
		PlayerTextDrawHide(playerid, DNI2[playerid]);
		PlayerTextDrawHide(playerid, DNI3[playerid]);
		PlayerTextDrawHide(playerid, DNI4[playerid]);
		PlayerTextDrawHide(playerid, DNI5[playerid]);
		PlayerTextDrawHide(playerid, DNI6[playerid]);
		PlayerTextDrawHide(playerid, DNI7[playerid]);
		PlayerTextDrawHide(playerid, DNI8[playerid]);
		PlayerTextDrawHide(playerid, DNI9[playerid]);
		PlayerTextDrawHide(playerid, DNI10[playerid]);
		PlayerTextDrawHide(playerid, DNI11[playerid]);
		PlayerTextDrawHide(playerid, DNI12[playerid]);
		return 1;
	}
//**********************
//***licencias por textdraw***
public qlicencia(playerid)
	{
		PlayerTextDrawHide(playerid, LICENCIA0[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA1[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA2[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA3[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA4[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA5[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA6[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA7[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA8[playerid]);
		return 1;
	}
//***sistema de fire***
public Fuegoo()
{
    new fire = random(sizeof(Fuego));
    new Float:X, Float:Y, Float:Z;
    GetObjectPos(Fire[0], X, Y, Z);
    if(LugarFuego[0] != X) { LugarFuego[0] = X; }
    else if(LugarFuego[1] != Y) { LugarFuego[1] = Y; }
    else if(LugarFuego[2] != Z) { LugarFuego[2] = Z; }
    if(GetTickCount() - lugarfire > TIEMPOFIRE*2000)
    {
        if(F == false)
        {
            for(new f = 0; f < sizeof(Fire); f ++) { DestroyObject(Fire[f]); DestroyObject(Fire[f]); }
            F = true;
            Timerfire = SetTimer("Apagarfire", APAGARFIRE*1000, false);
            Fire[0] = CreateObject(18691, Fuego[fire][0], Fuego[fire][1], Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[1] = CreateObject(18691, Fuego[fire][0]+1, Fuego[fire][1], Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[2] = CreateObject(18691, Fuego[fire][0], Fuego[fire][1]+1, Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[3] = CreateObject(18691, Fuego[fire][0]+1, Fuego[fire][1]+1, Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[4] = CreateObject(18691, Fuego[fire][0]-1, Fuego[fire][1], Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[5] = CreateObject(18691, Fuego[fire][0], Fuego[fire][1]-1, Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[6] = CreateObject(18691, Fuego[fire][0]-1, Fuego[fire][1]-1, Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            for(new i = 0; i < MAX_PLAYERS; i++)
            {
                if(Team_BomberosBA(i))
                {
                    new str[128];
                    format(str, sizeof(str), "[Central]: Toda las unidades disponibles por favor, tenemos un incendio descontrolado. (Marcado)", Fuego[fire][0], Fuego[fire][1], Fuego[fire][2]);
                    SendClientMessage(i, 0x8D8DFFFF, str);
                    SetPlayerCheckpoint(i, Fuego[fire][0], Fuego[fire][1], Fuego[fire][2], 8.0);
                    LugarFuego[0] = Fuego[fire][0];
                    LugarFuego[1] = Fuego[fire][1];
                    LugarFuego[2] = Fuego[fire][2];
                }
            }
        }
    }
    return 1;
}

public Apagarfire()
{
    if(F == true)
    {
        for(new i = 0; i < MAX_PLAYERS; i ++)
        {
            if(Team_BomberosBA(i))
            {
                SendClientMessage(i, 0x8D8DFFFF, "[Central]: El incendio fue controlado por demás unidades de la zona.");
                DisablePlayerCheckpoint(i);
                llegarf[i] = false;
            }
            F = false;
            for(new f = 0; f < sizeof(Fire); f ++)
            {
                DestroyObject(Fire[f]);
                DestroyObject(Fire[f]);
            }
            lugarfire = GetTickCount();
        }
    }
    return 1;
}

public Checkfire(playerid)
{
    if(F == true)
    {
        if(GetPlayerState(playerid) == 1)
        {
            if(GetPlayerWeapon(playerid) == 42)
            {
                if(IsPlayerInRangeOfPoint(playerid, 7.0, LugarFuego[0], LugarFuego[1], LugarFuego[2]))
                {
                    if(Apagandofire[playerid] > 0)
                    {
                        Apagandofire[playerid]++;
                        SetTimerEx("Checkfire", 750, false, "i", playerid);
                        if(Apagandofire[playerid] == 13)
                        {
                            for(new f = 0; f < sizeof(Fire); f ++) { DestroyObject(Fire[f]); DestroyObject(Fire[f]); }
                            F = false;
                            GivePlayerCash(playerid, 1500);
                            for(new i = 0; i < MAX_PLAYERS; i ++)
                            {
                                llegarf[i] = false;
                                Apagandofire[i] = 0;
                                lugarfire = GetTickCount();
                                DisablePlayerCheckpoint(i);
                                KillTimer(Timerfire);
                            }
                        }
                    }
                }
            }
        }
        if(GetPlayerState(playerid) == 2)
        {
            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
            {
                if(IsPlayerInRangeOfPoint(playerid, 12.0, LugarFuego[0], LugarFuego[1], LugarFuego[2]))
                {
                    if(Apagandofire[playerid] > 0)
                    {
                        Apagandofire[playerid]++;
                        SetTimerEx("Checkfire", 750, false, "i", playerid);
                        if(Apagandofire[playerid] == 10)
                        {
                            for(new f = 0; f < sizeof(Fire); f ++) { DestroyObject(Fire[f]); DestroyObject(Fire[f]); }
                            F = false;
                            GivePlayerCash(playerid, 1500);
                            for(new i = 0; i < MAX_PLAYERS; i ++)
                            {
                                llegarf[i] = false;
                                Apagandofire[i] = 0;
                                lugarfire = GetTickCount();
                                DisablePlayerCheckpoint(i);
                                KillTimer(Timerfire);
                            }
                        }
                    }
                }
            }
        }
    }
    return 1;
}
//***sistema afk***
forward SendMessage();
public SendMessage()
{
   new Nameafk[24], string[256];
   for(new i = 0; i <= MAX_PLAYERS; i++)
   {
     if(IsPlayerConnected(i))
     {
       GetPlayerName(i, Nameafk, 24);
       if(Afk[i]==1)
       {
       TextDrawHideForAll(Text:Messageafk);
       format(string, sizeof(string), "",Nameafk);
       TextDrawSetString(Messageafk,string);
       TextDrawShowForAll(Text:Messageafk);
       SetTimer("StopMessage",6000,0);
       }
       if(Afk[i]==0)
       {
       TextDrawHideForAll(Text:Messageafk);
       format(string, sizeof(string), "",Nameafk);
       TextDrawSetString(Messageafk,string);
       TextDrawShowForAll(Text:Messageafk);
       SetTimer("StopMessage",6000,0);
       }
     }
   }
}

forward StopMessage();
public GlobalTime()
{
new Hour, Minute, Second;
gettime(Hour, Minute, Second);
new tiempo = random(5);
if(Hour == 7)
{
    SendClientMessageToAll(COLOR_NEWS2, "[FOX Meteorológica]{FFFFFF} Diana Frensh: ¡Muy buenos días!, Para el día de hoy el clima estará genial para pasear.");
    print("===============================================================");
    print("  El clima del servidor fue cambiado - Horario de Cambio: 7AM  ");
    print("===============================================================");
    if(tiempo == 0 || tiempo ==2 || tiempo == 4){SetWeather(28);}
	else {SetWeather(28);}
}
if(Hour == 15)
{
    SendClientMessageToAll(COLOR_NEWS2, "[FOX Meteorológica]{FFFFFF} Diana Frensh: Buenas tardes, en las próximas horas sigue mejorando con un poco de viento hacia el sur.");
    print("===============================================================");
    print("  El clima del servidor fue cambiado - Horario de Cambio: 3PM  ");
    print("===============================================================");
	if(tiempo == 0 || tiempo ==2 || tiempo == 4) {SetWeather(6);}
	else {SetWeather(5);}
}
if(Hour == 20)
{
    SendClientMessageToAll(COLOR_NEWS2, "[FOX Meteorológica]{FFFFFF} Diana Frensh: La noche refrezca, mejor preparen leñas y a estar calentitos en sus casas.");
    print("===============================================================");
    print("  El clima del servidor fue cambiado - Horario de Cambio: 8PM  ");
    print("===============================================================");
	if(tiempo == 0 || tiempo ==2) {SetWeather(15);}
	else {SetWeather(4);}
}
if(Hour == 4)
{
	SendClientMessageToAll(COLOR_NEWS2, "[FOX Meteorológica]{FFFFFF} Diana Frensh: Atención, se ha detectado posible formación de niebla durante las primeas horas del dia.");
    print("===============================================================");
    print("  El clima del servidor fue cambiado - Horario de Cambio: 4AM  ");
    print("===============================================================");
    if(tiempo == 0 || tiempo ==2 || tiempo == 4) {SetWeather(32);}
	else {SetWeather(32);}
}
if(Hour == 5)
{
	SendClientMessageToAll(COLOR_GREEN, "[Estación meteorológica]: Atención, tomen precaución al conducir, hay mucha niebla en toda la ciudad de Los Ángeles.");
    print("===============================================================");
    print("  El clima del servidor fue cambiado - Horario de Cambio: 5AM  ");
    print("===============================================================");
    if(tiempo == 0 || tiempo ==2 || tiempo == 4) {SetWeather(9);}
	else {SetWeather(9);}
}
return 1;
}
//*****************
public KickxD(playerid)
{
	Kick(playerid);
}
stock LoadMapeos()
{
}
stock LoadZonas()
{
}
// Garajes
stock TipoGarage(garageid)
{
	new string[24];
	if(!GaragesVariables[garageid][gType]) format(string, sizeof(string), "Ninguno");
    else if(GaragesVariables[garageid][gType] == 1) format(string, sizeof(string), "Pequeño");
    else if(GaragesVariables[garageid][gType] == 2) format(string, sizeof(string), "Mediano");
    else if(GaragesVariables[garageid][gType] == 3) format(string, sizeof(string), "Grande");
	return string;
}
getPlayerGaragesID(const playerid)
{
	new x;
	new Nombre[MAX_PLAYER_NAME];
    while(x < MAX_GARAGES)
	{
		if(strlen(GaragesVariables[x][gOwner]) >= 1)
		{
		    GetPlayerName(playerid, Nombre, sizeof(Nombre));
	        if(!strcmp(GaragesVariables[x][gOwner], Nombre, true)){return x;}
		}
		x++;
	}
    return 0;
}
